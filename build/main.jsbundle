var __BUNDLE_START_TIME__=globalThis.nativePerformanceNow?nativePerformanceNow():Date.now(),__DEV__=false,process=globalThis.process||{},__METRO_GLOBAL_PREFIX__='';process.env=process.env||{};process.env.NODE_ENV=process.env.NODE_ENV||"production";
(function (global) {
  "use strict";

  global.__r = metroRequire;
  global[`${__METRO_GLOBAL_PREFIX__}__d`] = define;
  global.__c = clear;
  global.__registerSegment = registerSegment;
  var modules = clear();
  var EMPTY = {};
  var CYCLE_DETECTED = {};
  var _ref = {},
    hasOwnProperty = _ref.hasOwnProperty;
  function clear() {
    modules = new Map();
    return modules;
  }
  function define(factory, moduleId, dependencyMap) {
    if (modules.has(moduleId)) {
      return;
    }
    var mod = {
      dependencyMap,
      factory,
      hasError: false,
      importedAll: EMPTY,
      importedDefault: EMPTY,
      isInitialized: false,
      publicModule: {
        exports: {}
      }
    };
    modules.set(moduleId, mod);
  }
  function metroRequire(moduleId) {
    var moduleIdReallyIsNumber = moduleId;
    var module = modules.get(moduleIdReallyIsNumber);
    return module && module.isInitialized ? module.publicModule.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }
  function metroImportDefault(moduleId) {
    var moduleIdReallyIsNumber = moduleId;
    var maybeInitializedModule = modules.get(moduleIdReallyIsNumber);
    if (maybeInitializedModule && maybeInitializedModule.importedDefault !== EMPTY) {
      return maybeInitializedModule.importedDefault;
    }
    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedDefault = exports && exports.__esModule ? exports.default : exports;
    var initializedModule = modules.get(moduleIdReallyIsNumber);
    return initializedModule.importedDefault = importedDefault;
  }
  metroRequire.importDefault = metroImportDefault;
  function metroImportAll(moduleId) {
    var moduleIdReallyIsNumber = moduleId;
    var maybeInitializedModule = modules.get(moduleIdReallyIsNumber);
    if (maybeInitializedModule && maybeInitializedModule.importedAll !== EMPTY) {
      return maybeInitializedModule.importedAll;
    }
    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedAll;
    if (exports && exports.__esModule) {
      importedAll = exports;
    } else {
      importedAll = {};
      if (exports) {
        for (var key in exports) {
          if (hasOwnProperty.call(exports, key)) {
            importedAll[key] = exports[key];
          }
        }
      }
      importedAll.default = exports;
    }
    var initializedModule = modules.get(moduleIdReallyIsNumber);
    return initializedModule.importedAll = importedAll;
  }
  metroRequire.importAll = metroImportAll;
  metroRequire.context = function fallbackRequireContext() {
    throw new Error("The experimental Metro feature `require.context` is not enabled in your project.");
  };
  metroRequire.resolveWeak = function fallbackRequireResolveWeak() {
    throw new Error("require.resolveWeak cannot be called dynamically.");
  };
  var inGuard = false;
  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue;
      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }
      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }
  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = 65535;
  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId,
      localId
    };
  }
  metroRequire.unpackModuleId = unpackModuleId;
  function packModuleId(value) {
    return (value.segmentId << ID_MASK_SHIFT) + value.localId;
  }
  metroRequire.packModuleId = packModuleId;
  var moduleDefinersBySegmentID = [];
  var definingSegmentByModuleID = new Map();
  function registerSegment(segmentId, moduleDefiner, moduleIds) {
    moduleDefinersBySegmentID[segmentId] = moduleDefiner;
    if (moduleIds) {
      moduleIds.forEach(moduleId => {
        if (!modules.has(moduleId) && !definingSegmentByModuleID.has(moduleId)) {
          definingSegmentByModuleID.set(moduleId, segmentId);
        }
      });
    }
  }
  function loadModuleImplementation(moduleId, module) {
    if (!module && moduleDefinersBySegmentID.length > 0) {
      var segmentId = definingSegmentByModuleID.get(moduleId) ?? 0;
      var definer = moduleDefinersBySegmentID[segmentId];
      if (definer != null) {
        definer(moduleId);
        module = modules.get(moduleId);
        definingSegmentByModuleID.delete(moduleId);
      }
    }
    var nativeRequire = global.nativeRequire;
    if (!module && nativeRequire) {
      var _unpackModuleId = unpackModuleId(moduleId),
        _segmentId = _unpackModuleId.segmentId,
        localId = _unpackModuleId.localId;
      nativeRequire(localId, _segmentId);
      module = modules.get(moduleId);
    }
    if (!module) {
      throw unknownModuleError(moduleId);
    }
    if (module.hasError) {
      throw module.error;
    }
    module.isInitialized = true;
    var _module = module,
      factory = _module.factory,
      dependencyMap = _module.dependencyMap;
    try {
      var moduleObject = module.publicModule;
      moduleObject.id = moduleId;
      factory(global, metroRequire, metroImportDefault, metroImportAll, moduleObject, moduleObject.exports, dependencyMap);
      {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }
      return moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.publicModule.exports = undefined;
      throw e;
    } finally {}
  }
  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';
    return Error(message);
  }
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @polyfill
   * @nolint
   * @format
   */

  'use client';

  /* eslint-disable no-shadow, eqeqeq, curly, no-unused-vars, no-void, no-control-regex  */

  /**
   * This pipes all of our console logging functions to native logging so that
   * JavaScript errors in required modules show up in Xcode via NSLog.
   */
  var inspect = function () {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    //
    // https://github.com/joyent/node/blob/master/lib/util.js

    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        formatValueCalls: 0,
        stylize: stylizeNoColor
      };
      return formatValue(ctx, obj, opts.depth);
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash = {};
      array.forEach(function (val, idx) {
        hash[val] = true;
      });
      return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
      ctx.formatValueCalls++;
      if (ctx.formatValueCalls > 200) {
        return `[TOO BIG formatValueCalls ${ctx.formatValueCalls} exceeded limit of 200]`;
      }

      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }

      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base = '',
        array = false,
        braces = ['{', '}'];

      // Make Array say that they are Array
      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      // Make functions say that they are functions
      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      // Make RegExps say that they are RegExps
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      // Make dates with properties first say the date
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }
      ctx.seen.push(value);
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function (key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, 'string');
      }
      if (isNumber(value)) return ctx.stylize('' + value, 'number');
      if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value)) return ctx.stylize('null', 'null');
    }
    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function (key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
      };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function (line) {
                return '  ' + line;
              }).join('\n').slice(2);
            } else {
              str = '\n' + str.split('\n').map(function (line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.slice(1, name.length - 1);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }
      return name + ': ' + str;
    }
    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function (prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
      }
      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray(ar) {
      return Array.isArray(ar);
    }
    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }
    function isNull(arg) {
      return arg === null;
    }
    function isNumber(arg) {
      return typeof arg === 'number';
    }
    function isString(arg) {
      return typeof arg === 'string';
    }
    function isUndefined(arg) {
      return arg === undefined;
    }
    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }
    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }
    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }
    function isError(e) {
      return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
    }
    function isFunction(arg) {
      return typeof arg === 'function';
    }
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    return inspect;
  }();
  var INDEX_COLUMN_NAME = '(index)';
  var LOG_LEVELS = {
    trace: 0,
    info: 1,
    warn: 2,
    error: 3
  };
  function getNativeLogFunction(level) {
    return function () {
      var str;
      if (arguments.length === 1 && typeof arguments[0] === 'string') {
        str = arguments[0];
      } else {
        str = Array.prototype.map.call(arguments, function (arg) {
          return inspect(arg, {
            depth: 10
          });
        }).join(', ');
      }

      // TRICKY
      // If more than one argument is provided, the code above collapses them all
      // into a single formatted string. This transform wraps string arguments in
      // single quotes (e.g. "foo" -> "'foo'") which then breaks the "Warning:"
      // check below. So it's important that we look at the first argument, rather
      // than the formatted argument string.
      var firstArg = arguments[0];
      var logLevel = level;
      if (typeof firstArg === 'string' && firstArg.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
        // React warnings use console.error so that a stack trace is shown,
        // but we don't (currently) want these to show a redbox
        // (Note: Logic duplicated in ExceptionsManager.js.)
        logLevel = LOG_LEVELS.warn;
      }
      if (groupStack.length) {
        str = groupFormat('', str);
      }
      global.nativeLoggingHook(str, logLevel);
    };
  }
  function repeat(element, n) {
    return Array.apply(null, Array(n)).map(function () {
      return element;
    });
  }
  function formatCellValue(cell, key) {
    if (key === INDEX_COLUMN_NAME) {
      return cell[key];
    }
    if (cell.hasOwnProperty(key)) {
      var cellValue = cell[key];
      switch (typeof cellValue) {
        case 'function':
          return 'ƒ';
        case 'string':
          return "'" + cellValue + "'";
        case 'object':
          return cellValue == null ? 'null' : '{…}';
      }
      return String(cellValue);
    }
    return '';
  }
  function consoleTablePolyfill(data, columns) {
    var rows;

    // convert object -> array
    if (Array.isArray(data)) {
      rows = data.map((row, index) => {
        var processedRow = {};
        processedRow[INDEX_COLUMN_NAME] = String(index);
        Object.assign(processedRow, row);
        return processedRow;
      });
    } else {
      rows = [];
      for (var key in data) {
        if (data.hasOwnProperty(key)) {
          var processedRow = {};
          processedRow[INDEX_COLUMN_NAME] = key;
          Object.assign(processedRow, data[key]);
          rows.push(processedRow);
        }
      }
    }
    if (rows.length === 0) {
      global.nativeLoggingHook('', LOG_LEVELS.info);
      return;
    }
    if (Array.isArray(columns)) {
      columns = [INDEX_COLUMN_NAME].concat(columns);
    } else {
      columns = Array.from(rows.reduce((columnSet, row) => {
        Object.keys(row).forEach(key => columnSet.add(key));
        return columnSet;
      }, new Set()));
    }
    var stringRows = [];
    var columnWidths = [];

    // Convert each cell to a string. Also
    // figure out max cell width for each column
    columns.forEach(function (k, i) {
      columnWidths[i] = k.length;
      for (var j = 0; j < rows.length; j++) {
        var cellStr = formatCellValue(rows[j], k);
        stringRows[j] = stringRows[j] || [];
        stringRows[j][i] = cellStr;
        columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
      }
    });

    // Join all elements in the row into a single string with | separators
    // (appends extra spaces to each cell to make separators  | aligned)
    function joinRow(row, space) {
      var cells = row.map(function (cell, i) {
        var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
        return cell + extraSpaces;
      });
      space = space || ' ';
      return '| ' + cells.join(space + '|' + space) + ' |';
    }
    var separators = columnWidths.map(function (columnWidth) {
      return repeat('-', columnWidth).join('');
    });
    var separatorRow = joinRow(separators);
    var header = joinRow(columns);
    var table = [header, separatorRow];
    for (var i = 0; i < rows.length; i++) {
      table.push(joinRow(stringRows[i]));
    }

    // Notice extra empty line at the beginning.
    // Native logging hook adds "RCTLog >" at the front of every
    // logged string, which would shift the header and screw up
    // the table
    global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
  }
  var GROUP_PAD = '\u2502'; // Box light vertical
  var GROUP_OPEN = '\u2510'; // Box light down+left
  var GROUP_CLOSE = '\u2518'; // Box light up+left

  var groupStack = [];
  function groupFormat(prefix, msg) {
    // Insert group formatting before the console message
    return groupStack.join('') + prefix + ' ' + (msg || '');
  }
  function consoleGroupPolyfill(label) {
    global.nativeLoggingHook(groupFormat(GROUP_OPEN, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
  }
  function consoleGroupCollapsedPolyfill(label) {
    global.nativeLoggingHook(groupFormat(GROUP_CLOSE, label), LOG_LEVELS.info);
    groupStack.push(GROUP_PAD);
  }
  function consoleGroupEndPolyfill() {
    groupStack.pop();
    global.nativeLoggingHook(groupFormat(GROUP_CLOSE), LOG_LEVELS.info);
  }
  function consoleAssertPolyfill(expression, label) {
    if (!expression) {
      global.nativeLoggingHook('Assertion failed: ' + label, LOG_LEVELS.error);
    }
  }
  if (global.nativeLoggingHook) {
    var originalConsole = global.console;
    // Preserve the original `console` as `originalConsole`

    global.console = {
      ...(originalConsole ?? {}),
      error: getNativeLogFunction(LOG_LEVELS.error),
      info: getNativeLogFunction(LOG_LEVELS.info),
      log: getNativeLogFunction(LOG_LEVELS.info),
      warn: getNativeLogFunction(LOG_LEVELS.warn),
      trace: getNativeLogFunction(LOG_LEVELS.trace),
      debug: getNativeLogFunction(LOG_LEVELS.trace),
      table: consoleTablePolyfill,
      group: consoleGroupPolyfill,
      groupEnd: consoleGroupEndPolyfill,
      groupCollapsed: consoleGroupCollapsedPolyfill,
      assert: consoleAssertPolyfill
    };

    // TODO(T206796580): This was copy-pasted from ExceptionsManager.js
    // Delete the copy there after the c++ pipeline is rolled out everywhere.
    if (global.RN$useAlwaysAvailableJSErrorHandling === true) {
      var stringifySafe = function (arg) {
        return inspect(arg, {
          depth: 10
        }).replace(/\n\s*/g, ' ');
      };
      var originalConsoleError = console.error;
      console.reportErrorsAsExceptions = true;
      console.error = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        originalConsoleError.apply(this, args);
        if (!console.reportErrorsAsExceptions) {
          return;
        }
        if (global.RN$inExceptionHandler?.()) {
          return;
        }
        var error;
        var firstArg = args[0];
        if (firstArg?.stack) {
          // RN$handleException will console.error this with high enough fidelity.
          error = firstArg;
        } else {
          if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {
            // React warnings use console.error so that a stack trace is shown, but
            // we don't (currently) want these to show a redbox
            return;
          }
          var message = args.map(arg => typeof arg === 'string' ? arg : stringifySafe(arg)).join(' ');
          error = new Error(message);
          error.name = 'console.error';
        }
        var isFatal = false;
        var reportToConsole = false;
        global.RN$handleException(error, isFatal, reportToConsole);
      };
    }
    Object.defineProperty(console, '_isPolyfilled', {
      value: true,
      enumerable: false
    });

    // If available, also call the original `console` method since that is
    // sometimes useful. Ex: on OS X, this will let you see rich output in
    // the Safari Web Inspector console.
  } else if (!global.console) {
    var stub = function () {};
    var log = global.print || stub;
    global.console = {
      debug: log,
      error: log,
      info: log,
      log: log,
      trace: log,
      warn: log,
      assert(expression, label) {
        if (!expression) {
          log('Assertion failed: ' + label);
        }
      },
      clear: stub,
      dir: stub,
      dirxml: stub,
      group: stub,
      groupCollapsed: stub,
      groupEnd: stub,
      profile: stub,
      profileEnd: stub,
      table: stub
    };
    Object.defineProperty(console, '_isPolyfilled', {
      value: true,
      enumerable: false
    });
  }
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  var _inGuard = 0;
  var _globalHandler = global.RN$useAlwaysAvailableJSErrorHandling === true ? global.RN$handleException : (e, isFatal) => {
    throw e;
  };
  var ErrorUtils = {
    setGlobalHandler(fun) {
      _globalHandler = fun;
    },
    getGlobalHandler() {
      return _globalHandler;
    },
    reportError(error) {
      _globalHandler && _globalHandler(error, false);
    },
    reportFatalError(error) {
      _globalHandler && _globalHandler(error, true);
    },
    applyWithGuard(fun, context, args, unused_onError, unused_name) {
      try {
        _inGuard++;
        return fun.apply(context, args);
      } catch (e) {
        ErrorUtils.reportError(e);
      } finally {
        _inGuard--;
      }
      return null;
    },
    applyWithGuardIfNeeded(fun, context, args) {
      if (ErrorUtils.inGuard()) {
        return fun.apply(context, args);
      } else {
        ErrorUtils.applyWithGuard(fun, context, args);
      }
      return null;
    },
    inGuard() {
      return !!_inGuard;
    },
    guard(fun, name, context) {
      if (typeof fun !== 'function') {
        console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
        return null;
      }
      var guardName = name ?? fun.name ?? '<generated guard>';
      function guarded() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return ErrorUtils.applyWithGuard(fun, context ?? this, args, null, guardName);
      }
      return guarded;
    }
  };
  global.ErrorUtils = ErrorUtils;
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  try {
    global.$$require_external = typeof expo === "undefined" ? require : moduleId => {
      throw new Error(`Node.js standard library module ${moduleId} is not available in this JavaScript environment`);
    };
  } catch {
    global.$$require_external = moduleId => {
      throw new Error(`Node.js standard library module ${moduleId} is not available in this JavaScript environment`);
    };
  }
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
(function (global) {
  /**
   * @license
   * web-streams-polyfill v4.1.0
   * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.
   * This code is released under the MIT license.
   * SPDX-License-Identifier: MIT
   */
  function _classCallCheck(r, z) {
    if (!(r instanceof z)) throw new TypeError("Cannot call a class as a function");
  }
  function _defineProperties(r, z) {
    for (var D = 0; D < z.length; D++) {
      var te = z[D];
      te.enumerable = te.enumerable || false, te.configurable = true, "value" in te && (te.writable = true), Object.defineProperty(r, _toPropertyKey(te.key), te);
    }
  }
  function _createClass(r, z, D) {
    return z && _defineProperties(r.prototype, z), D && _defineProperties(r, D), Object.defineProperty(r, "prototype", {
      writable: false
    }), r;
  }
  function _toPropertyKey(r) {
    var z = _toPrimitive(r, "string");
    return "symbol" == typeof z ? z : z + "";
  }
  function _toPrimitive(r, z) {
    if ("object" != typeof r || !r) return r;
    var D = r[Symbol.toPrimitive];
    if (undefined !== D) {
      var te = D.call(r, z || "default");
      if ("object" != typeof te) return te;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === z ? String : Number)(r);
  }
  !function () {
    "use strict";

    function e() {}
    function t(r) {
      return "object" == typeof r && null !== r || "function" == typeof r;
    }
    var r = e;
    function o(r, z) {
      try {
        Object.defineProperty(r, "name", {
          value: z,
          configurable: true
        });
      } catch (r) {}
    }
    var z = Promise,
      D = Promise.resolve.bind(z),
      te = Promise.prototype.then,
      re = Promise.reject.bind(z),
      oe = D;
    function u(r) {
      return new z(r);
    }
    function c(r) {
      return u(z => z(r));
    }
    function d(r) {
      return re(r);
    }
    function f(r, z, D) {
      return te.call(r, z, D);
    }
    function b(z, D, te) {
      f(f(z, D, te), undefined, r);
    }
    function h(r, z) {
      b(r, z);
    }
    function m(r, z) {
      b(r, undefined, z);
    }
    function _(r, z, D) {
      return f(r, z, D);
    }
    function p(z) {
      f(z, undefined, r);
    }
    var y = r => {
      if ("function" == typeof queueMicrotask) y = queueMicrotask;else {
        var _r2 = c(undefined);
        y = z => f(_r2, z);
      }
      return y(r);
    };
    function S(r, z, D) {
      if ("function" != typeof r) throw new TypeError("Argument is not a function");
      return Function.prototype.apply.call(r, z, D);
    }
    function g(r, z, D) {
      try {
        return c(S(r, z, D));
      } catch (r) {
        return d(r);
      }
    }
    var de = function () {
      return _createClass(function v() {
        _classCallCheck(this, v), this._cursor = 0, this._size = 0, this._front = {
          _elements: [],
          _next: undefined
        }, this._back = this._front, this._cursor = 0, this._size = 0;
      }, [{
        key: "length",
        get: function () {
          return this._size;
        }
      }, {
        key: "push",
        value: function push(r) {
          var z = this._back;
          var D = z;
          16383 === z._elements.length && (D = {
            _elements: [],
            _next: undefined
          }), z._elements.push(r), D !== z && (this._back = D, z._next = D), ++this._size;
        }
      }, {
        key: "shift",
        value: function shift() {
          var r = this._front;
          var z = r;
          var D = this._cursor;
          var te = D + 1;
          var re = r._elements,
            oe = re[D];
          return 16384 === te && (z = r._next, te = 0), --this._size, this._cursor = te, r !== z && (this._front = z), re[D] = undefined, oe;
        }
      }, {
        key: "forEach",
        value: function forEach(r) {
          var z = this._cursor,
            D = this._front,
            te = D._elements;
          for (; !(z === te.length && undefined === D._next || z === te.length && (D = D._next, te = D._elements, z = 0, 0 === te.length));) r(te[z]), ++z;
        }
      }, {
        key: "peek",
        value: function peek() {
          var r = this._front,
            z = this._cursor;
          return r._elements[z];
        }
      }]);
    }();
    var me = Symbol("[[AbortSteps]]"),
      ye = Symbol("[[ErrorSteps]]"),
      Dt = Symbol("[[CancelSteps]]"),
      nr = Symbol("[[PullSteps]]"),
      ar = Symbol("[[ReleaseSteps]]");
    function q(r, z) {
      r._ownerReadableStream = z, z._reader = r, "readable" === z._state ? O(r) : "closed" === z._state ? function (r) {
        O(r), A(r);
      }(r) : j(r, z._storedError);
    }
    function E(r, z) {
      return Br(r._ownerReadableStream, z);
    }
    function W(r) {
      var z = r._ownerReadableStream;
      "readable" === z._state ? k(r, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")) : function (r, z) {
        j(r, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness"));
      }(r), z._readableStreamController[ar](), z._reader = undefined, r._ownerReadableStream = undefined;
    }
    function B(r) {
      return new TypeError("Cannot " + r + " a stream using a released reader");
    }
    function O(r) {
      r._closedPromise = u((z, D) => {
        r._closedPromise_resolve = z, r._closedPromise_reject = D;
      });
    }
    function j(r, z) {
      O(r), k(r, z);
    }
    function k(r, z) {
      undefined !== r._closedPromise_reject && (p(r._closedPromise), r._closedPromise_reject(z), r._closedPromise_resolve = undefined, r._closedPromise_reject = undefined);
    }
    function A(r) {
      undefined !== r._closedPromise_resolve && (r._closedPromise_resolve(undefined), r._closedPromise_resolve = undefined, r._closedPromise_reject = undefined);
    }
    var no = Number.isFinite || function (r) {
        return "number" == typeof r && isFinite(r);
      },
      io = Math.trunc || function (r) {
        return r < 0 ? Math.ceil(r) : Math.floor(r);
      };
    function L(r, z) {
      if (undefined !== r && "object" != typeof (D = r) && "function" != typeof D) throw new TypeError(`${z} is not an object.`);
      var D;
    }
    function F(r, z) {
      if ("function" != typeof r) throw new TypeError(`${z} is not a function.`);
    }
    function I(r, z) {
      if (!function (r) {
        return "object" == typeof r && null !== r || "function" == typeof r;
      }(r)) throw new TypeError(`${z} is not an object.`);
    }
    function $(r, z, D) {
      if (undefined === r) throw new TypeError(`Parameter ${z} is required in '${D}'.`);
    }
    function M(r, z, D) {
      if (undefined === r) throw new TypeError(`${z} is required in '${D}'.`);
    }
    function Y(r) {
      return Number(r);
    }
    function Q(r) {
      return 0 === r ? 0 : r;
    }
    function x(r, z) {
      var D = Number.MAX_SAFE_INTEGER;
      var te = Number(r);
      if (te = Q(te), !no(te)) throw new TypeError(`${z} is not a finite number`);
      if (te = function (r) {
        return Q(io(r));
      }(te), te < 0 || te > D) throw new TypeError(`${z} is outside the accepted range of 0 to ${D}, inclusive`);
      return no(te) && 0 !== te ? te : 0;
    }
    function N(r, z) {
      if (!Er(r)) throw new TypeError(`${z} is not a ReadableStream.`);
    }
    function H(r) {
      return new ao(r);
    }
    function V(r, z) {
      r._reader._readRequests.push(z);
    }
    function U(r, z, D) {
      var te = r._reader._readRequests.shift();
      D ? te._closeSteps() : te._chunkSteps(z);
    }
    function G(r) {
      return r._reader._readRequests.length;
    }
    function X(r) {
      var z = r._reader;
      return undefined !== z && !!J(z);
    }
    var ao = function () {
      return _createClass(function ReadableStreamDefaultReader(r) {
        if (_classCallCheck(this, ReadableStreamDefaultReader), $(r, 1, "ReadableStreamDefaultReader"), N(r, "First parameter"), Wr(r)) throw new TypeError("This stream has already been locked for exclusive reading by another reader");
        q(this, r), this._readRequests = new de();
      }, [{
        key: "closed",
        get: function () {
          return J(this) ? this._closedPromise : d(ee("closed"));
        }
      }, {
        key: "cancel",
        value: function cancel() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          return J(this) ? undefined === this._ownerReadableStream ? d(B("cancel")) : E(this, r) : d(ee("cancel"));
        }
      }, {
        key: "read",
        value: function read() {
          if (!J(this)) return d(ee("read"));
          if (undefined === this._ownerReadableStream) return d(B("read from"));
          var r, z;
          var D = u((D, te) => {
            r = D, z = te;
          });
          return K(this, {
            _chunkSteps: z => r({
              value: z,
              done: false
            }),
            _closeSteps: () => r({
              value: undefined,
              done: true
            }),
            _errorSteps: r => z(r)
          }), D;
        }
      }, {
        key: "releaseLock",
        value: function releaseLock() {
          if (!J(this)) throw ee("releaseLock");
          undefined !== this._ownerReadableStream && function (r) {
            W(r);
            Z(r, new TypeError("Reader was released"));
          }(this);
        }
      }]);
    }();
    function J(r) {
      return !!t(r) && !!Object.prototype.hasOwnProperty.call(r, "_readRequests") && r instanceof ao;
    }
    function K(r, z) {
      var D = r._ownerReadableStream;
      D._disturbed = true, "closed" === D._state ? z._closeSteps() : "errored" === D._state ? z._errorSteps(D._storedError) : D._readableStreamController[nr](z);
    }
    function Z(r, z) {
      var D = r._readRequests;
      r._readRequests = new de(), D.forEach(r => {
        r._errorSteps(z);
      });
    }
    function ee(r) {
      return new TypeError(`ReadableStreamDefaultReader.prototype.${r} can only be used on a ReadableStreamDefaultReader`);
    }
    var lo, so, uo;
    function ne(r) {
      return r.slice();
    }
    function ae(r, z, D, te, re) {
      new Uint8Array(r).set(new Uint8Array(D, te, re), z);
    }
    Object.defineProperties(ao.prototype, {
      cancel: {
        enumerable: true
      },
      read: {
        enumerable: true
      },
      releaseLock: {
        enumerable: true
      },
      closed: {
        enumerable: true
      }
    }), o(ao.prototype.cancel, "cancel"), o(ao.prototype.read, "read"), o(ao.prototype.releaseLock, "releaseLock"), "symbol" == typeof Symbol.toStringTag && Object.defineProperty(ao.prototype, Symbol.toStringTag, {
      value: "ReadableStreamDefaultReader",
      configurable: true
    });
    var ie = r => (ie = "function" == typeof r.transfer ? r => r.transfer() : "function" == typeof structuredClone ? r => structuredClone(r, {
        transfer: [r]
      }) : r => r, ie(r)),
      le = r => (le = "boolean" == typeof r.detached ? r => r.detached : r => 0 === r.byteLength, le(r));
    function se(r, z, D) {
      if (r.slice) return r.slice(z, D);
      var te = D - z,
        re = new ArrayBuffer(te);
      return ae(re, 0, r, z, te), re;
    }
    function ue(r, z) {
      var D = r[z];
      if (null != D) {
        if ("function" != typeof D) throw new TypeError(`${String(z)} is not a function`);
        return D;
      }
    }
    function ce(r) {
      try {
        var _z = r.done,
          _D = r.value;
        return f(oe(_D), r => ({
          done: _z,
          value: r
        }));
      } catch (r) {
        return d(r);
      }
    }
    var co = null !== (uo = null !== (lo = Symbol.asyncIterator) && undefined !== lo ? lo : null === (so = Symbol.for) || undefined === so ? undefined : so.call(Symbol, "Symbol.asyncIterator")) && undefined !== uo ? uo : "@@asyncIterator";
    function fe(r) {
      var z = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "sync";
      var D = arguments.length > 2 ? arguments[2] : undefined;
      if (undefined === D) if ("async" === z) {
        if (undefined === (D = ue(r, co))) return function (r) {
          var z = {
            next() {
              var z;
              try {
                z = be(r);
              } catch (r) {
                return d(r);
              }
              return ce(z);
            },
            return(z) {
              var D;
              try {
                var _te = ue(r.iterator, "return");
                if (undefined === _te) return c({
                  done: true,
                  value: z
                });
                D = S(_te, r.iterator, [z]);
              } catch (r) {
                return d(r);
              }
              return t(D) ? ce(D) : d(new TypeError("The iterator.return() method must return an object"));
            }
          };
          return {
            iterator: z,
            nextMethod: z.next,
            done: false
          };
        }(fe(r, "sync", ue(r, Symbol.iterator)));
      } else D = ue(r, Symbol.iterator);
      if (undefined === D) throw new TypeError("The object is not iterable");
      var te = S(D, r, []);
      if (!t(te)) throw new TypeError("The iterator method must return an object");
      return {
        iterator: te,
        nextMethod: te.next,
        done: false
      };
    }
    function be(r) {
      var z = S(r.nextMethod, r.iterator, []);
      if (!t(z)) throw new TypeError("The iterator.next() method must return an object");
      return z;
    }
    var fo = function () {
      return _createClass(function he(r, z) {
        _classCallCheck(this, he), this._ongoingPromise = undefined, this._isFinished = false, this._reader = r, this._preventCancel = z;
      }, [{
        key: "next",
        value: function next() {
          var e = () => this._nextSteps();
          return this._ongoingPromise = this._ongoingPromise ? _(this._ongoingPromise, e, e) : e(), this._ongoingPromise;
        }
      }, {
        key: "return",
        value: function _return(r) {
          var t = () => this._returnSteps(r);
          return this._ongoingPromise = this._ongoingPromise ? _(this._ongoingPromise, t, t) : t(), this._ongoingPromise;
        }
      }, {
        key: "_nextSteps",
        value: function _nextSteps() {
          if (this._isFinished) return Promise.resolve({
            value: undefined,
            done: true
          });
          var r = this._reader;
          var z, D;
          var te = u((r, te) => {
            z = r, D = te;
          });
          return K(r, {
            _chunkSteps: r => {
              this._ongoingPromise = undefined, y(() => z({
                value: r,
                done: false
              }));
            },
            _closeSteps: () => {
              this._ongoingPromise = undefined, this._isFinished = true, W(r), z({
                value: undefined,
                done: true
              });
            },
            _errorSteps: z => {
              this._ongoingPromise = undefined, this._isFinished = true, W(r), D(z);
            }
          }), te;
        }
      }, {
        key: "_returnSteps",
        value: function _returnSteps(r) {
          if (this._isFinished) return Promise.resolve({
            value: r,
            done: true
          });
          this._isFinished = true;
          var z = this._reader;
          if (!this._preventCancel) {
            var _D2 = E(z, r);
            return W(z), _(_D2, () => ({
              value: r,
              done: true
            }));
          }
          return W(z), c({
            value: r,
            done: true
          });
        }
      }]);
    }();
    var ho = {
      next() {
        return _e(this) ? this._asyncIteratorImpl.next() : d(pe("next"));
      },
      return(r) {
        return _e(this) ? this._asyncIteratorImpl.return(r) : d(pe("return"));
      },
      [co]() {
        return this;
      }
    };
    function _e(r) {
      if (!t(r)) return false;
      if (!Object.prototype.hasOwnProperty.call(r, "_asyncIteratorImpl")) return false;
      try {
        return r._asyncIteratorImpl instanceof fo;
      } catch (r) {
        return false;
      }
    }
    function pe(r) {
      return new TypeError(`ReadableStreamAsyncIterator.${r} can only be used on a ReadableSteamAsyncIterator`);
    }
    Object.defineProperty(ho, co, {
      enumerable: false
    });
    var bo = Number.isNaN || function (r) {
      return r != r;
    };
    function Se(r) {
      var z = se(r.buffer, r.byteOffset, r.byteOffset + r.byteLength);
      return new Uint8Array(z);
    }
    function ge(r) {
      var z = r._queue.shift();
      return r._queueTotalSize -= z.size, r._queueTotalSize < 0 && (r._queueTotalSize = 0), z.value;
    }
    function ve(r, z, D) {
      if ("number" != typeof (te = D) || bo(te) || te < 0 || D === 1 / 0) throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
      var te;
      r._queue.push({
        value: z,
        size: D
      }), r._queueTotalSize += D;
    }
    function we(r) {
      r._queue = new de(), r._queueTotalSize = 0;
    }
    function Re(r) {
      return r === DataView;
    }
    var _o = function () {
      return _createClass(function ReadableStreamBYOBRequest() {
        throw _classCallCheck(this, ReadableStreamBYOBRequest), new TypeError("Illegal constructor");
      }, [{
        key: "view",
        get: function () {
          if (!Ce(this)) throw Ke("view");
          return this._view;
        }
      }, {
        key: "respond",
        value: function respond(r) {
          if (!Ce(this)) throw Ke("respond");
          if ($(r, 1, "respond"), r = x(r, "First parameter"), undefined === this._associatedReadableByteStreamController) throw new TypeError("This BYOB request has been invalidated");
          if (le(this._view.buffer)) throw new TypeError("The BYOB request's buffer has been detached and so cannot be used as a response");
          Ge(this._associatedReadableByteStreamController, r);
        }
      }, {
        key: "respondWithNewView",
        value: function respondWithNewView(r) {
          if (!Ce(this)) throw Ke("respondWithNewView");
          if ($(r, 1, "respondWithNewView"), !ArrayBuffer.isView(r)) throw new TypeError("You can only respond with array buffer views");
          if (undefined === this._associatedReadableByteStreamController) throw new TypeError("This BYOB request has been invalidated");
          if (le(r.buffer)) throw new TypeError("The given view's buffer has been detached and so cannot be used as a response");
          Xe(this._associatedReadableByteStreamController, r);
        }
      }]);
    }();
    Object.defineProperties(_o.prototype, {
      respond: {
        enumerable: true
      },
      respondWithNewView: {
        enumerable: true
      },
      view: {
        enumerable: true
      }
    }), o(_o.prototype.respond, "respond"), o(_o.prototype.respondWithNewView, "respondWithNewView"), "symbol" == typeof Symbol.toStringTag && Object.defineProperty(_o.prototype, Symbol.toStringTag, {
      value: "ReadableStreamBYOBRequest",
      configurable: true
    });
    var mo = function () {
      return _createClass(function ReadableByteStreamController() {
        throw _classCallCheck(this, ReadableByteStreamController), new TypeError("Illegal constructor");
      }, [{
        key: "byobRequest",
        get: function () {
          if (!Te(this)) throw Ze("byobRequest");
          return Ve(this);
        }
      }, {
        key: "desiredSize",
        get: function () {
          if (!Te(this)) throw Ze("desiredSize");
          return Ue(this);
        }
      }, {
        key: "close",
        value: function close() {
          if (!Te(this)) throw Ze("close");
          if (this._closeRequested) throw new TypeError("The stream has already been closed; do not close it again!");
          var r = this._controlledReadableByteStream._state;
          if ("readable" !== r) throw new TypeError(`The stream (in ${r} state) is not in the readable state and cannot be closed`);
          Qe(this);
        }
      }, {
        key: "enqueue",
        value: function enqueue(r) {
          if (!Te(this)) throw Ze("enqueue");
          if ($(r, 1, "enqueue"), !ArrayBuffer.isView(r)) throw new TypeError("chunk must be an array buffer view");
          if (0 === r.byteLength) throw new TypeError("chunk must have non-zero byteLength");
          if (0 === r.buffer.byteLength) throw new TypeError("chunk's buffer must have non-zero byteLength");
          if (this._closeRequested) throw new TypeError("stream is closed or draining");
          var z = this._controlledReadableByteStream._state;
          if ("readable" !== z) throw new TypeError(`The stream (in ${z} state) is not in the readable state and cannot be enqueued to`);
          xe(this, r);
        }
      }, {
        key: "error",
        value: function error() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          if (!Te(this)) throw Ze("error");
          Ne(this, r);
        }
      }, {
        key: Dt,
        value: function (r) {
          qe(this), we(this);
          var z = this._cancelAlgorithm(r);
          return Ye(this), z;
        }
      }, {
        key: nr,
        value: function (r) {
          var z = this._controlledReadableByteStream;
          if (this._queueTotalSize > 0) return void He(this, r);
          var D = this._autoAllocateChunkSize;
          if (undefined !== D) {
            var _te2;
            try {
              _te2 = new ArrayBuffer(D);
            } catch (z) {
              return void r._errorSteps(z);
            }
            var _re = {
              buffer: _te2,
              bufferByteLength: D,
              byteOffset: 0,
              byteLength: D,
              bytesFilled: 0,
              minimumFill: 1,
              elementSize: 1,
              viewConstructor: Uint8Array,
              readerType: "default"
            };
            this._pendingPullIntos.push(_re);
          }
          V(z, r), Pe(this);
        }
      }, {
        key: ar,
        value: function () {
          if (this._pendingPullIntos.length > 0) {
            var _r3 = this._pendingPullIntos.peek();
            _r3.readerType = "none", this._pendingPullIntos = new de(), this._pendingPullIntos.push(_r3);
          }
        }
      }]);
    }();
    function Te(r) {
      return !!t(r) && !!Object.prototype.hasOwnProperty.call(r, "_controlledReadableByteStream") && r instanceof mo;
    }
    function Ce(r) {
      return !!t(r) && !!Object.prototype.hasOwnProperty.call(r, "_associatedReadableByteStreamController") && r instanceof _o;
    }
    function Pe(r) {
      var z = function (r) {
        var z = r._controlledReadableByteStream;
        if ("readable" !== z._state) return false;
        if (r._closeRequested) return false;
        if (!r._started) return false;
        if (X(z) && G(z) > 0) return true;
        if (nt(z) && ot(z) > 0) return true;
        return Ue(r) > 0;
      }(r);
      z && (r._pulling ? r._pullAgain = true : (r._pulling = true, b(r._pullAlgorithm(), () => (r._pulling = false, r._pullAgain && (r._pullAgain = false, Pe(r)), null), z => (Ne(r, z), null))));
    }
    function qe(r) {
      Le(r), r._pendingPullIntos = new de();
    }
    function Ee(r, z) {
      var D = false;
      "closed" === r._state && (D = true);
      var te = Be(z);
      "default" === z.readerType ? U(r, te, D) : function (r, z, D) {
        var te = r._reader._readIntoRequests.shift();
        D ? te._closeSteps(z) : te._chunkSteps(z);
      }(r, te, D);
    }
    function We(r, z) {
      for (var _D3 = 0; _D3 < z.length; ++_D3) Ee(r, z[_D3]);
    }
    function Be(r) {
      var z = r.bytesFilled,
        D = r.elementSize;
      return new r.viewConstructor(r.buffer, r.byteOffset, z / D);
    }
    function Oe(r, z, D, te) {
      r._queue.push({
        buffer: z,
        byteOffset: D,
        byteLength: te
      }), r._queueTotalSize += te;
    }
    function je(r, z, D, te) {
      var re;
      try {
        re = se(z, D, D + te);
      } catch (z) {
        throw Ne(r, z), z;
      }
      Oe(r, re, 0, te);
    }
    function ke(r, z) {
      z.bytesFilled > 0 && je(r, z.buffer, z.byteOffset, z.bytesFilled), Me(r);
    }
    function Ae(r, z) {
      var D = Math.min(r._queueTotalSize, z.byteLength - z.bytesFilled),
        te = z.bytesFilled + D;
      var re = D,
        oe = false;
      var de = te - te % z.elementSize;
      de >= z.minimumFill && (re = de - z.bytesFilled, oe = true);
      var me = r._queue;
      for (; re > 0;) {
        var _D4 = me.peek(),
          _te3 = Math.min(re, _D4.byteLength),
          _oe = z.byteOffset + z.bytesFilled;
        ae(z.buffer, _oe, _D4.buffer, _D4.byteOffset, _te3), _D4.byteLength === _te3 ? me.shift() : (_D4.byteOffset += _te3, _D4.byteLength -= _te3), r._queueTotalSize -= _te3, ze(r, _te3, z), re -= _te3;
      }
      return oe;
    }
    function ze(r, z, D) {
      D.bytesFilled += z;
    }
    function De(r) {
      0 === r._queueTotalSize && r._closeRequested ? (Ye(r), Or(r._controlledReadableByteStream)) : Pe(r);
    }
    function Le(r) {
      null !== r._byobRequest && (r._byobRequest._associatedReadableByteStreamController = undefined, r._byobRequest._view = null, r._byobRequest = null);
    }
    function Fe(r) {
      var z = [];
      for (; r._pendingPullIntos.length > 0 && 0 !== r._queueTotalSize;) {
        var _D5 = r._pendingPullIntos.peek();
        Ae(r, _D5) && (Me(r), z.push(_D5));
      }
      return z;
    }
    function $e(r, z) {
      var D = r._pendingPullIntos.peek();
      Le(r), "closed" === r._controlledReadableByteStream._state ? function (r, z) {
        "none" === z.readerType && Me(r);
        var D = r._controlledReadableByteStream;
        if (nt(D)) {
          var _z2 = [];
          for (var _te4 = 0; _te4 < ot(D); ++_te4) _z2.push(Me(r));
          We(D, _z2);
        }
      }(r, D) : function (r, z, D) {
        if (ze(0, z, D), "none" === D.readerType) {
          ke(r, D);
          var _z3 = Fe(r);
          return void We(r._controlledReadableByteStream, _z3);
        }
        if (D.bytesFilled < D.minimumFill) return;
        Me(r);
        var te = D.bytesFilled % D.elementSize;
        if (te > 0) {
          var _z4 = D.byteOffset + D.bytesFilled;
          je(r, D.buffer, _z4 - te, te);
        }
        D.bytesFilled -= te;
        var re = Fe(r);
        Ee(r._controlledReadableByteStream, D), We(r._controlledReadableByteStream, re);
      }(r, z, D), Pe(r);
    }
    function Me(r) {
      return r._pendingPullIntos.shift();
    }
    function Ye(r) {
      r._pullAlgorithm = undefined, r._cancelAlgorithm = undefined;
    }
    function Qe(r) {
      var z = r._controlledReadableByteStream;
      if (!r._closeRequested && "readable" === z._state) if (r._queueTotalSize > 0) r._closeRequested = true;else {
        if (r._pendingPullIntos.length > 0) {
          var _z5 = r._pendingPullIntos.peek();
          if (_z5.bytesFilled % _z5.elementSize != 0) {
            var _z6 = new TypeError("Insufficient bytes to fill elements in the given buffer");
            throw Ne(r, _z6), _z6;
          }
        }
        Ye(r), Or(z);
      }
    }
    function xe(r, z) {
      var D = r._controlledReadableByteStream;
      if (r._closeRequested || "readable" !== D._state) return;
      var te = z.buffer,
        re = z.byteOffset,
        oe = z.byteLength;
      if (le(te)) throw new TypeError("chunk's buffer is detached and so cannot be enqueued");
      var de = ie(te);
      if (r._pendingPullIntos.length > 0) {
        var _z7 = r._pendingPullIntos.peek();
        if (le(_z7.buffer)) throw new TypeError("The BYOB request's buffer has been detached and so cannot be filled with an enqueued chunk");
        Le(r), _z7.buffer = ie(_z7.buffer), "none" === _z7.readerType && ke(r, _z7);
      }
      if (X(D)) (function (r) {
        var z = r._controlledReadableByteStream._reader;
        for (; z._readRequests.length > 0;) {
          if (0 === r._queueTotalSize) return;
          He(r, z._readRequests.shift());
        }
      })(r), 0 === G(D) ? Oe(r, de, re, oe) : (r._pendingPullIntos.length > 0 && Me(r), U(D, new Uint8Array(de, re, oe), false));else if (nt(D)) {
        Oe(r, de, re, oe);
        var _z8 = Fe(r);
        We(r._controlledReadableByteStream, _z8);
      } else Oe(r, de, re, oe);
      Pe(r);
    }
    function Ne(r, z) {
      var D = r._controlledReadableByteStream;
      "readable" === D._state && (qe(r), we(r), Ye(r), jr(D, z));
    }
    function He(r, z) {
      var D = r._queue.shift();
      r._queueTotalSize -= D.byteLength, De(r);
      var te = new Uint8Array(D.buffer, D.byteOffset, D.byteLength);
      z._chunkSteps(te);
    }
    function Ve(r) {
      if (null === r._byobRequest && r._pendingPullIntos.length > 0) {
        var _z9 = r._pendingPullIntos.peek(),
          _D6 = new Uint8Array(_z9.buffer, _z9.byteOffset + _z9.bytesFilled, _z9.byteLength - _z9.bytesFilled),
          _te5 = Object.create(_o.prototype);
        !function (r, z, D) {
          r._associatedReadableByteStreamController = z, r._view = D;
        }(_te5, r, _D6), r._byobRequest = _te5;
      }
      return r._byobRequest;
    }
    function Ue(r) {
      var z = r._controlledReadableByteStream._state;
      return "errored" === z ? null : "closed" === z ? 0 : r._strategyHWM - r._queueTotalSize;
    }
    function Ge(r, z) {
      var D = r._pendingPullIntos.peek();
      if ("closed" === r._controlledReadableByteStream._state) {
        if (0 !== z) throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
      } else {
        if (0 === z) throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
        if (D.bytesFilled + z > D.byteLength) throw new RangeError("bytesWritten out of range");
      }
      D.buffer = ie(D.buffer), $e(r, z);
    }
    function Xe(r, z) {
      var D = r._pendingPullIntos.peek();
      if ("closed" === r._controlledReadableByteStream._state) {
        if (0 !== z.byteLength) throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream");
      } else if (0 === z.byteLength) throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");
      if (D.byteOffset + D.bytesFilled !== z.byteOffset) throw new RangeError("The region specified by view does not match byobRequest");
      if (D.bufferByteLength !== z.buffer.byteLength) throw new RangeError("The buffer of view has different capacity than byobRequest");
      if (D.bytesFilled + z.byteLength > D.byteLength) throw new RangeError("The region specified by view is larger than byobRequest");
      var te = z.byteLength;
      D.buffer = ie(z.buffer), $e(r, te);
    }
    function Je(r, z, D, te, re, oe, me) {
      z._controlledReadableByteStream = r, z._pullAgain = false, z._pulling = false, z._byobRequest = null, z._queue = z._queueTotalSize = undefined, we(z), z._closeRequested = false, z._started = false, z._strategyHWM = oe, z._pullAlgorithm = te, z._cancelAlgorithm = re, z._autoAllocateChunkSize = me, z._pendingPullIntos = new de(), r._readableStreamController = z, b(c(D()), () => (z._started = true, Pe(z), null), r => (Ne(z, r), null));
    }
    function Ke(r) {
      return new TypeError(`ReadableStreamBYOBRequest.prototype.${r} can only be used on a ReadableStreamBYOBRequest`);
    }
    function Ze(r) {
      return new TypeError(`ReadableByteStreamController.prototype.${r} can only be used on a ReadableByteStreamController`);
    }
    function et(r, z) {
      if ("byob" != (r = `${r}`)) throw new TypeError(`${z} '${r}' is not a valid enumeration value for ReadableStreamReaderMode`);
      return r;
    }
    function tt(r) {
      return new po(r);
    }
    function rt(r, z) {
      r._reader._readIntoRequests.push(z);
    }
    function ot(r) {
      return r._reader._readIntoRequests.length;
    }
    function nt(r) {
      var z = r._reader;
      return undefined !== z && !!at(z);
    }
    Object.defineProperties(mo.prototype, {
      close: {
        enumerable: true
      },
      enqueue: {
        enumerable: true
      },
      error: {
        enumerable: true
      },
      byobRequest: {
        enumerable: true
      },
      desiredSize: {
        enumerable: true
      }
    }), o(mo.prototype.close, "close"), o(mo.prototype.enqueue, "enqueue"), o(mo.prototype.error, "error"), "symbol" == typeof Symbol.toStringTag && Object.defineProperty(mo.prototype, Symbol.toStringTag, {
      value: "ReadableByteStreamController",
      configurable: true
    });
    var po = function () {
      return _createClass(function ReadableStreamBYOBReader(r) {
        if (_classCallCheck(this, ReadableStreamBYOBReader), $(r, 1, "ReadableStreamBYOBReader"), N(r, "First parameter"), Wr(r)) throw new TypeError("This stream has already been locked for exclusive reading by another reader");
        if (!Te(r._readableStreamController)) throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
        q(this, r), this._readIntoRequests = new de();
      }, [{
        key: "closed",
        get: function () {
          return at(this) ? this._closedPromise : d(st("closed"));
        }
      }, {
        key: "cancel",
        value: function cancel() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          return at(this) ? undefined === this._ownerReadableStream ? d(B("cancel")) : E(this, r) : d(st("cancel"));
        }
      }, {
        key: "read",
        value: function read(r) {
          var z = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          if (!at(this)) return d(st("read"));
          if (!ArrayBuffer.isView(r)) return d(new TypeError("view must be an array buffer view"));
          if (0 === r.byteLength) return d(new TypeError("view must have non-zero byteLength"));
          if (0 === r.buffer.byteLength) return d(new TypeError("view's buffer must have non-zero byteLength"));
          if (le(r.buffer)) return d(new TypeError("view's buffer has been detached"));
          var D;
          try {
            D = function (r, z) {
              var D;
              return L(r, z), {
                min: x(null !== (D = null == r ? undefined : r.min) && undefined !== D ? D : 1, `${z} has member 'min' that`)
              };
            }(z, "options");
          } catch (r) {
            return d(r);
          }
          var te = D.min;
          if (0 === te) return d(new TypeError("options.min must be greater than 0"));
          if (function (r) {
            return Re(r.constructor);
          }(r)) {
            if (te > r.byteLength) return d(new RangeError("options.min must be less than or equal to view's byteLength"));
          } else if (te > r.length) return d(new RangeError("options.min must be less than or equal to view's length"));
          if (undefined === this._ownerReadableStream) return d(B("read from"));
          var re, oe;
          var de = u((r, z) => {
            re = r, oe = z;
          });
          return it(this, r, te, {
            _chunkSteps: r => re({
              value: r,
              done: false
            }),
            _closeSteps: r => re({
              value: r,
              done: true
            }),
            _errorSteps: r => oe(r)
          }), de;
        }
      }, {
        key: "releaseLock",
        value: function releaseLock() {
          if (!at(this)) throw st("releaseLock");
          undefined !== this._ownerReadableStream && function (r) {
            W(r);
            lt(r, new TypeError("Reader was released"));
          }(this);
        }
      }]);
    }();
    function at(r) {
      return !!t(r) && !!Object.prototype.hasOwnProperty.call(r, "_readIntoRequests") && r instanceof po;
    }
    function it(r, z, D, te) {
      var re = r._ownerReadableStream;
      re._disturbed = true, "errored" === re._state ? te._errorSteps(re._storedError) : function Ie(r, z, D, te) {
        var re = r._controlledReadableByteStream,
          oe = z.constructor,
          de = function (r) {
            return Re(r) ? 1 : r.BYTES_PER_ELEMENT;
          }(oe),
          me = z.byteOffset,
          ye = z.byteLength,
          Dt = D * de;
        var nr;
        try {
          nr = ie(z.buffer);
        } catch (r) {
          return void te._errorSteps(r);
        }
        var ar = {
          buffer: nr,
          bufferByteLength: nr.byteLength,
          byteOffset: me,
          byteLength: ye,
          bytesFilled: 0,
          minimumFill: Dt,
          elementSize: de,
          viewConstructor: oe,
          readerType: "byob"
        };
        if (r._pendingPullIntos.length > 0) return r._pendingPullIntos.push(ar), void rt(re, te);
        if ("closed" !== re._state) {
          if (r._queueTotalSize > 0) {
            if (Ae(r, ar)) {
              var _z0 = Be(ar);
              return De(r), void te._chunkSteps(_z0);
            }
            if (r._closeRequested) {
              var _z1 = new TypeError("Insufficient bytes to fill elements in the given buffer");
              return Ne(r, _z1), void te._errorSteps(_z1);
            }
          }
          r._pendingPullIntos.push(ar), rt(re, te), Pe(r);
        } else {
          var _r4 = new oe(ar.buffer, ar.byteOffset, 0);
          te._closeSteps(_r4);
        }
      }(re._readableStreamController, z, D, te);
    }
    function lt(r, z) {
      var D = r._readIntoRequests;
      r._readIntoRequests = new de(), D.forEach(r => {
        r._errorSteps(z);
      });
    }
    function st(r) {
      return new TypeError(`ReadableStreamBYOBReader.prototype.${r} can only be used on a ReadableStreamBYOBReader`);
    }
    function ut(r, z) {
      var D = r.highWaterMark;
      if (undefined === D) return z;
      if (bo(D) || D < 0) throw new RangeError("Invalid highWaterMark");
      return D;
    }
    function ct(r) {
      var z = r.size;
      return z || (() => 1);
    }
    function dt(r, z) {
      L(r, z);
      var D = null == r ? undefined : r.highWaterMark,
        te = null == r ? undefined : r.size;
      return {
        highWaterMark: undefined === D ? undefined : Y(D),
        size: undefined === te ? undefined : ft(te, `${z} has member 'size' that`)
      };
    }
    function ft(r, z) {
      return F(r, z), z => Y(r(z));
    }
    function bt(r, z, D) {
      return F(r, D), D => g(r, z, [D]);
    }
    function ht(r, z, D) {
      return F(r, D), () => g(r, z, []);
    }
    function mt(r, z, D) {
      return F(r, D), D => S(r, z, [D]);
    }
    function _t(r, z, D) {
      return F(r, D), (D, te) => g(r, z, [D, te]);
    }
    function pt(r, z) {
      if (!gt(r)) throw new TypeError(`${z} is not a WritableStream.`);
    }
    Object.defineProperties(po.prototype, {
      cancel: {
        enumerable: true
      },
      read: {
        enumerable: true
      },
      releaseLock: {
        enumerable: true
      },
      closed: {
        enumerable: true
      }
    }), o(po.prototype.cancel, "cancel"), o(po.prototype.read, "read"), o(po.prototype.releaseLock, "releaseLock"), "symbol" == typeof Symbol.toStringTag && Object.defineProperty(po.prototype, Symbol.toStringTag, {
      value: "ReadableStreamBYOBReader",
      configurable: true
    });
    var yo = function () {
      return _createClass(function WritableStream() {
        var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var z = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        _classCallCheck(this, WritableStream), undefined === r ? r = null : I(r, "First parameter");
        var D = dt(z, "Second parameter"),
          te = function (r, z) {
            L(r, z);
            var D = null == r ? undefined : r.abort,
              te = null == r ? undefined : r.close,
              re = null == r ? undefined : r.start,
              oe = null == r ? undefined : r.type,
              de = null == r ? undefined : r.write;
            return {
              abort: undefined === D ? undefined : bt(D, r, `${z} has member 'abort' that`),
              close: undefined === te ? undefined : ht(te, r, `${z} has member 'close' that`),
              start: undefined === re ? undefined : mt(re, r, `${z} has member 'start' that`),
              write: undefined === de ? undefined : _t(de, r, `${z} has member 'write' that`),
              type: oe
            };
          }(r, "First parameter");
        if (St(this), undefined !== te.type) throw new RangeError("Invalid type is specified");
        var re = ct(D);
        !function (r, z, D, te) {
          var re = Object.create(So.prototype);
          var oe, de, me, ye;
          oe = undefined !== z.start ? () => z.start(re) : () => {}, de = undefined !== z.write ? r => z.write(r, re) : () => c(undefined), me = undefined !== z.close ? () => z.close() : () => c(undefined), ye = undefined !== z.abort ? r => z.abort(r) : () => c(undefined), Ft(r, re, oe, de, me, ye, D, te);
        }(this, te, ut(D, 1), re);
      }, [{
        key: "locked",
        get: function () {
          if (!gt(this)) throw Nt("locked");
          return vt(this);
        }
      }, {
        key: "abort",
        value: function abort() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          return gt(this) ? vt(this) ? d(new TypeError("Cannot abort a stream that already has a writer")) : wt(this, r) : d(Nt("abort"));
        }
      }, {
        key: "close",
        value: function close() {
          return gt(this) ? vt(this) ? d(new TypeError("Cannot close a stream that already has a writer")) : qt(this) ? d(new TypeError("Cannot close an already-closing stream")) : Rt(this) : d(Nt("close"));
        }
      }, {
        key: "getWriter",
        value: function getWriter() {
          if (!gt(this)) throw Nt("getWriter");
          return yt(this);
        }
      }]);
    }();
    function yt(r) {
      return new vo(r);
    }
    function St(r) {
      r._state = "writable", r._storedError = undefined, r._writer = undefined, r._writableStreamController = undefined, r._writeRequests = new de(), r._inFlightWriteRequest = undefined, r._closeRequest = undefined, r._inFlightCloseRequest = undefined, r._pendingAbortRequest = undefined, r._backpressure = false;
    }
    function gt(r) {
      return !!t(r) && !!Object.prototype.hasOwnProperty.call(r, "_writableStreamController") && r instanceof yo;
    }
    function vt(r) {
      return undefined !== r._writer;
    }
    function wt(r, z) {
      var D;
      if ("closed" === r._state || "errored" === r._state) return c(undefined);
      r._writableStreamController._abortReason = z, null === (D = r._writableStreamController._abortController) || undefined === D || D.abort(z);
      var te = r._state;
      if ("closed" === te || "errored" === te) return c(undefined);
      if (undefined !== r._pendingAbortRequest) return r._pendingAbortRequest._promise;
      var re = false;
      "erroring" === te && (re = true, z = undefined);
      var oe = u((D, te) => {
        r._pendingAbortRequest = {
          _promise: undefined,
          _resolve: D,
          _reject: te,
          _reason: z,
          _wasAlreadyErroring: re
        };
      });
      return r._pendingAbortRequest._promise = oe, re || Ct(r, z), oe;
    }
    function Rt(r) {
      var z = r._state;
      if ("closed" === z || "errored" === z) return d(new TypeError(`The stream (in ${z} state) is not in the writable state and cannot be closed`));
      var D = u((z, D) => {
          var te = {
            _resolve: z,
            _reject: D
          };
          r._closeRequest = te;
        }),
        te = r._writer;
      var re;
      return undefined !== te && r._backpressure && "writable" === z && or(te), ve(re = r._writableStreamController, go, 0), Mt(re), D;
    }
    function Tt(r, z) {
      "writable" !== r._state ? Pt(r) : Ct(r, z);
    }
    function Ct(r, z) {
      var D = r._writableStreamController;
      r._state = "erroring", r._storedError = z;
      var te = r._writer;
      undefined !== te && kt(te, z), !function (r) {
        return undefined !== r._inFlightWriteRequest || undefined !== r._inFlightCloseRequest;
      }(r) && D._started && Pt(r);
    }
    function Pt(r) {
      r._state = "errored", r._writableStreamController[ye]();
      var z = r._storedError;
      if (r._writeRequests.forEach(r => {
        r._reject(z);
      }), r._writeRequests = new de(), undefined === r._pendingAbortRequest) return void Et(r);
      var D = r._pendingAbortRequest;
      if (r._pendingAbortRequest = undefined, D._wasAlreadyErroring) return D._reject(z), void Et(r);
      b(r._writableStreamController[me](D._reason), () => (D._resolve(), Et(r), null), z => (D._reject(z), Et(r), null));
    }
    function qt(r) {
      return undefined !== r._closeRequest || undefined !== r._inFlightCloseRequest;
    }
    function Et(r) {
      undefined !== r._closeRequest && (r._closeRequest._reject(r._storedError), r._closeRequest = undefined);
      var z = r._writer;
      undefined !== z && Jt(z, r._storedError);
    }
    function Wt(r, z) {
      var D = r._writer;
      undefined !== D && z !== r._backpressure && (z ? function (r) {
        Zt(r);
      }(D) : or(D)), r._backpressure = z;
    }
    Object.defineProperties(yo.prototype, {
      abort: {
        enumerable: true
      },
      close: {
        enumerable: true
      },
      getWriter: {
        enumerable: true
      },
      locked: {
        enumerable: true
      }
    }), o(yo.prototype.abort, "abort"), o(yo.prototype.close, "close"), o(yo.prototype.getWriter, "getWriter"), "symbol" == typeof Symbol.toStringTag && Object.defineProperty(yo.prototype, Symbol.toStringTag, {
      value: "WritableStream",
      configurable: true
    });
    var vo = function () {
      return _createClass(function WritableStreamDefaultWriter(r) {
        if (_classCallCheck(this, WritableStreamDefaultWriter), $(r, 1, "WritableStreamDefaultWriter"), pt(r, "First parameter"), vt(r)) throw new TypeError("This stream has already been locked for exclusive writing by another writer");
        this._ownerWritableStream = r, r._writer = this;
        var z = r._state;
        if ("writable" === z) !qt(r) && r._backpressure ? Zt(this) : tr(this), Gt(this);else if ("erroring" === z) er(this, r._storedError), Gt(this);else if ("closed" === z) tr(this), Gt(this), Kt(this);else {
          var _z10 = r._storedError;
          er(this, _z10), Xt(this, _z10);
        }
      }, [{
        key: "closed",
        get: function () {
          return Bt(this) ? this._closedPromise : d(Vt("closed"));
        }
      }, {
        key: "desiredSize",
        get: function () {
          if (!Bt(this)) throw Vt("desiredSize");
          if (undefined === this._ownerWritableStream) throw Ut("desiredSize");
          return function (r) {
            var z = r._ownerWritableStream,
              D = z._state;
            return "errored" === D || "erroring" === D ? null : "closed" === D ? 0 : $t(z._writableStreamController);
          }(this);
        }
      }, {
        key: "ready",
        get: function () {
          return Bt(this) ? this._readyPromise : d(Vt("ready"));
        }
      }, {
        key: "abort",
        value: function abort() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          return Bt(this) ? undefined === this._ownerWritableStream ? d(Ut("abort")) : function (r, z) {
            return wt(r._ownerWritableStream, z);
          }(this, r) : d(Vt("abort"));
        }
      }, {
        key: "close",
        value: function close() {
          if (!Bt(this)) return d(Vt("close"));
          var r = this._ownerWritableStream;
          return undefined === r ? d(Ut("close")) : qt(r) ? d(new TypeError("Cannot close an already-closing stream")) : Ot(this);
        }
      }, {
        key: "releaseLock",
        value: function releaseLock() {
          if (!Bt(this)) throw Vt("releaseLock");
          undefined !== this._ownerWritableStream && At(this);
        }
      }, {
        key: "write",
        value: function write() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          return Bt(this) ? undefined === this._ownerWritableStream ? d(Ut("write to")) : zt(this, r) : d(Vt("write"));
        }
      }]);
    }();
    function Bt(r) {
      return !!t(r) && !!Object.prototype.hasOwnProperty.call(r, "_ownerWritableStream") && r instanceof vo;
    }
    function Ot(r) {
      return Rt(r._ownerWritableStream);
    }
    function kt(r, z) {
      "pending" === r._readyPromiseState ? rr(r, z) : function (r, z) {
        er(r, z);
      }(r, z);
    }
    function At(r) {
      var z = r._ownerWritableStream,
        D = new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");
      kt(r, D), function jt(r, z) {
        "pending" === r._closedPromiseState ? Jt(r, z) : function (r, z) {
          Xt(r, z);
        }(r, z);
      }(r, D), z._writer = undefined, r._ownerWritableStream = undefined;
    }
    function zt(r, z) {
      var D = r._ownerWritableStream,
        te = D._writableStreamController,
        re = function (r, z) {
          if (undefined === r._strategySizeAlgorithm) return 1;
          try {
            return r._strategySizeAlgorithm(z);
          } catch (z) {
            return Yt(r, z), 1;
          }
        }(te, z);
      if (D !== r._ownerWritableStream) return d(Ut("write to"));
      var oe = D._state;
      if ("errored" === oe) return d(D._storedError);
      if (qt(D) || "closed" === oe) return d(new TypeError("The stream is closing or closed and cannot be written to"));
      if ("erroring" === oe) return d(D._storedError);
      var de = function (r) {
        return u((z, D) => {
          var te = {
            _resolve: z,
            _reject: D
          };
          r._writeRequests.push(te);
        });
      }(D);
      return function (r, z, D) {
        try {
          ve(r, z, D);
        } catch (z) {
          return void Yt(r, z);
        }
        var te = r._controlledWritableStream;
        qt(te) || "writable" !== te._state || Wt(te, Qt(r)), Mt(r);
      }(te, z, re), de;
    }
    Object.defineProperties(vo.prototype, {
      abort: {
        enumerable: true
      },
      close: {
        enumerable: true
      },
      releaseLock: {
        enumerable: true
      },
      write: {
        enumerable: true
      },
      closed: {
        enumerable: true
      },
      desiredSize: {
        enumerable: true
      },
      ready: {
        enumerable: true
      }
    }), o(vo.prototype.abort, "abort"), o(vo.prototype.close, "close"), o(vo.prototype.releaseLock, "releaseLock"), o(vo.prototype.write, "write"), "symbol" == typeof Symbol.toStringTag && Object.defineProperty(vo.prototype, Symbol.toStringTag, {
      value: "WritableStreamDefaultWriter",
      configurable: true
    });
    var go = {};
    var So = function () {
      return _createClass(function WritableStreamDefaultController() {
        throw _classCallCheck(this, WritableStreamDefaultController), new TypeError("Illegal constructor");
      }, [{
        key: "abortReason",
        get: function () {
          if (!Lt(this)) throw Ht("abortReason");
          return this._abortReason;
        }
      }, {
        key: "signal",
        get: function () {
          if (!Lt(this)) throw Ht("signal");
          if (undefined === this._abortController) throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
          return this._abortController.signal;
        }
      }, {
        key: "error",
        value: function error() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          if (!Lt(this)) throw Ht("error");
          "writable" === this._controlledWritableStream._state && xt(this, r);
        }
      }, {
        key: me,
        value: function (r) {
          var z = this._abortAlgorithm(r);
          return It(this), z;
        }
      }, {
        key: ye,
        value: function () {
          we(this);
        }
      }]);
    }();
    function Lt(r) {
      return !!t(r) && !!Object.prototype.hasOwnProperty.call(r, "_controlledWritableStream") && r instanceof So;
    }
    function Ft(r, z, D, te, re, oe, de, me) {
      z._controlledWritableStream = r, r._writableStreamController = z, z._queue = undefined, z._queueTotalSize = undefined, we(z), z._abortReason = undefined, z._abortController = function () {
        if ("function" == typeof AbortController) return new AbortController();
      }(), z._started = false, z._strategySizeAlgorithm = me, z._strategyHWM = de, z._writeAlgorithm = te, z._closeAlgorithm = re, z._abortAlgorithm = oe;
      var ye = Qt(z);
      Wt(r, ye), b(c(D()), () => (z._started = true, Mt(z), null), D => (z._started = true, Tt(r, D), null));
    }
    function It(r) {
      r._writeAlgorithm = undefined, r._closeAlgorithm = undefined, r._abortAlgorithm = undefined, r._strategySizeAlgorithm = undefined;
    }
    function $t(r) {
      return r._strategyHWM - r._queueTotalSize;
    }
    function Mt(r) {
      var z = r._controlledWritableStream;
      if (!r._started) return;
      if (undefined !== z._inFlightWriteRequest) return;
      if ("erroring" === z._state) return void Pt(z);
      if (0 === r._queue.length) return;
      var D = r._queue.peek().value;
      D === go ? function (r) {
        var z = r._controlledWritableStream;
        (function (r) {
          r._inFlightCloseRequest = r._closeRequest, r._closeRequest = undefined;
        })(z), ge(r);
        var D = r._closeAlgorithm();
        It(r), b(D, () => (function (r) {
          r._inFlightCloseRequest._resolve(undefined), r._inFlightCloseRequest = undefined, "erroring" === r._state && (r._storedError = undefined, undefined !== r._pendingAbortRequest && (r._pendingAbortRequest._resolve(), r._pendingAbortRequest = undefined)), r._state = "closed";
          var z = r._writer;
          undefined !== z && Kt(z);
        }(z), null), r => (function (r, z) {
          r._inFlightCloseRequest._reject(z), r._inFlightCloseRequest = undefined, undefined !== r._pendingAbortRequest && (r._pendingAbortRequest._reject(z), r._pendingAbortRequest = undefined), Tt(r, z);
        }(z, r), null));
      }(r) : function (r, z) {
        var D = r._controlledWritableStream;
        !function (r) {
          r._inFlightWriteRequest = r._writeRequests.shift();
        }(D);
        b(r._writeAlgorithm(z), () => {
          !function (r) {
            r._inFlightWriteRequest._resolve(undefined), r._inFlightWriteRequest = undefined;
          }(D);
          var z = D._state;
          if (ge(r), !qt(D) && "writable" === z) {
            var _z11 = Qt(r);
            Wt(D, _z11);
          }
          return Mt(r), null;
        }, z => ("writable" === D._state && It(r), function (r, z) {
          r._inFlightWriteRequest._reject(z), r._inFlightWriteRequest = undefined, Tt(r, z);
        }(D, z), null));
      }(r, D);
    }
    function Yt(r, z) {
      "writable" === r._controlledWritableStream._state && xt(r, z);
    }
    function Qt(r) {
      return $t(r) <= 0;
    }
    function xt(r, z) {
      var D = r._controlledWritableStream;
      It(r), Ct(D, z);
    }
    function Nt(r) {
      return new TypeError(`WritableStream.prototype.${r} can only be used on a WritableStream`);
    }
    function Ht(r) {
      return new TypeError(`WritableStreamDefaultController.prototype.${r} can only be used on a WritableStreamDefaultController`);
    }
    function Vt(r) {
      return new TypeError(`WritableStreamDefaultWriter.prototype.${r} can only be used on a WritableStreamDefaultWriter`);
    }
    function Ut(r) {
      return new TypeError("Cannot " + r + " a stream using a released writer");
    }
    function Gt(r) {
      r._closedPromise = u((z, D) => {
        r._closedPromise_resolve = z, r._closedPromise_reject = D, r._closedPromiseState = "pending";
      });
    }
    function Xt(r, z) {
      Gt(r), Jt(r, z);
    }
    function Jt(r, z) {
      undefined !== r._closedPromise_reject && (p(r._closedPromise), r._closedPromise_reject(z), r._closedPromise_resolve = undefined, r._closedPromise_reject = undefined, r._closedPromiseState = "rejected");
    }
    function Kt(r) {
      undefined !== r._closedPromise_resolve && (r._closedPromise_resolve(undefined), r._closedPromise_resolve = undefined, r._closedPromise_reject = undefined, r._closedPromiseState = "resolved");
    }
    function Zt(r) {
      r._readyPromise = u((z, D) => {
        r._readyPromise_resolve = z, r._readyPromise_reject = D;
      }), r._readyPromiseState = "pending";
    }
    function er(r, z) {
      Zt(r), rr(r, z);
    }
    function tr(r) {
      Zt(r), or(r);
    }
    function rr(r, z) {
      undefined !== r._readyPromise_reject && (p(r._readyPromise), r._readyPromise_reject(z), r._readyPromise_resolve = undefined, r._readyPromise_reject = undefined, r._readyPromiseState = "rejected");
    }
    function or(r) {
      undefined !== r._readyPromise_resolve && (r._readyPromise_resolve(undefined), r._readyPromise_resolve = undefined, r._readyPromise_reject = undefined, r._readyPromiseState = "fulfilled");
    }
    Object.defineProperties(So.prototype, {
      abortReason: {
        enumerable: true
      },
      signal: {
        enumerable: true
      },
      error: {
        enumerable: true
      }
    }), "symbol" == typeof Symbol.toStringTag && Object.defineProperty(So.prototype, Symbol.toStringTag, {
      value: "WritableStreamDefaultController",
      configurable: true
    });
    var wo = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : "undefined" != typeof global ? global : undefined,
      Ro = function () {
        var r = null == wo ? undefined : wo.DOMException;
        return function (r) {
          if ("function" != typeof r && "object" != typeof r) return false;
          if ("DOMException" !== r.name) return false;
          try {
            return new r(), true;
          } catch (r) {
            return false;
          }
        }(r) ? r : undefined;
      }() || function () {
        var e = function (r, z) {
          this.message = r || "", this.name = z || "Error", Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
        };
        return o(e, "DOMException"), e.prototype = Object.create(Error.prototype), Object.defineProperty(e.prototype, "constructor", {
          value: e,
          writable: true,
          configurable: true
        }), e;
      }();
    function ir(r, z, D, te, re, oe) {
      var de = H(r),
        me = yt(z);
      r._disturbed = true;
      var ye = false,
        Dt = c(undefined);
      return u((nr, ar) => {
        var no;
        if (undefined !== oe) {
          if (no = () => {
            var D = undefined !== oe.reason ? oe.reason : new Ro("Aborted", "AbortError"),
              de = [];
            te || de.push(() => "writable" === z._state ? wt(z, D) : c(undefined)), re || de.push(() => "readable" === r._state ? Br(r, D) : c(undefined)), q(() => Promise.all(de.map(r => r())), true, D);
          }, oe.aborted) return void no();
          oe.addEventListener("abort", no);
        }
        var io, ao, lo;
        if (P(r, de._closedPromise, r => (te ? E(true, r) : q(() => wt(z, r), true, r), null)), P(z, me._closedPromise, z => (re ? E(true, z) : q(() => Br(r, z), true, z), null)), io = r, ao = de._closedPromise, lo = () => (D ? E() : q(() => function (r) {
          var z = r._ownerWritableStream,
            D = z._state;
          return qt(z) || "closed" === D ? c(undefined) : "errored" === D ? d(z._storedError) : Ot(r);
        }(me)), null), "closed" === io._state ? lo() : h(ao, lo), qt(z) || "closed" === z._state) {
          var _z12 = new TypeError("the destination writable stream closed before all data could be piped to it");
          re ? E(true, _z12) : q(() => Br(r, _z12), true, _z12);
        }
        function C() {
          var r = Dt;
          return f(Dt, () => r !== Dt ? C() : undefined);
        }
        function P(r, z, D) {
          "errored" === r._state ? D(r._storedError) : m(z, D);
        }
        function q(r, D, te) {
          function n() {
            return b(r(), () => B(D, te), r => B(true, r)), null;
          }
          ye || (ye = true, "writable" !== z._state || qt(z) ? n() : h(C(), n));
        }
        function E(r, D) {
          ye || (ye = true, "writable" !== z._state || qt(z) ? B(r, D) : h(C(), () => B(r, D)));
        }
        function B(r, z) {
          return At(me), W(de), undefined !== oe && oe.removeEventListener("abort", no), r ? ar(z) : nr(undefined), null;
        }
        p(u((r, z) => {
          !function o(D) {
            D ? r() : f(ye ? c(true) : f(me._readyPromise, () => u((r, z) => {
              K(de, {
                _chunkSteps: z => {
                  Dt = f(zt(me, z), undefined, e), r(false);
                },
                _closeSteps: () => r(true),
                _errorSteps: z
              });
            })), o, z);
          }(false);
        }));
      });
    }
    var To = function () {
      return _createClass(function ReadableStreamDefaultController() {
        throw _classCallCheck(this, ReadableStreamDefaultController), new TypeError("Illegal constructor");
      }, [{
        key: "desiredSize",
        get: function () {
          if (!lr(this)) throw pr("desiredSize");
          return hr(this);
        }
      }, {
        key: "close",
        value: function close() {
          if (!lr(this)) throw pr("close");
          if (!mr(this)) throw new TypeError("The stream is not in a state that permits close");
          dr(this);
        }
      }, {
        key: "enqueue",
        value: function enqueue() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          if (!lr(this)) throw pr("enqueue");
          if (!mr(this)) throw new TypeError("The stream is not in a state that permits enqueue");
          return fr(this, r);
        }
      }, {
        key: "error",
        value: function error() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          if (!lr(this)) throw pr("error");
          br(this, r);
        }
      }, {
        key: Dt,
        value: function (r) {
          we(this);
          var z = this._cancelAlgorithm(r);
          return cr(this), z;
        }
      }, {
        key: nr,
        value: function (r) {
          var z = this._controlledReadableStream;
          if (this._queue.length > 0) {
            var _D7 = ge(this);
            this._closeRequested && 0 === this._queue.length ? (cr(this), Or(z)) : sr(this), r._chunkSteps(_D7);
          } else V(z, r), sr(this);
        }
      }, {
        key: ar,
        value: function () {}
      }]);
    }();
    function lr(r) {
      return !!t(r) && !!Object.prototype.hasOwnProperty.call(r, "_controlledReadableStream") && r instanceof To;
    }
    function sr(r) {
      ur(r) && (r._pulling ? r._pullAgain = true : (r._pulling = true, b(r._pullAlgorithm(), () => (r._pulling = false, r._pullAgain && (r._pullAgain = false, sr(r)), null), z => (br(r, z), null))));
    }
    function ur(r) {
      var z = r._controlledReadableStream;
      return !!mr(r) && !!r._started && (!!(Wr(z) && G(z) > 0) || hr(r) > 0);
    }
    function cr(r) {
      r._pullAlgorithm = undefined, r._cancelAlgorithm = undefined, r._strategySizeAlgorithm = undefined;
    }
    function dr(r) {
      if (!mr(r)) return;
      var z = r._controlledReadableStream;
      r._closeRequested = true, 0 === r._queue.length && (cr(r), Or(z));
    }
    function fr(r, z) {
      if (!mr(r)) return;
      var D = r._controlledReadableStream;
      if (Wr(D) && G(D) > 0) U(D, z, false);else {
        var _D8;
        try {
          _D8 = r._strategySizeAlgorithm(z);
        } catch (z) {
          throw br(r, z), z;
        }
        try {
          ve(r, z, _D8);
        } catch (z) {
          throw br(r, z), z;
        }
      }
      sr(r);
    }
    function br(r, z) {
      var D = r._controlledReadableStream;
      "readable" === D._state && (we(r), cr(r), jr(D, z));
    }
    function hr(r) {
      var z = r._controlledReadableStream._state;
      return "errored" === z ? null : "closed" === z ? 0 : r._strategyHWM - r._queueTotalSize;
    }
    function mr(r) {
      var z = r._controlledReadableStream._state;
      return !r._closeRequested && "readable" === z;
    }
    function _r(r, z, D, te, re, oe, de) {
      z._controlledReadableStream = r, z._queue = undefined, z._queueTotalSize = undefined, we(z), z._started = false, z._closeRequested = false, z._pullAgain = false, z._pulling = false, z._strategySizeAlgorithm = de, z._strategyHWM = oe, z._pullAlgorithm = te, z._cancelAlgorithm = re, r._readableStreamController = z, b(c(D()), () => (z._started = true, sr(z), null), r => (br(z, r), null));
    }
    function pr(r) {
      return new TypeError(`ReadableStreamDefaultController.prototype.${r} can only be used on a ReadableStreamDefaultController`);
    }
    function Sr(r) {
      return t(z = r) && undefined !== z.getReader ? function (r) {
        var z;
        return z = Cr(e, function n() {
          var D;
          try {
            D = r.read();
          } catch (D) {
            return d(D);
          }
          return _(D, r => {
            if (!t(r)) throw new TypeError("The promise returned by the reader.read() method must fulfill with an object");
            if (r.done) dr(z._readableStreamController);else {
              var _D9 = r.value;
              fr(z._readableStreamController, _D9);
            }
          });
        }, function a(z) {
          try {
            return c(r.cancel(z));
          } catch (z) {
            return d(z);
          }
        }, 0), z;
      }(r.getReader()) : function (r) {
        var z;
        var D = fe(r, "async");
        return z = Cr(e, function a() {
          var r;
          try {
            r = be(D);
          } catch (r) {
            return d(r);
          }
          return _(c(r), r => {
            if (!t(r)) throw new TypeError("The promise returned by the iterator.next() method must fulfill with an object");
            if (r.done) dr(z._readableStreamController);else {
              var _D0 = r.value;
              fr(z._readableStreamController, _D0);
            }
          });
        }, function i(r) {
          var z = D.iterator;
          var te;
          try {
            te = ue(z, "return");
          } catch (r) {
            return d(r);
          }
          return undefined === te ? c(undefined) : _(g(te, z, [r]), r => {
            if (!t(r)) throw new TypeError("The promise returned by the iterator.return() method must fulfill with an object");
          });
        }, 0), z;
      }(r);
      var z;
    }
    function gr(r, z, D) {
      return F(r, D), D => g(r, z, [D]);
    }
    function vr(r, z, D) {
      return F(r, D), D => g(r, z, [D]);
    }
    function wr(r, z, D) {
      return F(r, D), D => S(r, z, [D]);
    }
    function Rr(r, z) {
      if ("bytes" != (r = `${r}`)) throw new TypeError(`${z} '${r}' is not a valid enumeration value for ReadableStreamType`);
      return r;
    }
    function Tr(r, z) {
      L(r, z);
      var D = null == r ? undefined : r.preventAbort,
        te = null == r ? undefined : r.preventCancel,
        re = null == r ? undefined : r.preventClose,
        oe = null == r ? undefined : r.signal;
      return undefined !== oe && function (r, z) {
        if (!function (r) {
          if ("object" != typeof r || null === r) return false;
          try {
            return "boolean" == typeof r.aborted;
          } catch (r) {
            return false;
          }
        }(r)) throw new TypeError(`${z} is not an AbortSignal.`);
      }(oe, `${z} has member 'signal' that`), {
        preventAbort: Boolean(D),
        preventCancel: Boolean(te),
        preventClose: Boolean(re),
        signal: oe
      };
    }
    Object.defineProperties(To.prototype, {
      close: {
        enumerable: true
      },
      enqueue: {
        enumerable: true
      },
      error: {
        enumerable: true
      },
      desiredSize: {
        enumerable: true
      }
    }), o(To.prototype.close, "close"), o(To.prototype.enqueue, "enqueue"), o(To.prototype.error, "error"), "symbol" == typeof Symbol.toStringTag && Object.defineProperty(To.prototype, Symbol.toStringTag, {
      value: "ReadableStreamDefaultController",
      configurable: true
    });
    var Co = function () {
      return _createClass(function ReadableStream() {
        var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var z = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        _classCallCheck(this, ReadableStream), undefined === r ? r = null : I(r, "First parameter");
        var D = dt(z, "Second parameter"),
          te = function (r, z) {
            L(r, z);
            var D = r,
              te = null == D ? undefined : D.autoAllocateChunkSize,
              re = null == D ? undefined : D.cancel,
              oe = null == D ? undefined : D.pull,
              de = null == D ? undefined : D.start,
              me = null == D ? undefined : D.type;
            return {
              autoAllocateChunkSize: undefined === te ? undefined : x(te, `${z} has member 'autoAllocateChunkSize' that`),
              cancel: undefined === re ? undefined : gr(re, D, `${z} has member 'cancel' that`),
              pull: undefined === oe ? undefined : vr(oe, D, `${z} has member 'pull' that`),
              start: undefined === de ? undefined : wr(de, D, `${z} has member 'start' that`),
              type: undefined === me ? undefined : Rr(me, `${z} has member 'type' that`)
            };
          }(r, "First parameter");
        if (qr(this), "bytes" === te.type) {
          if (undefined !== D.size) throw new RangeError("The strategy for a byte stream cannot have a size function");
          !function (r, z, D) {
            var te = Object.create(mo.prototype);
            var re, oe, de;
            re = undefined !== z.start ? () => z.start(te) : () => {}, oe = undefined !== z.pull ? () => z.pull(te) : () => c(undefined), de = undefined !== z.cancel ? r => z.cancel(r) : () => c(undefined);
            var me = z.autoAllocateChunkSize;
            if (0 === me) throw new TypeError("autoAllocateChunkSize must be greater than 0");
            Je(r, te, re, oe, de, D, me);
          }(this, te, ut(D, 0));
        } else {
          var _r5 = ct(D);
          !function (r, z, D, te) {
            var re = Object.create(To.prototype);
            var oe, de, me;
            oe = undefined !== z.start ? () => z.start(re) : () => {}, de = undefined !== z.pull ? () => z.pull(re) : () => c(undefined), me = undefined !== z.cancel ? r => z.cancel(r) : () => c(undefined), _r(r, re, oe, de, me, D, te);
          }(this, te, ut(D, 1), _r5);
        }
      }, [{
        key: "locked",
        get: function () {
          if (!Er(this)) throw kr("locked");
          return Wr(this);
        }
      }, {
        key: "cancel",
        value: function cancel() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          return Er(this) ? Wr(this) ? d(new TypeError("Cannot cancel a stream that already has a reader")) : Br(this, r) : d(kr("cancel"));
        }
      }, {
        key: "getReader",
        value: function getReader() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          if (!Er(this)) throw kr("getReader");
          return undefined === function (r, z) {
            L(r, z);
            var D = null == r ? undefined : r.mode;
            return {
              mode: undefined === D ? undefined : et(D, `${z} has member 'mode' that`)
            };
          }(r, "First parameter").mode ? H(this) : tt(this);
        }
      }, {
        key: "pipeThrough",
        value: function pipeThrough(r) {
          var z = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          if (!Er(this)) throw kr("pipeThrough");
          $(r, 1, "pipeThrough");
          var D = function (r, z) {
              L(r, z);
              var D = null == r ? undefined : r.readable;
              M(D, "readable", "ReadableWritablePair"), N(D, `${z} has member 'readable' that`);
              var te = null == r ? undefined : r.writable;
              return M(te, "writable", "ReadableWritablePair"), pt(te, `${z} has member 'writable' that`), {
                readable: D,
                writable: te
              };
            }(r, "First parameter"),
            te = Tr(z, "Second parameter");
          if (Wr(this)) throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
          if (vt(D.writable)) throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
          return p(ir(this, D.writable, te.preventClose, te.preventAbort, te.preventCancel, te.signal)), D.readable;
        }
      }, {
        key: "pipeTo",
        value: function pipeTo(r) {
          var z = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          if (!Er(this)) return d(kr("pipeTo"));
          if (undefined === r) return d("Parameter 1 is required in 'pipeTo'.");
          if (!gt(r)) return d(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));
          var D;
          try {
            D = Tr(z, "Second parameter");
          } catch (r) {
            return d(r);
          }
          return Wr(this) ? d(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")) : vt(r) ? d(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")) : ir(this, r, D.preventClose, D.preventAbort, D.preventCancel, D.signal);
        }
      }, {
        key: "tee",
        value: function tee() {
          if (!Er(this)) throw kr("tee");
          return ne(function yr(r, z) {
            return Te(r._readableStreamController) ? function (r) {
              var z,
                D,
                te,
                re,
                oe,
                de = H(r),
                me = false,
                ye = false,
                Dt = false,
                nr = false,
                ar = false;
              var no = u(r => {
                oe = r;
              });
              function _(r) {
                m(r._closedPromise, z => (r !== de || (Ne(te._readableStreamController, z), Ne(re._readableStreamController, z), nr && ar || oe(undefined)), null));
              }
              function p() {
                at(de) && (W(de), de = H(r), _(de)), K(de, {
                  _chunkSteps: z => {
                    y(() => {
                      ye = false, Dt = false;
                      var D = z;
                      var de = z;
                      if (!nr && !ar) try {
                        de = Se(z);
                      } catch (z) {
                        return Ne(te._readableStreamController, z), Ne(re._readableStreamController, z), void oe(Br(r, z));
                      }
                      nr || xe(te._readableStreamController, D), ar || xe(re._readableStreamController, de), me = false, ye ? g() : Dt && v();
                    });
                  },
                  _closeSteps: () => {
                    me = false, nr || Qe(te._readableStreamController), ar || Qe(re._readableStreamController), te._readableStreamController._pendingPullIntos.length > 0 && Ge(te._readableStreamController, 0), re._readableStreamController._pendingPullIntos.length > 0 && Ge(re._readableStreamController, 0), nr && ar || oe(undefined);
                  },
                  _errorSteps: () => {
                    me = false;
                  }
                });
              }
              function S(z, D) {
                J(de) && (W(de), de = tt(r), _(de));
                var no = D ? re : te,
                  io = D ? te : re;
                it(de, z, 1, {
                  _chunkSteps: z => {
                    y(() => {
                      ye = false, Dt = false;
                      var te = D ? ar : nr;
                      if (D ? nr : ar) te || Xe(no._readableStreamController, z);else {
                        var _D1;
                        try {
                          _D1 = Se(z);
                        } catch (z) {
                          return Ne(no._readableStreamController, z), Ne(io._readableStreamController, z), void oe(Br(r, z));
                        }
                        te || Xe(no._readableStreamController, z), xe(io._readableStreamController, _D1);
                      }
                      me = false, ye ? g() : Dt && v();
                    });
                  },
                  _closeSteps: r => {
                    me = false;
                    var z = D ? ar : nr,
                      te = D ? nr : ar;
                    z || Qe(no._readableStreamController), te || Qe(io._readableStreamController), undefined !== r && (z || Xe(no._readableStreamController, r), !te && io._readableStreamController._pendingPullIntos.length > 0 && Ge(io._readableStreamController, 0)), z && te || oe(undefined);
                  },
                  _errorSteps: () => {
                    me = false;
                  }
                });
              }
              function g() {
                if (me) return ye = true, c(undefined);
                me = true;
                var r = Ve(te._readableStreamController);
                return null === r ? p() : S(r._view, false), c(undefined);
              }
              function v() {
                if (me) return Dt = true, c(undefined);
                me = true;
                var r = Ve(re._readableStreamController);
                return null === r ? p() : S(r._view, true), c(undefined);
              }
              function T() {}
              return te = Pr(T, g, function w(te) {
                if (nr = true, z = te, ar) {
                  var _te6 = ne([z, D]),
                    _re2 = Br(r, _te6);
                  oe(_re2);
                }
                return no;
              }), re = Pr(T, v, function R(te) {
                if (ar = true, D = te, nr) {
                  var _te7 = ne([z, D]),
                    _re3 = Br(r, _te7);
                  oe(_re3);
                }
                return no;
              }), _(de), [te, re];
            }(r) : function (r, z) {
              var D = H(r);
              var te,
                re,
                oe,
                de,
                me,
                ye = false,
                Dt = false,
                nr = false,
                ar = false;
              var no = u(r => {
                me = r;
              });
              function _() {
                return ye ? (Dt = true, c(undefined)) : (ye = true, K(D, {
                  _chunkSteps: r => {
                    y(() => {
                      Dt = false;
                      var z = r,
                        D = r;
                      nr || fr(oe._readableStreamController, z), ar || fr(de._readableStreamController, D), ye = false, Dt && _();
                    });
                  },
                  _closeSteps: () => {
                    ye = false, nr || dr(oe._readableStreamController), ar || dr(de._readableStreamController), nr && ar || me(undefined);
                  },
                  _errorSteps: () => {
                    ye = false;
                  }
                }), c(undefined));
              }
              function g() {}
              return oe = Cr(g, _, function p(z) {
                if (nr = true, te = z, ar) {
                  var _z13 = ne([te, re]),
                    _D10 = Br(r, _z13);
                  me(_D10);
                }
                return no;
              }), de = Cr(g, _, function S(z) {
                if (ar = true, re = z, nr) {
                  var _z14 = ne([te, re]),
                    _D11 = Br(r, _z14);
                  me(_D11);
                }
                return no;
              }), m(D._closedPromise, r => (br(oe._readableStreamController, r), br(de._readableStreamController, r), nr && ar || me(undefined), null)), [oe, de];
            }(r);
          }(this));
        }
      }, {
        key: "values",
        value: function values() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          if (!Er(this)) throw kr("values");
          return function (r, z) {
            var D = H(r),
              te = new fo(D, z),
              re = Object.create(ho);
            return re._asyncIteratorImpl = te, re;
          }(this, function (r, z) {
            L(r, "First parameter");
            var D = null == r ? undefined : r.preventCancel;
            return {
              preventCancel: Boolean(D)
            };
          }(r).preventCancel);
        }
      }, {
        key: co,
        value: function (r) {
          return this.values(r);
        }
      }], [{
        key: "from",
        value: function from(r) {
          return Sr(r);
        }
      }]);
    }();
    function Cr(r, z, D) {
      var te = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      var re = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : () => 1;
      var oe = Object.create(Co.prototype);
      return qr(oe), _r(oe, Object.create(To.prototype), r, z, D, te, re), oe;
    }
    function Pr(r, z, D) {
      var te = Object.create(Co.prototype);
      return qr(te), Je(te, Object.create(mo.prototype), r, z, D, 0, undefined), te;
    }
    function qr(r) {
      r._state = "readable", r._reader = undefined, r._storedError = undefined, r._disturbed = false;
    }
    function Er(r) {
      return !!t(r) && !!Object.prototype.hasOwnProperty.call(r, "_readableStreamController") && r instanceof Co;
    }
    function Wr(r) {
      return undefined !== r._reader;
    }
    function Br(r, z) {
      if (r._disturbed = true, "closed" === r._state) return c(undefined);
      if ("errored" === r._state) return d(r._storedError);
      Or(r);
      var D = r._reader;
      if (undefined !== D && at(D)) {
        var _r6 = D._readIntoRequests;
        D._readIntoRequests = new de(), _r6.forEach(r => {
          r._closeSteps(undefined);
        });
      }
      return _(r._readableStreamController[Dt](z), e);
    }
    function Or(r) {
      r._state = "closed";
      var z = r._reader;
      if (undefined !== z && (A(z), J(z))) {
        var _r7 = z._readRequests;
        z._readRequests = new de(), _r7.forEach(r => {
          r._closeSteps();
        });
      }
    }
    function jr(r, z) {
      r._state = "errored", r._storedError = z;
      var D = r._reader;
      undefined !== D && (k(D, z), J(D) ? Z(D, z) : lt(D, z));
    }
    function kr(r) {
      return new TypeError(`ReadableStream.prototype.${r} can only be used on a ReadableStream`);
    }
    function Ar(r, z) {
      L(r, z);
      var D = null == r ? undefined : r.highWaterMark;
      return M(D, "highWaterMark", "QueuingStrategyInit"), {
        highWaterMark: Y(D)
      };
    }
    Object.defineProperties(Co, {
      from: {
        enumerable: true
      }
    }), Object.defineProperties(Co.prototype, {
      cancel: {
        enumerable: true
      },
      getReader: {
        enumerable: true
      },
      pipeThrough: {
        enumerable: true
      },
      pipeTo: {
        enumerable: true
      },
      tee: {
        enumerable: true
      },
      values: {
        enumerable: true
      },
      locked: {
        enumerable: true
      }
    }), o(Co.from, "from"), o(Co.prototype.cancel, "cancel"), o(Co.prototype.getReader, "getReader"), o(Co.prototype.pipeThrough, "pipeThrough"), o(Co.prototype.pipeTo, "pipeTo"), o(Co.prototype.tee, "tee"), o(Co.prototype.values, "values"), "symbol" == typeof Symbol.toStringTag && Object.defineProperty(Co.prototype, Symbol.toStringTag, {
      value: "ReadableStream",
      configurable: true
    }), Object.defineProperty(Co.prototype, co, {
      value: Co.prototype.values,
      writable: true,
      configurable: true
    });
    var zr = r => r.byteLength;
    o(zr, "size");
    var Po = function () {
      return _createClass(function ByteLengthQueuingStrategy(r) {
        _classCallCheck(this, ByteLengthQueuingStrategy), $(r, 1, "ByteLengthQueuingStrategy"), r = Ar(r, "First parameter"), this._byteLengthQueuingStrategyHighWaterMark = r.highWaterMark;
      }, [{
        key: "highWaterMark",
        get: function () {
          if (!Lr(this)) throw Dr("highWaterMark");
          return this._byteLengthQueuingStrategyHighWaterMark;
        }
      }, {
        key: "size",
        get: function () {
          if (!Lr(this)) throw Dr("size");
          return zr;
        }
      }]);
    }();
    function Dr(r) {
      return new TypeError(`ByteLengthQueuingStrategy.prototype.${r} can only be used on a ByteLengthQueuingStrategy`);
    }
    function Lr(r) {
      return !!t(r) && !!Object.prototype.hasOwnProperty.call(r, "_byteLengthQueuingStrategyHighWaterMark") && r instanceof Po;
    }
    Object.defineProperties(Po.prototype, {
      highWaterMark: {
        enumerable: true
      },
      size: {
        enumerable: true
      }
    }), "symbol" == typeof Symbol.toStringTag && Object.defineProperty(Po.prototype, Symbol.toStringTag, {
      value: "ByteLengthQueuingStrategy",
      configurable: true
    });
    var Fr = () => 1;
    o(Fr, "size");
    var ko = function () {
      return _createClass(function CountQueuingStrategy(r) {
        _classCallCheck(this, CountQueuingStrategy), $(r, 1, "CountQueuingStrategy"), r = Ar(r, "First parameter"), this._countQueuingStrategyHighWaterMark = r.highWaterMark;
      }, [{
        key: "highWaterMark",
        get: function () {
          if (!$r(this)) throw Ir("highWaterMark");
          return this._countQueuingStrategyHighWaterMark;
        }
      }, {
        key: "size",
        get: function () {
          if (!$r(this)) throw Ir("size");
          return Fr;
        }
      }]);
    }();
    function Ir(r) {
      return new TypeError(`CountQueuingStrategy.prototype.${r} can only be used on a CountQueuingStrategy`);
    }
    function $r(r) {
      return !!t(r) && !!Object.prototype.hasOwnProperty.call(r, "_countQueuingStrategyHighWaterMark") && r instanceof ko;
    }
    function Mr(r, z, D) {
      return F(r, D), D => g(r, z, [D]);
    }
    function Yr(r, z, D) {
      return F(r, D), D => S(r, z, [D]);
    }
    function Qr(r, z, D) {
      return F(r, D), (D, te) => g(r, z, [D, te]);
    }
    function xr(r, z, D) {
      return F(r, D), D => g(r, z, [D]);
    }
    Object.defineProperties(ko.prototype, {
      highWaterMark: {
        enumerable: true
      },
      size: {
        enumerable: true
      }
    }), "symbol" == typeof Symbol.toStringTag && Object.defineProperty(ko.prototype, Symbol.toStringTag, {
      value: "CountQueuingStrategy",
      configurable: true
    });
    var qo = function () {
      return _createClass(function TransformStream() {
        var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var z = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var D = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        _classCallCheck(this, TransformStream), undefined === r && (r = null);
        var te = dt(z, "Second parameter"),
          re = dt(D, "Third parameter"),
          oe = function (r, z) {
            L(r, z);
            var D = null == r ? undefined : r.cancel,
              te = null == r ? undefined : r.flush,
              re = null == r ? undefined : r.readableType,
              oe = null == r ? undefined : r.start,
              de = null == r ? undefined : r.transform,
              me = null == r ? undefined : r.writableType;
            return {
              cancel: undefined === D ? undefined : xr(D, r, `${z} has member 'cancel' that`),
              flush: undefined === te ? undefined : Mr(te, r, `${z} has member 'flush' that`),
              readableType: re,
              start: undefined === oe ? undefined : Yr(oe, r, `${z} has member 'start' that`),
              transform: undefined === de ? undefined : Qr(de, r, `${z} has member 'transform' that`),
              writableType: me
            };
          }(r, "First parameter");
        if (undefined !== oe.readableType) throw new RangeError("Invalid readableType specified");
        if (undefined !== oe.writableType) throw new RangeError("Invalid writableType specified");
        var de = ut(re, 0),
          me = ct(re),
          ye = ut(te, 1),
          Dt = ct(te);
        var nr;
        !function (r, z, D, te, re, oe) {
          function i() {
            return z;
          }
          r._writable = function (r, z, D, te) {
            var re = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
            var oe = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : () => 1;
            var de = Object.create(yo.prototype);
            return St(de), Ft(de, Object.create(So.prototype), r, z, D, te, re, oe), de;
          }(i, function l(z) {
            return function (r, z) {
              var D = r._transformStreamController;
              return r._backpressure ? _(r._backpressureChangePromise, () => {
                var te = r._writable;
                if ("erroring" === te._state) throw te._storedError;
                return Zr(D, z);
              }) : Zr(D, z);
            }(r, z);
          }, function c() {
            return function (r) {
              var z = r._transformStreamController;
              if (undefined !== z._finishPromise) return z._finishPromise;
              var D = r._readable;
              z._finishPromise = u((r, D) => {
                z._finishPromise_resolve = r, z._finishPromise_reject = D;
              });
              var te = z._flushAlgorithm();
              return Jr(z), b(te, () => ("errored" === D._state ? ro(z, D._storedError) : (dr(D._readableStreamController), to(z)), null), r => (br(D._readableStreamController, r), ro(z, r), null)), z._finishPromise;
            }(r);
          }, function s(z) {
            return function (r, z) {
              var D = r._transformStreamController;
              if (undefined !== D._finishPromise) return D._finishPromise;
              var te = r._readable;
              D._finishPromise = u((r, z) => {
                D._finishPromise_resolve = r, D._finishPromise_reject = z;
              });
              var re = D._cancelAlgorithm(z);
              return Jr(D), b(re, () => ("errored" === te._state ? ro(D, te._storedError) : (br(te._readableStreamController, z), to(D)), null), r => (br(te._readableStreamController, r), ro(D, r), null)), D._finishPromise;
            }(r, z);
          }, D, te), r._readable = Cr(i, function d() {
            return function (r) {
              return Gr(r, false), r._backpressureChangePromise;
            }(r);
          }, function f(z) {
            return function (r, z) {
              var D = r._transformStreamController;
              if (undefined !== D._finishPromise) return D._finishPromise;
              var te = r._writable;
              D._finishPromise = u((r, z) => {
                D._finishPromise_resolve = r, D._finishPromise_reject = z;
              });
              var re = D._cancelAlgorithm(z);
              return Jr(D), b(re, () => ("errored" === te._state ? ro(D, te._storedError) : (Yt(te._writableStreamController, z), Ur(r), to(D)), null), z => (Yt(te._writableStreamController, z), Ur(r), ro(D, z), null)), D._finishPromise;
            }(r, z);
          }, re, oe), r._backpressure = undefined, r._backpressureChangePromise = undefined, r._backpressureChangePromise_resolve = undefined, Gr(r, true), r._transformStreamController = undefined;
        }(this, u(r => {
          nr = r;
        }), ye, Dt, de, me), function (r, z) {
          var D = Object.create(Eo.prototype);
          var te, re, oe;
          te = undefined !== z.transform ? r => z.transform(r, D) : r => {
            try {
              return Kr(D, r), c(undefined);
            } catch (r) {
              return d(r);
            }
          }, re = undefined !== z.flush ? () => z.flush(D) : () => c(undefined), oe = undefined !== z.cancel ? r => z.cancel(r) : () => c(undefined), function (r, z, D, te, re) {
            z._controlledTransformStream = r, r._transformStreamController = z, z._transformAlgorithm = D, z._flushAlgorithm = te, z._cancelAlgorithm = re, z._finishPromise = undefined, z._finishPromise_resolve = undefined, z._finishPromise_reject = undefined;
          }(r, D, te, re, oe);
        }(this, oe), undefined !== oe.start ? nr(oe.start(this._transformStreamController)) : nr(undefined);
      }, [{
        key: "readable",
        get: function () {
          if (!Nr(this)) throw oo("readable");
          return this._readable;
        }
      }, {
        key: "writable",
        get: function () {
          if (!Nr(this)) throw oo("writable");
          return this._writable;
        }
      }]);
    }();
    function Nr(r) {
      return !!t(r) && !!Object.prototype.hasOwnProperty.call(r, "_transformStreamController") && r instanceof qo;
    }
    function Hr(r, z) {
      br(r._readable._readableStreamController, z), Vr(r, z);
    }
    function Vr(r, z) {
      Jr(r._transformStreamController), Yt(r._writable._writableStreamController, z), Ur(r);
    }
    function Ur(r) {
      r._backpressure && Gr(r, false);
    }
    function Gr(r, z) {
      undefined !== r._backpressureChangePromise && r._backpressureChangePromise_resolve(), r._backpressureChangePromise = u(z => {
        r._backpressureChangePromise_resolve = z;
      }), r._backpressure = z;
    }
    Object.defineProperties(qo.prototype, {
      readable: {
        enumerable: true
      },
      writable: {
        enumerable: true
      }
    }), "symbol" == typeof Symbol.toStringTag && Object.defineProperty(qo.prototype, Symbol.toStringTag, {
      value: "TransformStream",
      configurable: true
    });
    var Eo = function () {
      return _createClass(function TransformStreamDefaultController() {
        throw _classCallCheck(this, TransformStreamDefaultController), new TypeError("Illegal constructor");
      }, [{
        key: "desiredSize",
        get: function () {
          if (!Xr(this)) throw eo("desiredSize");
          return hr(this._controlledTransformStream._readable._readableStreamController);
        }
      }, {
        key: "enqueue",
        value: function enqueue() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          if (!Xr(this)) throw eo("enqueue");
          Kr(this, r);
        }
      }, {
        key: "error",
        value: function error() {
          var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
          if (!Xr(this)) throw eo("error");
          var z;
          z = r, Hr(this._controlledTransformStream, z);
        }
      }, {
        key: "terminate",
        value: function terminate() {
          if (!Xr(this)) throw eo("terminate");
          !function (r) {
            var z = r._controlledTransformStream;
            dr(z._readable._readableStreamController);
            Vr(z, new TypeError("TransformStream terminated"));
          }(this);
        }
      }]);
    }();
    function Xr(r) {
      return !!t(r) && !!Object.prototype.hasOwnProperty.call(r, "_controlledTransformStream") && r instanceof Eo;
    }
    function Jr(r) {
      r._transformAlgorithm = undefined, r._flushAlgorithm = undefined, r._cancelAlgorithm = undefined;
    }
    function Kr(r, z) {
      var D = r._controlledTransformStream,
        te = D._readable._readableStreamController;
      if (!mr(te)) throw new TypeError("Readable side is not in a state that permits enqueue");
      try {
        fr(te, z);
      } catch (r) {
        throw Vr(D, r), D._readable._storedError;
      }
      var re = function (r) {
        return !ur(r);
      }(te);
      re !== D._backpressure && Gr(D, true);
    }
    function Zr(r, z) {
      return _(r._transformAlgorithm(z), undefined, z => {
        throw Hr(r._controlledTransformStream, z), z;
      });
    }
    function eo(r) {
      return new TypeError(`TransformStreamDefaultController.prototype.${r} can only be used on a TransformStreamDefaultController`);
    }
    function to(r) {
      undefined !== r._finishPromise_resolve && (r._finishPromise_resolve(), r._finishPromise_resolve = undefined, r._finishPromise_reject = undefined);
    }
    function ro(r, z) {
      undefined !== r._finishPromise_reject && (p(r._finishPromise), r._finishPromise_reject(z), r._finishPromise_resolve = undefined, r._finishPromise_reject = undefined);
    }
    function oo(r) {
      return new TypeError(`TransformStream.prototype.${r} can only be used on a TransformStream`);
    }
    Object.defineProperties(Eo.prototype, {
      enqueue: {
        enumerable: true
      },
      error: {
        enumerable: true
      },
      terminate: {
        enumerable: true
      },
      desiredSize: {
        enumerable: true
      }
    }), o(Eo.prototype.enqueue, "enqueue"), o(Eo.prototype.error, "error"), o(Eo.prototype.terminate, "terminate"), "symbol" == typeof Symbol.toStringTag && Object.defineProperty(Eo.prototype, Symbol.toStringTag, {
      value: "TransformStreamDefaultController",
      configurable: true
    });
    var Wo = {
      ReadableStream: Co,
      ReadableStreamDefaultController: To,
      ReadableByteStreamController: mo,
      ReadableStreamBYOBRequest: _o,
      ReadableStreamDefaultReader: ao,
      ReadableStreamBYOBReader: po,
      WritableStream: yo,
      WritableStreamDefaultController: So,
      WritableStreamDefaultWriter: vo,
      ByteLengthQueuingStrategy: Po,
      CountQueuingStrategy: ko,
      TransformStream: qo,
      TransformStreamDefaultController: Eo
    };
    for (var _r8 in Wo) Object.prototype.hasOwnProperty.call(Wo, _r8) && Object.defineProperty(wo, _r8, {
      value: Wo[_r8],
      writable: true,
      configurable: true
    });
  }();
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _expo = require(_dependencyMap[1]);
  var _App = _interopRequireDefault(require(_dependencyMap[2]));
  // registerRootComponent calls AppRegistry.registerComponent('main', () => App);
  // It also ensures that whether you load the app in Expo Go or in a native build,
  // the environment is set up appropriately
  (0, _expo.registerRootComponent)(_App.default);
},0,[1,2,564]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _interopRequireDefault(e) {
    return e && e.__esModule ? e : {
      "default": e
    };
  }
  module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
},1,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "EventEmitter", {
    enumerable: true,
    get: function () {
      return _expoModulesCore.EventEmitter;
    }
  });
  Object.defineProperty(exports, "NativeModule", {
    enumerable: true,
    get: function () {
      return _expoModulesCore.NativeModule;
    }
  });
  Object.defineProperty(exports, "SharedObject", {
    enumerable: true,
    get: function () {
      return _expoModulesCore.SharedObject;
    }
  });
  Object.defineProperty(exports, "SharedRef", {
    enumerable: true,
    get: function () {
      return _expoModulesCore.SharedRef;
    }
  });
  Object.defineProperty(exports, "disableErrorHandling", {
    enumerable: true,
    get: function () {
      return _ExpoErrorManager.disableErrorHandling;
    }
  });
  Object.defineProperty(exports, "getExpoGoProjectConfig", {
    enumerable: true,
    get: function () {
      return _ExpoGo.getExpoGoProjectConfig;
    }
  });
  Object.defineProperty(exports, "isRunningInExpoGo", {
    enumerable: true,
    get: function () {
      return _ExpoGo.isRunningInExpoGo;
    }
  });
  Object.defineProperty(exports, "registerRootComponent", {
    enumerable: true,
    get: function () {
      return _registerRootComponent.default;
    }
  });
  Object.defineProperty(exports, "registerWebModule", {
    enumerable: true,
    get: function () {
      return _expoModulesCore.registerWebModule;
    }
  });
  Object.defineProperty(exports, "reloadAppAsync", {
    enumerable: true,
    get: function () {
      return _expoModulesCore.reloadAppAsync;
    }
  });
  Object.defineProperty(exports, "requireNativeModule", {
    enumerable: true,
    get: function () {
      return _expoModulesCore.requireNativeModule;
    }
  });
  Object.defineProperty(exports, "requireNativeView", {
    enumerable: true,
    get: function () {
      return _expoModulesCore.requireNativeViewManager;
    }
  });
  Object.defineProperty(exports, "requireOptionalNativeModule", {
    enumerable: true,
    get: function () {
      return _expoModulesCore.requireOptionalNativeModule;
    }
  });
  Object.defineProperty(exports, "useEvent", {
    enumerable: true,
    get: function () {
      return _useEvent.useEvent;
    }
  });
  Object.defineProperty(exports, "useEventListener", {
    enumerable: true,
    get: function () {
      return _useEvent.useEventListener;
    }
  });
  require(_dependencyMap[1]);
  var _ExpoErrorManager = require(_dependencyMap[2]);
  var _registerRootComponent = _interopRequireDefault(require(_dependencyMap[3]));
  var _ExpoGo = require(_dependencyMap[4]);
  var _expoModulesCore = require(_dependencyMap[5]);
  var _useEvent = require(_dependencyMap[6]);
},2,[1,3,561,562,559,56,563]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  require(_dependencyMap[1]);
  require(_dependencyMap[2]);
  require(_dependencyMap[3]);
  var _expoConstants = _interopRequireDefault(require(_dependencyMap[4]));
  var _reactNative = require(_dependencyMap[5]);
  var _ExpoGo = require(_dependencyMap[6]);
  var _AppEntryNotFound = require(_dependencyMap[7]);
  var _ExpoErrorManager = require(_dependencyMap[8]);
  // load expo-asset immediately to set a custom `source` transformer in React Native

  if ((0, _ExpoGo.isRunningInExpoGo)()) {
    // set up some improvements to commonly logged error messages stemming from react-native
    var globalHandler = ErrorUtils.getGlobalHandler();
    ErrorUtils.setGlobalHandler((0, _ExpoErrorManager.createErrorHandler)(globalHandler));
  }

  // Warn if the New Architecture is not explicitly enabled in the app config and we are running in Expo Go.
  // This could be problematic because you will be developing your app with the New Architecture enabled and
  // but your builds will have the New Architecture disabled.

  // Disable the "Open debugger to view warnings" React Native DevTools warning in
  // Expo Go and expo-dev-client, because launching the debugger from there will not
  // get the correct JS target.
  var IS_RUNNING_IN_DEV_CLIENT = !!_reactNative.NativeModules.EXDevLauncher;
},3,[1,4,51,558,549,60,559,560,561]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  require(_dependencyMap[0]);
},4,[5]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _PolyfillFunctions = require(_dependencyMap[0]);
  var _FormData = require(_dependencyMap[1]);
  // This file configures the runtime environment to increase compatibility with WinterCG.
  // https://wintercg.org/

  // @ts-ignore: PolyfillFunctions does not have types exported

  // Add a well-known shared symbol that doesn't show up in iteration or inspection
  // this can be used to detect if the global object abides by the Expo team's documented
  // built-in requirements.
  var BUILTIN_SYMBOL = Symbol.for('expo.builtin');
  function addBuiltinSymbol(obj) {
    Object.defineProperty(obj, BUILTIN_SYMBOL, {
      value: true,
      enumerable: false,
      configurable: false
    });
    return obj;
  }
  function install(name, getValue) {
    (0, _PolyfillFunctions.polyfillGlobal)(name, () => addBuiltinSymbol(getValue()));
  }

  // https://encoding.spec.whatwg.org/#textdecoder
  install('TextDecoder', () => require(_dependencyMap[2]).TextDecoder);
  // https://url.spec.whatwg.org/#url
  install('URL', () => require(_dependencyMap[3]).URL);
  // https://url.spec.whatwg.org/#urlsearchparams
  install('URLSearchParams', () => require(_dependencyMap[3]).URLSearchParams);
  // https://streams.spec.whatwg.org/#rs
  // ReadableStream is injected by Metro as a global

  install('__ExpoImportMetaRegistry', () => require(_dependencyMap[4]).ImportMetaRegistry);
  (0, _FormData.installFormDataPatch)(FormData);

  // Polyfill async iterator symbol for Hermes.
  // @ts-expect-error: readonly property only applies when the engine supports it
  Symbol.asyncIterator ??= Symbol.for('Symbol.asyncIterator');
},5,[6,8,9,15,37]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.polyfillGlobal = polyfillGlobal;
  exports.polyfillObjectProperty = polyfillObjectProperty;
  var defineLazyObjectProperty = require(_dependencyMap[0]).default;
  function polyfillObjectProperty(object, name, getValue) {
    var descriptor = Object.getOwnPropertyDescriptor(object, name);
    var _ref = descriptor || {},
      enumerable = _ref.enumerable,
      writable = _ref.writable,
      _ref$configurable = _ref.configurable,
      configurable = _ref$configurable === undefined ? false : _ref$configurable;
    if (descriptor && !configurable) {
      console.error('Failed to set polyfill. ' + name + ' is not configurable.');
      return;
    }
    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }
  function polyfillGlobal(name, getValue) {
    polyfillObjectProperty(global, name, getValue);
  }
},6,[7]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  function defineLazyObjectProperty(object, name, descriptor) {
    var get = descriptor.get;
    var enumerable = descriptor.enumerable !== false;
    var writable = descriptor.writable !== false;
    var value;
    var valueSet = false;
    function getValue() {
      if (!valueSet) {
        valueSet = true;
        setValue(get());
      }
      return value;
    }
    function setValue(newValue) {
      value = newValue;
      valueSet = true;
      Object.defineProperty(object, name, {
        value: newValue,
        configurable: true,
        enumerable,
        writable
      });
    }
    Object.defineProperty(object, name, {
      get: getValue,
      set: setValue,
      configurable: true,
      enumerable
    });
  }
  var _default = exports.default = defineLazyObjectProperty;
},7,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.installFormDataPatch = installFormDataPatch;
  // React Native's FormData implementation is missing several methods that are used in React for server actions.
  // https://github.com/facebook/react-native/blob/42dcfdd2cdb59fe545523cb57db6ee32a96b9298/packages/react-native/Libraries/Network/FormData.js#L1
  // https://github.com/facebook/react/blob/985747f81033833dca22f30b0c04704dd4bd3714/packages/react-client/src/ReactFlightReplyClient.js#L212

  function ensureMinArgCount(name, args, expected) {
    if (args.length < expected) {
      var argName = expected === 2 ? 'arguments' : 'argument';
      // Matches the errors in Chrome.
      throw new TypeError(`Failed to execute '${name}' on 'FormData': ${expected} ${argName} required, but only ${args.length} present.`);
    }
  }
  function normalizeArgs(name, value, blobFilename) {
    if (value instanceof Blob) {
      // @ts-expect-error: `Blob.data.blobId` is react-native's proprietary property.
      if (value.data?.blobId != null) {
        // For react-native created Blob objects,
        // we need to keep its original form as-is without breaking functionality.
        // However, we need to pass `name` for our file name handling.
        // @ts-expect-error: Mutating the Blob object to add the `name` property.
        value.name = blobFilename ?? 'blob';
      } else {
        value = {
          type: value.type,
          name: blobFilename ?? 'blob',
          blob: value
        };
      }
    } else if (typeof value !== 'object') {
      value = String(value);
    }
    return [String(name), value];
  }
  function installFormDataPatch(formData) {
    formData.prototype.append = function append() {
      for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {
        props[_key] = arguments[_key];
      }
      ensureMinArgCount('append', props, 2);
      // @ts-ignore: When inferred FormData.append from React Native types, it does not support the 3rd blobFilename argument.
      var name = props[0],
        value = props[1],
        blobFilename = props[2];
      this._parts.push(normalizeArgs(name, value, blobFilename));
    };

    // @ts-ignore: DOM.iterable is disabled for jest compat
    formData.prototype.set = function set() {
      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        props[_key2] = arguments[_key2];
      }
      ensureMinArgCount('set', props, 2);
      var name = props[0],
        value = props[1],
        blobFilename = props[2];
      var args = normalizeArgs(name, value, blobFilename);
      var replaced = false;
      for (var i = 0; i < this._parts.length; i++) {
        if (this._parts[i][0] === args[0]) {
          if (!replaced) {
            this._parts[i] = args;
            replaced = true;
          } else {
            this._parts.splice(i, 1);
            i--;
          }
        }
      }
      if (!replaced) {
        this._parts.push(args);
      }
    };

    // @ts-ignore: DOM.iterable is disabled for jest compat
    formData.prototype.delete ??= function () {
      for (var _len3 = arguments.length, props = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        props[_key3] = arguments[_key3];
      }
      ensureMinArgCount('delete', props, 1);
      var name = props[0];
      name = String(name);
      for (var i = 0; i < this._parts.length; i++) {
        if (this._parts[i][0] === name) {
          this._parts.splice(i, 1);
          i--;
        }
      }
    };

    // @ts-ignore: DOM.iterable is disabled for jest compat
    formData.prototype.get ??= function () {
      for (var _len4 = arguments.length, props = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        props[_key4] = arguments[_key4];
      }
      ensureMinArgCount('get', props, 1);
      var name = props[0];
      name = String(name);
      for (var part of this._parts) {
        if (part[0] === name) {
          // @ts-expect-error: We don't perform correct normalization when setting the args so the return value will
          // not be a normalized File object.
          return part[1];
        }
      }
      return null;
    };

    // @ts-ignore: DOM.iterable is disabled for jest compat
    formData.prototype.has ??= function () {
      for (var _len5 = arguments.length, props = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        props[_key5] = arguments[_key5];
      }
      ensureMinArgCount('has', props, 1);
      var name = props[0];
      name = String(name);
      for (var part of this._parts) {
        if (part[0] === name) {
          return true;
        }
      }
      return false;
    };

    // Required for RSC: https://github.com/facebook/react/blob/985747f81033833dca22f30b0c04704dd4bd3714/packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js#L1056
    // @ts-ignore: DOM.iterable is disabled for jest compat
    formData.prototype.forEach ??= function forEach() {
      for (var _len6 = arguments.length, props = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        props[_key6] = arguments[_key6];
      }
      ensureMinArgCount('forEach', props, 1);
      var callback = props[0],
        thisArg = props[1];
      if (typeof callback !== 'function') {
        throw new TypeError(`Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.`);
      }
      for (var part of this._parts) {
        // @ts-ignore: part[1] could throw an error in Node.js runtime because of `File` type mismatch.
        callback.call(thisArg, part[1], part[0], this);
      }
    };

    // Required for RSC: https://github.com/facebook/react/blob/985747f81033833dca22f30b0c04704dd4bd3714/packages/react-server/src/ReactFlightServer.js#L2117
    // @ts-ignore: DOM.iterable is disabled for jest compat
    formData.prototype.entries ??= function* entries() {
      for (var part of this._parts) {
        // @ts-expect-error: We don't perform correct normalization when setting the args so the return value will
        // not be a normalized File object.
        yield part;
      }
    };

    // @ts-ignore: DOM.iterable is disabled for jest compat
    formData.prototype.keys ??= function* keys() {
      for (var part of this._parts) {
        yield part[0];
      }
    };

    // @ts-ignore: DOM.iterable is disabled for jest compat
    formData.prototype.values ??= function* values() {
      for (var part of this._parts) {
        // @ts-expect-error: We don't perform correct normalization when setting the args so the return value will
        // not be a normalized File object.
        yield part[1];
      }
    };

    // @ts-ignore: DOM.iterable is disabled for jest compat
    formData.prototype[Symbol.iterator] = formData.prototype.entries;
    return formData;
  }
},8,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TextDecoder = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  // A fork of text-encoding but with only UTF-8 decoder.
  // `TextEncoder` is in Hermes and we only need utf-8 decoder for React Server Components.
  //
  // https://github.com/inexorabletash/text-encoding/blob/3f330964c0e97e1ed344c2a3e963f4598610a7ad/lib/encoding.js#L1

  /**
   * Checks if a number is within a specified range.
   * @param a The number to test.
   * @param min The minimum value in the range, inclusive.
   * @param max The maximum value in the range, inclusive.
   * @returns `true` if a passed number is within the specified range.
   */
  function inRange(a, min, max) {
    return min <= a && a <= max;
  }

  /**
   * Converts an array of code points to a string.
   * @param codePoints Array of code points.
   * @returns The string representation of given array.
   */
  function codePointsToString(codePoints) {
    var s = '';
    for (var i = 0; i < codePoints.length; ++i) {
      var cp = codePoints[i];
      if (cp <= 0xffff) {
        s += String.fromCharCode(cp);
      } else {
        cp -= 0x10000;
        s += String.fromCharCode((cp >> 10) + 0xd800, (cp & 0x3ff) + 0xdc00);
      }
    }
    return s;
  }
  function normalizeBytes(input) {
    if (typeof input === 'object' && input instanceof ArrayBuffer) {
      return new Uint8Array(input);
    } else if (typeof input === 'object' && 'buffer' in input && input.buffer instanceof ArrayBuffer) {
      return new Uint8Array(input.buffer, input.byteOffset, input.byteLength);
    }
    return new Uint8Array(0);
  }

  /**
   * End-of-stream is a special token that signifies no more tokens
   * are in the stream.
   */
  var END_OF_STREAM = -1;
  var FINISHED = -1;

  /**
   * A stream represents an ordered sequence of tokens.
   *
   * @constructor
   * @param {!(number[]|Uint8Array)} tokens Array of tokens that provide the stream.
   */
  var Stream = /*#__PURE__*/function () {
    function Stream(tokens) {
      (0, _classCallCheck2.default)(this, Stream);
      this.tokens = Array.prototype.slice.call(tokens);
      // Reversed as push/pop is more efficient than shift/unshift.
      this.tokens.reverse();
    }

    /**
     * @return {boolean} True if end-of-stream has been hit.
     */
    return (0, _createClass2.default)(Stream, [{
      key: "endOfStream",
      value: function endOfStream() {
        return !this.tokens.length;
      }

      /**
       * When a token is read from a stream, the first token in the
       * stream must be returned and subsequently removed, and
       * end-of-stream must be returned otherwise.
       *
       * @return {number} Get the next token from the stream, or
       * end_of_stream.
       */
    }, {
      key: "read",
      value: function read() {
        if (!this.tokens.length) return END_OF_STREAM;
        return this.tokens.pop();
      }

      /**
       * When one or more tokens are prepended to a stream, those tokens
       * must be inserted, in given order, before the first token in the
       * stream.
       *
       * @param token The token(s) to prepend to the stream.
       */
    }, {
      key: "prepend",
      value: function prepend(token) {
        if (Array.isArray(token)) {
          while (token.length) this.tokens.push(token.pop());
        } else {
          this.tokens.push(token);
        }
      }

      /**
       * When one or more tokens are pushed to a stream, those tokens
       * must be inserted, in given order, after the last token in the
       * stream.
       *
       * @param token The tokens(s) to push to the stream.
       */
    }, {
      key: "push",
      value: function push(token) {
        if (Array.isArray(token)) {
          while (token.length) this.tokens.unshift(token.shift());
        } else {
          this.tokens.unshift(token);
        }
      }
    }]);
  }();
  function decoderError(fatal, opt_code_point) {
    if (fatal) throw TypeError('Decoder error');
    return opt_code_point || 0xfffd;
  }
  var LABEL_ENCODING_MAP = {};
  function getEncoding(label) {
    label = label.trim().toLowerCase();
    if (label in LABEL_ENCODING_MAP) {
      return LABEL_ENCODING_MAP[label];
    }
    return null;
  }

  /** [Encodings table](https://encoding.spec.whatwg.org/encodings.json) (Incomplete as we only need TextDecoder utf8 in Expo RSC. A more complete implementation should be added to Hermes as native code.) */
  var ENCODING_MAP = [{
    encodings: [{
      labels: ['unicode-1-1-utf-8', 'unicode11utf8', 'unicode20utf8', 'utf-8', 'utf8', 'x-unicode20utf8'],
      name: 'UTF-8'
    }],
    heading: 'The Encoding'
  }];
  ENCODING_MAP.forEach(category => {
    category.encodings.forEach(encoding => {
      encoding.labels.forEach(label => {
        LABEL_ENCODING_MAP[label] = encoding;
      });
    });
  });

  // Registry of of encoder/decoder factories, by encoding name.
  var DECODERS = {
    'UTF-8': options => new UTF8Decoder(options)
  };

  // 9.1.1 utf-8 decoder
  var UTF8Decoder = /*#__PURE__*/function () {
    function UTF8Decoder(options) {
      (0, _classCallCheck2.default)(this, UTF8Decoder);
      this.options = options;
      // utf-8's decoder's has an associated utf-8 code point, utf-8
      // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8
      // lower boundary (initially 0x80), and a utf-8 upper boundary
      // (initially 0xBF).
      this.utf8CodePoint = 0;
      this.utf8BytesSeen = 0;
      this.utf8BytesNeeded = 0;
      this.utf8LowerBoundary = 0x80;
      this.utf8UpperBoundary = 0xbf;
    }
    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point.
     */
    return (0, _createClass2.default)(UTF8Decoder, [{
      key: "handler",
      value: function handler(stream, bite) {
        // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,
        // set utf-8 bytes needed to 0 and return error.
        if (bite === END_OF_STREAM && this.utf8BytesNeeded !== 0) {
          this.utf8BytesNeeded = 0;
          return decoderError(this.options.fatal);
        }

        // 2. If byte is end-of-stream, return finished.
        if (bite === END_OF_STREAM) return FINISHED;

        // 3. If utf-8 bytes needed is 0, based on byte:
        if (this.utf8BytesNeeded === 0) {
          // 0x00 to 0x7F
          if (inRange(bite, 0x00, 0x7f)) {
            // Return a code point whose value is byte.
            return bite;
          }

          // 0xC2 to 0xDF
          else if (inRange(bite, 0xc2, 0xdf)) {
            // 1. Set utf-8 bytes needed to 1.
            this.utf8BytesNeeded = 1;

            // 2. Set UTF-8 code point to byte & 0x1F.
            this.utf8CodePoint = bite & 0x1f;
          }

          // 0xE0 to 0xEF
          else if (inRange(bite, 0xe0, 0xef)) {
            // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.
            if (bite === 0xe0) this.utf8LowerBoundary = 0xa0;
            // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.
            if (bite === 0xed) this.utf8UpperBoundary = 0x9f;
            // 3. Set utf-8 bytes needed to 2.
            this.utf8BytesNeeded = 2;
            // 4. Set UTF-8 code point to byte & 0xF.
            this.utf8CodePoint = bite & 0xf;
          }

          // 0xF0 to 0xF4
          else if (inRange(bite, 0xf0, 0xf4)) {
            // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.
            if (bite === 0xf0) this.utf8LowerBoundary = 0x90;
            // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.
            if (bite === 0xf4) this.utf8UpperBoundary = 0x8f;
            // 3. Set utf-8 bytes needed to 3.
            this.utf8BytesNeeded = 3;
            // 4. Set UTF-8 code point to byte & 0x7.
            this.utf8CodePoint = bite & 0x7;
          }

          // Otherwise
          else {
            // Return error.
            return decoderError(this.options.fatal);
          }

          // Return continue.
          return null;
        }

        // 4. If byte is not in the range utf-8 lower boundary to utf-8
        // upper boundary, inclusive, run these substeps:
        if (!inRange(bite, this.utf8LowerBoundary, this.utf8UpperBoundary)) {
          // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8
          // bytes seen to 0, set utf-8 lower boundary to 0x80, and set
          // utf-8 upper boundary to 0xBF.
          this.utf8CodePoint = 0;
          this.utf8BytesNeeded = 0;
          this.utf8BytesSeen = 0;
          this.utf8LowerBoundary = 0x80;
          this.utf8UpperBoundary = 0xbf;

          // 2. Prepend byte to stream.
          stream.prepend(bite);

          // 3. Return error.
          return decoderError(this.options.fatal);
        }

        // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary
        // to 0xBF.
        this.utf8LowerBoundary = 0x80;
        this.utf8UpperBoundary = 0xbf;

        // 6. Set UTF-8 code point to (UTF-8 code point << 6) | (byte &
        // 0x3F)
        this.utf8CodePoint = this.utf8CodePoint << 6 | bite & 0x3f;

        // 7. Increase utf-8 bytes seen by one.
        this.utf8BytesSeen += 1;

        // 8. If utf-8 bytes seen is not equal to utf-8 bytes needed,
        // continue.
        if (this.utf8BytesSeen !== this.utf8BytesNeeded) return null;

        // 9. Let code point be utf-8 code point.
        var code_point = this.utf8CodePoint;

        // 10. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes
        // seen to 0.
        this.utf8CodePoint = 0;
        this.utf8BytesNeeded = 0;
        this.utf8BytesSeen = 0;

        // 11. Return a code point whose value is code point.
        return code_point;
      }
    }]);
  }(); // 8.1 Interface TextDecoder
  // @docsMissing
  var TextDecoder = exports.TextDecoder = /*#__PURE__*/function () {
    function TextDecoder() {
      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'utf-8';
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      (0, _classCallCheck2.default)(this, TextDecoder);
      this._BOMseen = false;
      this._doNotFlush = false;
      this._decoder = null;
      if (options != null && typeof options !== 'object') {
        throw new TypeError('Second argument of TextDecoder must be undefined or an object, e.g. { fatal: true }');
      }
      var normalizedLabel = String(label).trim().toLowerCase();
      var encoding = getEncoding(normalizedLabel);
      if (encoding === null || encoding.name === 'replacement') {
        throw new RangeError(`Unknown encoding: ${label} (normalized: ${normalizedLabel})`);
      }
      if (!DECODERS[encoding.name]) {
        throw new Error(`Decoder not present: ${encoding.name}`);
      }
      this._encoding = encoding;
      this._ignoreBOM = !!options.ignoreBOM;
      this._errorMode = options.fatal ? 'fatal' : 'replacement';
    }

    // Getter methods for encoding, fatal, and ignoreBOM
    return (0, _createClass2.default)(TextDecoder, [{
      key: "encoding",
      get: function () {
        return this._encoding?.name.toLowerCase() ?? '';
      }
    }, {
      key: "fatal",
      get: function () {
        return this._errorMode === 'fatal';
      }
    }, {
      key: "ignoreBOM",
      get: function () {
        return this._ignoreBOM;
      }
    }, {
      key: "decode",
      value: function decode(input) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var bytes = normalizeBytes(input);

        // 1. If the do not flush flag is unset, set decoder to a new
        // encoding's decoder, set stream to a new stream, and unset the
        // BOM seen flag.
        if (!this._doNotFlush) {
          this._decoder = DECODERS[this._encoding.name]({
            fatal: this.fatal
          });
          this._BOMseen = false;
        }

        // 2. If options's stream is true, set the do not flush flag, and
        // unset the do not flush flag otherwise.
        this._doNotFlush = Boolean(options['stream']);

        // 3. If input is given, push a copy of input to stream.
        // TODO: Align with spec algorithm - maintain stream on instance.
        var input_stream = new Stream(bytes);

        // 4. Let output be a new stream.
        var output = [];
        while (true) {
          var token = input_stream.read();
          if (token === END_OF_STREAM) break;
          var result = this._decoder.handler(input_stream, token);
          if (result === FINISHED) break;
          if (result !== null) {
            output.push(result);
          }
        }
        if (!this._doNotFlush) {
          do {
            var _result = this._decoder.handler(input_stream, input_stream.read());
            if (_result === FINISHED) break;
            if (_result === null) continue;
            if (Array.isArray(_result)) output.push(..._result);else output.push(_result);
          } while (!input_stream.endOfStream());
          this._decoder = null;
        }
        return this.serializeStream(output);
      }

      // serializeStream method for converting code points to a string
    }, {
      key: "serializeStream",
      value: function serializeStream(stream) {
        if (this._encoding.name === 'UTF-8') {
          if (!this._ignoreBOM && !this._BOMseen && stream[0] === 0xfeff) {
            // If BOM is detected at the start of the stream and we're not ignoring it
            this._BOMseen = true;
            stream.shift(); // Remove the BOM
          } else if (stream.length > 0) {
            this._BOMseen = true;
          }
        }

        // Convert the stream of code points to a string
        return codePointsToString(stream);
      }
    }]);
  }();
},9,[1,10,11]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }
  module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
},10,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var toPropertyKey = require(_dependencyMap[0]);
  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, toPropertyKey(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
      writable: false
    }), e;
  }
  module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
},11,[12]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _typeof = require(_dependencyMap[0])["default"];
  var toPrimitive = require(_dependencyMap[1]);
  function toPropertyKey(t) {
    var i = toPrimitive(t, "string");
    return "symbol" == _typeof(i) ? i : i + "";
  }
  module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
},12,[13,14]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _typeof(o) {
    "@babel/helpers - typeof";

    return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
  }
  module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
},13,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _typeof = require(_dependencyMap[0])["default"];
  function toPrimitive(t, r) {
    if ("object" != _typeof(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (undefined !== e) {
      var i = e.call(t, r || "default");
      if ("object" != _typeof(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
},14,[13]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "URL", {
    enumerable: true,
    get: function () {
      return _whatwgUrlWithoutUnicode.URL;
    }
  });
  Object.defineProperty(exports, "URLSearchParams", {
    enumerable: true,
    get: function () {
      return _whatwgUrlWithoutUnicode.URLSearchParams;
    }
  });
  var _whatwgUrlWithoutUnicode = require(_dependencyMap[0]);
  /**
   * Copyright © 2023-present 650 Industries, Inc. (aka Expo)
   * Copyright © Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  // This file should not import `react-native` in order to remain self-contained.

  /// <reference path="../ts-declarations/whatwg-url-without-unicode.d.ts" />

  // TODO(@kitten): Provide BlobModule types matching native module

  var isSetup = false;
  var BLOB_URL_PREFIX = null;
  function getBlobUrlPrefix() {
    if (isSetup) return BLOB_URL_PREFIX;
    isSetup = true;
    // if iOS: let BLOB_URL_PREFIX = 'blob:'

    // Pull the blob module without importing React Native.
    var BlobModule = globalThis.RN$Bridgeless !== true ?
    // Legacy RN implementation
    globalThis.nativeModuleProxy['BlobModule'] :
    // Newer RN implementation
    globalThis.__turboModuleProxy('BlobModule');
    var constants = 'BLOB_URI_SCHEME' in BlobModule ? BlobModule : BlobModule.getConstants();
    if (constants && typeof constants.BLOB_URI_SCHEME === 'string') {
      BLOB_URL_PREFIX = encodeURIComponent(constants.BLOB_URI_SCHEME) + ':';
      if (typeof constants.BLOB_URI_HOST === 'string') {
        BLOB_URL_PREFIX += `//${encodeURIComponent(constants.BLOB_URI_HOST)}/`;
      }
    }
    return BLOB_URL_PREFIX;
  }
  /**
   * To allow Blobs be accessed via `content://` URIs,
   * you need to register `BlobProvider` as a ContentProvider in your app's `AndroidManifest.xml`:
   *
   * ```xml
   * <manifest>
   *   <application>
   *     <provider
   *       android:name="com.facebook.react.modules.blob.BlobProvider"
   *       android:authorities="@string/blob_provider_authority"
   *       android:exported="false"
   *     />
   *   </application>
   * </manifest>
   * ```
   * And then define the `blob_provider_authority` string in `res/values/strings.xml`.
   * Use a dotted name that's entirely unique to your app:
   *
   * ```xml
   * <resources>
   *   <string name="blob_provider_authority">your.app.package.blobs</string>
   * </resources>
   * ```
   */
  _whatwgUrlWithoutUnicode.URL.createObjectURL = function createObjectURL(blob) {
    if (getBlobUrlPrefix() == null) {
      throw new Error('Cannot create URL for blob');
    }
    return `${getBlobUrlPrefix()}${encodeURIComponent(blob.data.blobId)}?offset=${encodeURIComponent(blob.data.offset)}&size=${encodeURIComponent(blob.size)}`;
  };
  _whatwgUrlWithoutUnicode.URL.revokeObjectURL = function revokeObjectURL(_url) {
    // Do nothing.
  };
  _whatwgUrlWithoutUnicode.URL.canParse = function canParse(url, base) {
    try {
      (0, _whatwgUrlWithoutUnicode.URL)(url, base);
      return true;
    } catch {
      return false;
    }
  };
},15,[16]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _require = require(_dependencyMap[0]),
    URL = _require.URL,
    URLSearchParams = _require.URLSearchParams;
  var urlStateMachine = require(_dependencyMap[1]);
  var urlEncoded = require(_dependencyMap[2]);
  var sharedGlobalObject = {};
  URL.install(sharedGlobalObject);
  URLSearchParams.install(sharedGlobalObject);
  exports.URL = sharedGlobalObject.URL;
  exports.URLSearchParams = sharedGlobalObject.URLSearchParams;
  exports.parseURL = urlStateMachine.parseURL;
  exports.basicURLParse = urlStateMachine.basicURLParse;
  exports.serializeURL = urlStateMachine.serializeURL;
  exports.serializeHost = urlStateMachine.serializeHost;
  exports.serializeInteger = urlStateMachine.serializeInteger;
  exports.serializeURLOrigin = urlStateMachine.serializeURLOrigin;
  exports.setTheUsername = urlStateMachine.setTheUsername;
  exports.setThePassword = urlStateMachine.setThePassword;
  exports.cannotHaveAUsernamePasswordPort = urlStateMachine.cannotHaveAUsernamePasswordPort;
  exports.percentDecode = urlEncoded.percentDecode;
},16,[17,22,28]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var URL = require(_dependencyMap[0]);
  var URLSearchParams = require(_dependencyMap[1]);
  exports.URL = URL;
  exports.URLSearchParams = URLSearchParams;
},17,[18,35]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var conversions = require(_dependencyMap[2]);
  var utils = require(_dependencyMap[3]);
  var impl = utils.implSymbol;
  var ctorRegistry = utils.ctorRegistrySymbol;
  var iface = {
    // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
    // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
    // implementing this mixin interface.
    _mixedIntoPredicates: [],
    is(obj) {
      if (obj) {
        if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
          return true;
        }
        for (var isMixedInto of module.exports._mixedIntoPredicates) {
          if (isMixedInto(obj)) {
            return true;
          }
        }
      }
      return false;
    },
    isImpl(obj) {
      if (obj) {
        if (obj instanceof Impl.implementation) {
          return true;
        }
        var wrapper = utils.wrapperForImpl(obj);
        for (var isMixedInto of module.exports._mixedIntoPredicates) {
          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      }
      return false;
    },
    convert(obj) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === undefined ? "The provided value" : _ref$context;
      if (module.exports.is(obj)) {
        return utils.implForWrapper(obj);
      }
      throw new TypeError(`${context} is not of type 'URL'.`);
    },
    create(globalObject, constructorArgs, privateData) {
      if (globalObject[ctorRegistry] === undefined) {
        throw new Error("Internal error: invalid global object");
      }
      var ctor = globalObject[ctorRegistry]["URL"];
      if (ctor === undefined) {
        throw new Error("Internal error: constructor URL is not installed on the passed global object");
      }
      var obj = Object.create(ctor.prototype);
      obj = iface.setup(obj, globalObject, constructorArgs, privateData);
      return obj;
    },
    createImpl(globalObject, constructorArgs, privateData) {
      var obj = iface.create(globalObject, constructorArgs, privateData);
      return utils.implForWrapper(obj);
    },
    _internalSetup(obj) {},
    setup(obj, globalObject) {
      var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      privateData.wrapper = obj;
      iface._internalSetup(obj);
      Object.defineProperty(obj, impl, {
        value: new Impl.implementation(globalObject, constructorArgs, privateData),
        configurable: true
      });
      obj[impl][utils.wrapperSymbol] = obj;
      if (Impl.init) {
        Impl.init(obj[impl], privateData);
      }
      return obj;
    },
    install(globalObject) {
      var URL = /*#__PURE__*/function () {
        function URL(url) {
          _classCallCheck(this, URL);
          if (arguments.length < 1) {
            throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
          }
          var args = [];
          {
            var curArg = arguments[0];
            curArg = conversions["USVString"](curArg, {
              context: "Failed to construct 'URL': parameter 1"
            });
            args.push(curArg);
          }
          {
            var _curArg = arguments[1];
            if (_curArg !== undefined) {
              _curArg = conversions["USVString"](_curArg, {
                context: "Failed to construct 'URL': parameter 2"
              });
            }
            args.push(_curArg);
          }
          return iface.setup(Object.create(this.constructor.prototype), globalObject, args);
        }
        return _createClass(URL, [{
          key: "toJSON",
          value: function toJSON() {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl].toJSON();
          }
        }, {
          key: "href",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["href"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'href' property on 'URL': The provided value"
            });
            this[impl]["href"] = V;
          }
        }, {
          key: "toString",
          value: function toString() {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["href"];
          }
        }, {
          key: "origin",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["origin"];
          }
        }, {
          key: "protocol",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["protocol"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'protocol' property on 'URL': The provided value"
            });
            this[impl]["protocol"] = V;
          }
        }, {
          key: "username",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["username"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'username' property on 'URL': The provided value"
            });
            this[impl]["username"] = V;
          }
        }, {
          key: "password",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["password"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'password' property on 'URL': The provided value"
            });
            this[impl]["password"] = V;
          }
        }, {
          key: "host",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["host"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'host' property on 'URL': The provided value"
            });
            this[impl]["host"] = V;
          }
        }, {
          key: "hostname",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["hostname"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'hostname' property on 'URL': The provided value"
            });
            this[impl]["hostname"] = V;
          }
        }, {
          key: "port",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["port"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'port' property on 'URL': The provided value"
            });
            this[impl]["port"] = V;
          }
        }, {
          key: "pathname",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["pathname"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'pathname' property on 'URL': The provided value"
            });
            this[impl]["pathname"] = V;
          }
        }, {
          key: "search",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["search"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'search' property on 'URL': The provided value"
            });
            this[impl]["search"] = V;
          }
        }, {
          key: "searchParams",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return utils.getSameObject(this, "searchParams", () => {
              return utils.tryWrapperForImpl(this[impl]["searchParams"]);
            });
          }
        }, {
          key: "hash",
          get: function () {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl]["hash"];
          },
          set: function (V) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'hash' property on 'URL': The provided value"
            });
            this[impl]["hash"] = V;
          }
        }]);
      }();
      Object.defineProperties(URL.prototype, {
        toJSON: {
          enumerable: true
        },
        href: {
          enumerable: true
        },
        toString: {
          enumerable: true
        },
        origin: {
          enumerable: true
        },
        protocol: {
          enumerable: true
        },
        username: {
          enumerable: true
        },
        password: {
          enumerable: true
        },
        host: {
          enumerable: true
        },
        hostname: {
          enumerable: true
        },
        port: {
          enumerable: true
        },
        pathname: {
          enumerable: true
        },
        search: {
          enumerable: true
        },
        searchParams: {
          enumerable: true
        },
        hash: {
          enumerable: true
        },
        [Symbol.toStringTag]: {
          value: "URL",
          configurable: true
        }
      });
      if (globalObject[ctorRegistry] === undefined) {
        globalObject[ctorRegistry] = Object.create(null);
      }
      globalObject[ctorRegistry]["URL"] = URL;
      Object.defineProperty(globalObject, "URL", {
        configurable: true,
        writable: true,
        value: URL
      });
    }
  };
  // iface
  module.exports = iface;
  var Impl = require(_dependencyMap[4]);
},18,[10,11,19,20,21]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _(message, opts) {
    return `${opts && opts.context ? opts.context : "Value"} ${message}.`;
  }
  function type(V) {
    if (V === null) {
      return "Null";
    }
    switch (typeof V) {
      case "undefined":
        return "Undefined";
      case "boolean":
        return "Boolean";
      case "number":
        return "Number";
      case "string":
        return "String";
      case "symbol":
        return "Symbol";
      case "object":
      // Falls through
      case "function":
      // Falls through
      default:
        // Per ES spec, typeof returns an implemention-defined value that is not any of the existing ones for
        // uncallable non-standard exotic objects. Yet Type() which the Web IDL spec depends on returns Object for
        // such cases. So treat the default case as an object.
        return "Object";
    }
  }

  // Round x to the nearest integer, choosing the even integer if it lies halfway between two.
  function evenRound(x) {
    // There are four cases for numbers with fractional part being .5:
    //
    // case |     x     | floor(x) | round(x) | expected | x <> 0 | x % 1 | x & 1 |   example
    //   1  |  2n + 0.5 |  2n      |  2n + 1  |  2n      |   >    |  0.5  |   0   |  0.5 ->  0
    //   2  |  2n + 1.5 |  2n + 1  |  2n + 2  |  2n + 2  |   >    |  0.5  |   1   |  1.5 ->  2
    //   3  | -2n - 0.5 | -2n - 1  | -2n      | -2n      |   <    | -0.5  |   0   | -0.5 ->  0
    //   4  | -2n - 1.5 | -2n - 2  | -2n - 1  | -2n - 2  |   <    | -0.5  |   1   | -1.5 -> -2
    // (where n is a non-negative integer)
    //
    // Branch here for cases 1 and 4
    if (x > 0 && x % 1 === 0.5 && (x & 1) === 0 || x < 0 && x % 1 === -0.5 && (x & 1) === 1) {
      return censorNegativeZero(Math.floor(x));
    }
    return censorNegativeZero(Math.round(x));
  }
  function integerPart(n) {
    return censorNegativeZero(Math.trunc(n));
  }
  function sign(x) {
    return x < 0 ? -1 : 1;
  }
  function modulo(x, y) {
    // https://tc39.github.io/ecma262/#eqn-modulo
    // Note that http://stackoverflow.com/a/4467559/3191 does NOT work for large modulos
    var signMightNotMatch = x % y;
    if (sign(y) !== sign(signMightNotMatch)) {
      return signMightNotMatch + y;
    }
    return signMightNotMatch;
  }
  function censorNegativeZero(x) {
    return x === 0 ? 0 : x;
  }
  function createIntegerConversion(bitLength, typeOpts) {
    var isSigned = !typeOpts.unsigned;
    var lowerBound;
    var upperBound;
    if (bitLength === 64) {
      upperBound = Math.pow(2, 53) - 1;
      lowerBound = !isSigned ? 0 : -Math.pow(2, 53) + 1;
    } else if (!isSigned) {
      lowerBound = 0;
      upperBound = Math.pow(2, bitLength) - 1;
    } else {
      lowerBound = -Math.pow(2, bitLength - 1);
      upperBound = Math.pow(2, bitLength - 1) - 1;
    }
    var twoToTheBitLength = Math.pow(2, bitLength);
    var twoToOneLessThanTheBitLength = Math.pow(2, bitLength - 1);
    return (V, opts) => {
      if (opts === undefined) {
        opts = {};
      }
      var x = +V;
      x = censorNegativeZero(x); // Spec discussion ongoing: https://github.com/heycam/webidl/issues/306

      if (opts.enforceRange) {
        if (!Number.isFinite(x)) {
          throw new TypeError(_("is not a finite number", opts));
        }
        x = integerPart(x);
        if (x < lowerBound || x > upperBound) {
          throw new TypeError(_(`is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`, opts));
        }
        return x;
      }
      if (!Number.isNaN(x) && opts.clamp) {
        x = Math.min(Math.max(x, lowerBound), upperBound);
        x = evenRound(x);
        return x;
      }
      if (!Number.isFinite(x) || x === 0) {
        return 0;
      }
      x = integerPart(x);

      // Math.pow(2, 64) is not accurately representable in JavaScript, so try to avoid these per-spec operations if
      // possible. Hopefully it's an optimization for the non-64-bitLength cases too.
      if (x >= lowerBound && x <= upperBound) {
        return x;
      }

      // These will not work great for bitLength of 64, but oh well. See the README for more details.
      x = modulo(x, twoToTheBitLength);
      if (isSigned && x >= twoToOneLessThanTheBitLength) {
        return x - twoToTheBitLength;
      }
      return x;
    };
  }
  exports.any = V => {
    return V;
  };
  exports.void = function () {
    return undefined;
  };
  exports.boolean = function (val) {
    return !!val;
  };
  exports.byte = createIntegerConversion(8, {
    unsigned: false
  });
  exports.octet = createIntegerConversion(8, {
    unsigned: true
  });
  exports.short = createIntegerConversion(16, {
    unsigned: false
  });
  exports["unsigned short"] = createIntegerConversion(16, {
    unsigned: true
  });
  exports.long = createIntegerConversion(32, {
    unsigned: false
  });
  exports["unsigned long"] = createIntegerConversion(32, {
    unsigned: true
  });
  exports["long long"] = createIntegerConversion(64, {
    unsigned: false
  });
  exports["unsigned long long"] = createIntegerConversion(64, {
    unsigned: true
  });
  exports.double = (V, opts) => {
    var x = +V;
    if (!Number.isFinite(x)) {
      throw new TypeError(_("is not a finite floating-point value", opts));
    }
    return x;
  };
  exports["unrestricted double"] = V => {
    var x = +V;
    return x;
  };
  exports.float = (V, opts) => {
    var x = +V;
    if (!Number.isFinite(x)) {
      throw new TypeError(_("is not a finite floating-point value", opts));
    }
    if (Object.is(x, -0)) {
      return x;
    }
    var y = Math.fround(x);
    if (!Number.isFinite(y)) {
      throw new TypeError(_("is outside the range of a single-precision floating-point value", opts));
    }
    return y;
  };
  exports["unrestricted float"] = V => {
    var x = +V;
    if (isNaN(x)) {
      return x;
    }
    if (Object.is(x, -0)) {
      return x;
    }
    return Math.fround(x);
  };
  exports.DOMString = function (V, opts) {
    if (opts === undefined) {
      opts = {};
    }
    if (opts.treatNullAsEmptyString && V === null) {
      return "";
    }
    if (typeof V === "symbol") {
      throw new TypeError(_("is a symbol, which cannot be converted to a string", opts));
    }
    return String(V);
  };
  exports.ByteString = (V, opts) => {
    var x = exports.DOMString(V, opts);
    var c;
    for (var i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {
      if (c > 255) {
        throw new TypeError(_("is not a valid ByteString", opts));
      }
    }
    return x;
  };
  exports.USVString = (V, opts) => {
    var S = exports.DOMString(V, opts);
    var n = S.length;
    var U = [];
    for (var i = 0; i < n; ++i) {
      var c = S.charCodeAt(i);
      if (c < 0xD800 || c > 0xDFFF) {
        U.push(String.fromCodePoint(c));
      } else if (0xDC00 <= c && c <= 0xDFFF) {
        U.push(String.fromCodePoint(0xFFFD));
      } else if (i === n - 1) {
        U.push(String.fromCodePoint(0xFFFD));
      } else {
        var d = S.charCodeAt(i + 1);
        if (0xDC00 <= d && d <= 0xDFFF) {
          var a = c & 0x3FF;
          var b = d & 0x3FF;
          U.push(String.fromCodePoint(65536 + 1024 * a + b));
          ++i;
        } else {
          U.push(String.fromCodePoint(0xFFFD));
        }
      }
    }
    return U.join("");
  };
  exports.object = (V, opts) => {
    if (type(V) !== "Object") {
      throw new TypeError(_("is not an object", opts));
    }
    return V;
  };

  // Not exported, but used in Function and VoidFunction.

  // Neither Function nor VoidFunction is defined with [TreatNonObjectAsNull], so
  // handling for that is omitted.
  function convertCallbackFunction(V, opts) {
    if (typeof V !== "function") {
      throw new TypeError(_("is not a function", opts));
    }
    return V;
  }
  var abByteLengthGetter = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get;
  function isArrayBuffer(V) {
    try {
      abByteLengthGetter.call(V);
      return true;
    } catch (e) {
      return false;
    }
  }

  // I don't think we can reliably detect detached ArrayBuffers.
  exports.ArrayBuffer = (V, opts) => {
    if (!isArrayBuffer(V)) {
      throw new TypeError(_("is not a view on an ArrayBuffer object", opts));
    }
    return V;
  };
  var dvByteLengthGetter = Object.getOwnPropertyDescriptor(DataView.prototype, "byteLength").get;
  exports.DataView = (V, opts) => {
    try {
      dvByteLengthGetter.call(V);
      return V;
    } catch (e) {
      throw new TypeError(_("is not a view on an DataView object", opts));
    }
  };
  [Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, Uint8ClampedArray, Float32Array, Float64Array].forEach(func => {
    var name = func.name;
    var article = /^[AEIOU]/.test(name) ? "an" : "a";
    exports[name] = (V, opts) => {
      if (!ArrayBuffer.isView(V) || V.constructor.name !== name) {
        throw new TypeError(_(`is not ${article} ${name} object`, opts));
      }
      return V;
    };
  });

  // Common definitions

  exports.ArrayBufferView = (V, opts) => {
    if (!ArrayBuffer.isView(V)) {
      throw new TypeError(_("is not a view on an ArrayBuffer object", opts));
    }
    return V;
  };
  exports.BufferSource = (V, opts) => {
    if (!ArrayBuffer.isView(V) && !isArrayBuffer(V)) {
      throw new TypeError(_("is not an ArrayBuffer object or a view on one", opts));
    }
    return V;
  };
  exports.DOMTimeStamp = exports["unsigned long long"];
  exports.Function = convertCallbackFunction;
  exports.VoidFunction = convertCallbackFunction;
},19,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  // Returns "Type(value) is Object" in ES terminology.
  function isObject(value) {
    return typeof value === "object" && value !== null || typeof value === "function";
  }
  function hasOwn(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  var wrapperSymbol = Symbol("wrapper");
  var implSymbol = Symbol("impl");
  var sameObjectCaches = Symbol("SameObject caches");
  var ctorRegistrySymbol = Symbol.for("[webidl2js]  constructor registry");
  function getSameObject(wrapper, prop, creator) {
    if (!wrapper[sameObjectCaches]) {
      wrapper[sameObjectCaches] = Object.create(null);
    }
    if (prop in wrapper[sameObjectCaches]) {
      return wrapper[sameObjectCaches][prop];
    }
    wrapper[sameObjectCaches][prop] = creator();
    return wrapper[sameObjectCaches][prop];
  }
  function wrapperForImpl(impl) {
    return impl ? impl[wrapperSymbol] : null;
  }
  function implForWrapper(wrapper) {
    return wrapper ? wrapper[implSymbol] : null;
  }
  function tryWrapperForImpl(impl) {
    var wrapper = wrapperForImpl(impl);
    return wrapper ? wrapper : impl;
  }
  function tryImplForWrapper(wrapper) {
    var impl = implForWrapper(wrapper);
    return impl ? impl : wrapper;
  }
  var iterInternalSymbol = Symbol("internal");
  var IteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
  function isArrayIndexPropName(P) {
    if (typeof P !== "string") {
      return false;
    }
    var i = P >>> 0;
    if (i === Math.pow(2, 32) - 1) {
      return false;
    }
    var s = `${i}`;
    if (P !== s) {
      return false;
    }
    return true;
  }
  var byteLengthGetter = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get;
  function isArrayBuffer(value) {
    try {
      byteLengthGetter.call(value);
      return true;
    } catch (e) {
      return false;
    }
  }
  var supportsPropertyIndex = Symbol("supports property index");
  var supportedPropertyIndices = Symbol("supported property indices");
  var supportsPropertyName = Symbol("supports property name");
  var supportedPropertyNames = Symbol("supported property names");
  var indexedGet = Symbol("indexed property get");
  var indexedSetNew = Symbol("indexed property set new");
  var indexedSetExisting = Symbol("indexed property set existing");
  var namedGet = Symbol("named property get");
  var namedSetNew = Symbol("named property set new");
  var namedSetExisting = Symbol("named property set existing");
  var namedDelete = Symbol("named property delete");
  module.exports = exports = {
    isObject,
    hasOwn,
    wrapperSymbol,
    implSymbol,
    getSameObject,
    ctorRegistrySymbol,
    wrapperForImpl,
    implForWrapper,
    tryWrapperForImpl,
    tryImplForWrapper,
    iterInternalSymbol,
    IteratorPrototype,
    isArrayBuffer,
    isArrayIndexPropName,
    supportsPropertyIndex,
    supportedPropertyIndices,
    supportsPropertyName,
    supportedPropertyNames,
    indexedGet,
    indexedSetNew,
    indexedSetExisting,
    namedGet,
    namedSetNew,
    namedSetExisting,
    namedDelete
  };
},20,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var usm = require(_dependencyMap[2]);
  var urlencoded = require(_dependencyMap[3]);
  var URLSearchParams = require(_dependencyMap[4]);
  exports.implementation = /*#__PURE__*/function () {
    function URLImpl(globalObject, constructorArgs) {
      _classCallCheck(this, URLImpl);
      var url = constructorArgs[0];
      var base = constructorArgs[1];
      var parsedBase = null;
      if (base !== undefined) {
        parsedBase = usm.basicURLParse(base);
        if (parsedBase === null) {
          throw new TypeError(`Invalid base URL: ${base}`);
        }
      }
      var parsedURL = usm.basicURLParse(url, {
        baseURL: parsedBase
      });
      if (parsedURL === null) {
        throw new TypeError(`Invalid URL: ${url}`);
      }
      var query = parsedURL.query !== null ? parsedURL.query : "";
      this._url = parsedURL;

      // We cannot invoke the "new URLSearchParams object" algorithm without going through the constructor, which strips
      // question mark by default. Therefore the doNotStripQMark hack is used.
      this._query = URLSearchParams.createImpl(globalObject, [query], {
        doNotStripQMark: true
      });
      this._query._url = this;
    }
    return _createClass(URLImpl, [{
      key: "href",
      get: function () {
        return usm.serializeURL(this._url);
      },
      set: function (v) {
        var parsedURL = usm.basicURLParse(v);
        if (parsedURL === null) {
          throw new TypeError(`Invalid URL: ${v}`);
        }
        this._url = parsedURL;
        this._query._list.splice(0);
        var query = parsedURL.query;
        if (query !== null) {
          this._query._list = urlencoded.parseUrlencoded(query);
        }
      }
    }, {
      key: "origin",
      get: function () {
        return usm.serializeURLOrigin(this._url);
      }
    }, {
      key: "protocol",
      get: function () {
        return this._url.scheme + ":";
      },
      set: function (v) {
        usm.basicURLParse(v + ":", {
          url: this._url,
          stateOverride: "scheme start"
        });
      }
    }, {
      key: "username",
      get: function () {
        return this._url.username;
      },
      set: function (v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setTheUsername(this._url, v);
      }
    }, {
      key: "password",
      get: function () {
        return this._url.password;
      },
      set: function (v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setThePassword(this._url, v);
      }
    }, {
      key: "host",
      get: function () {
        var url = this._url;
        if (url.host === null) {
          return "";
        }
        if (url.port === null) {
          return usm.serializeHost(url.host);
        }
        return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
      },
      set: function (v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, {
          url: this._url,
          stateOverride: "host"
        });
      }
    }, {
      key: "hostname",
      get: function () {
        if (this._url.host === null) {
          return "";
        }
        return usm.serializeHost(this._url.host);
      },
      set: function (v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, {
          url: this._url,
          stateOverride: "hostname"
        });
      }
    }, {
      key: "port",
      get: function () {
        if (this._url.port === null) {
          return "";
        }
        return usm.serializeInteger(this._url.port);
      },
      set: function (v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        if (v === "") {
          this._url.port = null;
        } else {
          usm.basicURLParse(v, {
            url: this._url,
            stateOverride: "port"
          });
        }
      }
    }, {
      key: "pathname",
      get: function () {
        if (this._url.cannotBeABaseURL) {
          return this._url.path[0];
        }
        if (this._url.path.length === 0) {
          return "";
        }
        return "/" + this._url.path.join("/");
      },
      set: function (v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        this._url.path = [];
        usm.basicURLParse(v, {
          url: this._url,
          stateOverride: "path start"
        });
      }
    }, {
      key: "search",
      get: function () {
        if (this._url.query === null || this._url.query === "") {
          return "";
        }
        return "?" + this._url.query;
      },
      set: function (v) {
        var url = this._url;
        if (v === "") {
          url.query = null;
          this._query._list = [];
          return;
        }
        var input = v[0] === "?" ? v.substring(1) : v;
        url.query = "";
        usm.basicURLParse(input, {
          url,
          stateOverride: "query"
        });
        this._query._list = urlencoded.parseUrlencoded(input);
      }
    }, {
      key: "searchParams",
      get: function () {
        return this._query;
      }
    }, {
      key: "hash",
      get: function () {
        if (this._url.fragment === null || this._url.fragment === "") {
          return "";
        }
        return "#" + this._url.fragment;
      },
      set: function (v) {
        if (v === "") {
          this._url.fragment = null;
          return;
        }
        var input = v[0] === "#" ? v.substring(1) : v;
        this._url.fragment = "";
        usm.basicURLParse(input, {
          url: this._url,
          stateOverride: "fragment"
        });
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.href;
      }
    }]);
  }();
},21,[10,11,22,28,35]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _require = require(_dependencyMap[0]),
    Buffer = _require.Buffer;
  var punycode = require(_dependencyMap[1]);
  var infra = require(_dependencyMap[2]);
  var _require2 = require(_dependencyMap[3]),
    percentEncode = _require2.percentEncode,
    percentDecode = _require2.percentDecode;
  var specialSchemes = {
    ftp: 21,
    file: null,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
  };
  var failure = Symbol("failure");
  function countSymbols(str) {
    return punycode.ucs2.decode(str).length;
  }
  function at(input, idx) {
    var c = input[idx];
    return isNaN(c) ? undefined : String.fromCodePoint(c);
  }
  function isSingleDot(buffer) {
    return buffer === "." || buffer.toLowerCase() === "%2e";
  }
  function isDoubleDot(buffer) {
    buffer = buffer.toLowerCase();
    return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
  }
  function isWindowsDriveLetterCodePoints(cp1, cp2) {
    return infra.isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
  }
  function isWindowsDriveLetterString(string) {
    return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
  }
  function isNormalizedWindowsDriveLetterString(string) {
    return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
  }
  function containsForbiddenHostCodePoint(string) {
    return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
  }
  function containsForbiddenHostCodePointExcludingPercent(string) {
    return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
  }
  function isSpecialScheme(scheme) {
    return specialSchemes[scheme] !== undefined;
  }
  function isSpecial(url) {
    return isSpecialScheme(url.scheme);
  }
  function isNotSpecial(url) {
    return !isSpecialScheme(url.scheme);
  }
  function defaultPort(scheme) {
    return specialSchemes[scheme];
  }
  function utf8PercentEncode(c) {
    var buf = Buffer.from(c);
    var str = "";
    for (var i = 0; i < buf.length; ++i) {
      str += percentEncode(buf[i]);
    }
    return str;
  }
  function isC0ControlPercentEncode(c) {
    return c <= 0x1F || c > 0x7E;
  }
  var extraUserinfoPercentEncodeSet = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
  function isUserinfoPercentEncode(c) {
    return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
  }
  var extraFragmentPercentEncodeSet = new Set([32, 34, 60, 62, 96]);
  function isFragmentPercentEncode(c) {
    return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);
  }
  var extraPathPercentEncodeSet = new Set([35, 63, 123, 125]);
  function isPathPercentEncode(c) {
    return isFragmentPercentEncode(c) || extraPathPercentEncodeSet.has(c);
  }
  function percentEncodeChar(c, encodeSetPredicate) {
    var cStr = String.fromCodePoint(c);
    if (encodeSetPredicate(c)) {
      return utf8PercentEncode(cStr);
    }
    return cStr;
  }
  function parseIPv4Number(input) {
    var R = 10;
    if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
      input = input.substring(2);
      R = 16;
    } else if (input.length >= 2 && input.charAt(0) === "0") {
      input = input.substring(1);
      R = 8;
    }
    if (input === "") {
      return 0;
    }
    var regex = /[^0-7]/;
    if (R === 10) {
      regex = /[^0-9]/;
    }
    if (R === 16) {
      regex = /[^0-9A-Fa-f]/;
    }
    if (regex.test(input)) {
      return failure;
    }
    return parseInt(input, R);
  }
  function parseIPv4(input) {
    var parts = input.split(".");
    if (parts[parts.length - 1] === "") {
      if (parts.length > 1) {
        parts.pop();
      }
    }
    if (parts.length > 4) {
      return input;
    }
    var numbers = [];
    for (var part of parts) {
      if (part === "") {
        return input;
      }
      var n = parseIPv4Number(part);
      if (n === failure) {
        return input;
      }
      numbers.push(n);
    }
    for (var i = 0; i < numbers.length - 1; ++i) {
      if (numbers[i] > 255) {
        return failure;
      }
    }
    if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
      return failure;
    }
    var ipv4 = numbers.pop();
    var counter = 0;
    for (var _n of numbers) {
      ipv4 += _n * Math.pow(256, 3 - counter);
      ++counter;
    }
    return ipv4;
  }
  function serializeIPv4(address) {
    var output = "";
    var n = address;
    for (var i = 1; i <= 4; ++i) {
      output = String(n % 256) + output;
      if (i !== 4) {
        output = "." + output;
      }
      n = Math.floor(n / 256);
    }
    return output;
  }
  function parseIPv6(input) {
    var address = [0, 0, 0, 0, 0, 0, 0, 0];
    var pieceIndex = 0;
    var compress = null;
    var pointer = 0;
    input = punycode.ucs2.decode(input);
    if (input[pointer] === 58) {
      if (input[pointer + 1] !== 58) {
        return failure;
      }
      pointer += 2;
      ++pieceIndex;
      compress = pieceIndex;
    }
    while (pointer < input.length) {
      if (pieceIndex === 8) {
        return failure;
      }
      if (input[pointer] === 58) {
        if (compress !== null) {
          return failure;
        }
        ++pointer;
        ++pieceIndex;
        compress = pieceIndex;
        continue;
      }
      var value = 0;
      var length = 0;
      while (length < 4 && infra.isASCIIHex(input[pointer])) {
        value = value * 0x10 + parseInt(at(input, pointer), 16);
        ++pointer;
        ++length;
      }
      if (input[pointer] === 46) {
        if (length === 0) {
          return failure;
        }
        pointer -= length;
        if (pieceIndex > 6) {
          return failure;
        }
        var numbersSeen = 0;
        while (input[pointer] !== undefined) {
          var ipv4Piece = null;
          if (numbersSeen > 0) {
            if (input[pointer] === 46 && numbersSeen < 4) {
              ++pointer;
            } else {
              return failure;
            }
          }
          if (!infra.isASCIIDigit(input[pointer])) {
            return failure;
          }
          while (infra.isASCIIDigit(input[pointer])) {
            var number = parseInt(at(input, pointer));
            if (ipv4Piece === null) {
              ipv4Piece = number;
            } else if (ipv4Piece === 0) {
              return failure;
            } else {
              ipv4Piece = ipv4Piece * 10 + number;
            }
            if (ipv4Piece > 255) {
              return failure;
            }
            ++pointer;
          }
          address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;
          ++numbersSeen;
          if (numbersSeen === 2 || numbersSeen === 4) {
            ++pieceIndex;
          }
        }
        if (numbersSeen !== 4) {
          return failure;
        }
        break;
      } else if (input[pointer] === 58) {
        ++pointer;
        if (input[pointer] === undefined) {
          return failure;
        }
      } else if (input[pointer] !== undefined) {
        return failure;
      }
      address[pieceIndex] = value;
      ++pieceIndex;
    }
    if (compress !== null) {
      var swaps = pieceIndex - compress;
      pieceIndex = 7;
      while (pieceIndex !== 0 && swaps > 0) {
        var temp = address[compress + swaps - 1];
        address[compress + swaps - 1] = address[pieceIndex];
        address[pieceIndex] = temp;
        --pieceIndex;
        --swaps;
      }
    } else if (compress === null && pieceIndex !== 8) {
      return failure;
    }
    return address;
  }
  function serializeIPv6(address) {
    var output = "";
    var seqResult = findLongestZeroSequence(address);
    var compress = seqResult.idx;
    var ignore0 = false;
    for (var pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
      if (ignore0 && address[pieceIndex] === 0) {
        continue;
      } else if (ignore0) {
        ignore0 = false;
      }
      if (compress === pieceIndex) {
        var separator = pieceIndex === 0 ? "::" : ":";
        output += separator;
        ignore0 = true;
        continue;
      }
      output += address[pieceIndex].toString(16);
      if (pieceIndex !== 7) {
        output += ":";
      }
    }
    return output;
  }
  function parseHost(input) {
    var isNotSpecialArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (input[0] === "[") {
      if (input[input.length - 1] !== "]") {
        return failure;
      }
      return parseIPv6(input.substring(1, input.length - 1));
    }
    if (isNotSpecialArg) {
      return parseOpaqueHost(input);
    }
    var domain = percentDecode(Buffer.from(input)).toString();
    var asciiDomain = domainToASCII(domain);
    if (asciiDomain === failure) {
      return failure;
    }
    if (containsForbiddenHostCodePoint(asciiDomain)) {
      return failure;
    }
    var ipv4Host = parseIPv4(asciiDomain);
    if (typeof ipv4Host === "number" || ipv4Host === failure) {
      return ipv4Host;
    }
    return asciiDomain;
  }
  function parseOpaqueHost(input) {
    if (containsForbiddenHostCodePointExcludingPercent(input)) {
      return failure;
    }
    var output = "";
    var decoded = punycode.ucs2.decode(input);
    for (var i = 0; i < decoded.length; ++i) {
      output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
    }
    return output;
  }
  function findLongestZeroSequence(arr) {
    var maxIdx = null;
    var maxLen = 1; // only find elements > 1
    var currStart = null;
    var currLen = 0;
    for (var i = 0; i < arr.length; ++i) {
      if (arr[i] !== 0) {
        if (currLen > maxLen) {
          maxIdx = currStart;
          maxLen = currLen;
        }
        currStart = null;
        currLen = 0;
      } else {
        if (currStart === null) {
          currStart = i;
        }
        ++currLen;
      }
    }

    // if trailing zeros
    if (currLen > maxLen) {
      maxIdx = currStart;
      maxLen = currLen;
    }
    return {
      idx: maxIdx,
      len: maxLen
    };
  }
  function serializeHost(host) {
    if (typeof host === "number") {
      return serializeIPv4(host);
    }

    // IPv6 serializer
    if (host instanceof Array) {
      return "[" + serializeIPv6(host) + "]";
    }
    return host;
  }
  function domainToASCII(domain) {
    var result = domain;
    if (result === null) {
      return failure;
    }
    return result;
  }
  function trimControlChars(url) {
    return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
  }
  function trimTabAndNewline(url) {
    return url.replace(/\u0009|\u000A|\u000D/g, "");
  }
  function shortenPath(url) {
    var path = url.path;
    if (path.length === 0) {
      return;
    }
    if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
      return;
    }
    path.pop();
  }
  function includesCredentials(url) {
    return url.username !== "" || url.password !== "";
  }
  function cannotHaveAUsernamePasswordPort(url) {
    return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
  }
  function isNormalizedWindowsDriveLetter(string) {
    return /^[A-Za-z]:$/.test(string);
  }
  function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
    this.pointer = 0;
    this.input = input;
    this.base = base || null;
    this.encodingOverride = encodingOverride || "utf-8";
    this.stateOverride = stateOverride;
    this.url = url;
    this.failure = false;
    this.parseError = false;
    if (!this.url) {
      this.url = {
        scheme: "",
        username: "",
        password: "",
        host: null,
        port: null,
        path: [],
        query: null,
        fragment: null,
        cannotBeABaseURL: false
      };
      var _res = trimControlChars(this.input);
      if (_res !== this.input) {
        this.parseError = true;
      }
      this.input = _res;
    }
    var res = trimTabAndNewline(this.input);
    if (res !== this.input) {
      this.parseError = true;
    }
    this.input = res;
    this.state = stateOverride || "scheme start";
    this.buffer = "";
    this.atFlag = false;
    this.arrFlag = false;
    this.passwordTokenSeenFlag = false;
    this.input = punycode.ucs2.decode(this.input);
    for (; this.pointer <= this.input.length; ++this.pointer) {
      var c = this.input[this.pointer];
      var cStr = isNaN(c) ? undefined : String.fromCodePoint(c);

      // exec state machine
      var ret = this["parse " + this.state](c, cStr);
      if (!ret) {
        break; // terminate algorithm
      } else if (ret === failure) {
        this.failure = true;
        break;
      }
    }
  }
  URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
    if (infra.isASCIIAlpha(c)) {
      this.buffer += cStr.toLowerCase();
      this.state = "scheme";
    } else if (!this.stateOverride) {
      this.state = "no scheme";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
    if (infra.isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
      this.buffer += cStr.toLowerCase();
    } else if (c === 58) {
      if (this.stateOverride) {
        if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
          return false;
        }
        if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
          return false;
        }
        if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
          return false;
        }
        if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
          return false;
        }
      }
      this.url.scheme = this.buffer;
      if (this.stateOverride) {
        if (this.url.port === defaultPort(this.url.scheme)) {
          this.url.port = null;
        }
        return false;
      }
      this.buffer = "";
      if (this.url.scheme === "file") {
        if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
          this.parseError = true;
        }
        this.state = "file";
      } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
        this.state = "special relative or authority";
      } else if (isSpecial(this.url)) {
        this.state = "special authority slashes";
      } else if (this.input[this.pointer + 1] === 47) {
        this.state = "path or authority";
        ++this.pointer;
      } else {
        this.url.cannotBeABaseURL = true;
        this.url.path.push("");
        this.state = "cannot-be-a-base-URL path";
      }
    } else if (!this.stateOverride) {
      this.buffer = "";
      this.state = "no scheme";
      this.pointer = -1;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
    if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
      return failure;
    } else if (this.base.cannotBeABaseURL && c === 35) {
      this.url.scheme = this.base.scheme;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.url.cannotBeABaseURL = true;
      this.state = "fragment";
    } else if (this.base.scheme === "file") {
      this.state = "file";
      --this.pointer;
    } else {
      this.state = "relative";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "relative";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
    if (c === 47) {
      this.state = "authority";
    } else {
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
    this.url.scheme = this.base.scheme;
    if (isNaN(c)) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
    } else if (c === 47) {
      this.state = "relative slash";
    } else if (c === 63) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.state = "fragment";
    } else if (isSpecial(this.url) && c === 92) {
      this.parseError = true;
      this.state = "relative slash";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice(0, this.base.path.length - 1);
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
    if (isSpecial(this.url) && (c === 47 || c === 92)) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "special authority ignore slashes";
    } else if (c === 47) {
      this.state = "authority";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "special authority ignore slashes";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
    if (c !== 47 && c !== 92) {
      this.state = "authority";
      --this.pointer;
    } else {
      this.parseError = true;
    }
    return true;
  };
  URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
    if (c === 64) {
      this.parseError = true;
      if (this.atFlag) {
        this.buffer = "%40" + this.buffer;
      }
      this.atFlag = true;

      // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars
      var len = countSymbols(this.buffer);
      for (var pointer = 0; pointer < len; ++pointer) {
        var codePoint = this.buffer.codePointAt(pointer);
        if (codePoint === 58 && !this.passwordTokenSeenFlag) {
          this.passwordTokenSeenFlag = true;
          continue;
        }
        var encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
        if (this.passwordTokenSeenFlag) {
          this.url.password += encodedCodePoints;
        } else {
          this.url.username += encodedCodePoints;
        }
      }
      this.buffer = "";
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
      if (this.atFlag && this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      this.pointer -= countSymbols(this.buffer) + 1;
      this.buffer = "";
      this.state = "host";
    } else {
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
    if (this.stateOverride && this.url.scheme === "file") {
      --this.pointer;
      this.state = "file host";
    } else if (c === 58 && !this.arrFlag) {
      if (this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      var host = parseHost(this.buffer, isNotSpecial(this.url));
      if (host === failure) {
        return failure;
      }
      this.url.host = host;
      this.buffer = "";
      this.state = "port";
      if (this.stateOverride === "hostname") {
        return false;
      }
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
      --this.pointer;
      if (isSpecial(this.url) && this.buffer === "") {
        this.parseError = true;
        return failure;
      } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
        this.parseError = true;
        return false;
      }
      var _host = parseHost(this.buffer, isNotSpecial(this.url));
      if (_host === failure) {
        return failure;
      }
      this.url.host = _host;
      this.buffer = "";
      this.state = "path start";
      if (this.stateOverride) {
        return false;
      }
    } else {
      if (c === 91) {
        this.arrFlag = true;
      } else if (c === 93) {
        this.arrFlag = false;
      }
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
    if (infra.isASCIIDigit(c)) {
      this.buffer += cStr;
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
      if (this.buffer !== "") {
        var port = parseInt(this.buffer);
        if (port > Math.pow(2, 16) - 1) {
          this.parseError = true;
          return failure;
        }
        this.url.port = port === defaultPort(this.url.scheme) ? null : port;
        this.buffer = "";
      }
      if (this.stateOverride) {
        return false;
      }
      this.state = "path start";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }
    return true;
  };
  var fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);
  function startsWithWindowsDriveLetter(input, pointer) {
    var length = input.length - pointer;
    return length >= 2 && isWindowsDriveLetterCodePoints(input[pointer], input[pointer + 1]) && (length === 2 || fileOtherwiseCodePoints.has(input[pointer + 2]));
  }
  URLStateMachine.prototype["parse file"] = function parseFile(c) {
    this.url.scheme = "file";
    if (c === 47 || c === 92) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "file slash";
    } else if (this.base !== null && this.base.scheme === "file") {
      if (isNaN(c)) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 63) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (!startsWithWindowsDriveLetter(this.input, this.pointer)) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          shortenPath(this.url);
        } else {
          this.parseError = true;
        }
        this.state = "path";
        --this.pointer;
      }
    } else {
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
    if (c === 47 || c === 92) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "file host";
    } else {
      if (this.base !== null && this.base.scheme === "file" && !startsWithWindowsDriveLetter(this.input, this.pointer)) {
        if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
          this.url.path.push(this.base.path[0]);
        } else {
          this.url.host = this.base.host;
        }
      }
      this.state = "path";
      --this.pointer;
    }
    return true;
  };
  URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
    if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
      --this.pointer;
      if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
        this.parseError = true;
        this.state = "path";
      } else if (this.buffer === "") {
        this.url.host = "";
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
      } else {
        var host = parseHost(this.buffer, isNotSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        if (host === "localhost") {
          host = "";
        }
        this.url.host = host;
        if (this.stateOverride) {
          return false;
        }
        this.buffer = "";
        this.state = "path start";
      }
    } else {
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
    if (isSpecial(this.url)) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "path";
      if (c !== 47 && c !== 92) {
        --this.pointer;
      }
    } else if (!this.stateOverride && c === 63) {
      this.url.query = "";
      this.state = "query";
    } else if (!this.stateOverride && c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    } else if (c !== undefined) {
      this.state = "path";
      if (c !== 47) {
        --this.pointer;
      }
    }
    return true;
  };
  URLStateMachine.prototype["parse path"] = function parsePath(c) {
    if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
      if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
      }
      if (isDoubleDot(this.buffer)) {
        shortenPath(this.url);
        if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        }
      } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
        this.url.path.push("");
      } else if (!isSingleDot(this.buffer)) {
        if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
          if (this.url.host !== "" && this.url.host !== null) {
            this.parseError = true;
            this.url.host = "";
          }
          this.buffer = this.buffer[0] + ":";
        }
        this.url.path.push(this.buffer);
      }
      this.buffer = "";
      if (this.url.scheme === "file" && (c === undefined || c === 63 || c === 35)) {
        while (this.url.path.length > 1 && this.url.path[0] === "") {
          this.parseError = true;
          this.url.path.shift();
        }
      }
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      }
      if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else {
      // TODO: If c is not a URL code point and not "%", parse error.

      if (c === 37 && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.buffer += percentEncodeChar(c, isPathPercentEncode);
    }
    return true;
  };
  URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
    if (c === 63) {
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    } else {
      // TODO: Add: not a URL code point
      if (!isNaN(c) && c !== 37) {
        this.parseError = true;
      }
      if (c === 37 && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      if (!isNaN(c)) {
        this.url.path[0] += percentEncodeChar(c, isC0ControlPercentEncode);
      }
    }
    return true;
  };
  URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
    if (isNaN(c) || !this.stateOverride && c === 35) {
      if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
        this.encodingOverride = "utf-8";
      }
      var buffer = Buffer.from(this.buffer); // TODO: Use encoding override instead
      for (var i = 0; i < buffer.length; ++i) {
        if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 || buffer[i] === 0x3C || buffer[i] === 0x3E || buffer[i] === 0x27 && isSpecial(this.url)) {
          this.url.query += percentEncode(buffer[i]);
        } else {
          this.url.query += String.fromCodePoint(buffer[i]);
        }
      }
      this.buffer = "";
      if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else {
      // TODO: If c is not a URL code point and not "%", parse error.
      if (c === 37 && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.buffer += cStr;
    }
    return true;
  };
  URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
    if (isNaN(c)) {// do nothing
    } else if (c === 0x0) {
      this.parseError = true;
    } else {
      // TODO: If c is not a URL code point and not "%", parse error.
      if (c === 37 && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }
      this.url.fragment += percentEncodeChar(c, isFragmentPercentEncode);
    }
    return true;
  };
  function serializeURL(url, excludeFragment) {
    var output = url.scheme + ":";
    if (url.host !== null) {
      output += "//";
      if (url.username !== "" || url.password !== "") {
        output += url.username;
        if (url.password !== "") {
          output += ":" + url.password;
        }
        output += "@";
      }
      output += serializeHost(url.host);
      if (url.port !== null) {
        output += ":" + url.port;
      }
    } else if (url.host === null && url.scheme === "file") {
      output += "//";
    }
    if (url.cannotBeABaseURL) {
      output += url.path[0];
    } else {
      for (var string of url.path) {
        output += "/" + string;
      }
    }
    if (url.query !== null) {
      output += "?" + url.query;
    }
    if (!excludeFragment && url.fragment !== null) {
      output += "#" + url.fragment;
    }
    return output;
  }
  function serializeOrigin(tuple) {
    var result = tuple.scheme + "://";
    result += serializeHost(tuple.host);
    if (tuple.port !== null) {
      result += ":" + tuple.port;
    }
    return result;
  }
  module.exports.serializeURL = serializeURL;
  module.exports.serializeURLOrigin = function (url) {
    // https://url.spec.whatwg.org/#concept-url-origin
    switch (url.scheme) {
      case "blob":
        try {
          return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
        } catch (e) {
          // serializing an opaque origin returns "null"
          return "null";
        }
      case "ftp":
      case "http":
      case "https":
      case "ws":
      case "wss":
        return serializeOrigin({
          scheme: url.scheme,
          host: url.host,
          port: url.port
        });
      case "file":
        // The spec says:
        // > Unfortunate as it is, this is left as an exercise to the reader. When in doubt, return a new opaque origin.
        // Browsers tested so far:
        // - Chrome says "file://", but treats file: URLs as cross-origin for most (all?) purposes; see e.g.
        //   https://bugs.chromium.org/p/chromium/issues/detail?id=37586
        // - Firefox says "null", but treats file: URLs as same-origin sometimes based on directory stuff; see
        //   https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Same-origin_policy_for_file:_URIs
        return "null";
      default:
        // serializing an opaque origin returns "null"
        return "null";
    }
  };
  module.exports.basicURLParse = function (input, options) {
    if (options === undefined) {
      options = {};
    }
    var usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
    if (usm.failure) {
      return null;
    }
    return usm.url;
  };
  module.exports.setTheUsername = function (url, username) {
    url.username = "";
    var decoded = punycode.ucs2.decode(username);
    for (var i = 0; i < decoded.length; ++i) {
      url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
    }
  };
  module.exports.setThePassword = function (url, password) {
    url.password = "";
    var decoded = punycode.ucs2.decode(password);
    for (var i = 0; i < decoded.length; ++i) {
      url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
    }
  };
  module.exports.serializeHost = serializeHost;
  module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
  module.exports.serializeInteger = function (integer) {
    return String(integer);
  };
  module.exports.parseURL = function (input, options) {
    if (options === undefined) {
      options = {};
    }

    // We don't handle blobs, so this just delegates:
    return module.exports.basicURLParse(input, {
      baseURL: options.baseURL,
      encodingOverride: options.encodingOverride
    });
  };
},22,[23,26,27,28]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  /* eslint-disable no-proto */

  'use strict';

  var base64 = require(_dependencyMap[0]);
  var ieee754 = require(_dependencyMap[1]);
  var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation
  ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
  : null;
  exports.Buffer = Buffer;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;
  var K_MAX_LENGTH = 0x7fffffff;
  exports.kMaxLength = K_MAX_LENGTH;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Print warning and recommend using `buffer` v4.x which has an Object
   *               implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * We report that the browser does not support typed arrays if the are not subclassable
   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
   * for __proto__ and has a buggy typed array implementation.
   */
  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
  }
  function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
      var arr = new Uint8Array(1);
      var proto = {
        foo: function () {
          return 42;
        }
      };
      Object.setPrototypeOf(proto, Uint8Array.prototype);
      Object.setPrototypeOf(arr, proto);
      return arr.foo() === 42;
    } catch (e) {
      return false;
    }
  }
  Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function () {
      if (!Buffer.isBuffer(this)) return undefined;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function () {
      if (!Buffer.isBuffer(this)) return undefined;
      return this.byteOffset;
    }
  });
  function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new TypeError('The "string" argument must be of type string. Received type number');
      }
      return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
  }
  Buffer.poolSize = 8192; // not used by this implementation

  function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') {
      return fromString(value, encodingOrOffset);
    }
    if (ArrayBuffer.isView(value)) {
      return fromArrayView(value);
    }
    if (value == null) {
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    }
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type number');
    }
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) {
      return Buffer.from(valueOf, encodingOrOffset, length);
    }
    var b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
      return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    }
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
  };

  // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
  // https://github.com/feross/buffer/pull/148
  Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(Buffer, Uint8Array);
  function assertSize(size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be of type number');
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
  }
  function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(size);
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpreted as a start offset.
      return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }
    return createBuffer(size);
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(size, fill, encoding);
  };
  function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(size);
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(size);
  };
  function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }
    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      buf = buf.slice(0, actual);
    }
    return buf;
  }
  function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for (var i = 0; i < length; i += 1) {
      buf[i] = array[i] & 255;
    }
    return buf;
  }
  function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
      var copy = new Uint8Array(arrayView);
      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
  }
  function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }
    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }
    var buf;
    if (byteOffset === undefined && length === undefined) {
      buf = new Uint8Array(array);
    } else if (length === undefined) {
      buf = new Uint8Array(array, byteOffset);
    } else {
      buf = new Uint8Array(array, byteOffset, length);
    }

    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
  }
  function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
      var len = checked(obj.length) | 0;
      var buf = createBuffer(len);
      if (buf.length === 0) {
        return buf;
      }
      obj.copy(buf, 0, 0, len);
      return buf;
    }
    if (obj.length !== undefined) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
      return fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }
  function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + ' bytes');
    }
    return length | 0;
  }
  function SlowBuffer(length) {
    if (+length != length) {
      // eslint-disable-line eqeqeq
      length = 0;
    }
    return Buffer.alloc(+length);
  }
  Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
  };
  Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    }
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };
  Buffer.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true;
      default:
        return false;
    }
  };
  Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
      return Buffer.alloc(0);
    }
    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (isInstance(buf, Uint8Array)) {
        if (pos + buf.length > buffer.length) {
          Buffer.from(buf).copy(buffer, pos);
        } else {
          Uint8Array.prototype.set.call(buffer, buf, pos);
        }
      } else if (!Buffer.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      } else {
        buf.copy(buffer, pos);
      }
      pos += buf.length;
    }
    return buffer;
  };
  function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) {
      return string.length;
    }
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength;
    }
    if (typeof string !== 'string') {
      throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
    }
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len;
        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2;
        case 'hex':
          return len >>> 1;
        case 'base64':
          return base64ToBytes(string).length;
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
          }
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength;
  function slowToString(encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return '';
    }
    if (end === undefined || end > this.length) {
      end = this.length;
    }
    if (end <= 0) {
      return '';
    }

    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
      return '';
    }
    if (!encoding) encoding = 'utf8';
    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end);
        case 'ascii':
          return asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end);
        case 'base64':
          return base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
  // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
  // reliably in a browserify context because there could be multiple different
  // copies of the 'buffer' package in use. This method works even for Buffer
  // instances that were created from another copy of the `buffer` package.
  // See: https://github.com/feross/buffer/issues/154
  Buffer.prototype._isBuffer = true;
  function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }
  Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits');
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this;
  };
  Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits');
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this;
  };
  Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits');
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this;
  };
  Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  Buffer.prototype.toLocaleString = Buffer.prototype.toString;
  Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
  };
  Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
  };
  if (customInspectSymbol) {
    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
  }
  Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer.from(target, target.offset, target.byteLength);
    }
    if (!Buffer.isBuffer(target)) {
      throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
    }
    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index');
    }
    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }
    if (thisStart >= thisEnd) {
      return -1;
    }
    if (start >= end) {
      return 1;
    }
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
      }
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset; // Coerce to Number.
    if (numberIsNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : buffer.length - 1;
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1;else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;else return -1;
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1;
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
      }
      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
  }
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read(buf, i) {
      if (indexSize === 1) {
        return buf[i];
      } else {
        return buf.readUInt16BE(i * indexSize);
      }
    }
    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break;
          }
        }
        if (found) return i;
      }
    }
    return -1;
  }
  Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };
  Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };
  Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };
  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    var strLen = string.length;
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (numberIsNaN(parsed)) return i;
      buf[offset + i] = parsed;
    }
    return i;
  }
  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }
  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }
  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }
  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }
  Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
      // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset >>> 0;
      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    } else {
      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    }
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds');
    }
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
          return asciiWrite(this, string, offset, length);
        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length);
        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  Buffer.prototype.toJSON = function toJSON() {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }
      res.push(codePoint);
      i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;
  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret;
  }
  function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
    for (var i = start; i < end; ++i) {
      out += hexSliceLookupTable[buf[i]];
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for (var i = 0; i < bytes.length - 1; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res;
  }
  Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }
    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
  }
  Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    return val;
  };
  Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }
    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }
    return val;
  };
  Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
  };
  Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };
  Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };
  Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
  };
  Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };
  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };
  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };
  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
  };
  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };
  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };
  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };
  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };
  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
  };
  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
  };
  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
  };
  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
  };
  function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
  }
  Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
  };
  Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
  };
  Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
  };
  Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
  };
  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
  };
  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
  };
  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
  };
  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
  };
  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
  };
  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
  }
  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };
  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };
  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157e+308);
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };
  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds');
    }
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
      // Use built-in when available, missing from IE11
      this.copyWithin(targetStart, start, end);
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    }
    return len;
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string');
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding);
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
          // Fast path: If `val` fits into a single byte, use that numeric value.
          val = code;
        }
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    } else if (typeof val === 'boolean') {
      val = Number(val);
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index');
    }
    if (end <= start) {
      return this;
    }
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
      var len = bytes.length;
      if (len === 0) {
        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
      }
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }
    return this;
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
  function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str;
  }
  function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          }

          // valid lead
          leadSurrogate = codePoint;
          continue;
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue;
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }
      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break;
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break;
        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break;
        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break;
        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else {
        throw new Error('Invalid code point');
      }
    }
    return bytes;
  }
  function asciiToBytes(str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }
  function blitBuffer(src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if (i + offset >= dst.length || i >= src.length) break;
      dst[i + offset] = src[i];
    }
    return i;
  }

  // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
  // the `instanceof` check but they should be treated as of that type.
  // See: https://github.com/feross/buffer/issues/166
  function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
  }
  function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj; // eslint-disable-line no-self-compare
  }

  // Create lookup table for `toString('hex')`
  // See: https://github.com/feross/buffer/issues/219
  var hexSliceLookupTable = function () {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
    for (var i = 0; i < 16; ++i) {
      var i16 = i * 16;
      for (var j = 0; j < 16; ++j) {
        table[i16 + j] = alphabet[i] + alphabet[j];
      }
    }
    return table;
  }();
},23,[24,25]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  exports.byteLength = byteLength;
  exports.toByteArray = toByteArray;
  exports.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  // Support decoding URL-safe base64 strings, as Node.js does.
  // See: https://en.wikipedia.org/wiki/Base64#URL_applications
  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
  function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    }

    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }

  // base64 is 4/3 + up to two characters of the original data
  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;

    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for (i = 0; i < len; i += 4) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[curByte++] = tmp >> 16 & 0xFF;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }
  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
      output.push(tripletToBase64(tmp));
    }
    return output.join('');
  }
  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }
    return parts.join('');
  }
},24,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
  exports.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  };
  exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
    buffer[offset + i - d] |= s * 128;
  };
},25,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  /** Highest positive signed 32-bit float value */
  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  var base = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128; // 0x80
  var delimiter = '-'; // '\x2D'

  /** Regular expressions */
  var regexPunycode = /^xn--/;
  var regexNonASCII = /[^\0-\x7F]/; // Note: U+007F DEL is excluded too.
  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  /** Error messages */
  var errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  };

  /** Convenience shortcuts */
  var baseMinusTMin = 35;
  var floor = Math.floor;
  var stringFromCharCode = String.fromCharCode;

  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */
  function error(type) {
    throw new RangeError(errors[type]);
  }

  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */
  function map(array, callback) {
    var result = [];
    var length = array.length;
    while (length--) {
      result[length] = callback(array[length]);
    }
    return result;
  }

  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {String} A new string of characters returned by the callback
   * function.
   */
  function mapDomain(domain, callback) {
    var parts = domain.split('@');
    var result = '';
    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      domain = parts[1];
    }
    // Avoid `split(regex)` for IE8 compatibility. See #17.
    domain = domain.replace(regexSeparators, '\x2E');
    var labels = domain.split('.');
    var encoded = map(labels, callback).join('.');
    return result + encoded;
  }

  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */
  function ucs2decode(string) {
    var output = [];
    var counter = 0;
    var length = string.length;
    while (counter < length) {
      var value = string.charCodeAt(counter++);
      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // It's a high surrogate, and there is a next character.
        var extra = string.charCodeAt(counter++);
        if ((extra & 0xFC00) == 0xDC00) {
          // Low surrogate.
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // It's an unmatched surrogate; only append this code unit, in case the
          // next code unit is the high surrogate of a surrogate pair.
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }

  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */
  var ucs2encode = codePoints => String.fromCodePoint(...codePoints);

  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */
  var basicToDigit = function (codePoint) {
    if (codePoint >= 0x30 && codePoint < 0x3A) {
      return 26 + (codePoint - 0x30);
    }
    if (codePoint >= 0x41 && codePoint < 0x5B) {
      return codePoint - 0x41;
    }
    if (codePoint >= 0x61 && codePoint < 0x7B) {
      return codePoint - 0x61;
    }
    return base;
  };

  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */
  var digitToBasic = function (digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  };

  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */
  var adapt = function (delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for /* no initialization */
    (; delta > 455; k += base) {
      delta = floor(delta / baseMinusTMin);
    }
    return floor(k + 36 * delta / (delta + skew));
  };

  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */
  var decode = function (input) {
    // Don't use UCS-2.
    var output = [];
    var inputLength = input.length;
    var i = 0;
    var n = initialN;
    var bias = initialBias;

    // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.

    var basic = input.lastIndexOf(delimiter);
    if (basic < 0) {
      basic = 0;
    }
    for (var j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error('not-basic');
      }
      output.push(input.charCodeAt(j));
    }

    // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.

    for /* no final expression */
    (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) {
      // `index` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into `delta`,
      // which gets added to `i`. The overflow checking is easier
      // if we increase `i` as we go, then subtract off its starting
      // value at the end to obtain `delta`.
      var oldi = i;
      for /* no condition */
      (var w = 1, k = base;; k += base) {
        if (index >= inputLength) {
          error('invalid-input');
        }
        var digit = basicToDigit(input.charCodeAt(index++));
        if (digit >= base) {
          error('invalid-input');
        }
        if (digit > floor((maxInt - i) / w)) {
          error('overflow');
        }
        i += digit * w;
        var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
        if (digit < t) {
          break;
        }
        var baseMinusT = base - t;
        if (w > floor(maxInt / baseMinusT)) {
          error('overflow');
        }
        w *= baseMinusT;
      }
      var out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0);

      // `i` was supposed to wrap around from `out` to `0`,
      // incrementing `n` each time, so we'll fix that now:
      if (floor(i / out) > maxInt - n) {
        error('overflow');
      }
      n += floor(i / out);
      i %= out;

      // Insert `n` at position `i` of the output.
      output.splice(i++, 0, n);
    }
    return String.fromCodePoint(...output);
  };

  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */
  var encode = function (input) {
    var output = [];

    // Convert the input in UCS-2 to an array of Unicode code points.
    input = ucs2decode(input);

    // Cache the length.
    var inputLength = input.length;

    // Initialize the state.
    var n = initialN;
    var delta = 0;
    var bias = initialBias;

    // Handle the basic code points.
    for (var currentValue of input) {
      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }
    var basicLength = output.length;
    var handledCPCount = basicLength;

    // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.

    // Finish the basic string with a delimiter unless it's empty.
    if (basicLength) {
      output.push(delimiter);
    }

    // Main encoding loop:
    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      var m = maxInt;
      for (var _currentValue of input) {
        if (_currentValue >= n && _currentValue < m) {
          m = _currentValue;
        }
      }

      // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow.
      var handledCPCountPlusOne = handledCPCount + 1;
      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }
      delta += (m - n) * handledCPCountPlusOne;
      n = m;
      for (var _currentValue2 of input) {
        if (_currentValue2 < n && ++delta > maxInt) {
          error('overflow');
        }
        if (_currentValue2 === n) {
          // Represent delta as a generalized variable-length integer.
          var q = delta;
          for /* no condition */
          (var k = base;; k += base) {
            var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (q < t) {
              break;
            }
            var qMinusT = q - t;
            var baseMinusT = base - t;
            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            q = floor(qMinusT / baseMinusT);
          }
          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }
      ++delta;
      ++n;
    }
    return output.join('');
  };

  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */
  var toUnicode = function (input) {
    return mapDomain(input, function (string) {
      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
  };

  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */
  var toASCII = function (input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
  };

  /*--------------------------------------------------------------------------*/

  /** Define the public API */
  var punycode = {
    /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
    'version': '2.3.1',
    /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
    'ucs2': {
      'decode': ucs2decode,
      'encode': ucs2encode
    },
    'decode': decode,
    'encode': encode,
    'toASCII': toASCII,
    'toUnicode': toUnicode
  };
  module.exports = punycode;
},26,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function isASCIIDigit(c) {
    return c >= 0x30 && c <= 0x39;
  }
  function isASCIIAlpha(c) {
    return c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A;
  }
  function isASCIIAlphanumeric(c) {
    return isASCIIAlpha(c) || isASCIIDigit(c);
  }
  function isASCIIHex(c) {
    return isASCIIDigit(c) || c >= 0x41 && c <= 0x46 || c >= 0x61 && c <= 0x66;
  }
  module.exports = {
    isASCIIDigit,
    isASCIIAlpha,
    isASCIIAlphanumeric,
    isASCIIHex
  };
},27,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _slicedToArray = require(_dependencyMap[0]);
  var _require = require(_dependencyMap[1]),
    Buffer = _require.Buffer;
  var _require2 = require(_dependencyMap[2]),
    isASCIIHex = _require2.isASCIIHex;
  function strictlySplitByteSequence(buf, cp) {
    var list = [];
    var last = 0;
    var i = buf.indexOf(cp);
    while (i >= 0) {
      list.push(buf.slice(last, i));
      last = i + 1;
      i = buf.indexOf(cp, last);
    }
    if (last !== buf.length) {
      list.push(buf.slice(last));
    }
    return list;
  }
  function replaceByteInByteSequence(buf, from, to) {
    var i = buf.indexOf(from);
    while (i >= 0) {
      buf[i] = to;
      i = buf.indexOf(from, i + 1);
    }
    return buf;
  }
  function percentEncode(c) {
    var hex = c.toString(16).toUpperCase();
    if (hex.length === 1) {
      hex = "0" + hex;
    }
    return "%" + hex;
  }
  function percentDecode(input) {
    var output = Buffer.alloc(input.byteLength);
    var ptr = 0;
    for (var i = 0; i < input.length; ++i) {
      if (input[i] !== 37 || !isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2])) {
        output[ptr++] = input[i];
      } else {
        output[ptr++] = parseInt(input.slice(i + 1, i + 3).toString(), 16);
        i += 2;
      }
    }
    return output.slice(0, ptr);
  }
  function parseUrlencoded(input) {
    var sequences = strictlySplitByteSequence(input, 38);
    var output = [];
    for (var bytes of sequences) {
      if (bytes.length === 0) {
        continue;
      }
      var name = undefined;
      var value = undefined;
      var indexOfEqual = bytes.indexOf(61);
      if (indexOfEqual >= 0) {
        name = bytes.slice(0, indexOfEqual);
        value = bytes.slice(indexOfEqual + 1);
      } else {
        name = bytes;
        value = Buffer.alloc(0);
      }
      name = replaceByteInByteSequence(Buffer.from(name), 43, 32);
      value = replaceByteInByteSequence(Buffer.from(value), 43, 32);
      output.push([percentDecode(name).toString(), percentDecode(value).toString()]);
    }
    return output;
  }
  function serializeUrlencodedByte(input) {
    var output = "";
    for (var byte of input) {
      if (byte === 32) {
        output += "+";
      } else if (byte === 42 || byte === 45 || byte === 46 || byte >= 48 && byte <= 57 || byte >= 65 && byte <= 90 || byte === 95 || byte >= 97 && byte <= 122) {
        output += String.fromCodePoint(byte);
      } else {
        output += percentEncode(byte);
      }
    }
    return output;
  }
  function serializeUrlencoded(tuples) {
    var encodingOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    var encoding = "utf-8";
    if (encodingOverride !== undefined) {
      encoding = encodingOverride;
    }
    var output = "";
    for (var _ref of tuples.entries()) {
      var _ref2 = _slicedToArray(_ref, 2);
      var i = _ref2[0];
      var tuple = _ref2[1];
      // TODO: handle encoding override
      var name = serializeUrlencodedByte(Buffer.from(tuple[0]));
      var value = tuple[1];
      if (tuple.length > 2 && tuple[2] !== undefined) {
        if (tuple[2] === "hidden" && name === "_charset_") {
          value = encoding;
        } else if (tuple[2] === "file") {
          // value is a File object
          value = value.name;
        }
      }
      value = serializeUrlencodedByte(Buffer.from(value));
      if (i !== 0) {
        output += "&";
      }
      output += `${name}=${value}`;
    }
    return output;
  }
  module.exports = {
    percentEncode,
    percentDecode,
    // application/x-www-form-urlencoded string parser
    parseUrlencoded(input) {
      return parseUrlencoded(Buffer.from(input));
    },
    // application/x-www-form-urlencoded serializer
    serializeUrlencoded
  };
},28,[29,23,27]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayWithHoles = require(_dependencyMap[0]);
  var iterableToArrayLimit = require(_dependencyMap[1]);
  var unsupportedIterableToArray = require(_dependencyMap[2]);
  var nonIterableRest = require(_dependencyMap[3]);
  function _slicedToArray(r, e) {
    return arrayWithHoles(r) || iterableToArrayLimit(r, e) || unsupportedIterableToArray(r, e) || nonIterableRest();
  }
  module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},29,[30,31,32,34]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
  }
  module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
},30,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = true,
        o = false;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) return;
          f = false;
        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true);
      } catch (r) {
        o = true, n = r;
      } finally {
        try {
          if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
},31,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var arrayLikeToArray = require(_dependencyMap[0]);
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : undefined;
    }
  }
  module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},32,[33]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
},33,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
},34,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var _slicedToArray = require(_dependencyMap[2]);
  var conversions = require(_dependencyMap[3]);
  var utils = require(_dependencyMap[4]);
  var impl = utils.implSymbol;
  var ctorRegistry = utils.ctorRegistrySymbol;
  var IteratorPrototype = Object.create(utils.IteratorPrototype, {
    next: {
      value: function next() {
        var internal = this[utils.iterInternalSymbol];
        var target = internal.target,
          kind = internal.kind,
          index = internal.index;
        var values = Array.from(target[impl]);
        var len = values.length;
        if (index >= len) {
          return {
            value: undefined,
            done: true
          };
        }
        var pair = values[index];
        internal.index = index + 1;
        var _pair$map = pair.map(utils.tryWrapperForImpl),
          _pair$map2 = _slicedToArray(_pair$map, 2),
          key = _pair$map2[0],
          value = _pair$map2[1];
        var result;
        switch (kind) {
          case "key":
            result = key;
            break;
          case "value":
            result = value;
            break;
          case "key+value":
            result = [key, value];
            break;
        }
        return {
          value: result,
          done: false
        };
      },
      writable: true,
      enumerable: true,
      configurable: true
    },
    [Symbol.toStringTag]: {
      value: "URLSearchParams Iterator",
      configurable: true
    }
  });
  var iface = {
    // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
    // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
    // implementing this mixin interface.
    _mixedIntoPredicates: [],
    is(obj) {
      if (obj) {
        if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
          return true;
        }
        for (var isMixedInto of module.exports._mixedIntoPredicates) {
          if (isMixedInto(obj)) {
            return true;
          }
        }
      }
      return false;
    },
    isImpl(obj) {
      if (obj) {
        if (obj instanceof Impl.implementation) {
          return true;
        }
        var wrapper = utils.wrapperForImpl(obj);
        for (var isMixedInto of module.exports._mixedIntoPredicates) {
          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      }
      return false;
    },
    convert(obj) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === undefined ? "The provided value" : _ref$context;
      if (module.exports.is(obj)) {
        return utils.implForWrapper(obj);
      }
      throw new TypeError(`${context} is not of type 'URLSearchParams'.`);
    },
    createDefaultIterator(target, kind) {
      var iterator = Object.create(IteratorPrototype);
      Object.defineProperty(iterator, utils.iterInternalSymbol, {
        value: {
          target,
          kind,
          index: 0
        },
        configurable: true
      });
      return iterator;
    },
    create(globalObject, constructorArgs, privateData) {
      if (globalObject[ctorRegistry] === undefined) {
        throw new Error("Internal error: invalid global object");
      }
      var ctor = globalObject[ctorRegistry]["URLSearchParams"];
      if (ctor === undefined) {
        throw new Error("Internal error: constructor URLSearchParams is not installed on the passed global object");
      }
      var obj = Object.create(ctor.prototype);
      obj = iface.setup(obj, globalObject, constructorArgs, privateData);
      return obj;
    },
    createImpl(globalObject, constructorArgs, privateData) {
      var obj = iface.create(globalObject, constructorArgs, privateData);
      return utils.implForWrapper(obj);
    },
    _internalSetup(obj) {},
    setup(obj, globalObject) {
      var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      privateData.wrapper = obj;
      iface._internalSetup(obj);
      Object.defineProperty(obj, impl, {
        value: new Impl.implementation(globalObject, constructorArgs, privateData),
        configurable: true
      });
      obj[impl][utils.wrapperSymbol] = obj;
      if (Impl.init) {
        Impl.init(obj[impl], privateData);
      }
      return obj;
    },
    install(globalObject) {
      var URLSearchParams = /*#__PURE__*/function () {
        function URLSearchParams() {
          _classCallCheck(this, URLSearchParams);
          var args = [];
          {
            var curArg = arguments[0];
            if (curArg !== undefined) {
              if (utils.isObject(curArg)) {
                if (curArg[Symbol.iterator] !== undefined) {
                  if (!utils.isObject(curArg)) {
                    throw new TypeError("Failed to construct 'URLSearchParams': parameter 1 sequence is not an iterable object.");
                  } else {
                    var V = [];
                    var tmp = curArg;
                    for (var nextItem of tmp) {
                      if (!utils.isObject(nextItem)) {
                        throw new TypeError("Failed to construct 'URLSearchParams': parameter 1 sequence's element is not an iterable object.");
                      } else {
                        var _V = [];
                        var _tmp = nextItem;
                        for (var _nextItem of _tmp) {
                          _nextItem = conversions["USVString"](_nextItem, {
                            context: "Failed to construct 'URLSearchParams': parameter 1 sequence's element's element"
                          });
                          _V.push(_nextItem);
                        }
                        nextItem = _V;
                      }
                      V.push(nextItem);
                    }
                    curArg = V;
                  }
                } else {
                  if (!utils.isObject(curArg)) {
                    throw new TypeError("Failed to construct 'URLSearchParams': parameter 1 record is not an object.");
                  } else {
                    var result = Object.create(null);
                    for (var key of Reflect.ownKeys(curArg)) {
                      var desc = Object.getOwnPropertyDescriptor(curArg, key);
                      if (desc && desc.enumerable) {
                        var typedKey = key;
                        typedKey = conversions["USVString"](typedKey, {
                          context: "Failed to construct 'URLSearchParams': parameter 1 record's key"
                        });
                        var typedValue = curArg[key];
                        typedValue = conversions["USVString"](typedValue, {
                          context: "Failed to construct 'URLSearchParams': parameter 1 record's value"
                        });
                        result[typedKey] = typedValue;
                      }
                    }
                    curArg = result;
                  }
                }
              } else {
                curArg = conversions["USVString"](curArg, {
                  context: "Failed to construct 'URLSearchParams': parameter 1"
                });
              }
            } else {
              curArg = "";
            }
            args.push(curArg);
          }
          return iface.setup(Object.create(this.constructor.prototype), globalObject, args);
        }
        return _createClass(URLSearchParams, [{
          key: "append",
          value: function append(name, value) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 2) {
              throw new TypeError("Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only " + arguments.length + " present.");
            }
            var args = [];
            {
              var curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'append' on 'URLSearchParams': parameter 1"
              });
              args.push(curArg);
            }
            {
              var _curArg = arguments[1];
              _curArg = conversions["USVString"](_curArg, {
                context: "Failed to execute 'append' on 'URLSearchParams': parameter 2"
              });
              args.push(_curArg);
            }
            return this[impl].append(...args);
          }
        }, {
          key: "delete",
          value: function _delete(name) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError("Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only " + arguments.length + " present.");
            }
            var args = [];
            {
              var curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'delete' on 'URLSearchParams': parameter 1"
              });
              args.push(curArg);
            }
            return this[impl].delete(...args);
          }
        }, {
          key: "get",
          value: function get(name) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError("Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only " + arguments.length + " present.");
            }
            var args = [];
            {
              var curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'get' on 'URLSearchParams': parameter 1"
              });
              args.push(curArg);
            }
            return this[impl].get(...args);
          }
        }, {
          key: "getAll",
          value: function getAll(name) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError("Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only " + arguments.length + " present.");
            }
            var args = [];
            {
              var curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'getAll' on 'URLSearchParams': parameter 1"
              });
              args.push(curArg);
            }
            return utils.tryWrapperForImpl(this[impl].getAll(...args));
          }
        }, {
          key: "has",
          value: function has(name) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError("Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only " + arguments.length + " present.");
            }
            var args = [];
            {
              var curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'has' on 'URLSearchParams': parameter 1"
              });
              args.push(curArg);
            }
            return this[impl].has(...args);
          }
        }, {
          key: "set",
          value: function set(name, value) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 2) {
              throw new TypeError("Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only " + arguments.length + " present.");
            }
            var args = [];
            {
              var curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'set' on 'URLSearchParams': parameter 1"
              });
              args.push(curArg);
            }
            {
              var _curArg2 = arguments[1];
              _curArg2 = conversions["USVString"](_curArg2, {
                context: "Failed to execute 'set' on 'URLSearchParams': parameter 2"
              });
              args.push(_curArg2);
            }
            return this[impl].set(...args);
          }
        }, {
          key: "sort",
          value: function sort() {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl].sort();
          }
        }, {
          key: "toString",
          value: function toString() {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return this[impl].toString();
          }
        }, {
          key: "keys",
          value: function keys() {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return module.exports.createDefaultIterator(this, "key");
          }
        }, {
          key: "values",
          value: function values() {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return module.exports.createDefaultIterator(this, "value");
          }
        }, {
          key: "entries",
          value: function entries() {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            return module.exports.createDefaultIterator(this, "key+value");
          }
        }, {
          key: "forEach",
          value: function forEach(callback) {
            if (!this || !module.exports.is(this)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError("Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present.");
            }
            if (typeof callback !== "function") {
              throw new TypeError("Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1 is not a function.");
            }
            var thisArg = arguments[1];
            var pairs = Array.from(this[impl]);
            var i = 0;
            while (i < pairs.length) {
              var _pairs$i$map = pairs[i].map(utils.tryWrapperForImpl),
                _pairs$i$map2 = _slicedToArray(_pairs$i$map, 2),
                key = _pairs$i$map2[0],
                value = _pairs$i$map2[1];
              callback.call(thisArg, value, key, this);
              pairs = Array.from(this[impl]);
              i++;
            }
          }
        }]);
      }();
      Object.defineProperties(URLSearchParams.prototype, {
        append: {
          enumerable: true
        },
        delete: {
          enumerable: true
        },
        get: {
          enumerable: true
        },
        getAll: {
          enumerable: true
        },
        has: {
          enumerable: true
        },
        set: {
          enumerable: true
        },
        sort: {
          enumerable: true
        },
        toString: {
          enumerable: true
        },
        keys: {
          enumerable: true
        },
        values: {
          enumerable: true
        },
        entries: {
          enumerable: true
        },
        forEach: {
          enumerable: true
        },
        [Symbol.toStringTag]: {
          value: "URLSearchParams",
          configurable: true
        },
        [Symbol.iterator]: {
          value: URLSearchParams.prototype.entries,
          configurable: true,
          writable: true
        }
      });
      if (globalObject[ctorRegistry] === undefined) {
        globalObject[ctorRegistry] = Object.create(null);
      }
      globalObject[ctorRegistry]["URLSearchParams"] = URLSearchParams;
      Object.defineProperty(globalObject, "URLSearchParams", {
        configurable: true,
        writable: true,
        value: URLSearchParams
      });
    }
  };
  // iface
  module.exports = iface;
  var Impl = require(_dependencyMap[5]);
},35,[10,11,29,19,20,36]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _classCallCheck = require(_dependencyMap[0]);
  var _createClass = require(_dependencyMap[1]);
  var urlencoded = require(_dependencyMap[2]);
  function stableSortBy(arr, compare) {
    return arr.map((item, index) => ({
      item,
      index
    })).sort((a, b) => compare(a.item, b.item) || a.index - b.index).map(_ref => {
      var item = _ref.item;
      return item;
    });
  }
  exports.implementation = /*#__PURE__*/function () {
    function URLSearchParamsImpl(globalObject, constructorArgs, _ref2) {
      var _ref2$doNotStripQMark = _ref2.doNotStripQMark,
        doNotStripQMark = _ref2$doNotStripQMark === undefined ? false : _ref2$doNotStripQMark;
      _classCallCheck(this, URLSearchParamsImpl);
      var init = constructorArgs[0];
      this._list = [];
      this._url = null;
      if (!doNotStripQMark && typeof init === "string" && init[0] === "?") {
        init = init.slice(1);
      }
      if (Array.isArray(init)) {
        for (var pair of init) {
          if (pair.length !== 2) {
            throw new TypeError("Failed to construct 'URLSearchParams': parameter 1 sequence's element does not contain exactly two elements.");
          }
          this._list.push([pair[0], pair[1]]);
        }
      } else if (typeof init === "object" && Object.getPrototypeOf(init) === null) {
        for (var name of Object.keys(init)) {
          var value = init[name];
          this._list.push([name, value]);
        }
      } else {
        this._list = urlencoded.parseUrlencoded(init);
      }
    }
    return _createClass(URLSearchParamsImpl, [{
      key: "_updateSteps",
      value: function _updateSteps() {
        if (this._url !== null) {
          var query = urlencoded.serializeUrlencoded(this._list);
          if (query === "") {
            query = null;
          }
          this._url._url.query = query;
        }
      }
    }, {
      key: "append",
      value: function append(name, value) {
        this._list.push([name, value]);
        this._updateSteps();
      }
    }, {
      key: "delete",
      value: function _delete(name) {
        var i = 0;
        while (i < this._list.length) {
          if (this._list[i][0] === name) {
            this._list.splice(i, 1);
          } else {
            i++;
          }
        }
        this._updateSteps();
      }
    }, {
      key: "get",
      value: function get(name) {
        for (var tuple of this._list) {
          if (tuple[0] === name) {
            return tuple[1];
          }
        }
        return null;
      }
    }, {
      key: "getAll",
      value: function getAll(name) {
        var output = [];
        for (var tuple of this._list) {
          if (tuple[0] === name) {
            output.push(tuple[1]);
          }
        }
        return output;
      }
    }, {
      key: "has",
      value: function has(name) {
        for (var tuple of this._list) {
          if (tuple[0] === name) {
            return true;
          }
        }
        return false;
      }
    }, {
      key: "set",
      value: function set(name, value) {
        var found = false;
        var i = 0;
        while (i < this._list.length) {
          if (this._list[i][0] === name) {
            if (found) {
              this._list.splice(i, 1);
            } else {
              found = true;
              this._list[i][1] = value;
              i++;
            }
          } else {
            i++;
          }
        }
        if (!found) {
          this._list.push([name, value]);
        }
        this._updateSteps();
      }
    }, {
      key: "sort",
      value: function sort() {
        this._list = stableSortBy(this._list, (a, b) => a[0] > b[0]);
        this._updateSteps();
      }
    }, {
      key: Symbol.iterator,
      value: function () {
        return this._list[Symbol.iterator]();
      }
    }, {
      key: "toString",
      value: function toString() {
        return urlencoded.serializeUrlencoded(this._list);
      }
    }]);
  }();
},36,[10,11,28]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ImportMetaRegistry = undefined;
  var _getBundleUrl = require(_dependencyMap[0]);
  // Copyright 2015-present 650 Industries. All rights reserved.

  /**
   * Registry to handle import.meta functionality for React Native environment
   * Similar to how it works in the web, but adapted for the RN context
   * https://github.com/wintercg/import-meta-registry
   */
  var ImportMetaRegistry = exports.ImportMetaRegistry = {
    get url() {
      return (0, _getBundleUrl.getBundleUrl)();
    }
  };
},37,[38]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getBundleUrl = getBundleUrl;
  var _NativeSourceCode = _interopRequireDefault(require(_dependencyMap[1]));
  // Copyright 2015-present 650 Industries. All rights reserved.

  /// <reference path="../ts-declarations/react-native.d.ts" />

  function getBundleUrl() {
    var scriptURL = _NativeSourceCode.default.getConstants().scriptURL;
    if (scriptURL == null) {
      return null;
    }
    if (scriptURL.startsWith('/')) {
      scriptURL = `file://${scriptURL}`;
    }
    var url = new URL(scriptURL);
    return url.toString();
  }
},38,[1,39]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeSourceCode = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeSourceCode).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeSourceCode[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeSourceCode[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeSourceCode.default;
},39,[40]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var NativeModule = TurboModuleRegistry.getEnforcing('SourceCode');
  var constants = null;
  var NativeSourceCode = {
    getConstants() {
      if (constants == null) {
        constants = NativeModule.getConstants();
      }
      return constants;
    }
  };
  var _default = exports.default = NativeSourceCode;
},40,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.get = get;
  exports.getEnforcing = getEnforcing;
  var _invariant = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeModules = require(_dependencyMap[2]).default;
  var turboModuleProxy = global.__turboModuleProxy;
  function requireModule(name) {
    if (turboModuleProxy != null) {
      var module = turboModuleProxy(name);
      if (module != null) {
        return module;
      }
    }
    if (global.RN$Bridgeless !== true || global.RN$TurboInterop === true || global.RN$UnifiedNativeModuleProxy === true) {
      var legacyModule = NativeModules[name];
      if (legacyModule != null) {
        return legacyModule;
      }
    }
    return null;
  }
  function get(name) {
    return requireModule(name);
  }
  function getEnforcing(name) {
    var module = requireModule(name);
    (0, _invariant.default)(module != null, `TurboModuleRegistry.getEnforcing(...): '${name}' could not be found. ` + 'Verify that a module by this name is registered in the native binary.');
    return module;
  }
},41,[1,42,43]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  'use strict';

  /**
   * Use invariant() to assert state which your program assumes to be true.
   *
   * Provide sprintf-style format (only %s is supported) and arguments
   * to provide information about what broke and what you were
   * expecting.
   *
   * The invariant message will be stripped in production, but the invariant
   * will remain to ensure logic does not differ in production.
   */
  var invariant = function (condition, format, a, b, c, d, e, f) {
    if (!condition) {
      var error;
      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }
      error.framesToPop = 1; // we don't care about invariant's own frame
      throw error;
    }
  };
  module.exports = invariant;
},42,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var BatchedBridge = require(_dependencyMap[2]).default;
  var invariant = require(_dependencyMap[3]);
  function genModule(config, moduleID) {
    if (!config) {
      return null;
    }
    var _config = (0, _slicedToArray2.default)(config, 5),
      moduleName = _config[0],
      constants = _config[1],
      methods = _config[2],
      promiseMethods = _config[3],
      syncMethods = _config[4];
    invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), "Module name prefixes should've been stripped by the native side but wasn't for " + moduleName);
    if (!constants && !methods) {
      return {
        name: moduleName
      };
    }
    var module = {};
    methods && methods.forEach((methodName, methodID) => {
      var isPromise = promiseMethods && arrayContains(promiseMethods, methodID) || false;
      var isSync = syncMethods && arrayContains(syncMethods, methodID) || false;
      invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
      var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
      module[methodName] = genMethod(moduleID, methodID, methodType);
    });
    Object.assign(module, constants);
    if (module.getConstants == null) {
      module.getConstants = () => constants || Object.freeze({});
    } else {
      console.warn(`Unable to define method 'getConstants()' on NativeModule '${moduleName}'. NativeModule '${moduleName}' already has a constant or method called 'getConstants'. Please remove it.`);
    }
    return {
      name: moduleName,
      module
    };
  }
  global.__fbGenNativeModule = genModule;
  function loadModule(name, moduleID) {
    invariant(global.nativeRequireModuleConfig, "Can't lazily create module without nativeRequireModuleConfig");
    var config = global.nativeRequireModuleConfig(name);
    var info = genModule(config, moduleID);
    return info && info.module;
  }
  function genMethod(moduleID, methodID, type) {
    var fn = null;
    if (type === 'promise') {
      fn = function promiseMethodWrapper() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var enqueueingFrameError = new Error();
        return new Promise((resolve, reject) => {
          BatchedBridge.enqueueNativeCall(moduleID, methodID, args, data => resolve(data), errorData => reject(updateErrorWithErrorData(errorData, enqueueingFrameError)));
        });
      };
    } else {
      fn = function nonPromiseMethodWrapper() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        var lastArg = args.length > 0 ? args[args.length - 1] : null;
        var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
        var hasSuccessCallback = typeof lastArg === 'function';
        var hasErrorCallback = typeof secondLastArg === 'function';
        hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
        var onSuccess = hasSuccessCallback ? lastArg : null;
        var onFail = hasErrorCallback ? secondLastArg : null;
        var callbackCount = hasSuccessCallback + hasErrorCallback;
        var newArgs = args.slice(0, args.length - callbackCount);
        if (type === 'sync') {
          return BatchedBridge.callNativeSyncHook(moduleID, methodID, newArgs, onFail, onSuccess);
        } else {
          BatchedBridge.enqueueNativeCall(moduleID, methodID, newArgs, onFail, onSuccess);
        }
      };
    }
    fn.type = type;
    return fn;
  }
  function arrayContains(array, value) {
    return array.indexOf(value) !== -1;
  }
  function updateErrorWithErrorData(errorData, error) {
    return Object.assign(error, errorData || {});
  }
  var NativeModules = {};
  if (global.nativeModuleProxy) {
    NativeModules = global.nativeModuleProxy;
  } else {
    var bridgeConfig = global.__fbBatchedBridgeConfig;
    invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');
    var defineLazyObjectProperty = require(_dependencyMap[4]).default;
    (bridgeConfig.remoteModuleConfig || []).forEach((config, moduleID) => {
      var info = genModule(config, moduleID);
      if (!info) {
        return;
      }
      if (info.module) {
        NativeModules[info.name] = info.module;
      } else {
        defineLazyObjectProperty(NativeModules, info.name, {
          get: () => loadModule(info.name, moduleID)
        });
      }
    });
  }
  var _default = exports.default = NativeModules;
},43,[1,29,44,42,7]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var MessageQueue = require(_dependencyMap[0]).default;
  var BatchedBridge = new MessageQueue();
  Object.defineProperty(global, '__fbBatchedBridge', {
    configurable: true,
    value: BatchedBridge
  });
  var _default = exports.default = BatchedBridge;
},44,[45]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var Systrace = require(_dependencyMap[3]);
  var deepFreezeAndThrowOnMutationInDev = require(_dependencyMap[4]).default;
  var stringifySafe = require(_dependencyMap[5]).default;
  var warnOnce = require(_dependencyMap[6]).default;
  var ErrorUtils = require(_dependencyMap[7]).default;
  var invariant = require(_dependencyMap[8]);
  var TO_JS = 0;
  var TO_NATIVE = 1;
  var MODULE_IDS = 0;
  var METHOD_IDS = 1;
  var PARAMS = 2;
  var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
  var TRACE_TAG_REACT_APPS = 131072;
  var DEBUG_INFO_LIMIT = 32;
  var MessageQueue = /*#__PURE__*/function () {
    function MessageQueue() {
      (0, _classCallCheck2.default)(this, MessageQueue);
      this._lazyCallableModules = {};
      this._queue = [[], [], [], 0];
      this._successCallbacks = new Map();
      this._failureCallbacks = new Map();
      this._callID = 0;
      this._lastFlush = 0;
      this._eventLoopStartTime = Date.now();
      this._reactNativeMicrotasksCallback = null;
      this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);
      this.flushedQueue = this.flushedQueue.bind(this);
      this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);
    }
    return (0, _createClass2.default)(MessageQueue, [{
      key: "callFunctionReturnFlushedQueue",
      value: function callFunctionReturnFlushedQueue(module, method, args) {
        this.__guard(() => {
          this.__callFunction(module, method, args);
        });
        return this.flushedQueue();
      }
    }, {
      key: "invokeCallbackAndReturnFlushedQueue",
      value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
        this.__guard(() => {
          this.__invokeCallback(cbID, args);
        });
        return this.flushedQueue();
      }
    }, {
      key: "flushedQueue",
      value: function flushedQueue() {
        this.__guard(() => {
          this.__callReactNativeMicrotasks();
        });
        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        return queue[0].length ? queue : null;
      }
    }, {
      key: "getEventLoopRunningTime",
      value: function getEventLoopRunningTime() {
        return Date.now() - this._eventLoopStartTime;
      }
    }, {
      key: "registerCallableModule",
      value: function registerCallableModule(name, module) {
        this._lazyCallableModules[name] = () => module;
      }
    }, {
      key: "registerLazyCallableModule",
      value: function registerLazyCallableModule(name, factory) {
        var module;
        var getValue = factory;
        this._lazyCallableModules[name] = () => {
          if (getValue) {
            module = getValue();
            getValue = null;
          }
          return module;
        };
      }
    }, {
      key: "getCallableModule",
      value: function getCallableModule(name) {
        var getValue = this._lazyCallableModules[name];
        return getValue ? getValue() : null;
      }
    }, {
      key: "callNativeSyncHook",
      value: function callNativeSyncHook(moduleID, methodID, params, onFail, onSucc) {
        this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
        return global.nativeCallSyncHook(moduleID, methodID, params);
      }
    }, {
      key: "processCallbacks",
      value: function processCallbacks(moduleID, methodID, params, onFail, onSucc) {
        if (onFail || onSucc) {
          onFail && params.push(this._callID << 1);
          onSucc && params.push(this._callID << 1 | 1);
          this._successCallbacks.set(this._callID, onSucc);
          this._failureCallbacks.set(this._callID, onFail);
        }
        this._callID++;
      }
    }, {
      key: "enqueueNativeCall",
      value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
        this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
        this._queue[MODULE_IDS].push(moduleID);
        this._queue[METHOD_IDS].push(methodID);
        this._queue[PARAMS].push(params);
        var now = Date.now();
        if (global.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {
          var queue = this._queue;
          this._queue = [[], [], [], this._callID];
          this._lastFlush = now;
          global.nativeFlushQueueImmediate(queue);
        }
        Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);
        if (this.__spy) {
          this.__spy({
            type: TO_NATIVE,
            module: moduleID + '',
            method: methodID,
            args: params
          });
        }
      }
    }, {
      key: "createDebugLookup",
      value: function createDebugLookup(moduleID, name, methods) {}
    }, {
      key: "setReactNativeMicrotasksCallback",
      value: function setReactNativeMicrotasksCallback(fn) {
        this._reactNativeMicrotasksCallback = fn;
      }
    }, {
      key: "__guard",
      value: function __guard(fn) {
        if (this.__shouldPauseOnThrow()) {
          fn();
        } else {
          try {
            fn();
          } catch (error) {
            ErrorUtils.reportFatalError(error);
          }
        }
      }
    }, {
      key: "__shouldPauseOnThrow",
      value: function __shouldPauseOnThrow() {
        return typeof DebuggerInternal !== 'undefined' && DebuggerInternal.shouldPauseOnThrow === true;
      }
    }, {
      key: "__callReactNativeMicrotasks",
      value: function __callReactNativeMicrotasks() {
        Systrace.beginEvent('JSTimers.callReactNativeMicrotasks()');
        try {
          if (this._reactNativeMicrotasksCallback != null) {
            this._reactNativeMicrotasksCallback();
          }
        } finally {
          Systrace.endEvent();
        }
      }
    }, {
      key: "__callFunction",
      value: function __callFunction(module, method, args) {
        this._lastFlush = Date.now();
        this._eventLoopStartTime = this._lastFlush;
        if (this.__spy) {
          Systrace.beginEvent(`${module}.${method}(${stringifySafe(args)})`);
        } else {
          Systrace.beginEvent(`${module}.${method}(...)`);
        }
        try {
          if (this.__spy) {
            this.__spy({
              type: TO_JS,
              module,
              method,
              args
            });
          }
          var moduleMethods = this.getCallableModule(module);
          if (!moduleMethods) {
            var callableModuleNames = Object.keys(this._lazyCallableModules);
            var n = callableModuleNames.length;
            var callableModuleNameList = callableModuleNames.join(', ');
            var isBridgelessMode = global.RN$Bridgeless === true ? 'true' : 'false';
            invariant(false, `Failed to call into JavaScript module method ${module}.${method}(). Module has not been registered as callable. Bridgeless Mode: ${isBridgelessMode}. Registered callable JavaScript modules (n = ${n}): ${callableModuleNameList}.
          A frequent cause of the error is that the application entry file path is incorrect. This can also happen when the JS bundle is corrupt or there is an early initialization error when loading React Native.`);
          }
          if (!moduleMethods[method]) {
            invariant(false, `Failed to call into JavaScript module method ${module}.${method}(). Module exists, but the method is undefined.`);
          }
          moduleMethods[method].apply(moduleMethods, args);
        } finally {
          Systrace.endEvent();
        }
      }
    }, {
      key: "__invokeCallback",
      value: function __invokeCallback(cbID, args) {
        this._lastFlush = Date.now();
        this._eventLoopStartTime = this._lastFlush;
        var callID = cbID >>> 1;
        var isSuccess = cbID & 1;
        var callback = isSuccess ? this._successCallbacks.get(callID) : this._failureCallbacks.get(callID);
        try {
          if (!callback) {
            return;
          }
          this._successCallbacks.delete(callID);
          this._failureCallbacks.delete(callID);
          callback(...args);
        } finally {}
      }
    }], [{
      key: "spy",
      value: function spy(spyOrToggle) {
        if (spyOrToggle === true) {
          MessageQueue.prototype.__spy = info => {
            console.log(`${info.type === TO_JS ? 'N->JS' : 'JS->N'} : ` + `${info.module != null ? info.module + '.' : ''}${info.method}` + `(${JSON.stringify(info.args)})`);
          };
        } else if (spyOrToggle === false) {
          MessageQueue.prototype.__spy = null;
        } else {
          MessageQueue.prototype.__spy = spyOrToggle;
        }
      }
    }]);
  }();
  var _default = exports.default = MessageQueue;
},45,[1,10,11,46,47,48,49,50,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.beginAsyncEvent = beginAsyncEvent;
  exports.beginEvent = beginEvent;
  exports.counterEvent = counterEvent;
  exports.endAsyncEvent = endAsyncEvent;
  exports.endEvent = endEvent;
  exports.isEnabled = isEnabled;
  exports.setEnabled = setEnabled;
  var TRACE_TAG_REACT_APPS = 131072;
  var _asyncCookie = 0;
  function isEnabled() {
    return global.nativeTraceIsTracing ? global.nativeTraceIsTracing(TRACE_TAG_REACT_APPS) : Boolean(global.__RCTProfileIsProfiling);
  }
  function setEnabled(_doEnable) {}
  function beginEvent(eventName, args) {
    if (isEnabled()) {
      var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
      global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, eventNameString, args);
    }
  }
  function endEvent(args) {
    if (isEnabled()) {
      global.nativeTraceEndSection(TRACE_TAG_REACT_APPS, args);
    }
  }
  function beginAsyncEvent(eventName, args) {
    var cookie = _asyncCookie;
    if (isEnabled()) {
      _asyncCookie++;
      var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
      global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, eventNameString, cookie, args);
    }
    return cookie;
  }
  function endAsyncEvent(eventName, cookie, args) {
    if (isEnabled()) {
      var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
      global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, eventNameString, cookie, args);
    }
  }
  function counterEvent(eventName, value) {
    if (isEnabled()) {
      var eventNameString = typeof eventName === 'function' ? eventName() : eventName;
      global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, eventNameString, value);
    }
  }
},46,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  function deepFreezeAndThrowOnMutationInDev(object) {
    return object;
  }
  var _default = exports.default = deepFreezeAndThrowOnMutationInDev;
},47,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createStringifySafeWithLimits = createStringifySafeWithLimits;
  exports.default = undefined;
  var _invariant = _interopRequireDefault(require(_dependencyMap[1]));
  function createStringifySafeWithLimits(limits) {
    var _limits$maxDepth = limits.maxDepth,
      maxDepth = _limits$maxDepth === undefined ? Number.POSITIVE_INFINITY : _limits$maxDepth,
      _limits$maxStringLimi = limits.maxStringLimit,
      maxStringLimit = _limits$maxStringLimi === undefined ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,
      _limits$maxArrayLimit = limits.maxArrayLimit,
      maxArrayLimit = _limits$maxArrayLimit === undefined ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,
      _limits$maxObjectKeys = limits.maxObjectKeysLimit,
      maxObjectKeysLimit = _limits$maxObjectKeys === undefined ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;
    var stack = [];
    function replacer(key, value) {
      while (stack.length && this !== stack[0]) {
        stack.shift();
      }
      if (typeof value === 'string') {
        var truncatedString = '...(truncated)...';
        if (value.length > maxStringLimit + truncatedString.length) {
          return value.substring(0, maxStringLimit) + truncatedString;
        }
        return value;
      }
      if (typeof value !== 'object' || value === null) {
        return value;
      }
      var retval = value;
      if (Array.isArray(value)) {
        if (stack.length >= maxDepth) {
          retval = `[ ... array with ${value.length} values ... ]`;
        } else if (value.length > maxArrayLimit) {
          retval = value.slice(0, maxArrayLimit).concat([`... extra ${value.length - maxArrayLimit} values truncated ...`]);
        }
      } else {
        (0, _invariant.default)(typeof value === 'object', 'This was already found earlier');
        var keys = Object.keys(value);
        if (stack.length >= maxDepth) {
          retval = `{ ... object with ${keys.length} keys ... }`;
        } else if (keys.length > maxObjectKeysLimit) {
          retval = {};
          for (var k of keys.slice(0, maxObjectKeysLimit)) {
            retval[k] = value[k];
          }
          var truncatedKey = '...(truncated keys)...';
          retval[truncatedKey] = keys.length - maxObjectKeysLimit;
        }
      }
      stack.unshift(retval);
      return retval;
    }
    return function stringifySafe(arg) {
      if (arg === undefined) {
        return 'undefined';
      } else if (arg === null) {
        return 'null';
      } else if (typeof arg === 'function') {
        try {
          return arg.toString();
        } catch (e) {
          return '[function unknown]';
        }
      } else if (arg instanceof Error) {
        return arg.name + ': ' + arg.message;
      } else {
        try {
          var ret = JSON.stringify(arg, replacer);
          if (ret === undefined) {
            return '["' + typeof arg + '" failed to stringify]';
          }
          return ret;
        } catch (e) {
          if (typeof arg.toString === 'function') {
            try {
              return arg.toString();
            } catch (E) {}
          }
        }
      }
      return '["' + typeof arg + '" failed to stringify]';
    };
  }
  var stringifySafe = createStringifySafeWithLimits({
    maxDepth: 10,
    maxStringLimit: 100,
    maxArrayLimit: 50,
    maxObjectKeysLimit: 50
  });
  var _default = exports.default = stringifySafe;
},48,[1,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var warnedKeys = {};
  function warnOnce(key, message) {
    if (warnedKeys[key]) {
      return;
    }
    console.warn(message);
    warnedKeys[key] = true;
  }
  var _default = exports.default = warnOnce;
},49,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = exports.default = global.ErrorUtils;
},50,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  require(_dependencyMap[0]);
  var _Asset2 = require(_dependencyMap[1]);
  Object.keys(_Asset2).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _Asset2[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _Asset2[key];
      }
    });
  });
  var _AssetHooks = require(_dependencyMap[2]);
  Object.keys(_AssetHooks).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _AssetHooks[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _AssetHooks[key];
      }
    });
  });
},51,[52,53,557]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _Asset = require(_dependencyMap[0]);
  var _PlatformUtils = require(_dependencyMap[1]);
  var _resolveAssetSource = _interopRequireWildcard(require(_dependencyMap[2]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  // Override React Native's asset resolution for `Image` components in contexts where it matters
  if (_PlatformUtils.IS_ENV_WITH_LOCAL_ASSETS) {
    var setTransformer = _resolveAssetSource.default.setCustomSourceTransformer || _resolveAssetSource.setCustomSourceTransformer;
    setTransformer(resolver => {
      try {
        // Bundler is using the hashAssetFiles plugin if and only if the fileHashes property exists
        if ('fileHashes' in resolver.asset && resolver.asset.fileHashes) {
          var asset = _Asset.Asset.fromMetadata(resolver.asset);
          if (asset.uri.startsWith(_Asset.ANDROID_EMBEDDED_URL_BASE_RESOURCE)) {
            // TODO(@kitten): See https://github.com/expo/expo/commit/ec940b57a87d99ab4f1d06d87126e662c3f04f04#r155340943
            // It's unclear whether this is sound since this may be our own AssetSourceResolver, which doesn't have this method
            // Please compare `AssetSourceResolver` type from `react-native/Libraries/Image/AssetSourceResolver` against `./AssetSourceResolver`
            return resolver.resourceIdentifierWithoutScale();
          }
          return resolver.fromSource(asset.downloaded ? asset.localUri : asset.uri);
        } else {
          return resolver.defaultAsset();
        }
      } catch {
        return resolver.defaultAsset();
      }
    });
  }
},52,[53,548,556]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Asset = exports.ANDROID_EMBEDDED_URL_BASE_RESOURCE = undefined;
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _registry = require(_dependencyMap[4]);
  var _expoModulesCore = require(_dependencyMap[5]);
  var _AssetSources = require(_dependencyMap[6]);
  var AssetUris = _interopRequireWildcard(require(_dependencyMap[7]));
  var _ExpoAsset = require(_dependencyMap[8]);
  var ImageAssets = _interopRequireWildcard(require(_dependencyMap[9]));
  var _LocalAssets = require(_dependencyMap[10]);
  var _PlatformUtils = require(_dependencyMap[11]);
  var _resolveAssetSource2 = _interopRequireDefault(require(_dependencyMap[12]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  /**
   * Android resource URL prefix.
   * @hidden
   */
  var ANDROID_EMBEDDED_URL_BASE_RESOURCE = exports.ANDROID_EMBEDDED_URL_BASE_RESOURCE = 'file:///android_res/';
  /**
   * The `Asset` class represents an asset in your app. It gives metadata about the asset (such as its
   * name and type) and provides facilities to load the asset data.
   */
  var Asset = exports.Asset = /*#__PURE__*/function () {
    function Asset(_ref) {
      var name = _ref.name,
        type = _ref.type,
        _ref$hash = _ref.hash,
        hash = _ref$hash === undefined ? null : _ref$hash,
        uri = _ref.uri,
        width = _ref.width,
        height = _ref.height;
      (0, _classCallCheck2.default)(this, Asset);
      /**
       * The MD5 hash of the asset's data.
       */
      this.hash = null;
      /**
       * If the asset has been downloaded (by calling [`downloadAsync()`](#downloadasync)), the
       * `file://` URI pointing to the local file on the device that contains the asset data.
       */
      this.localUri = null;
      /**
       * If the asset is an image, the width of the image data divided by the scale factor. The scale
       * factor is the number after `@` in the filename, or `1` if not present.
       */
      this.width = null;
      /**
       * If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.
       */
      this.height = null;
      this.downloading = false;
      /**
       * Whether the asset has finished downloading from a call to [`downloadAsync()`](#downloadasync).
       */
      this.downloaded = false;
      this._downloadCallbacks = [];
      this.name = name;
      this.type = type;
      this.hash = hash;
      this.uri = uri;
      if (typeof width === 'number') {
        this.width = width;
      }
      if (typeof height === 'number') {
        this.height = height;
      }
      if (hash) {
        this.localUri = (0, _LocalAssets.getLocalAssetUri)(hash, type);
        if (this.localUri?.startsWith(ANDROID_EMBEDDED_URL_BASE_RESOURCE)) {
          // Treat Android embedded resources as not downloaded state, because the uri is not direct accessible.
          this.uri = this.localUri;
          this.localUri = null;
        } else if (this.localUri) {
          this.downloaded = true;
        }
      }
    }
    // @needsAudit
    /**
     * A helper that wraps `Asset.fromModule(module).downloadAsync` for convenience.
     * @param moduleId An array of `require('path/to/file')` or external network URLs. Can also be
     * just one module or URL without an Array.
     * @return Returns a Promise that fulfills with an array of `Asset`s when the asset(s) has been
     * saved to disk.
     * @example
     * ```ts
     * const [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));
     * ```
     */
    return (0, _createClass2.default)(Asset, [{
      key: "downloadAsync",
      value: // @needsAudit
      /**
       * Downloads the asset data to a local file in the device's cache directory. Once the returned
       * promise is fulfilled without error, the [`localUri`](#localuri) field of this asset points
       * to a local file containing the asset data. The asset is only downloaded if an up-to-date local
       * file for the asset isn't already present due to an earlier download. The downloaded `Asset`
       * will be returned when the promise is resolved.
       * @return Returns a Promise which fulfills with an `Asset` instance.
       */
      function () {
        var _downloadAsync2 = (0, _asyncToGenerator2.default)(function* () {
          if (this.downloaded) {
            return this;
          }
          if (this.downloading) {
            yield new Promise((resolve, reject) => {
              this._downloadCallbacks.push({
                resolve,
                reject
              });
            });
            return this;
          }
          this.downloading = true;
          try {
            this.localUri = yield (0, _ExpoAsset.downloadAsync)(this.uri, this.hash, this.type);
            this.downloaded = true;
            this._downloadCallbacks.forEach(_ref2 => {
              var resolve = _ref2.resolve;
              return resolve();
            });
          } catch (e) {
            this._downloadCallbacks.forEach(_ref3 => {
              var reject = _ref3.reject;
              return reject(e);
            });
            throw e;
          } finally {
            this.downloading = false;
            this._downloadCallbacks = [];
          }
          return this;
        });
        function downloadAsync() {
          return _downloadAsync2.apply(this, arguments);
        }
        return downloadAsync;
      }()
    }], [{
      key: "loadAsync",
      value: function loadAsync(moduleId) {
        var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];
        return Promise.all(moduleIds.map(moduleId => Asset.fromModule(moduleId).downloadAsync()));
      }
      // @needsAudit
      /**
       * Returns the [`Asset`](#asset) instance representing an asset given its module or URL.
       * @param virtualAssetModule The value of `require('path/to/file')` for the asset or external
       * network URL
       * @return The [`Asset`](#asset) instance for the asset.
       */
    }, {
      key: "fromModule",
      value: function fromModule(virtualAssetModule) {
        if (typeof virtualAssetModule === 'string') {
          return Asset.fromURI(virtualAssetModule);
        }
        if (typeof virtualAssetModule === 'object' && 'uri' in virtualAssetModule && typeof virtualAssetModule.uri === 'string') {
          var extension = AssetUris.getFileExtension(virtualAssetModule.uri);
          return new Asset({
            name: '',
            type: extension.startsWith('.') ? extension.substring(1) : extension,
            hash: null,
            uri: virtualAssetModule.uri,
            width: virtualAssetModule.width,
            height: virtualAssetModule.height
          });
        }
        var meta = (0, _registry.getAssetByID)(virtualAssetModule);
        if (!meta) {
          throw new Error(`Module "${virtualAssetModule}" is missing from the asset registry`);
        }
        // Outside of the managed env we need the moduleId to initialize the asset
        // because resolveAssetSource depends on it
        if (!_PlatformUtils.IS_ENV_WITH_LOCAL_ASSETS) {
          // null-check is performed above with `getAssetByID`.
          var _resolveAssetSource = (0, _resolveAssetSource2.default)(virtualAssetModule),
            uri = _resolveAssetSource.uri;
          var asset = new Asset({
            name: meta.name,
            type: meta.type,
            hash: meta.hash,
            uri,
            width: meta.width,
            height: meta.height
          });
          // For images backward compatibility,
          // keeps localUri the same as uri for React Native's Image that
          // works fine with drawable resource names.

          Asset.byHash[meta.hash] = asset;
          return asset;
        }
        return Asset.fromMetadata(meta);
      }
      // @docsMissing
    }, {
      key: "fromMetadata",
      value: function fromMetadata(meta) {
        // The hash of the whole asset, not to be confused with the hash of a specific file returned
        // from `selectAssetSource`
        var metaHash = meta.hash;
        if (Asset.byHash[metaHash]) {
          return Asset.byHash[metaHash];
        }
        var _selectAssetSource = (0, _AssetSources.selectAssetSource)(meta),
          uri = _selectAssetSource.uri,
          hash = _selectAssetSource.hash;
        var asset = new Asset({
          name: meta.name,
          type: meta.type,
          hash,
          uri,
          width: meta.width,
          height: meta.height
        });
        Asset.byHash[metaHash] = asset;
        return asset;
      }
      // @docsMissing
    }, {
      key: "fromURI",
      value: function fromURI(uri) {
        if (Asset.byUri[uri]) {
          return Asset.byUri[uri];
        }
        // Possibly a Base64-encoded URI
        var type = '';
        if (uri.indexOf(';base64') > -1) {
          type = uri.split(';')[0].split('/')[1];
        } else {
          var extension = AssetUris.getFileExtension(uri);
          type = extension.startsWith('.') ? extension.substring(1) : extension;
        }
        var asset = new Asset({
          name: '',
          type,
          hash: null,
          uri
        });
        Asset.byUri[uri] = asset;
        return asset;
      }
    }]);
  }();
  Asset.byHash = {};
  Asset.byUri = {};
},53,[1,54,10,11,55,56,546,552,553,554,555,548,556]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function asyncGeneratorStep(n, t, e, r, o, a, c) {
    try {
      var i = n[a](c),
        u = i.value;
    } catch (n) {
      return void e(n);
    }
    i.done ? t(u) : Promise.resolve(u).then(r, o);
  }
  function _asyncToGenerator(n) {
    return function () {
      var t = this,
        e = arguments;
      return new Promise(function (r, o) {
        var a = n.apply(t, e);
        function _next(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
        }
        function _throw(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
        }
        _next(undefined);
      });
    };
  }
  module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
},54,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var assets = [];
  module.exports = {
    registerAsset: s => assets.push(s),
    getAssetByID: s => assets[s - 1]
  };
},55,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    NativeModule: true,
    SharedObject: true,
    SharedRef: true,
    Platform: true,
    uuid: true,
    EventEmitter: true,
    requireNativeViewManager: true,
    CodedError: true,
    UnavailabilityError: true,
    LegacyEventEmitter: true,
    NativeModulesProxy: true
  };
  Object.defineProperty(exports, "CodedError", {
    enumerable: true,
    get: function () {
      return _CodedError.CodedError;
    }
  });
  Object.defineProperty(exports, "EventEmitter", {
    enumerable: true,
    get: function () {
      return _EventEmitter.default;
    }
  });
  Object.defineProperty(exports, "LegacyEventEmitter", {
    enumerable: true,
    get: function () {
      return _LegacyEventEmitter.LegacyEventEmitter;
    }
  });
  Object.defineProperty(exports, "NativeModule", {
    enumerable: true,
    get: function () {
      return _NativeModule.default;
    }
  });
  Object.defineProperty(exports, "NativeModulesProxy", {
    enumerable: true,
    get: function () {
      return _NativeModulesProxy.default;
    }
  });
  Object.defineProperty(exports, "Platform", {
    enumerable: true,
    get: function () {
      return _Platform.default;
    }
  });
  Object.defineProperty(exports, "SharedObject", {
    enumerable: true,
    get: function () {
      return _SharedObject.default;
    }
  });
  Object.defineProperty(exports, "SharedRef", {
    enumerable: true,
    get: function () {
      return _SharedRef.default;
    }
  });
  Object.defineProperty(exports, "UnavailabilityError", {
    enumerable: true,
    get: function () {
      return _UnavailabilityError.UnavailabilityError;
    }
  });
  Object.defineProperty(exports, "requireNativeViewManager", {
    enumerable: true,
    get: function () {
      return _NativeViewManagerAdapter.requireNativeViewManager;
    }
  });
  Object.defineProperty(exports, "uuid", {
    enumerable: true,
    get: function () {
      return _uuid.default;
    }
  });
  require(_dependencyMap[1]);
  require(_dependencyMap[2]);
  var _NativeModule = _interopRequireDefault(require(_dependencyMap[3]));
  var _SharedObject = _interopRequireDefault(require(_dependencyMap[4]));
  var _SharedRef = _interopRequireDefault(require(_dependencyMap[5]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[6]));
  var _uuid = _interopRequireDefault(require(_dependencyMap[7]));
  var _EventEmitter = _interopRequireDefault(require(_dependencyMap[8]));
  var _NativeViewManagerAdapter = require(_dependencyMap[9]);
  var _requireNativeModule = require(_dependencyMap[10]);
  Object.keys(_requireNativeModule).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _requireNativeModule[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _requireNativeModule[key];
      }
    });
  });
  var _registerWebModule = require(_dependencyMap[11]);
  Object.keys(_registerWebModule).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _registerWebModule[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _registerWebModule[key];
      }
    });
  });
  var _TypedArrays = require(_dependencyMap[12]);
  Object.keys(_TypedArrays).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _TypedArrays[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _TypedArrays[key];
      }
    });
  });
  var _PermissionsInterface = require(_dependencyMap[13]);
  Object.keys(_PermissionsInterface).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _PermissionsInterface[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _PermissionsInterface[key];
      }
    });
  });
  var _PermissionsHook = require(_dependencyMap[14]);
  Object.keys(_PermissionsHook).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _PermissionsHook[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _PermissionsHook[key];
      }
    });
  });
  var _Refs = require(_dependencyMap[15]);
  Object.keys(_Refs).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _Refs[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _Refs[key];
      }
    });
  });
  var _useReleasingSharedObject = require(_dependencyMap[16]);
  Object.keys(_useReleasingSharedObject).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _useReleasingSharedObject[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _useReleasingSharedObject[key];
      }
    });
  });
  var _reload = require(_dependencyMap[17]);
  Object.keys(_reload).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _reload[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _reload[key];
      }
    });
  });
  var _CodedError = require(_dependencyMap[18]);
  var _UnavailabilityError = require(_dependencyMap[19]);
  var _LegacyEventEmitter = require(_dependencyMap[20]);
  var _NativeModulesProxy = _interopRequireDefault(require(_dependencyMap[21]));
},56,[1,57,525,526,528,529,522,530,534,535,536,537,538,539,540,541,542,543,524,544,545,59]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _NativeErrorManager = _interopRequireDefault(require(_dependencyMap[1]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[2]));
  var _CodedError = require(_dependencyMap[3]);
  // We have to export `CodedError` via global object to use in later in the C++ code.
  globalThis.ExpoModulesCore_CodedError = _CodedError.CodedError;
},57,[1,58,522,524]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeModulesProxy = _interopRequireDefault(require(_dependencyMap[1]));
  var _default = exports.default = _NativeModulesProxy.default.ExpoModulesCoreErrorManager;
},58,[1,59]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  // Copyright © 2024 650 Industries.
  // NOTE: Forcing this to be a client boundary so the errors are a bit clearer. In the future we can
  // make this a shim on the server by ignoring the globals that are missing in React Server contexts (Node.js).
  'use client';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _reactNative = require(_dependencyMap[0]);
  var LegacyNativeProxy = _reactNative.NativeModules?.NativeUnimoduleProxy;
  // Fixes `cannot find name 'global'.` in tests
  // @ts-ignore
  var ExpoNativeProxy = global.expo?.modules?.NativeModulesProxy;
  var modulesConstantsKey = 'modulesConstants';
  var exportedMethodsKey = 'exportedMethods';

  /**
   * @deprecated `NativeModulesProxy` is deprecated and might be removed in the future releases.
   * Use `requireNativeModule` or `requireOptionalNativeModule` instead.
   */
  var NativeModulesProxy = {};
  if (LegacyNativeProxy) {
    // use JSI proxy if available, fallback to legacy RN proxy
    var NativeProxy = ExpoNativeProxy ?? LegacyNativeProxy;
    Object.keys(NativeProxy[exportedMethodsKey]).forEach(moduleName => {
      // copy constants
      NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};

      // copy methods
      // TODO(@kitten): Annotate `NativeProxy` with abstract types to avoid implicit `any`
      NativeProxy[exportedMethodsKey][moduleName].forEach(methodInfo => {
        NativeModulesProxy[moduleName][methodInfo.name] = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          // Use the new proxy to call methods on legacy modules, if possible.
          if (ExpoNativeProxy?.callMethod) {
            return ExpoNativeProxy.callMethod(moduleName, methodInfo.name, args);
          }

          // Otherwise fall back to the legacy proxy.
          // This is deprecated and might be removed in SDK47 or later.
          var key = methodInfo.key,
            argumentsCount = methodInfo.argumentsCount;
          if (argumentsCount !== args.length) {
            return Promise.reject(new Error(`Native method ${moduleName}.${methodInfo.name} expects ${argumentsCount} ${argumentsCount === 1 ? 'argument' : 'arguments'} but received ${args.length}`));
          }
          return LegacyNativeProxy.callMethod(moduleName, key, args);
        };
      });

      // These are called by EventEmitter (which is a wrapper for NativeEventEmitter)
      // only on iOS, and they use iOS-specific native module, EXReactNativeEventEmitter.
      //
      // On Android only {start,stop}Observing are called on the native module
      // and these should be exported as Expo methods.
      //
      // Before the RN 65, addListener/removeListeners weren't called on Android. However, it no longer stays true.
      // See https://github.com/facebook/react-native/commit/f5502fbda9fe271ff6e1d0da773a3a8ee206a453.
      // That's why, we check if the `EXReactNativeEventEmitter` exists and only if yes, we use it in the listener implementation.
      // Otherwise, those methods are NOOP.
      if (_reactNative.NativeModules.EXReactNativeEventEmitter) {
        NativeModulesProxy[moduleName].addListener = function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return _reactNative.NativeModules.EXReactNativeEventEmitter.addProxiedListener(moduleName, ...args);
        };
        NativeModulesProxy[moduleName].removeListeners = function () {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          return _reactNative.NativeModules.EXReactNativeEventEmitter.removeProxiedListeners(moduleName, ...args);
        };
      } else {
        // Fixes on Android:
        // WARN  `new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.
        // WARN  `new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.
        NativeModulesProxy[moduleName].addListener = () => {};
        NativeModulesProxy[moduleName].removeListeners = () => {};
      }
    });
  } else {
    console.warn(`The "EXNativeModulesProxy" native module is not exported through NativeModules; verify that expo-modules-core's native code is linked properly`);
  }
  var _default = exports.default = NativeModulesProxy;
},59,[60]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';
  'use client';

  var warnOnce = require(_dependencyMap[0]).default;
  var invariant = require(_dependencyMap[1]);
  module.exports = {
    get registerCallableModule() {
      return require(_dependencyMap[2]).default;
    },
    get AccessibilityInfo() {
      return require(_dependencyMap[3]).default;
    },
    get ActivityIndicator() {
      return require(_dependencyMap[4]).default;
    },
    get Button() {
      return require(_dependencyMap[5]).default;
    },
    get DrawerLayoutAndroid() {
      return require(_dependencyMap[6]).default;
    },
    get FlatList() {
      return require(_dependencyMap[7]).default;
    },
    get Image() {
      return require(_dependencyMap[8]).default;
    },
    get ImageBackground() {
      return require(_dependencyMap[9]).default;
    },
    get InputAccessoryView() {
      return require(_dependencyMap[10]).default;
    },
    get experimental_LayoutConformance() {
      return require(_dependencyMap[11]).default;
    },
    get KeyboardAvoidingView() {
      return require(_dependencyMap[12]).default;
    },
    get Modal() {
      return require(_dependencyMap[13]).default;
    },
    get Pressable() {
      return require(_dependencyMap[14]).default;
    },
    get ProgressBarAndroid() {
      warnOnce('progress-bar-android-moved', "ProgressBarAndroid has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-community/progress-bar-android' instead of 'react-native'. See https://github.com/react-native-progress-view/progress-bar-android");
      return require(_dependencyMap[15]).default;
    },
    get RefreshControl() {
      return require(_dependencyMap[16]).default;
    },
    get SafeAreaView() {
      return require(_dependencyMap[17]).default;
    },
    get ScrollView() {
      return require(_dependencyMap[18]).default;
    },
    get SectionList() {
      return require(_dependencyMap[19]).default;
    },
    get StatusBar() {
      return require(_dependencyMap[20]).default;
    },
    get Switch() {
      return require(_dependencyMap[21]).default;
    },
    get Text() {
      return require(_dependencyMap[22]).default;
    },
    get TextInput() {
      return require(_dependencyMap[23]).default;
    },
    get Touchable() {
      return require(_dependencyMap[24]).default;
    },
    get TouchableHighlight() {
      return require(_dependencyMap[25]).default;
    },
    get TouchableNativeFeedback() {
      return require(_dependencyMap[26]).default;
    },
    get TouchableOpacity() {
      return require(_dependencyMap[27]).default;
    },
    get TouchableWithoutFeedback() {
      return require(_dependencyMap[28]).default;
    },
    get View() {
      return require(_dependencyMap[29]).default;
    },
    get VirtualizedList() {
      return require(_dependencyMap[30]).default;
    },
    get VirtualizedSectionList() {
      return require(_dependencyMap[31]).default;
    },
    get ActionSheetIOS() {
      return require(_dependencyMap[32]).default;
    },
    get Alert() {
      return require(_dependencyMap[33]).default;
    },
    get Animated() {
      return require(_dependencyMap[34]).default;
    },
    get Appearance() {
      return require(_dependencyMap[35]);
    },
    get AppRegistry() {
      return require(_dependencyMap[36]).default;
    },
    get AppState() {
      return require(_dependencyMap[37]).default;
    },
    get BackHandler() {
      return require(_dependencyMap[38]).default;
    },
    get Clipboard() {
      warnOnce('clipboard-moved', "Clipboard has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-clipboard/clipboard' instead of 'react-native'. See https://github.com/react-native-clipboard/clipboard");
      return require(_dependencyMap[39]).default;
    },
    get DeviceInfo() {
      return require(_dependencyMap[40]).default;
    },
    get DevMenu() {
      return require(_dependencyMap[41]).default;
    },
    get DevSettings() {
      return require(_dependencyMap[42]).default;
    },
    get Dimensions() {
      return require(_dependencyMap[43]).default;
    },
    get Easing() {
      return require(_dependencyMap[44]).default;
    },
    get findNodeHandle() {
      return require(_dependencyMap[45]).findNodeHandle;
    },
    get I18nManager() {
      return require(_dependencyMap[46]).default;
    },
    get InteractionManager() {
      return require(_dependencyMap[47]).default;
    },
    get Keyboard() {
      return require(_dependencyMap[48]).default;
    },
    get LayoutAnimation() {
      return require(_dependencyMap[49]).default;
    },
    get Linking() {
      return require(_dependencyMap[50]).default;
    },
    get LogBox() {
      return require(_dependencyMap[51]).default;
    },
    get NativeDialogManagerAndroid() {
      return require(_dependencyMap[52]).default;
    },
    get NativeEventEmitter() {
      return require(_dependencyMap[53]).default;
    },
    get Networking() {
      return require(_dependencyMap[54]).default;
    },
    get PanResponder() {
      return require(_dependencyMap[55]).default;
    },
    get PermissionsAndroid() {
      return require(_dependencyMap[56]).default;
    },
    get PixelRatio() {
      return require(_dependencyMap[57]).default;
    },
    get PushNotificationIOS() {
      warnOnce('pushNotificationIOS-moved', "PushNotificationIOS has been extracted from react-native core and will be removed in a future release. It can now be installed and imported from '@react-native-community/push-notification-ios' instead of 'react-native'. See https://github.com/react-native-push-notification/ios");
      return require(_dependencyMap[58]).default;
    },
    get Settings() {
      return require(_dependencyMap[59]).default;
    },
    get Share() {
      return require(_dependencyMap[60]).default;
    },
    get StyleSheet() {
      return require(_dependencyMap[61]).default;
    },
    get Systrace() {
      return require(_dependencyMap[62]);
    },
    get ToastAndroid() {
      return require(_dependencyMap[63]).default;
    },
    get TurboModuleRegistry() {
      return require(_dependencyMap[64]);
    },
    get UIManager() {
      return require(_dependencyMap[65]).default;
    },
    get unstable_batchedUpdates() {
      return require(_dependencyMap[45]).unstable_batchedUpdates;
    },
    get useAnimatedValue() {
      return require(_dependencyMap[66]).default;
    },
    get useColorScheme() {
      return require(_dependencyMap[67]).default;
    },
    get useWindowDimensions() {
      return require(_dependencyMap[68]).default;
    },
    get UTFSequence() {
      return require(_dependencyMap[69]).default;
    },
    get Vibration() {
      return require(_dependencyMap[70]).default;
    },
    get DeviceEventEmitter() {
      return require(_dependencyMap[71]).default;
    },
    get DynamicColorIOS() {
      return require(_dependencyMap[72]).DynamicColorIOS;
    },
    get NativeAppEventEmitter() {
      return require(_dependencyMap[73]).default;
    },
    get NativeModules() {
      return require(_dependencyMap[74]).default;
    },
    get Platform() {
      return require(_dependencyMap[75]).default;
    },
    get PlatformColor() {
      return require(_dependencyMap[76]).PlatformColor;
    },
    get processColor() {
      return require(_dependencyMap[77]).default;
    },
    get requireNativeComponent() {
      return require(_dependencyMap[78]).default;
    },
    get RootTagContext() {
      return require(_dependencyMap[79]).RootTagContext;
    }
  };
},60,[49,42,61,62,301,307,426,369,387,428,429,436,438,439,448,450,396,430,401,423,451,456,308,461,463,467,320,321,468,285,469,470,471,257,322,474,269,477,294,481,484,485,487,117,339,74,445,333,413,414,490,495,499,242,226,501,503,116,506,509,512,290,46,515,41,126,516,517,433,497,518,63,521,264,43,87,102,99,305,292]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var registerCallableModule = function () {
    if (global.RN$Bridgeless === true) {
      return (name, moduleOrFactory) => {
        if (typeof moduleOrFactory === 'function') {
          global.RN$registerCallableModule(name, moduleOrFactory);
          return;
        }
        global.RN$registerCallableModule(name, () => moduleOrFactory);
      };
    }
    var BatchedBridge = require(_dependencyMap[0]).default;
    return (name, moduleOrFactory) => {
      if (typeof moduleOrFactory === 'function') {
        BatchedBridge.registerLazyCallableModule(name, moduleOrFactory);
        return;
      }
      BatchedBridge.registerCallableModule(name, moduleOrFactory);
    };
  }();
  var _default = exports.default = registerCallableModule;
},61,[44]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var _RendererProxy = require(_dependencyMap[2]);
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var _legacySendAccessibilityEvent = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativeAccessibilityInfo = _interopRequireDefault(require(_dependencyMap[5]));
  var _NativeAccessibilityManager = _interopRequireDefault(require(_dependencyMap[6]));
  var EventNames = new Map([['announcementFinished', 'announcementFinished'], ['boldTextChanged', 'boldTextChanged'], ['change', 'screenReaderChanged'], ['grayscaleChanged', 'grayscaleChanged'], ['invertColorsChanged', 'invertColorsChanged'], ['reduceMotionChanged', 'reduceMotionChanged'], ['reduceTransparencyChanged', 'reduceTransparencyChanged'], ['screenReaderChanged', 'screenReaderChanged'], ['darkerSystemColorsChanged', 'darkerSystemColorsChanged']]);
  var AccessibilityInfo = {
    isBoldTextEnabled() {
      {
        return new Promise((resolve, reject) => {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentBoldTextState(resolve, reject);
          } else {
            reject(null);
          }
        });
      }
    },
    isGrayscaleEnabled() {
      {
        return new Promise((resolve, reject) => {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentGrayscaleState(resolve, reject);
          } else {
            reject(null);
          }
        });
      }
    },
    isInvertColorsEnabled() {
      {
        return new Promise((resolve, reject) => {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentInvertColorsState(resolve, reject);
          } else {
            reject(null);
          }
        });
      }
    },
    isReduceMotionEnabled() {
      return new Promise((resolve, reject) => {
        {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentReduceMotionState(resolve, reject);
          } else {
            reject(null);
          }
        }
      });
    },
    isHighTextContrastEnabled() {
      return new Promise((resolve, reject) => {
        {
          return Promise.resolve(false);
        }
      });
    },
    isDarkerSystemColorsEnabled() {
      return new Promise((resolve, reject) => {
        {
          if (_NativeAccessibilityManager.default?.getCurrentDarkerSystemColorsState != null) {
            _NativeAccessibilityManager.default.getCurrentDarkerSystemColorsState(resolve, reject);
          } else {
            reject(null);
          }
        }
      });
    },
    prefersCrossFadeTransitions() {
      return new Promise((resolve, reject) => {
        {
          if (_NativeAccessibilityManager.default?.getCurrentPrefersCrossFadeTransitionsState != null) {
            _NativeAccessibilityManager.default.getCurrentPrefersCrossFadeTransitionsState(resolve, reject);
          } else {
            reject(null);
          }
        }
      });
    },
    isReduceTransparencyEnabled() {
      {
        return new Promise((resolve, reject) => {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentReduceTransparencyState(resolve, reject);
          } else {
            reject(null);
          }
        });
      }
    },
    isScreenReaderEnabled() {
      return new Promise((resolve, reject) => {
        {
          if (_NativeAccessibilityManager.default != null) {
            _NativeAccessibilityManager.default.getCurrentVoiceOverState(resolve, reject);
          } else {
            reject(null);
          }
        }
      });
    },
    isAccessibilityServiceEnabled() {
      return new Promise((resolve, reject) => {
        {
          reject(null);
        }
      });
    },
    addEventListener(eventName, handler) {
      var deviceEventName = EventNames.get(eventName);
      return deviceEventName == null ? {
        remove() {}
      } : _RCTDeviceEventEmitter.default.addListener(deviceEventName, handler);
    },
    setAccessibilityFocus(reactTag) {
      (0, _legacySendAccessibilityEvent.default)(reactTag, 'focus');
    },
    sendAccessibilityEvent(handle, eventType) {
      if (eventType === 'click') {
        return;
      }
      (0, _RendererProxy.sendAccessibilityEvent)(handle, eventType);
    },
    announceForAccessibility(announcement) {
      {
        _NativeAccessibilityManager.default?.announceForAccessibility(announcement);
      }
    },
    announceForAccessibilityWithOptions(announcement, options) {
      {
        if (_NativeAccessibilityManager.default?.announceForAccessibilityWithOptions) {
          _NativeAccessibilityManager.default?.announceForAccessibilityWithOptions(announcement, options);
        } else {
          _NativeAccessibilityManager.default?.announceForAccessibility(announcement);
        }
      }
    },
    getRecommendedTimeoutMillis(originalTimeout) {
      {
        return Promise.resolve(originalTimeout);
      }
    }
  };
  var _default = exports.default = AccessibilityInfo;
},62,[1,63,74,87,148,299,149]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _Systrace = require(_dependencyMap[7]);
  var _EventEmitter2 = _interopRequireDefault(require(_dependencyMap[8]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var RCTDeviceEventEmitterImpl = /*#__PURE__*/function (_EventEmitter) {
    function RCTDeviceEventEmitterImpl() {
      (0, _classCallCheck2.default)(this, RCTDeviceEventEmitterImpl);
      return _callSuper(this, RCTDeviceEventEmitterImpl, arguments);
    }
    (0, _inherits2.default)(RCTDeviceEventEmitterImpl, _EventEmitter);
    return (0, _createClass2.default)(RCTDeviceEventEmitterImpl, [{
      key: "emit",
      value: function emit(eventType) {
        (0, _Systrace.beginEvent)(() => `RCTDeviceEventEmitter.emit#${eventType}`);
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        _superPropGet(RCTDeviceEventEmitterImpl, "emit", this, 3)([eventType, ...args]);
        (0, _Systrace.endEvent)();
      }
    }]);
  }(_EventEmitter2.default);
  var RCTDeviceEventEmitter = new RCTDeviceEventEmitterImpl();
  Object.defineProperty(global, '__rctDeviceEventEmitter', {
    configurable: true,
    value: RCTDeviceEventEmitter
  });
  var _default = exports.default = RCTDeviceEventEmitter;
},63,[1,10,11,64,66,67,69,46,71]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _typeof = require(_dependencyMap[0])["default"];
  var assertThisInitialized = require(_dependencyMap[1]);
  function _possibleConstructorReturn(t, e) {
    if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
    if (undefined !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return assertThisInitialized(t);
  }
  module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
},64,[13,65]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _assertThisInitialized(e) {
    if (undefined === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }
  module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
},65,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _getPrototypeOf(t) {
    return module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _getPrototypeOf(t);
  }
  module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
},66,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var superPropBase = require(_dependencyMap[0]);
  function _get() {
    return module.exports = _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {
      var p = superPropBase(e, t);
      if (p) {
        var n = Object.getOwnPropertyDescriptor(p, t);
        return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
      }
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _get.apply(null, arguments);
  }
  module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
},67,[68]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = require(_dependencyMap[0]);
  function _superPropBase(t, o) {
    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = getPrototypeOf(t)););
    return t;
  }
  module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
},68,[66]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var setPrototypeOf = require(_dependencyMap[0]);
  function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: true,
        configurable: true
      }
    }), Object.defineProperty(t, "prototype", {
      writable: false
    }), e && setPrototypeOf(t, e);
  }
  module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
},69,[70]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _setPrototypeOf(t, e) {
    return module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
      return t.__proto__ = e, t;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _setPrototypeOf(t, e);
  }
  module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
},70,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _registry = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("registry");
  var EventEmitter = exports.default = /*#__PURE__*/function () {
    function EventEmitter() {
      (0, _classCallCheck2.default)(this, EventEmitter);
      Object.defineProperty(this, _registry, {
        writable: true,
        value: {}
      });
    }
    return (0, _createClass2.default)(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        if (typeof listener !== 'function') {
          throw new TypeError('EventEmitter.addListener(...): 2nd argument must be a function.');
        }
        var registrations = allocate((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], eventType);
        var registration = {
          context,
          listener,
          remove() {
            registrations.delete(registration);
          }
        };
        registrations.add(registration);
        return registration;
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var registrations = (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];
        if (registrations != null) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          for (var registration of Array.from(registrations)) {
            registration.listener.apply(registration.context, args);
          }
        }
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        if (eventType == null) {
          (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry] = {};
        } else {
          delete (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];
        }
      }
    }, {
      key: "listenerCount",
      value: function listenerCount(eventType) {
        var registrations = (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];
        return registrations == null ? 0 : registrations.size;
      }
    }]);
  }();
  function allocate(registry, eventType) {
    var registrations = registry[eventType];
    if (registrations == null) {
      registrations = new Set();
      registry[eventType] = registrations;
    }
    return registrations;
  }
},71,[1,10,11,72,73]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _classPrivateFieldBase(e, t) {
    if (!{}.hasOwnProperty.call(e, t)) throw new TypeError("attempted to use private field on non-instance");
    return e;
  }
  module.exports = _classPrivateFieldBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
},72,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var id = 0;
  function _classPrivateFieldKey(e) {
    return "__private_" + id++ + "_" + e;
  }
  module.exports = _classPrivateFieldKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
},73,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _RendererImplementation = require(_dependencyMap[0]);
  Object.keys(_RendererImplementation).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _RendererImplementation[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _RendererImplementation[key];
      }
    });
  });
},74,[75]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.dispatchCommand = dispatchCommand;
  exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;
  exports.findNodeHandle = findNodeHandle;
  exports.getNodeFromInternalInstanceHandle = getNodeFromInternalInstanceHandle;
  exports.getPublicInstanceFromInternalInstanceHandle = getPublicInstanceFromInternalInstanceHandle;
  exports.getPublicInstanceFromRootTag = getPublicInstanceFromRootTag;
  exports.isChildPublicInstance = isChildPublicInstance;
  exports.isProfilingRenderer = isProfilingRenderer;
  exports.renderElement = renderElement;
  exports.sendAccessibilityEvent = sendAccessibilityEvent;
  exports.unmountComponentAtNodeAndRemoveContainer = unmountComponentAtNodeAndRemoveContainer;
  exports.unstable_batchedUpdates = unstable_batchedUpdates;
  var _ErrorHandlers = require(_dependencyMap[0]);
  function renderElement(_ref) {
    var element = _ref.element,
      rootTag = _ref.rootTag,
      useFabric = _ref.useFabric,
      useConcurrentRoot = _ref.useConcurrentRoot;
    if (useFabric) {
      require(_dependencyMap[1]).default.render(element, rootTag, null, useConcurrentRoot, {
        onCaughtError: _ErrorHandlers.onCaughtError,
        onUncaughtError: _ErrorHandlers.onUncaughtError,
        onRecoverableError: _ErrorHandlers.onRecoverableError
      });
    } else {
      require(_dependencyMap[2]).default.render(element, rootTag, undefined, {
        onCaughtError: _ErrorHandlers.onCaughtError,
        onUncaughtError: _ErrorHandlers.onUncaughtError,
        onRecoverableError: _ErrorHandlers.onRecoverableError
      });
    }
  }
  function findHostInstance_DEPRECATED(componentOrHandle) {
    return require(_dependencyMap[2]).default.findHostInstance_DEPRECATED(componentOrHandle);
  }
  function findNodeHandle(componentOrHandle) {
    return require(_dependencyMap[2]).default.findNodeHandle(componentOrHandle);
  }
  function dispatchCommand(handle, command, args) {
    if (global.RN$Bridgeless === true) {
      return require(_dependencyMap[1]).default.dispatchCommand(handle, command, args);
    } else {
      return require(_dependencyMap[2]).default.dispatchCommand(handle, command, args);
    }
  }
  function sendAccessibilityEvent(handle, eventType) {
    return require(_dependencyMap[2]).default.sendAccessibilityEvent(handle, eventType);
  }
  function unmountComponentAtNodeAndRemoveContainer(rootTag) {
    var rootTagAsNumber = rootTag;
    require(_dependencyMap[2]).default.unmountComponentAtNodeAndRemoveContainer(rootTagAsNumber);
  }
  function unstable_batchedUpdates(fn, bookkeeping) {
    return require(_dependencyMap[2]).default.unstable_batchedUpdates(fn, bookkeeping);
  }
  function isProfilingRenderer() {
    return Boolean(false);
  }
  function isChildPublicInstance(parentInstance, childInstance) {
    return require(_dependencyMap[2]).default.isChildPublicInstance(parentInstance, childInstance);
  }
  function getNodeFromInternalInstanceHandle(internalInstanceHandle) {
    return require(_dependencyMap[1]).default.getNodeFromInternalInstanceHandle(internalInstanceHandle);
  }
  function getPublicInstanceFromInternalInstanceHandle(internalInstanceHandle) {
    return require(_dependencyMap[1]).default.getPublicInstanceFromInternalInstanceHandle(internalInstanceHandle);
  }
  function getPublicInstanceFromRootTag(rootTag) {
    return require(_dependencyMap[1]).default.getPublicInstanceFromRootTag(rootTag);
  }
},75,[76,90,297]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.onCaughtError = onCaughtError;
  exports.onRecoverableError = onRecoverableError;
  exports.onUncaughtError = onUncaughtError;
  var _ExceptionsManager = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function getExtendedError(errorValue, errorInfo) {
    var error;
    if (errorValue instanceof Error) {
      error = errorValue;
    } else if (typeof errorValue === 'string') {
      error = new _ExceptionsManager.SyntheticError(errorValue);
    } else {
      error = new _ExceptionsManager.SyntheticError('Unspecified error');
    }
    try {
      error.componentStack = errorInfo.componentStack;
      error.isComponentError = true;
    } catch {}
    return error;
  }
  function onUncaughtError(errorValue, errorInfo) {
    var error = getExtendedError(errorValue, errorInfo);
    _ExceptionsManager.default.handleException(error, true);
  }
  function onCaughtError(errorValue, errorInfo) {
    var error = getExtendedError(errorValue, errorInfo);
    _ExceptionsManager.default.handleException(error, false);
  }
  function onRecoverableError(errorValue, errorInfo) {
    var error = getExtendedError(errorValue, errorInfo);
    console.warn(error);
  }
},76,[77]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.SyntheticError = undefined;
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _wrapNativeSuper2 = _interopRequireDefault(require(_dependencyMap[6]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var SyntheticError = exports.SyntheticError = /*#__PURE__*/function (_Error) {
    function SyntheticError() {
      var _this;
      (0, _classCallCheck2.default)(this, SyntheticError);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, SyntheticError, [...args]);
      _this.name = '';
      return _this;
    }
    (0, _inherits2.default)(SyntheticError, _Error);
    return (0, _createClass2.default)(SyntheticError);
  }(/*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
  var userExceptionDecorator;
  var inUserExceptionDecorator = false;
  var decoratedExtraDataKey = 'RN$ErrorExtraDataKey';
  function unstable_setExceptionDecorator(exceptionDecorator) {
    userExceptionDecorator = exceptionDecorator;
  }
  function preprocessException(data) {
    if (userExceptionDecorator && !inUserExceptionDecorator) {
      inUserExceptionDecorator = true;
      try {
        return userExceptionDecorator(data);
      } catch {} finally {
        inUserExceptionDecorator = false;
      }
    }
    return data;
  }
  var exceptionID = 0;
  function reportException(e, isFatal, reportToConsole) {
    var parseErrorStack = require(_dependencyMap[7]).default;
    var stack = parseErrorStack(e?.stack);
    var currentExceptionID = ++exceptionID;
    var originalMessage = e.message || '';
    var message = originalMessage;
    if (e.componentStack != null) {
      message += `\n\nThis error is located at:${e.componentStack}`;
    }
    var namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;
    if (!message.startsWith(namePrefix)) {
      message = namePrefix + message;
    }
    message = e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;
    var extraData = {
      ...e[decoratedExtraDataKey],
      jsEngine: e.jsEngine,
      rawStack: e.stack
    };
    if (e.cause != null && typeof e.cause === 'object') {
      extraData.stackSymbols = e.cause.stackSymbols;
      extraData.stackReturnAddresses = e.cause.stackReturnAddresses;
      extraData.stackElements = e.cause.stackElements;
    }
    var data = preprocessException({
      message,
      originalMessage: message === originalMessage ? null : originalMessage,
      name: e.name == null || e.name === '' ? null : e.name,
      componentStack: typeof e.componentStack === 'string' ? e.componentStack : null,
      stack,
      id: currentExceptionID,
      isFatal,
      extraData
    });
    if (reportToConsole) {
      console.error(data.message);
    }
    if (isFatal || e.type !== 'warn') {
      var NativeExceptionsManager = require(_dependencyMap[8]).default;
      if (NativeExceptionsManager) {
        if (isFatal) {
          if (global.RN$hasHandledFatalException?.()) {
            return;
          }
          global.RN$notifyOfFatalException?.();
        }
        NativeExceptionsManager.reportException(data);
      }
    }
  }
  var inExceptionHandler = false;
  function handleException(e, isFatal) {
    var reportToConsole = true;
    if (!global.RN$handleException || !global.RN$handleException(e, isFatal, reportToConsole)) {
      var error;
      if (e instanceof Error) {
        error = e;
      } else {
        error = new SyntheticError(e);
      }
      try {
        inExceptionHandler = true;
        reportException(error, isFatal, reportToConsole);
      } finally {
        inExceptionHandler = false;
      }
    }
  }
  function reactConsoleErrorHandler() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    console._errorOriginal(...args);
    if (!console.reportErrorsAsExceptions) {
      return;
    }
    if (inExceptionHandler || global.RN$inExceptionHandler?.()) {
      return;
    }
    var error;
    var firstArg = args[0];
    if (firstArg?.stack) {
      error = firstArg;
    } else {
      var stringifySafe = require(_dependencyMap[9]).default;
      if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {
        return;
      }
      var message = args.map(arg => typeof arg === 'string' ? arg : stringifySafe(arg)).join(' ');
      error = new SyntheticError(message);
      error.name = 'console.error';
    }
    var isFatal = false;
    var reportToConsole = false;
    if (!global.RN$handleException || !global.RN$handleException(error, isFatal, reportToConsole)) {
      reportException(error, isFatal, reportToConsole);
    }
  }
  function installConsoleErrorReporter() {
    if (console._errorOriginal) {
      return;
    }
    console._errorOriginal = console.error.bind(console);
    console.error = reactConsoleErrorHandler;
    if (console.reportErrorsAsExceptions === undefined) {
      console.reportErrorsAsExceptions = true;
    }
  }
  var ExceptionsManager = {
    decoratedExtraDataKey,
    handleException,
    installConsoleErrorReporter,
    SyntheticError,
    unstable_setExceptionDecorator
  };
  var _default = exports.default = ExceptionsManager;
},77,[1,11,10,64,66,69,78,82,85,48]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var getPrototypeOf = require(_dependencyMap[0]);
  var setPrototypeOf = require(_dependencyMap[1]);
  var isNativeFunction = require(_dependencyMap[2]);
  var construct = require(_dependencyMap[3]);
  function _wrapNativeSuper(t) {
    var r = "function" == typeof Map ? new Map() : undefined;
    return module.exports = _wrapNativeSuper = function _wrapNativeSuper(t) {
      if (null === t || !isNativeFunction(t)) return t;
      if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
      if (undefined !== r) {
        if (r.has(t)) return r.get(t);
        r.set(t, Wrapper);
      }
      function Wrapper() {
        return construct(t, arguments, getPrototypeOf(this).constructor);
      }
      return Wrapper.prototype = Object.create(t.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      }), setPrototypeOf(Wrapper, t);
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _wrapNativeSuper(t);
  }
  module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;
},78,[66,70,79,80]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _isNativeFunction(t) {
    try {
      return -1 !== Function.toString.call(t).indexOf("[native code]");
    } catch (n) {
      return "function" == typeof t;
    }
  }
  module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;
},79,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var isNativeReflectConstruct = require(_dependencyMap[0]);
  var setPrototypeOf = require(_dependencyMap[1]);
  function _construct(t, e, r) {
    if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
    var o = [null];
    o.push.apply(o, e);
    var p = new (t.bind.apply(t, o))();
    return r && setPrototypeOf(p, r.prototype), p;
  }
  module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
},80,[81,70]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _isNativeReflectConstruct() {
    try {
      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    } catch (t) {}
    return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct() {
      return !!t;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports)();
  }
  module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
},81,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = parseErrorStack;
  var parseHermesStack = require(_dependencyMap[0]).default;
  function convertHermesStack(stack) {
    var frames = [];
    for (var entry of stack.entries) {
      if (entry.type !== 'FRAME') {
        continue;
      }
      var location = entry.location,
        functionName = entry.functionName;
      if (location.type === 'NATIVE' || location.type === 'INTERNAL_BYTECODE') {
        continue;
      }
      frames.push({
        methodName: functionName,
        file: location.sourceUrl,
        lineNumber: location.line1Based,
        column: location.type === 'SOURCE' ? location.column1Based - 1 : location.virtualOffset0Based
      });
    }
    return frames;
  }
  function parseErrorStack(errorStack) {
    if (errorStack == null) {
      return [];
    }
    var stacktraceParser = require(_dependencyMap[1]);
    var parsedStack = Array.isArray(errorStack) ? errorStack : global.HermesInternal ? convertHermesStack(parseHermesStack(errorStack)) : stacktraceParser.parse(errorStack).map(frame => ({
      ...frame,
      column: frame.column != null ? frame.column - 1 : null
    }));
    return parsedStack;
  }
},82,[83,84]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = parseHermesStack;
  var RE_FRAME = /^ {4}at (.+?)(?: \((native)\)?| \((address at )?(.*?):(\d+):(\d+)\))$/;
  var RE_SKIPPED = /^ {4}... skipping (\d+) frames$/;
  var RE_COMPONENT_NO_STACK = /^ {4}at .*$/;
  function isInternalBytecodeSourceUrl(sourceUrl) {
    return sourceUrl === 'InternalBytecode.js';
  }
  function parseLine(line) {
    var asFrame = line.match(RE_FRAME);
    if (asFrame) {
      return {
        type: 'FRAME',
        functionName: asFrame[1],
        location: asFrame[2] === 'native' ? {
          type: 'NATIVE'
        } : asFrame[3] === 'address at ' ? isInternalBytecodeSourceUrl(asFrame[4]) ? {
          type: 'INTERNAL_BYTECODE',
          sourceUrl: asFrame[4],
          line1Based: Number.parseInt(asFrame[5], 10),
          virtualOffset0Based: Number.parseInt(asFrame[6], 10)
        } : {
          type: 'BYTECODE',
          sourceUrl: asFrame[4],
          line1Based: Number.parseInt(asFrame[5], 10),
          virtualOffset0Based: Number.parseInt(asFrame[6], 10)
        } : {
          type: 'SOURCE',
          sourceUrl: asFrame[4],
          line1Based: Number.parseInt(asFrame[5], 10),
          column1Based: Number.parseInt(asFrame[6], 10)
        }
      };
    }
    var asSkipped = line.match(RE_SKIPPED);
    if (asSkipped) {
      return {
        type: 'SKIPPED',
        count: Number.parseInt(asSkipped[1], 10)
      };
    }
  }
  function parseHermesStack(stack) {
    var lines = stack.split(/\n/);
    var entries = [];
    var lastMessageLine = -1;
    for (var i = 0; i < lines.length; ++i) {
      var line = lines[i];
      if (!line) {
        continue;
      }
      var entry = parseLine(line);
      if (entry) {
        entries.push(entry);
        continue;
      }
      if (RE_COMPONENT_NO_STACK.test(line)) {
        continue;
      }
      lastMessageLine = i;
      entries = [];
    }
    var message = lines.slice(0, lastMessageLine + 1).join('\n');
    return {
      message,
      entries
    };
  }
},83,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var UNKNOWN_FUNCTION = '<unknown>';
  /**
   * This parses the different stack traces and puts them into one format
   * This borrows heavily from TraceKit (https://github.com/csnover/TraceKit)
   */

  function parse(stackString) {
    var lines = stackString.split('\n');
    return lines.reduce(function (stack, line) {
      var parseResult = parseChrome(line) || parseWinjs(line) || parseGecko(line) || parseNode(line) || parseJSC(line);
      if (parseResult) {
        stack.push(parseResult);
      }
      return stack;
    }, []);
  }
  var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|rsc|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
  var chromeEvalRe = /\((\S*)(?::(\d+))(?::(\d+))\)/;
  function parseChrome(line) {
    var parts = chromeRe.exec(line);
    if (!parts) {
      return null;
    }
    var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line

    var isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line

    var submatch = chromeEvalRe.exec(parts[2]);
    if (isEval && submatch != null) {
      // throw out eval line/column and use top-most line/column number
      parts[2] = submatch[1]; // url

      parts[3] = submatch[2]; // line

      parts[4] = submatch[3]; // column
    }
    return {
      file: !isNative ? parts[2] : null,
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: isNative ? [parts[2]] : [],
      lineNumber: parts[3] ? +parts[3] : null,
      column: parts[4] ? +parts[4] : null
    };
  }
  var winjsRe = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|rsc|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
  function parseWinjs(line) {
    var parts = winjsRe.exec(line);
    if (!parts) {
      return null;
    }
    return {
      file: parts[2],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[3],
      column: parts[4] ? +parts[4] : null
    };
  }
  var geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|rsc|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i;
  var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
  function parseGecko(line) {
    var parts = geckoRe.exec(line);
    if (!parts) {
      return null;
    }
    var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;
    var submatch = geckoEvalRe.exec(parts[3]);
    if (isEval && submatch != null) {
      // throw out eval line/column and use top-most line number
      parts[3] = submatch[1];
      parts[4] = submatch[2];
      parts[5] = null; // no column when eval
    }
    return {
      file: parts[3],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: parts[2] ? parts[2].split(',') : [],
      lineNumber: parts[4] ? +parts[4] : null,
      column: parts[5] ? +parts[5] : null
    };
  }
  var javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i;
  function parseJSC(line) {
    var parts = javaScriptCoreRe.exec(line);
    if (!parts) {
      return null;
    }
    return {
      file: parts[3],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[4],
      column: parts[5] ? +parts[5] : null
    };
  }
  var nodeRe = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
  function parseNode(line) {
    var parts = nodeRe.exec(line);
    if (!parts) {
      return null;
    }
    return {
      file: parts[2],
      methodName: parts[1] || UNKNOWN_FUNCTION,
      arguments: [],
      lineNumber: +parts[3],
      column: parts[4] ? +parts[4] : null
    };
  }
  exports.parse = parse;
},84,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeExceptionsManager = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeExceptionsManager).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeExceptionsManager[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeExceptionsManager[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeExceptionsManager.default;
},85,[86]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var Platform = require(_dependencyMap[1]).default;
  var NativeModule = TurboModuleRegistry.getEnforcing('ExceptionsManager');
  var ExceptionsManager = {
    reportFatalException(message, stack, exceptionId) {
      NativeModule.reportFatalException(message, stack, exceptionId);
    },
    reportSoftException(message, stack, exceptionId) {
      NativeModule.reportSoftException(message, stack, exceptionId);
    },
    dismissRedbox() {},
    reportException(data) {
      if (NativeModule.reportException) {
        NativeModule.reportException(data);
        return;
      }
      if (data.isFatal) {
        ExceptionsManager.reportFatalException(data.message, data.stack, data.id);
      } else {
        ExceptionsManager.reportSoftException(data.message, data.stack, data.id);
      }
    }
  };
  var _default = exports.default = ExceptionsManager;
},86,[41,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativePlatformConstantsIOS = _interopRequireDefault(require(_dependencyMap[1]));
  var Platform = {
    __constants: null,
    OS: 'ios',
    get Version() {
      return this.constants.osVersion;
    },
    get constants() {
      if (this.__constants == null) {
        this.__constants = _NativePlatformConstantsIOS.default.getConstants();
      }
      return this.__constants;
    },
    get isPad() {
      return this.constants.interfaceIdiom === 'pad';
    },
    get isTV() {
      return this.constants.interfaceIdiom === 'tv';
    },
    get isVision() {
      return this.constants.interfaceIdiom === 'vision';
    },
    get isTesting() {
      return false;
    },
    get isDisableAnimations() {
      return this.constants.isDisableAnimations ?? this.isTesting;
    },
    get isMacCatalyst() {
      return this.constants.isMacCatalyst ?? false;
    },
    select: spec => 'ios' in spec ? spec.ios : 'native' in spec ? spec.native : spec.default
  };
  var _default = exports.default = Platform;
},87,[1,88]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativePlatformConstantsIOS = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativePlatformConstantsIOS).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativePlatformConstantsIOS[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativePlatformConstantsIOS[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativePlatformConstantsIOS.default;
},88,[89]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('PlatformConstants');
},89,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ReactNativePrivateInterface = require(_dependencyMap[0]);
  var ReactFabric;
  {
    ReactFabric = require(_dependencyMap[1]);
  }
  global.RN$stopSurface = ReactFabric.stopSurface;
  if (global.RN$Bridgeless !== true) {
    _ReactNativePrivateInterface.BatchedBridge.registerCallableModule('ReactFabric', ReactFabric);
  }
  var _default = exports.default = ReactFabric;
},90,[91,174]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = {
    get BatchedBridge() {
      return require(_dependencyMap[0]).default;
    },
    get ExceptionsManager() {
      return require(_dependencyMap[1]).default;
    },
    get Platform() {
      return require(_dependencyMap[2]).default;
    },
    get RCTEventEmitter() {
      return require(_dependencyMap[3]).default;
    },
    get ReactNativeViewConfigRegistry() {
      return require(_dependencyMap[4]);
    },
    get TextInputState() {
      return require(_dependencyMap[5]).default;
    },
    get UIManager() {
      return require(_dependencyMap[6]).default;
    },
    get deepDiffer() {
      return require(_dependencyMap[7]).default;
    },
    get deepFreezeAndThrowOnMutationInDev() {
      return require(_dependencyMap[8]).default;
    },
    get flattenStyle() {
      return require(_dependencyMap[9]).default;
    },
    get ReactFiberErrorDialog() {
      return require(_dependencyMap[10]).default;
    },
    get legacySendAccessibilityEvent() {
      return require(_dependencyMap[11]).default;
    },
    get RawEventEmitter() {
      return require(_dependencyMap[12]).default;
    },
    get CustomEvent() {
      return require(_dependencyMap[13]).default;
    },
    get createAttributePayload() {
      return require(_dependencyMap[14]).create;
    },
    get diffAttributePayloads() {
      return require(_dependencyMap[14]).diff;
    },
    get createPublicRootInstance() {
      return require(_dependencyMap[15]).createPublicRootInstance;
    },
    get createPublicInstance() {
      return require(_dependencyMap[15]).createPublicInstance;
    },
    get createPublicTextInstance() {
      return require(_dependencyMap[15]).createPublicTextInstance;
    },
    get getNativeTagFromPublicInstance() {
      return require(_dependencyMap[15]).getNativeTagFromPublicInstance;
    },
    get getNodeFromPublicInstance() {
      return require(_dependencyMap[15]).getNodeFromPublicInstance;
    },
    get getInternalInstanceHandleFromPublicInstance() {
      return require(_dependencyMap[15]).getInternalInstanceHandleFromPublicInstance;
    }
  };
},91,[44,77,87,92,93,94,126,145,47,146,147,148,151,152,154,155]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _registerCallableModule = _interopRequireDefault(require(_dependencyMap[1]));
  var RCTEventEmitter = {
    register(eventEmitter) {
      (0, _registerCallableModule.default)('RCTEventEmitter', eventEmitter);
    }
  };
  var _default = exports.default = RCTEventEmitter;
},92,[1,61]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.customDirectEventTypes = exports.customBubblingEventTypes = undefined;
  exports.get = get;
  exports.register = register;
  var _invariant = _interopRequireDefault(require(_dependencyMap[1]));
  var customBubblingEventTypes = exports.customBubblingEventTypes = {};
  var customDirectEventTypes = exports.customDirectEventTypes = {};
  var viewConfigCallbacks = new Map();
  var viewConfigs = new Map();
  function processEventTypes(viewConfig) {
    var bubblingEventTypes = viewConfig.bubblingEventTypes,
      directEventTypes = viewConfig.directEventTypes;
    if (bubblingEventTypes != null) {
      for (var _topLevelType in bubblingEventTypes) {
        if (customBubblingEventTypes[_topLevelType] == null) {
          customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
        }
      }
    }
    if (directEventTypes != null) {
      for (var _topLevelType2 in directEventTypes) {
        if (customDirectEventTypes[_topLevelType2] == null) {
          customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
        }
      }
    }
  }
  function register(name, callback) {
    (0, _invariant.default)(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
    (0, _invariant.default)(typeof callback === 'function', 'View config getter callback for component `%s` must be a function (received `%s`)', name, callback === null ? 'null' : typeof callback);
    viewConfigCallbacks.set(name, callback);
    return name;
  }
  function get(name) {
    var viewConfig = viewConfigs.get(name);
    if (viewConfig == null) {
      var callback = viewConfigCallbacks.get(name);
      if (typeof callback !== 'function') {
        (0, _invariant.default)(false, 'View config getter callback for component `%s` must be a function (received `%s`).%s', name, callback === null ? 'null' : typeof callback, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
      }
      viewConfig = callback();
      (0, _invariant.default)(viewConfig, 'View config not found for component `%s`', name);
      processEventTypes(viewConfig);
      viewConfigs.set(name, viewConfig);
      viewConfigCallbacks.set(name, null);
    }
    return viewConfig;
  }
},93,[1,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _AndroidTextInputNativeComponent = require(_dependencyMap[0]);
  var _RCTSingelineTextInputNativeComponent = require(_dependencyMap[1]);
  var _require = require(_dependencyMap[2]),
    findNodeHandle = _require.findNodeHandle;
  var Platform = require(_dependencyMap[3]).default;
  var currentlyFocusedInputRef = null;
  var inputs = new Set();
  function currentlyFocusedInput() {
    return currentlyFocusedInputRef;
  }
  function currentlyFocusedField() {
    return findNodeHandle(currentlyFocusedInputRef);
  }
  function focusInput(textField) {
    if (currentlyFocusedInputRef !== textField && textField != null) {
      currentlyFocusedInputRef = textField;
    }
  }
  function blurInput(textField) {
    if (currentlyFocusedInputRef === textField && textField != null) {
      currentlyFocusedInputRef = null;
    }
  }
  function focusField(textFieldID) {
    return;
  }
  function blurField(textFieldID) {
    return;
  }
  function focusTextInput(textField) {
    if (typeof textField === 'number') {
      return;
    }
    if (textField != null) {
      var fieldCanBeFocused = currentlyFocusedInputRef !== textField && textField.currentProps?.editable !== false;
      if (!fieldCanBeFocused) {
        return;
      }
      focusInput(textField);
      {
        _RCTSingelineTextInputNativeComponent.Commands.focus(textField);
      }
    }
  }
  function blurTextInput(textField) {
    if (typeof textField === 'number') {
      return;
    }
    if (currentlyFocusedInputRef === textField && textField != null) {
      blurInput(textField);
      {
        _RCTSingelineTextInputNativeComponent.Commands.blur(textField);
      }
    }
  }
  function registerInput(textField) {
    if (typeof textField === 'number') {
      return;
    }
    inputs.add(textField);
  }
  function unregisterInput(textField) {
    if (typeof textField === 'number') {
      return;
    }
    inputs.delete(textField);
  }
  function isTextInput(textField) {
    if (typeof textField === 'number') {
      return false;
    }
    return inputs.has(textField);
  }
  var TextInputState = {
    currentlyFocusedInput,
    focusInput,
    blurInput,
    currentlyFocusedField,
    focusField,
    blurField,
    focusTextInput,
    blurTextInput,
    registerInput,
    unregisterInput,
    isTextInput
  };
  var _default = exports.default = TextInputState;
},94,[95,143,74,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[2]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['focus', 'blur', 'setTextAndSelection']
  });
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidTextInput',
    bubblingEventTypes: {
      topBlur: {
        phasedRegistrationNames: {
          bubbled: 'onBlur',
          captured: 'onBlurCapture'
        }
      },
      topEndEditing: {
        phasedRegistrationNames: {
          bubbled: 'onEndEditing',
          captured: 'onEndEditingCapture'
        }
      },
      topFocus: {
        phasedRegistrationNames: {
          bubbled: 'onFocus',
          captured: 'onFocusCapture'
        }
      },
      topKeyPress: {
        phasedRegistrationNames: {
          bubbled: 'onKeyPress',
          captured: 'onKeyPressCapture'
        }
      },
      topSubmitEditing: {
        phasedRegistrationNames: {
          bubbled: 'onSubmitEditing',
          captured: 'onSubmitEditingCapture'
        }
      }
    },
    directEventTypes: {
      topScroll: {
        registrationName: 'onScroll'
      }
    },
    validAttributes: {
      maxFontSizeMultiplier: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      autoFocus: true,
      placeholder: true,
      inlineImagePadding: true,
      contextMenuHidden: true,
      textShadowColor: {
        process: require(_dependencyMap[3]).default
      },
      maxLength: true,
      selectTextOnFocus: true,
      textShadowRadius: true,
      underlineColorAndroid: {
        process: require(_dependencyMap[3]).default
      },
      textDecorationLine: true,
      submitBehavior: true,
      textAlignVertical: true,
      fontStyle: true,
      textShadowOffset: true,
      selectionColor: {
        process: require(_dependencyMap[3]).default
      },
      selectionHandleColor: {
        process: require(_dependencyMap[3]).default
      },
      placeholderTextColor: {
        process: require(_dependencyMap[3]).default
      },
      importantForAutofill: true,
      lineHeight: true,
      textTransform: true,
      returnKeyType: true,
      keyboardType: true,
      multiline: true,
      color: {
        process: require(_dependencyMap[3]).default
      },
      autoComplete: true,
      numberOfLines: true,
      letterSpacing: true,
      returnKeyLabel: true,
      fontSize: true,
      onKeyPress: true,
      cursorColor: {
        process: require(_dependencyMap[3]).default
      },
      text: true,
      showSoftInputOnFocus: true,
      textAlign: true,
      autoCapitalize: true,
      autoCorrect: true,
      caretHidden: true,
      secureTextEntry: true,
      textBreakStrategy: true,
      onScroll: true,
      onContentSizeChange: true,
      disableFullscreenUI: true,
      includeFontPadding: true,
      fontWeight: true,
      fontFamily: true,
      allowFontScaling: true,
      onSelectionChange: true,
      mostRecentEventCount: true,
      inlineImageLeft: true,
      editable: true,
      fontVariant: true,
      borderBottomRightRadius: true,
      borderBottomColor: {
        process: require(_dependencyMap[3]).default
      },
      borderRadius: true,
      borderRightColor: {
        process: require(_dependencyMap[3]).default
      },
      borderColor: {
        process: require(_dependencyMap[3]).default
      },
      borderTopRightRadius: true,
      borderStyle: true,
      borderBottomLeftRadius: true,
      borderLeftColor: {
        process: require(_dependencyMap[3]).default
      },
      borderTopLeftRadius: true,
      borderTopColor: {
        process: require(_dependencyMap[3]).default
      }
    }
  };
  var AndroidTextInputNativeComponent = NativeComponentRegistry.get('AndroidTextInput', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = AndroidTextInputNativeComponent;
},95,[1,96,142,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.get = get;
  exports.getWithFallback_DEPRECATED = getWithFallback_DEPRECATED;
  exports.setRuntimeConfigProvider = setRuntimeConfigProvider;
  exports.unstable_hasStaticViewConfig = unstable_hasStaticViewConfig;
  var _getNativeComponentAttributes = _interopRequireDefault(require(_dependencyMap[1]));
  var _UIManager = _interopRequireDefault(require(_dependencyMap[2]));
  var ReactNativeViewConfigRegistry = _interopRequireWildcard(require(_dependencyMap[3]));
  var StaticViewConfigValidator = _interopRequireWildcard(require(_dependencyMap[4]));
  var _ViewConfig = require(_dependencyMap[5]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[6]));
  var React = _interopRequireWildcard(require(_dependencyMap[7]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var getRuntimeConfig;
  function setRuntimeConfigProvider(runtimeConfigProvider) {
    if (getRuntimeConfig === undefined) {
      getRuntimeConfig = runtimeConfigProvider;
    }
  }
  function get(name, viewConfigProvider) {
    ReactNativeViewConfigRegistry.register(name, () => {
      var _ref = getRuntimeConfig?.(name) ?? {
          native: !global.RN$Bridgeless,
          verify: false
        },
        native = _ref.native,
        verify = _ref.verify;
      var viewConfig;
      if (native) {
        viewConfig = (0, _getNativeComponentAttributes.default)(name) ?? (0, _ViewConfig.createViewConfig)(viewConfigProvider());
      } else {
        viewConfig = (0, _ViewConfig.createViewConfig)(viewConfigProvider()) ?? (0, _getNativeComponentAttributes.default)(name);
      }
      (0, _invariant.default)(viewConfig != null, 'NativeComponentRegistry.get: both static and native view config are missing for native component "%s".', name);
      if (verify) {
        var nativeViewConfig = native ? viewConfig : (0, _getNativeComponentAttributes.default)(name);
        if (nativeViewConfig == null) {
          return viewConfig;
        }
        var staticViewConfig = native ? (0, _ViewConfig.createViewConfig)(viewConfigProvider()) : viewConfig;
        var validationOutput = StaticViewConfigValidator.validate(name, nativeViewConfig, staticViewConfig);
        if (validationOutput.type === 'invalid') {
          console.error(StaticViewConfigValidator.stringifyValidationResult(name, validationOutput));
        }
      }
      return viewConfig;
    });
    return name;
  }
  function getWithFallback_DEPRECATED(name, viewConfigProvider) {
    if (getRuntimeConfig == null) {
      if (hasNativeViewConfig(name)) {
        return get(name, viewConfigProvider);
      }
    } else {
      if (getRuntimeConfig(name) != null) {
        return get(name, viewConfigProvider);
      }
    }
    var FallbackNativeComponent = function (props) {
      return null;
    };
    FallbackNativeComponent.displayName = `Fallback(${name})`;
    return FallbackNativeComponent;
  }
  function hasNativeViewConfig(name) {
    (0, _invariant.default)(getRuntimeConfig == null, 'Unexpected invocation!');
    return _UIManager.default.getViewManagerConfig(name) != null;
  }
  function unstable_hasStaticViewConfig(name) {
    var _ref2 = getRuntimeConfig?.(name) ?? {
        native: true
      },
      native = _ref2.native;
    return !native;
  }
},96,[1,97,126,93,135,136,42,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _processBoxShadow = _interopRequireDefault(require(_dependencyMap[1]));
  var ReactNativeStyleAttributes = require(_dependencyMap[2]).default;
  var resolveAssetSource = require(_dependencyMap[3]).default;
  var processBackgroundImage = require(_dependencyMap[4]).default;
  var processColor = require(_dependencyMap[5]).default;
  var processColorArray = require(_dependencyMap[6]).default;
  var processFilter = require(_dependencyMap[7]).default;
  var insetsDiffer = require(_dependencyMap[8]).default;
  var matricesDiffer = require(_dependencyMap[9]).default;
  var pointsDiffer = require(_dependencyMap[10]).default;
  var sizesDiffer = require(_dependencyMap[11]).default;
  var UIManager = require(_dependencyMap[12]).default;
  var nullthrows = require(_dependencyMap[13]);
  function getNativeComponentAttributes(uiViewClassName) {
    var viewConfig = UIManager.getViewManagerConfig(uiViewClassName);
    if (viewConfig == null) {
      return null;
    }
    var baseModuleName = viewConfig.baseModuleName,
      bubblingEventTypes = viewConfig.bubblingEventTypes,
      directEventTypes = viewConfig.directEventTypes;
    var nativeProps = viewConfig.NativeProps;
    bubblingEventTypes = bubblingEventTypes ?? {};
    directEventTypes = directEventTypes ?? {};
    while (baseModuleName) {
      var baseModule = UIManager.getViewManagerConfig(baseModuleName);
      if (!baseModule) {
        baseModuleName = null;
      } else {
        bubblingEventTypes = {
          ...baseModule.bubblingEventTypes,
          ...bubblingEventTypes
        };
        directEventTypes = {
          ...baseModule.directEventTypes,
          ...directEventTypes
        };
        nativeProps = {
          ...baseModule.NativeProps,
          ...nativeProps
        };
        baseModuleName = baseModule.baseModuleName;
      }
    }
    var validAttributes = {};
    for (var key in nativeProps) {
      var typeName = nativeProps[key];
      var diff = getDifferForType(typeName);
      var process = getProcessorForType(typeName);
      validAttributes[key] = diff == null ? process == null ? true : {
        process
      } : process == null ? {
        diff
      } : {
        diff,
        process
      };
    }
    validAttributes.style = ReactNativeStyleAttributes;
    Object.assign(viewConfig, {
      uiViewClassName,
      validAttributes,
      bubblingEventTypes,
      directEventTypes
    });
    attachDefaultEventTypes(viewConfig);
    return viewConfig;
  }
  function attachDefaultEventTypes(viewConfig) {
    var constants = UIManager.getConstants();
    if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {
      viewConfig = merge(viewConfig, nullthrows(UIManager.getDefaultEventTypes)());
    } else {
      viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, constants.genericBubblingEventTypes);
      viewConfig.directEventTypes = merge(viewConfig.directEventTypes, constants.genericDirectEventTypes);
    }
  }
  function merge(destination, source) {
    if (!source) {
      return destination;
    }
    if (!destination) {
      return source;
    }
    for (var key in source) {
      if (!source.hasOwnProperty(key)) {
        continue;
      }
      var sourceValue = source[key];
      if (destination.hasOwnProperty(key)) {
        var destinationValue = destination[key];
        if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {
          sourceValue = merge(destinationValue, sourceValue);
        }
      }
      destination[key] = sourceValue;
    }
    return destination;
  }
  function getDifferForType(typeName) {
    switch (typeName) {
      case 'CATransform3D':
        return matricesDiffer;
      case 'CGPoint':
        return pointsDiffer;
      case 'CGSize':
        return sizesDiffer;
      case 'UIEdgeInsets':
        return insetsDiffer;
      case 'Point':
        return pointsDiffer;
      case 'EdgeInsets':
        return insetsDiffer;
    }
    return null;
  }
  function getProcessorForType(typeName) {
    switch (typeName) {
      case 'CGColor':
      case 'UIColor':
        return processColor;
      case 'CGColorArray':
      case 'UIColorArray':
        return processColorArray;
      case 'CGImage':
      case 'UIImage':
      case 'RCTImageSource':
        return resolveAssetSource;
      case 'BoxShadowArray':
        return _processBoxShadow.default;
      case 'FilterArray':
        return processFilter;
      case 'Color':
        return processColor;
      case 'ColorArray':
        return processColorArray;
      case 'Filter':
        return processFilter;
      case 'BackgroundImage':
        return processBackgroundImage;
      case 'ImageSource':
        return resolveAssetSource;
      case 'BoxShadow':
        return _processBoxShadow.default;
    }
    return null;
  }
  var _default = exports.default = getNativeComponentAttributes;
},97,[1,98,103,114,108,99,122,109,123,124,125,113,126,128]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = processBoxShadow;
  var _processColor = _interopRequireDefault(require(_dependencyMap[1]));
  function processBoxShadow(rawBoxShadows) {
    var result = [];
    if (rawBoxShadows == null) {
      return result;
    }
    var boxShadowList = typeof rawBoxShadows === 'string' ? parseBoxShadowString(rawBoxShadows.replace(/\n/g, ' ')) : rawBoxShadows;
    for (var rawBoxShadow of boxShadowList) {
      var parsedBoxShadow = {
        offsetX: 0,
        offsetY: 0
      };
      var value = undefined;
      for (var arg in rawBoxShadow) {
        switch (arg) {
          case 'offsetX':
            value = typeof rawBoxShadow.offsetX === 'string' ? parseLength(rawBoxShadow.offsetX) : rawBoxShadow.offsetX;
            if (value == null) {
              return [];
            }
            parsedBoxShadow.offsetX = value;
            break;
          case 'offsetY':
            value = typeof rawBoxShadow.offsetY === 'string' ? parseLength(rawBoxShadow.offsetY) : rawBoxShadow.offsetY;
            if (value == null) {
              return [];
            }
            parsedBoxShadow.offsetY = value;
            break;
          case 'spreadDistance':
            value = typeof rawBoxShadow.spreadDistance === 'string' ? parseLength(rawBoxShadow.spreadDistance) : rawBoxShadow.spreadDistance;
            if (value == null) {
              return [];
            }
            parsedBoxShadow.spreadDistance = value;
            break;
          case 'blurRadius':
            value = typeof rawBoxShadow.blurRadius === 'string' ? parseLength(rawBoxShadow.blurRadius) : rawBoxShadow.blurRadius;
            if (value == null || value < 0) {
              return [];
            }
            parsedBoxShadow.blurRadius = value;
            break;
          case 'color':
            var color = (0, _processColor.default)(rawBoxShadow.color);
            if (color == null) {
              return [];
            }
            parsedBoxShadow.color = color;
            break;
          case 'inset':
            parsedBoxShadow.inset = rawBoxShadow.inset;
        }
      }
      result.push(parsedBoxShadow);
    }
    return result;
  }
  function parseBoxShadowString(rawBoxShadows) {
    var result = [];
    for (var rawBoxShadow of rawBoxShadows.split(/,(?![^()]*\))/).map(bS => bS.trim()).filter(bS => bS !== '')) {
      var boxShadow = {
        offsetX: 0,
        offsetY: 0
      };
      var offsetX = undefined;
      var offsetY = undefined;
      var keywordDetectedAfterLength = false;
      var lengthCount = 0;
      var args = rawBoxShadow.split(/\s+(?![^(]*\))/);
      for (var arg of args) {
        var processedColor = (0, _processColor.default)(arg);
        if (processedColor != null) {
          if (boxShadow.color != null) {
            return [];
          }
          if (offsetX != null) {
            keywordDetectedAfterLength = true;
          }
          boxShadow.color = arg;
          continue;
        }
        if (arg === 'inset') {
          if (boxShadow.inset != null) {
            return [];
          }
          if (offsetX != null) {
            keywordDetectedAfterLength = true;
          }
          boxShadow.inset = true;
          continue;
        }
        switch (lengthCount) {
          case 0:
            offsetX = arg;
            lengthCount++;
            break;
          case 1:
            if (keywordDetectedAfterLength) {
              return [];
            }
            offsetY = arg;
            lengthCount++;
            break;
          case 2:
            if (keywordDetectedAfterLength) {
              return [];
            }
            boxShadow.blurRadius = arg;
            lengthCount++;
            break;
          case 3:
            if (keywordDetectedAfterLength) {
              return [];
            }
            boxShadow.spreadDistance = arg;
            lengthCount++;
            break;
          default:
            return [];
        }
      }
      if (offsetX == null || offsetY == null) {
        return [];
      }
      boxShadow.offsetX = offsetX;
      boxShadow.offsetY = offsetY;
      result.push(boxShadow);
    }
    return result;
  }
  function parseLength(length) {
    var argsWithUnitsRegex = /([+-]?\d*(\.\d+)?)([\w\W]+)?/g;
    var match = argsWithUnitsRegex.exec(length);
    if (!match || Number.isNaN(match[1])) {
      return null;
    }
    if (match[3] != null && match[3] !== 'px') {
      return null;
    }
    if (match[3] == null && match[1] !== '0') {
      return null;
    }
    return Number(match[1]);
  }
},98,[1,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var Platform = require(_dependencyMap[0]).default;
  var normalizeColor = require(_dependencyMap[1]).default;
  function processColor(color) {
    if (color === undefined || color === null) {
      return color;
    }
    var normalizedColor = normalizeColor(color);
    if (normalizedColor === null || normalizedColor === undefined) {
      return undefined;
    }
    if (typeof normalizedColor === 'object') {
      var processColorObject = require(_dependencyMap[2]).processColorObject;
      var processedColorObj = processColorObject(normalizedColor);
      if (processedColorObj != null) {
        return processedColorObj;
      }
    }
    if (typeof normalizedColor !== 'number') {
      return null;
    }
    normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;
    return normalizedColor;
  }
  var _default = exports.default = processColor;
},99,[87,100,102]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _normalizeColors = _interopRequireDefault(require(_dependencyMap[1]));
  function normalizeColor(color) {
    if (typeof color === 'object' && color != null) {
      var _require = require(_dependencyMap[2]),
        normalizeColorObject = _require.normalizeColorObject;
      var normalizedColor = normalizeColorObject(color);
      if (normalizedColor != null) {
        return normalizedColor;
      }
    }
    if (typeof color === 'string' || typeof color === 'number') {
      return (0, _normalizeColors.default)(color);
    }
  }
  var _default = exports.default = normalizeColor;
},100,[1,101,102]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @format
   * 
   */

  /* eslint no-bitwise: 0 */

  'use strict';

  function normalizeColor(color) {
    if (typeof color === 'number') {
      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
        return color;
      }
      return null;
    }
    if (typeof color !== 'string') {
      return null;
    }
    var matchers = getMatchers();
    var match;

    // Ordered based on occurrences on Facebook codebase
    if (match = matchers.hex6.exec(color)) {
      return parseInt(match[1] + 'ff', 16) >>> 0;
    }
    var colorFromKeyword = normalizeKeyword(color);
    if (colorFromKeyword != null) {
      return colorFromKeyword;
    }
    if (match = matchers.rgb.exec(color)) {
      return (parse255(match[1]) << 24 |
      // r
      parse255(match[2]) << 16 |
      // g
      parse255(match[3]) << 8 |
      // b
      0x000000ff) >>>
      // a
      0;
    }
    if (match = matchers.rgba.exec(color)) {
      // rgba(R G B / A) notation
      if (match[6] !== undefined) {
        return (parse255(match[6]) << 24 |
        // r
        parse255(match[7]) << 16 |
        // g
        parse255(match[8]) << 8 |
        // b
        parse1(match[9])) >>>
        // a
        0;
      }

      // rgba(R, G, B, A) notation
      return (parse255(match[2]) << 24 |
      // r
      parse255(match[3]) << 16 |
      // g
      parse255(match[4]) << 8 |
      // b
      parse1(match[5])) >>>
      // a
      0;
    }
    if (match = matchers.hex3.exec(color)) {
      return parseInt(match[1] + match[1] +
      // r
      match[2] + match[2] +
      // g
      match[3] + match[3] +
      // b
      'ff',
      // a
      16) >>> 0;
    }

    // https://drafts.csswg.org/css-color-4/#hex-notation
    if (match = matchers.hex8.exec(color)) {
      return parseInt(match[1], 16) >>> 0;
    }
    if (match = matchers.hex4.exec(color)) {
      return parseInt(match[1] + match[1] +
      // r
      match[2] + match[2] +
      // g
      match[3] + match[3] +
      // b
      match[4] + match[4],
      // a
      16) >>> 0;
    }
    if (match = matchers.hsl.exec(color)) {
      return (hslToRgb(parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3]) // l
      ) | 0x000000ff) >>>
      // a
      0;
    }
    if (match = matchers.hsla.exec(color)) {
      // hsla(H S L / A) notation
      if (match[6] !== undefined) {
        return (hslToRgb(parse360(match[6]),
        // h
        parsePercentage(match[7]),
        // s
        parsePercentage(match[8]) // l
        ) | parse1(match[9])) >>>
        // a
        0;
      }

      // hsla(H, S, L, A) notation
      return (hslToRgb(parse360(match[2]),
      // h
      parsePercentage(match[3]),
      // s
      parsePercentage(match[4]) // l
      ) | parse1(match[5])) >>>
      // a
      0;
    }
    if (match = matchers.hwb.exec(color)) {
      return (hwbToRgb(parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // w
      parsePercentage(match[3]) // b
      ) | 0x000000ff) >>>
      // a
      0;
    }
    return null;
  }
  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }
    if (t > 1) {
      t -= 1;
    }
    if (t < 0.16666666666666666) {
      return p + (q - p) * 6 * t;
    }
    if (t < 0.5) {
      return q;
    }
    if (t < 0.6666666666666666) {
      return p + (q - p) * (0.6666666666666666 - t) * 6;
    }
    return p;
  }
  function hslToRgb(h, s, l) {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    var r = hue2rgb(p, q, h + 0.3333333333333333);
    var g = hue2rgb(p, q, h);
    var b = hue2rgb(p, q, h - 0.3333333333333333);
    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
  }
  function hwbToRgb(h, w, b) {
    if (w + b >= 1) {
      var gray = Math.round(w * 255 / (w + b));
      return gray << 24 | gray << 16 | gray << 8;
    }
    var red = hue2rgb(0, 1, h + 0.3333333333333333) * (1 - w - b) + w;
    var green = hue2rgb(0, 1, h) * (1 - w - b) + w;
    var blue = hue2rgb(0, 1, h - 0.3333333333333333) * (1 - w - b) + w;
    return Math.round(red * 255) << 24 | Math.round(green * 255) << 16 | Math.round(blue * 255) << 8;
  }
  var NUMBER = '[-+]?\\d*\\.?\\d+';
  var PERCENTAGE = "[-+]?\\d*\\.?\\d+%";
  function call() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return '\\(\\s*(' + args.join(')\\s*,?\\s*(') + ')\\s*\\)';
  }
  function callModern() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return '\\(\\s*(' + args.join(')\\s*(') + ')\\s*\\)';
  }
  function callWithSlashSeparator() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return '\\(\\s*(' + args.slice(0, args.length - 1).join(')\\s*,?\\s*(') + ')\\s*/\\s*(' + args[args.length - 1] + ')\\s*\\)';
  }
  function commaSeparatedCall() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
  }
  var cachedMatchers;
  function getMatchers() {
    if (cachedMatchers === undefined) {
      cachedMatchers = {
        rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
        rgba: new RegExp('rgba(' + commaSeparatedCall(NUMBER, NUMBER, NUMBER, NUMBER) + '|' + callWithSlashSeparator(NUMBER, NUMBER, NUMBER, NUMBER) + ')'),
        hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
        hsla: new RegExp('hsla(' + commaSeparatedCall(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + '|' + callWithSlashSeparator(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + ')'),
        hwb: new RegExp('hwb' + callModern(NUMBER, PERCENTAGE, PERCENTAGE)),
        hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#([0-9a-fA-F]{6})$/,
        hex8: /^#([0-9a-fA-F]{8})$/
      };
    }
    return cachedMatchers;
  }
  function parse255(str) {
    var int = parseInt(str, 10);
    if (int < 0) {
      return 0;
    }
    if (int > 255) {
      return 255;
    }
    return int;
  }
  function parse360(str) {
    var int = parseFloat(str);
    return (int % 360 + 360) % 360 / 360;
  }
  function parse1(str) {
    var num = parseFloat(str);
    if (num < 0) {
      return 0;
    }
    if (num > 1) {
      return 255;
    }
    return Math.round(num * 255);
  }
  function parsePercentage(str) {
    // parseFloat conveniently ignores the final %
    var int = parseFloat(str);
    if (int < 0) {
      return 0;
    }
    if (int > 100) {
      return 1;
    }
    return int / 100;
  }
  function normalizeKeyword(name) {
    // prettier-ignore
    switch (name) {
      case 'transparent':
        return 0x00000000;
      // http://www.w3.org/TR/css3-color/#svg-color
      case 'aliceblue':
        return 0xf0f8ffff;
      case 'antiquewhite':
        return 0xfaebd7ff;
      case 'aqua':
        return 0x00ffffff;
      case 'aquamarine':
        return 0x7fffd4ff;
      case 'azure':
        return 0xf0ffffff;
      case 'beige':
        return 0xf5f5dcff;
      case 'bisque':
        return 0xffe4c4ff;
      case 'black':
        return 0x000000ff;
      case 'blanchedalmond':
        return 0xffebcdff;
      case 'blue':
        return 0x0000ffff;
      case 'blueviolet':
        return 0x8a2be2ff;
      case 'brown':
        return 0xa52a2aff;
      case 'burlywood':
        return 0xdeb887ff;
      case 'burntsienna':
        return 0xea7e5dff;
      case 'cadetblue':
        return 0x5f9ea0ff;
      case 'chartreuse':
        return 0x7fff00ff;
      case 'chocolate':
        return 0xd2691eff;
      case 'coral':
        return 0xff7f50ff;
      case 'cornflowerblue':
        return 0x6495edff;
      case 'cornsilk':
        return 0xfff8dcff;
      case 'crimson':
        return 0xdc143cff;
      case 'cyan':
        return 0x00ffffff;
      case 'darkblue':
        return 0x00008bff;
      case 'darkcyan':
        return 0x008b8bff;
      case 'darkgoldenrod':
        return 0xb8860bff;
      case 'darkgray':
        return 0xa9a9a9ff;
      case 'darkgreen':
        return 0x006400ff;
      case 'darkgrey':
        return 0xa9a9a9ff;
      case 'darkkhaki':
        return 0xbdb76bff;
      case 'darkmagenta':
        return 0x8b008bff;
      case 'darkolivegreen':
        return 0x556b2fff;
      case 'darkorange':
        return 0xff8c00ff;
      case 'darkorchid':
        return 0x9932ccff;
      case 'darkred':
        return 0x8b0000ff;
      case 'darksalmon':
        return 0xe9967aff;
      case 'darkseagreen':
        return 0x8fbc8fff;
      case 'darkslateblue':
        return 0x483d8bff;
      case 'darkslategray':
        return 0x2f4f4fff;
      case 'darkslategrey':
        return 0x2f4f4fff;
      case 'darkturquoise':
        return 0x00ced1ff;
      case 'darkviolet':
        return 0x9400d3ff;
      case 'deeppink':
        return 0xff1493ff;
      case 'deepskyblue':
        return 0x00bfffff;
      case 'dimgray':
        return 0x696969ff;
      case 'dimgrey':
        return 0x696969ff;
      case 'dodgerblue':
        return 0x1e90ffff;
      case 'firebrick':
        return 0xb22222ff;
      case 'floralwhite':
        return 0xfffaf0ff;
      case 'forestgreen':
        return 0x228b22ff;
      case 'fuchsia':
        return 0xff00ffff;
      case 'gainsboro':
        return 0xdcdcdcff;
      case 'ghostwhite':
        return 0xf8f8ffff;
      case 'gold':
        return 0xffd700ff;
      case 'goldenrod':
        return 0xdaa520ff;
      case 'gray':
        return 0x808080ff;
      case 'green':
        return 0x008000ff;
      case 'greenyellow':
        return 0xadff2fff;
      case 'grey':
        return 0x808080ff;
      case 'honeydew':
        return 0xf0fff0ff;
      case 'hotpink':
        return 0xff69b4ff;
      case 'indianred':
        return 0xcd5c5cff;
      case 'indigo':
        return 0x4b0082ff;
      case 'ivory':
        return 0xfffff0ff;
      case 'khaki':
        return 0xf0e68cff;
      case 'lavender':
        return 0xe6e6faff;
      case 'lavenderblush':
        return 0xfff0f5ff;
      case 'lawngreen':
        return 0x7cfc00ff;
      case 'lemonchiffon':
        return 0xfffacdff;
      case 'lightblue':
        return 0xadd8e6ff;
      case 'lightcoral':
        return 0xf08080ff;
      case 'lightcyan':
        return 0xe0ffffff;
      case 'lightgoldenrodyellow':
        return 0xfafad2ff;
      case 'lightgray':
        return 0xd3d3d3ff;
      case 'lightgreen':
        return 0x90ee90ff;
      case 'lightgrey':
        return 0xd3d3d3ff;
      case 'lightpink':
        return 0xffb6c1ff;
      case 'lightsalmon':
        return 0xffa07aff;
      case 'lightseagreen':
        return 0x20b2aaff;
      case 'lightskyblue':
        return 0x87cefaff;
      case 'lightslategray':
        return 0x778899ff;
      case 'lightslategrey':
        return 0x778899ff;
      case 'lightsteelblue':
        return 0xb0c4deff;
      case 'lightyellow':
        return 0xffffe0ff;
      case 'lime':
        return 0x00ff00ff;
      case 'limegreen':
        return 0x32cd32ff;
      case 'linen':
        return 0xfaf0e6ff;
      case 'magenta':
        return 0xff00ffff;
      case 'maroon':
        return 0x800000ff;
      case 'mediumaquamarine':
        return 0x66cdaaff;
      case 'mediumblue':
        return 0x0000cdff;
      case 'mediumorchid':
        return 0xba55d3ff;
      case 'mediumpurple':
        return 0x9370dbff;
      case 'mediumseagreen':
        return 0x3cb371ff;
      case 'mediumslateblue':
        return 0x7b68eeff;
      case 'mediumspringgreen':
        return 0x00fa9aff;
      case 'mediumturquoise':
        return 0x48d1ccff;
      case 'mediumvioletred':
        return 0xc71585ff;
      case 'midnightblue':
        return 0x191970ff;
      case 'mintcream':
        return 0xf5fffaff;
      case 'mistyrose':
        return 0xffe4e1ff;
      case 'moccasin':
        return 0xffe4b5ff;
      case 'navajowhite':
        return 0xffdeadff;
      case 'navy':
        return 0x000080ff;
      case 'oldlace':
        return 0xfdf5e6ff;
      case 'olive':
        return 0x808000ff;
      case 'olivedrab':
        return 0x6b8e23ff;
      case 'orange':
        return 0xffa500ff;
      case 'orangered':
        return 0xff4500ff;
      case 'orchid':
        return 0xda70d6ff;
      case 'palegoldenrod':
        return 0xeee8aaff;
      case 'palegreen':
        return 0x98fb98ff;
      case 'paleturquoise':
        return 0xafeeeeff;
      case 'palevioletred':
        return 0xdb7093ff;
      case 'papayawhip':
        return 0xffefd5ff;
      case 'peachpuff':
        return 0xffdab9ff;
      case 'peru':
        return 0xcd853fff;
      case 'pink':
        return 0xffc0cbff;
      case 'plum':
        return 0xdda0ddff;
      case 'powderblue':
        return 0xb0e0e6ff;
      case 'purple':
        return 0x800080ff;
      case 'rebeccapurple':
        return 0x663399ff;
      case 'red':
        return 0xff0000ff;
      case 'rosybrown':
        return 0xbc8f8fff;
      case 'royalblue':
        return 0x4169e1ff;
      case 'saddlebrown':
        return 0x8b4513ff;
      case 'salmon':
        return 0xfa8072ff;
      case 'sandybrown':
        return 0xf4a460ff;
      case 'seagreen':
        return 0x2e8b57ff;
      case 'seashell':
        return 0xfff5eeff;
      case 'sienna':
        return 0xa0522dff;
      case 'silver':
        return 0xc0c0c0ff;
      case 'skyblue':
        return 0x87ceebff;
      case 'slateblue':
        return 0x6a5acdff;
      case 'slategray':
        return 0x708090ff;
      case 'slategrey':
        return 0x708090ff;
      case 'snow':
        return 0xfffafaff;
      case 'springgreen':
        return 0x00ff7fff;
      case 'steelblue':
        return 0x4682b4ff;
      case 'tan':
        return 0xd2b48cff;
      case 'teal':
        return 0x008080ff;
      case 'thistle':
        return 0xd8bfd8ff;
      case 'tomato':
        return 0xff6347ff;
      case 'turquoise':
        return 0x40e0d0ff;
      case 'violet':
        return 0xee82eeff;
      case 'wheat':
        return 0xf5deb3ff;
      case 'white':
        return 0xffffffff;
      case 'whitesmoke':
        return 0xf5f5f5ff;
      case 'yellow':
        return 0xffff00ff;
      case 'yellowgreen':
        return 0x9acd32ff;
    }
    return null;
  }
  module.exports = normalizeColor;
},101,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.processColorObject = exports.normalizeColorObject = exports.PlatformColor = exports.DynamicColorIOSPrivate = undefined;
  var PlatformColor = function () {
    for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
      names[_key] = arguments[_key];
    }
    return {
      semantic: names
    };
  };
  exports.PlatformColor = PlatformColor;
  var DynamicColorIOSPrivate = tuple => {
    return {
      dynamic: {
        light: tuple.light,
        dark: tuple.dark,
        highContrastLight: tuple.highContrastLight,
        highContrastDark: tuple.highContrastDark
      }
    };
  };
  exports.DynamicColorIOSPrivate = DynamicColorIOSPrivate;
  var _normalizeColorObject = color => {
    if ('semantic' in color) {
      return color;
    } else if ('dynamic' in color && color.dynamic !== undefined) {
      var normalizeColor = require(_dependencyMap[0]).default;
      var dynamic = color.dynamic;
      var dynamicColor = {
        dynamic: {
          light: normalizeColor(dynamic.light),
          dark: normalizeColor(dynamic.dark),
          highContrastLight: normalizeColor(dynamic.highContrastLight),
          highContrastDark: normalizeColor(dynamic.highContrastDark)
        }
      };
      return dynamicColor;
    }
    return null;
  };
  var normalizeColorObject = exports.normalizeColorObject = _normalizeColorObject;
  var _processColorObject = color => {
    if ('dynamic' in color && color.dynamic != null) {
      var processColor = require(_dependencyMap[1]).default;
      var dynamic = color.dynamic;
      var dynamicColor = {
        dynamic: {
          light: processColor(dynamic.light),
          dark: processColor(dynamic.dark),
          highContrastLight: processColor(dynamic.highContrastLight),
          highContrastDark: processColor(dynamic.highContrastDark)
        }
      };
      return dynamicColor;
    }
    return color;
  };
  var processColorObject = exports.processColorObject = _processColorObject;
},102,[100,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[1]));
  var _NativeReactNativeFeatureFlags = _interopRequireDefault(require(_dependencyMap[2]));
  var _processAspectRatio = _interopRequireDefault(require(_dependencyMap[3]));
  var _processBackgroundImage = _interopRequireDefault(require(_dependencyMap[4]));
  var _processBoxShadow = _interopRequireDefault(require(_dependencyMap[5]));
  var _processColor = _interopRequireDefault(require(_dependencyMap[6]));
  var _processFilter = _interopRequireDefault(require(_dependencyMap[7]));
  var _processFontVariant = _interopRequireDefault(require(_dependencyMap[8]));
  var _processTransform = _interopRequireDefault(require(_dependencyMap[9]));
  var _processTransformOrigin = _interopRequireDefault(require(_dependencyMap[10]));
  var _sizesDiffer = _interopRequireDefault(require(_dependencyMap[11]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var colorAttributes = {
    process: _processColor.default
  };
  var ReactNativeStyleAttributes = {
    alignContent: true,
    alignItems: true,
    alignSelf: true,
    aspectRatio: {
      process: _processAspectRatio.default
    },
    borderBottomWidth: true,
    borderEndWidth: true,
    borderLeftWidth: true,
    borderRightWidth: true,
    borderStartWidth: true,
    borderTopWidth: true,
    boxSizing: true,
    columnGap: true,
    borderWidth: true,
    bottom: true,
    direction: true,
    display: true,
    end: true,
    flex: true,
    flexBasis: true,
    flexDirection: true,
    flexGrow: true,
    flexShrink: true,
    flexWrap: true,
    gap: true,
    height: true,
    inset: true,
    insetBlock: true,
    insetBlockEnd: true,
    insetBlockStart: true,
    insetInline: true,
    insetInlineEnd: true,
    insetInlineStart: true,
    justifyContent: true,
    left: true,
    margin: true,
    marginBlock: true,
    marginBlockEnd: true,
    marginBlockStart: true,
    marginBottom: true,
    marginEnd: true,
    marginHorizontal: true,
    marginInline: true,
    marginInlineEnd: true,
    marginInlineStart: true,
    marginLeft: true,
    marginRight: true,
    marginStart: true,
    marginTop: true,
    marginVertical: true,
    maxHeight: true,
    maxWidth: true,
    minHeight: true,
    minWidth: true,
    overflow: true,
    padding: true,
    paddingBlock: true,
    paddingBlockEnd: true,
    paddingBlockStart: true,
    paddingBottom: true,
    paddingEnd: true,
    paddingHorizontal: true,
    paddingInline: true,
    paddingInlineEnd: true,
    paddingInlineStart: true,
    paddingLeft: true,
    paddingRight: true,
    paddingStart: true,
    paddingTop: true,
    paddingVertical: true,
    position: true,
    right: true,
    rowGap: true,
    start: true,
    top: true,
    width: true,
    zIndex: true,
    elevation: true,
    shadowColor: colorAttributes,
    shadowOffset: {
      diff: _sizesDiffer.default
    },
    shadowOpacity: true,
    shadowRadius: true,
    transform: {
      process: _processTransform.default
    },
    transformOrigin: {
      process: _processTransformOrigin.default
    },
    filter: _NativeReactNativeFeatureFlags.default != null && ReactNativeFeatureFlags.enableNativeCSSParsing() ? true : {
      process: _processFilter.default
    },
    mixBlendMode: true,
    isolation: true,
    boxShadow: _NativeReactNativeFeatureFlags.default != null && ReactNativeFeatureFlags.enableNativeCSSParsing() ? true : {
      process: _processBoxShadow.default
    },
    experimental_backgroundImage: {
      process: _processBackgroundImage.default
    },
    backfaceVisibility: true,
    backgroundColor: colorAttributes,
    borderBlockColor: colorAttributes,
    borderBlockEndColor: colorAttributes,
    borderBlockStartColor: colorAttributes,
    borderBottomColor: colorAttributes,
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderColor: colorAttributes,
    borderCurve: true,
    borderEndColor: colorAttributes,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderLeftColor: colorAttributes,
    borderRadius: true,
    borderRightColor: colorAttributes,
    borderStartColor: colorAttributes,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    borderStyle: true,
    borderTopColor: colorAttributes,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    cursor: true,
    opacity: true,
    outlineColor: colorAttributes,
    outlineOffset: true,
    outlineStyle: true,
    outlineWidth: true,
    pointerEvents: true,
    color: colorAttributes,
    fontFamily: true,
    fontSize: true,
    fontStyle: true,
    fontVariant: {
      process: _processFontVariant.default
    },
    fontWeight: true,
    includeFontPadding: true,
    letterSpacing: true,
    lineHeight: true,
    textAlign: true,
    textAlignVertical: true,
    textDecorationColor: colorAttributes,
    textDecorationLine: true,
    textDecorationStyle: true,
    textShadowColor: colorAttributes,
    textShadowOffset: true,
    textShadowRadius: true,
    textTransform: true,
    userSelect: true,
    verticalAlign: true,
    writingDirection: true,
    overlayColor: colorAttributes,
    resizeMode: true,
    tintColor: colorAttributes,
    objectFit: true
  };
  var _default = exports.default = ReactNativeStyleAttributes;
},103,[1,104,106,107,108,98,99,109,110,111,112,113]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.useTurboModules = exports.useTurboModuleInterop = exports.useShadowNodeStateOnClone = exports.useRefsForTextInputState = exports.useRawPropsJsiValue = exports.useOptimizedEventBatchingOnAndroid = exports.useNativeViewConfigsInBridgelessMode = exports.useFabricInterop = exports.useEditTextStockAndroidFocusBehavior = exports.useAlwaysAvailableJSErrorHandling = exports.updateRuntimeShadowNodeReferencesOnCommit = exports.traceTurboModulePromiseRejectionsOnAndroid = exports.throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS = exports.shouldUseSetNativePropsInFabric = exports.shouldUseRemoveClippedSubviewsAsDefaultOnIOS = exports.shouldUseAnimatedObjectForTransform = exports.scheduleAnimatedCleanupInMicrotask = exports.removeTurboModuleManagerDelegateMutex = exports.override = exports.lazyAnimationCallbacks = exports.jsOnlyTestFlag = exports.isLayoutAnimationEnabled = exports.fuseboxNetworkInspectionEnabled = exports.fuseboxEnabledRelease = exports.fixVirtualizeListCollapseWindowSize = exports.fixMountingCoordinatorReportedPendingTransactionsOnAndroid = exports.fixMappingOfEventPrioritiesBetweenFabricAndReact = exports.fixDifferentiatorEmittingUpdatesWithWrongParentTag = exports.excludeYogaFromRawProps = exports.enableViewRecyclingForView = exports.enableViewRecyclingForText = exports.enableViewRecycling = exports.enableViewCulling = exports.enableUIConsistency = exports.enableSynchronousStateUpdates = exports.enableReportEventPaintTime = exports.enablePropsUpdateReconciliationAndroid = exports.enablePreciseSchedulingForPremountItemsOnAndroid = exports.enableNewBackgroundAndBorderDrawables = exports.enableNativeCSSParsing = exports.enableLongTaskAPI = exports.enableLayoutAnimationsOnIOS = exports.enableLayoutAnimationsOnAndroid = exports.enableJSRuntimeGCOnMemoryPressureOnIOS = exports.enableImagePrefetchingAndroid = exports.enableIOSViewClipToPaddingBox = exports.enableFabricRenderer = exports.enableFabricLogs = exports.enableEagerRootViewAttachment = exports.enableDOMDocumentAPI = exports.enableCppPropsIteratorSetter = exports.enableBridgelessArchitecture = exports.enableAnimatedClearImmediateFix = exports.enableAccumulatedUpdatesInRawPropsAndroid = exports.enableAccessToHostTreeInFabric = exports.disableMountItemReorderingAndroid = exports.disableInteractionManager = exports.commonTestFlagWithoutNativeImplementation = exports.commonTestFlag = exports.avoidStateUpdateInAnimatedPropsMemo = exports.animatedShouldUseSingleOp = exports.animatedShouldDebounceQueueFlush = undefined;
  var _ReactNativeFeatureFlagsBase = require(_dependencyMap[0]);
  var jsOnlyTestFlag = exports.jsOnlyTestFlag = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('jsOnlyTestFlag', false);
  var animatedShouldDebounceQueueFlush = exports.animatedShouldDebounceQueueFlush = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldDebounceQueueFlush', false);
  var animatedShouldUseSingleOp = exports.animatedShouldUseSingleOp = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldUseSingleOp', false);
  var avoidStateUpdateInAnimatedPropsMemo = exports.avoidStateUpdateInAnimatedPropsMemo = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('avoidStateUpdateInAnimatedPropsMemo', false);
  var disableInteractionManager = exports.disableInteractionManager = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('disableInteractionManager', false);
  var enableAccessToHostTreeInFabric = exports.enableAccessToHostTreeInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAccessToHostTreeInFabric', false);
  var enableAnimatedClearImmediateFix = exports.enableAnimatedClearImmediateFix = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAnimatedClearImmediateFix', true);
  var enableDOMDocumentAPI = exports.enableDOMDocumentAPI = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableDOMDocumentAPI', false);
  var fixVirtualizeListCollapseWindowSize = exports.fixVirtualizeListCollapseWindowSize = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('fixVirtualizeListCollapseWindowSize', false);
  var isLayoutAnimationEnabled = exports.isLayoutAnimationEnabled = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('isLayoutAnimationEnabled', true);
  var scheduleAnimatedCleanupInMicrotask = exports.scheduleAnimatedCleanupInMicrotask = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('scheduleAnimatedCleanupInMicrotask', false);
  var shouldUseAnimatedObjectForTransform = exports.shouldUseAnimatedObjectForTransform = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseAnimatedObjectForTransform', false);
  var shouldUseRemoveClippedSubviewsAsDefaultOnIOS = exports.shouldUseRemoveClippedSubviewsAsDefaultOnIOS = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);
  var shouldUseSetNativePropsInFabric = exports.shouldUseSetNativePropsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInFabric', true);
  var useRefsForTextInputState = exports.useRefsForTextInputState = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('useRefsForTextInputState', false);
  var commonTestFlag = exports.commonTestFlag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlag', false);
  var commonTestFlagWithoutNativeImplementation = exports.commonTestFlagWithoutNativeImplementation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlagWithoutNativeImplementation', false);
  var disableMountItemReorderingAndroid = exports.disableMountItemReorderingAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('disableMountItemReorderingAndroid', false);
  var enableAccumulatedUpdatesInRawPropsAndroid = exports.enableAccumulatedUpdatesInRawPropsAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAccumulatedUpdatesInRawPropsAndroid', false);
  var enableBridgelessArchitecture = exports.enableBridgelessArchitecture = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableBridgelessArchitecture', false);
  var enableCppPropsIteratorSetter = exports.enableCppPropsIteratorSetter = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCppPropsIteratorSetter', false);
  var enableEagerRootViewAttachment = exports.enableEagerRootViewAttachment = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEagerRootViewAttachment', false);
  var enableFabricLogs = exports.enableFabricLogs = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricLogs', false);
  var enableFabricRenderer = exports.enableFabricRenderer = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricRenderer', false);
  var enableIOSViewClipToPaddingBox = exports.enableIOSViewClipToPaddingBox = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableIOSViewClipToPaddingBox', false);
  var enableImagePrefetchingAndroid = exports.enableImagePrefetchingAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableImagePrefetchingAndroid', false);
  var enableJSRuntimeGCOnMemoryPressureOnIOS = exports.enableJSRuntimeGCOnMemoryPressureOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableJSRuntimeGCOnMemoryPressureOnIOS', false);
  var enableLayoutAnimationsOnAndroid = exports.enableLayoutAnimationsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnAndroid', false);
  var enableLayoutAnimationsOnIOS = exports.enableLayoutAnimationsOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnIOS', true);
  var enableLongTaskAPI = exports.enableLongTaskAPI = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLongTaskAPI', false);
  var enableNativeCSSParsing = exports.enableNativeCSSParsing = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableNativeCSSParsing', false);
  var enableNewBackgroundAndBorderDrawables = exports.enableNewBackgroundAndBorderDrawables = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableNewBackgroundAndBorderDrawables', false);
  var enablePreciseSchedulingForPremountItemsOnAndroid = exports.enablePreciseSchedulingForPremountItemsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePreciseSchedulingForPremountItemsOnAndroid', false);
  var enablePropsUpdateReconciliationAndroid = exports.enablePropsUpdateReconciliationAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePropsUpdateReconciliationAndroid', false);
  var enableReportEventPaintTime = exports.enableReportEventPaintTime = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableReportEventPaintTime', false);
  var enableSynchronousStateUpdates = exports.enableSynchronousStateUpdates = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableSynchronousStateUpdates', false);
  var enableUIConsistency = exports.enableUIConsistency = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableUIConsistency', false);
  var enableViewCulling = exports.enableViewCulling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewCulling', false);
  var enableViewRecycling = exports.enableViewRecycling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecycling', false);
  var enableViewRecyclingForText = exports.enableViewRecyclingForText = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecyclingForText', true);
  var enableViewRecyclingForView = exports.enableViewRecyclingForView = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecyclingForView', true);
  var excludeYogaFromRawProps = exports.excludeYogaFromRawProps = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('excludeYogaFromRawProps', false);
  var fixDifferentiatorEmittingUpdatesWithWrongParentTag = exports.fixDifferentiatorEmittingUpdatesWithWrongParentTag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixDifferentiatorEmittingUpdatesWithWrongParentTag', true);
  var fixMappingOfEventPrioritiesBetweenFabricAndReact = exports.fixMappingOfEventPrioritiesBetweenFabricAndReact = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMappingOfEventPrioritiesBetweenFabricAndReact', false);
  var fixMountingCoordinatorReportedPendingTransactionsOnAndroid = exports.fixMountingCoordinatorReportedPendingTransactionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMountingCoordinatorReportedPendingTransactionsOnAndroid', false);
  var fuseboxEnabledRelease = exports.fuseboxEnabledRelease = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledRelease', false);
  var fuseboxNetworkInspectionEnabled = exports.fuseboxNetworkInspectionEnabled = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxNetworkInspectionEnabled', false);
  var lazyAnimationCallbacks = exports.lazyAnimationCallbacks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('lazyAnimationCallbacks', false);
  var removeTurboModuleManagerDelegateMutex = exports.removeTurboModuleManagerDelegateMutex = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('removeTurboModuleManagerDelegateMutex', false);
  var throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS = exports.throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('throwExceptionInsteadOfDeadlockOnTurboModuleSetupDuringSyncRenderIOS', false);
  var traceTurboModulePromiseRejectionsOnAndroid = exports.traceTurboModulePromiseRejectionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('traceTurboModulePromiseRejectionsOnAndroid', false);
  var updateRuntimeShadowNodeReferencesOnCommit = exports.updateRuntimeShadowNodeReferencesOnCommit = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('updateRuntimeShadowNodeReferencesOnCommit', false);
  var useAlwaysAvailableJSErrorHandling = exports.useAlwaysAvailableJSErrorHandling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useAlwaysAvailableJSErrorHandling', false);
  var useEditTextStockAndroidFocusBehavior = exports.useEditTextStockAndroidFocusBehavior = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useEditTextStockAndroidFocusBehavior', true);
  var useFabricInterop = exports.useFabricInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useFabricInterop', false);
  var useNativeViewConfigsInBridgelessMode = exports.useNativeViewConfigsInBridgelessMode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNativeViewConfigsInBridgelessMode', false);
  var useOptimizedEventBatchingOnAndroid = exports.useOptimizedEventBatchingOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimizedEventBatchingOnAndroid', false);
  var useRawPropsJsiValue = exports.useRawPropsJsiValue = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRawPropsJsiValue', false);
  var useShadowNodeStateOnClone = exports.useShadowNodeStateOnClone = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useShadowNodeStateOnClone', false);
  var useTurboModuleInterop = exports.useTurboModuleInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModuleInterop', false);
  var useTurboModules = exports.useTurboModules = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModules', false);
  var override = exports.override = _ReactNativeFeatureFlagsBase.setOverrides;
},104,[105]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createJavaScriptFlagGetter = createJavaScriptFlagGetter;
  exports.createNativeFlagGetter = createNativeFlagGetter;
  exports.getOverrides = getOverrides;
  exports.setOverrides = setOverrides;
  var _NativeReactNativeFeatureFlags = _interopRequireDefault(require(_dependencyMap[1]));
  var accessedFeatureFlags = new Set();
  var overrides;
  function createGetter(configName, customValueGetter, defaultValue) {
    var cachedValue;
    return () => {
      if (cachedValue == null) {
        cachedValue = customValueGetter() ?? defaultValue;
      }
      return cachedValue;
    };
  }
  function createJavaScriptFlagGetter(configName, defaultValue) {
    return createGetter(configName, () => {
      accessedFeatureFlags.add(configName);
      return overrides?.[configName]?.(defaultValue);
    }, defaultValue);
  }
  function createNativeFlagGetter(configName, defaultValue) {
    var skipUnavailableNativeModuleError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    return createGetter(configName, () => {
      maybeLogUnavailableNativeModuleError(configName);
      return _NativeReactNativeFeatureFlags.default?.[configName]?.();
    }, defaultValue);
  }
  function getOverrides() {
    return overrides;
  }
  function setOverrides(newOverrides) {
    if (overrides != null) {
      throw new Error('Feature flags cannot be overridden more than once');
    }
    if (accessedFeatureFlags.size > 0) {
      var accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');
      throw new Error(`Feature flags were accessed before being overridden: ${accessedFeatureFlagsStr}`);
    }
    overrides = newOverrides;
  }
  var reportedConfigNames = new Set();
  function maybeLogUnavailableNativeModuleError(configName) {
    if (!_NativeReactNativeFeatureFlags.default && !reportedConfigNames.has(configName)) {
      reportedConfigNames.add(configName);
      console.error(`Could not access feature flag '${configName}' because native module method was not available`);
    }
  }
},105,[1,106]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var NativeReactNativeFeatureFlags = TurboModuleRegistry.get('NativeReactNativeFeatureFlagsCxx');
  var _default = exports.default = NativeReactNativeFeatureFlags;
},106,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var invariant = require(_dependencyMap[0]);
  function processAspectRatio(aspectRatio) {
    if (typeof aspectRatio === 'number') {
      return aspectRatio;
    }
    if (typeof aspectRatio !== 'string') {
      return;
    }
    var matches = aspectRatio.split('/').map(s => s.trim());
    if (matches.includes('auto')) {
      return;
    }
    var hasNonNumericValues = matches.some(n => Number.isNaN(Number(n)));
    if (hasNonNumericValues) {
      return;
    }
    if (matches.length === 2) {
      return Number(matches[0]) / Number(matches[1]);
    }
    return Number(matches[0]);
  }
  var _default = exports.default = processAspectRatio;
},107,[42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = processBackgroundImage;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var processColor = require(_dependencyMap[2]).default;
  var DIRECTION_KEYWORD_REGEX = /^to\s+(?:top|bottom|left|right)(?:\s+(?:top|bottom|left|right))?/i;
  var ANGLE_UNIT_REGEX = /^([+-]?\d*\.?\d+)(deg|grad|rad|turn)$/i;
  var DEFAULT_DIRECTION = {
    type: 'angle',
    value: 180
  };
  function processBackgroundImage(backgroundImage) {
    var result = [];
    if (backgroundImage == null) {
      return result;
    }
    if (typeof backgroundImage === 'string') {
      result = parseCSSLinearGradient(backgroundImage.replace(/\n/g, ' '));
    } else if (Array.isArray(backgroundImage)) {
      for (var bgImage of backgroundImage) {
        var processedColorStops = [];
        for (var index = 0; index < bgImage.colorStops.length; index++) {
          var colorStop = bgImage.colorStops[index];
          var positions = colorStop.positions;
          if (colorStop.color == null && Array.isArray(positions) && positions.length === 1) {
            var position = positions[0];
            if (typeof position === 'number' || typeof position === 'string' && position.endsWith('%')) {
              processedColorStops.push({
                color: null,
                position
              });
            } else {
              return [];
            }
          } else {
            var processedColor = processColor(colorStop.color);
            if (processedColor == null) {
              return [];
            }
            if (positions != null && positions.length > 0) {
              for (var _position of positions) {
                if (typeof _position === 'number' || typeof _position === 'string' && _position.endsWith('%')) {
                  processedColorStops.push({
                    color: processedColor,
                    position: _position
                  });
                } else {
                  return [];
                }
              }
            } else {
              processedColorStops.push({
                color: processedColor,
                position: null
              });
            }
          }
        }
        var direction = DEFAULT_DIRECTION;
        var bgDirection = bgImage.direction != null ? bgImage.direction.toLowerCase() : null;
        if (bgDirection != null) {
          if (ANGLE_UNIT_REGEX.test(bgDirection)) {
            var parsedAngle = getAngleInDegrees(bgDirection);
            if (parsedAngle != null) {
              direction = {
                type: 'angle',
                value: parsedAngle
              };
            } else {
              return [];
            }
          } else if (DIRECTION_KEYWORD_REGEX.test(bgDirection)) {
            var parsedDirection = getDirectionForKeyword(bgDirection);
            if (parsedDirection != null) {
              direction = parsedDirection;
            } else {
              return [];
            }
          } else {
            return [];
          }
        }
        result = result.concat({
          type: 'linearGradient',
          direction,
          colorStops: processedColorStops
        });
      }
    }
    return result;
  }
  function parseCSSLinearGradient(cssString) {
    var gradients = [];
    var match;
    var linearGradientRegex = /linear-gradient\s*\(((?:\([^)]*\)|[^())])*)\)/gi;
    while (match = linearGradientRegex.exec(cssString)) {
      var gradientContent = match[1];
      var parts = gradientContent.split(',');
      var direction = DEFAULT_DIRECTION;
      var trimmedDirection = parts[0].trim().toLowerCase();
      if (ANGLE_UNIT_REGEX.test(trimmedDirection)) {
        var parsedAngle = getAngleInDegrees(trimmedDirection);
        if (parsedAngle != null) {
          direction = {
            type: 'angle',
            value: parsedAngle
          };
          parts.shift();
        } else {
          return [];
        }
      } else if (DIRECTION_KEYWORD_REGEX.test(trimmedDirection)) {
        var parsedDirection = getDirectionForKeyword(trimmedDirection);
        if (parsedDirection != null) {
          direction = parsedDirection;
          parts.shift();
        } else {
          return [];
        }
      }
      var colorStopsString = parts.join(',');
      var colorStops = [];
      var stops = colorStopsString.split(/,(?![^(]*\))/);
      var prevStop = null;
      for (var i = 0; i < stops.length; i++) {
        var stop = stops[i];
        var trimmedStop = stop.trim().toLowerCase();
        var colorStopParts = trimmedStop.match(/\S+\([^)]*\)|\S+/g);
        if (colorStopParts == null) {
          return [];
        }
        if (colorStopParts.length === 3) {
          var color = colorStopParts[0];
          var position1 = getPositionFromCSSValue(colorStopParts[1]);
          var position2 = getPositionFromCSSValue(colorStopParts[2]);
          var processedColor = processColor(color);
          if (processedColor == null) {
            return [];
          }
          if (position1 == null || position2 == null) {
            return [];
          }
          colorStops.push({
            color: processedColor,
            position: position1
          });
          colorStops.push({
            color: processedColor,
            position: position2
          });
        } else if (colorStopParts.length === 2) {
          var _color = colorStopParts[0];
          var position = getPositionFromCSSValue(colorStopParts[1]);
          var _processedColor = processColor(_color);
          if (_processedColor == null) {
            return [];
          }
          if (position == null) {
            return [];
          }
          colorStops.push({
            color: _processedColor,
            position
          });
        } else if (colorStopParts.length === 1) {
          var _position2 = getPositionFromCSSValue(colorStopParts[0]);
          if (_position2 != null) {
            if (prevStop != null && prevStop.length === 1 && getPositionFromCSSValue(prevStop[0]) != null || i === stops.length - 1 || i === 0) {
              return [];
            }
            colorStops.push({
              color: null,
              position: _position2
            });
          } else {
            var _processedColor2 = processColor(colorStopParts[0]);
            if (_processedColor2 == null) {
              return [];
            }
            colorStops.push({
              color: _processedColor2,
              position: null
            });
          }
        } else {
          return [];
        }
        prevStop = colorStopParts;
      }
      gradients.push({
        type: 'linearGradient',
        direction,
        colorStops
      });
    }
    return gradients;
  }
  function getDirectionForKeyword(direction) {
    if (direction == null) {
      return null;
    }
    var normalized = direction.replace(/\s+/g, ' ').toLowerCase();
    switch (normalized) {
      case 'to top':
        return {
          type: 'angle',
          value: 0
        };
      case 'to right':
        return {
          type: 'angle',
          value: 90
        };
      case 'to bottom':
        return {
          type: 'angle',
          value: 180
        };
      case 'to left':
        return {
          type: 'angle',
          value: 270
        };
      case 'to top right':
      case 'to right top':
        return {
          type: 'keyword',
          value: 'to top right'
        };
      case 'to bottom right':
      case 'to right bottom':
        return {
          type: 'keyword',
          value: 'to bottom right'
        };
      case 'to top left':
      case 'to left top':
        return {
          type: 'keyword',
          value: 'to top left'
        };
      case 'to bottom left':
      case 'to left bottom':
        return {
          type: 'keyword',
          value: 'to bottom left'
        };
      default:
        return null;
    }
  }
  function getAngleInDegrees(angle) {
    if (angle == null) {
      return null;
    }
    var match = angle.match(ANGLE_UNIT_REGEX);
    if (!match) {
      return null;
    }
    var _match = (0, _slicedToArray2.default)(match, 3),
      value = _match[1],
      unit = _match[2];
    var numericValue = parseFloat(value);
    switch (unit) {
      case 'deg':
        return numericValue;
      case 'grad':
        return numericValue * 0.9;
      case 'rad':
        return numericValue * 180 / Math.PI;
      case 'turn':
        return numericValue * 360;
      default:
        return null;
    }
  }
  function getPositionFromCSSValue(position) {
    if (position.endsWith('px')) {
      return parseFloat(position);
    }
    if (position.endsWith('%')) {
      return position;
    }
  }
},108,[1,29,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = processFilter;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _processColor = _interopRequireDefault(require(_dependencyMap[2]));
  function processFilter(filter) {
    var result = [];
    if (filter == null) {
      return result;
    }
    if (typeof filter === 'string') {
      filter = filter.replace(/\n/g, ' ');
      var regex = /([\w-]+)\(([^()]*|\([^()]*\)|[^()]*\([^()]*\)[^()]*)\)/g;
      var matches;
      while (matches = regex.exec(filter)) {
        var filterName = matches[1].toLowerCase();
        if (filterName === 'drop-shadow') {
          var dropShadow = parseDropShadow(matches[2]);
          if (dropShadow != null) {
            result.push({
              dropShadow
            });
          } else {
            return [];
          }
        } else {
          var camelizedName = filterName === 'drop-shadow' ? 'dropShadow' : filterName === 'hue-rotate' ? 'hueRotate' : filterName;
          var amount = _getFilterAmount(camelizedName, matches[2]);
          if (amount != null) {
            var filterFunction = {};
            filterFunction[camelizedName] = amount;
            result.push(filterFunction);
          } else {
            return [];
          }
        }
      }
    } else if (Array.isArray(filter)) {
      for (var _filterFunction of filter) {
        var _Object$entries$ = (0, _slicedToArray2.default)(Object.entries(_filterFunction)[0], 2),
          _filterName = _Object$entries$[0],
          filterValue = _Object$entries$[1];
        if (_filterName === 'dropShadow') {
          var _dropShadow = parseDropShadow(filterValue);
          if (_dropShadow == null) {
            return [];
          }
          result.push({
            dropShadow: _dropShadow
          });
        } else {
          var _amount = _getFilterAmount(_filterName, filterValue);
          if (_amount != null) {
            var resultObject = {};
            resultObject[_filterName] = _amount;
            result.push(resultObject);
          } else {
            return [];
          }
        }
      }
    } else {
      throw new TypeError(`${typeof filter} filter is not a string or array`);
    }
    return result;
  }
  function _getFilterAmount(filterName, filterArgs) {
    var filterArgAsNumber;
    var unit;
    if (typeof filterArgs === 'string') {
      var argsWithUnitsRegex = new RegExp(/([+-]?\d*(\.\d+)?)([a-zA-Z%]+)?/g);
      var match = argsWithUnitsRegex.exec(filterArgs);
      if (!match || isNaN(Number(match[1]))) {
        return undefined;
      }
      filterArgAsNumber = Number(match[1]);
      unit = match[3];
    } else if (typeof filterArgs === 'number') {
      filterArgAsNumber = filterArgs;
    } else {
      return undefined;
    }
    switch (filterName) {
      case 'hueRotate':
        if (filterArgAsNumber === 0) {
          return 0;
        }
        if (unit !== 'deg' && unit !== 'rad') {
          return undefined;
        }
        return unit === 'rad' ? 180 * filterArgAsNumber / Math.PI : filterArgAsNumber;
      case 'blur':
        if (unit && unit !== 'px' || filterArgAsNumber < 0) {
          return undefined;
        }
        return filterArgAsNumber;
      case 'brightness':
      case 'contrast':
      case 'grayscale':
      case 'invert':
      case 'opacity':
      case 'saturate':
      case 'sepia':
        if (unit && unit !== '%' && unit !== 'px' || filterArgAsNumber < 0) {
          return undefined;
        }
        if (unit === '%') {
          filterArgAsNumber /= 100;
        }
        return filterArgAsNumber;
      default:
        return undefined;
    }
  }
  function parseDropShadow(rawDropShadow) {
    var dropShadow = typeof rawDropShadow === 'string' ? parseDropShadowString(rawDropShadow) : rawDropShadow;
    var parsedDropShadow = {
      offsetX: 0,
      offsetY: 0
    };
    var offsetX;
    var offsetY;
    for (var arg in dropShadow) {
      var value = undefined;
      switch (arg) {
        case 'offsetX':
          value = typeof dropShadow.offsetX === 'string' ? parseLength(dropShadow.offsetX) : dropShadow.offsetX;
          if (value == null) {
            return null;
          }
          offsetX = value;
          break;
        case 'offsetY':
          value = typeof dropShadow.offsetY === 'string' ? parseLength(dropShadow.offsetY) : dropShadow.offsetY;
          if (value == null) {
            return null;
          }
          offsetY = value;
          break;
        case 'standardDeviation':
          value = typeof dropShadow.standardDeviation === 'string' ? parseLength(dropShadow.standardDeviation) : dropShadow.standardDeviation;
          if (value == null || value < 0) {
            return null;
          }
          parsedDropShadow.standardDeviation = value;
          break;
        case 'color':
          var color = (0, _processColor.default)(dropShadow.color);
          if (color == null) {
            return null;
          }
          parsedDropShadow.color = color;
          break;
        default:
          return null;
      }
    }
    if (offsetX == null || offsetY == null) {
      return null;
    }
    parsedDropShadow.offsetX = offsetX;
    parsedDropShadow.offsetY = offsetY;
    return parsedDropShadow;
  }
  function parseDropShadowString(rawDropShadow) {
    var dropShadow = {
      offsetX: 0,
      offsetY: 0
    };
    var offsetX;
    var offsetY;
    var lengthCount = 0;
    var keywordDetectedAfterLength = false;
    for (var arg of rawDropShadow.split(/\s+(?![^(]*\))/)) {
      var processedColor = (0, _processColor.default)(arg);
      if (processedColor != null) {
        if (dropShadow.color != null) {
          return null;
        }
        if (offsetX != null) {
          keywordDetectedAfterLength = true;
        }
        dropShadow.color = arg;
        continue;
      }
      switch (lengthCount) {
        case 0:
          offsetX = arg;
          lengthCount++;
          break;
        case 1:
          if (keywordDetectedAfterLength) {
            return null;
          }
          offsetY = arg;
          lengthCount++;
          break;
        case 2:
          if (keywordDetectedAfterLength) {
            return null;
          }
          dropShadow.standardDeviation = arg;
          lengthCount++;
          break;
        default:
          return null;
      }
    }
    if (offsetX == null || offsetY == null) {
      return null;
    }
    dropShadow.offsetX = offsetX;
    dropShadow.offsetY = offsetY;
    return dropShadow;
  }
  function parseLength(length) {
    var argsWithUnitsRegex = /([+-]?\d*(\.\d+)?)([\w\W]+)?/g;
    var match = argsWithUnitsRegex.exec(length);
    if (!match || Number.isNaN(match[1])) {
      return null;
    }
    if (match[3] != null && match[3] !== 'px') {
      return null;
    }
    if (match[3] == null && match[1] !== '0') {
      return null;
    }
    return Number(match[1]);
  }
},109,[1,29,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  function processFontVariant(fontVariant) {
    if (Array.isArray(fontVariant)) {
      return fontVariant;
    }
    var match = fontVariant.split(' ').filter(Boolean);
    return match;
  }
  var _default = exports.default = processFontVariant;
},110,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var stringifySafe = require(_dependencyMap[0]).default;
  var invariant = require(_dependencyMap[1]);
  function processTransform(transform) {
    if (typeof transform === 'string') {
      var regex = new RegExp(/(\w+)\(([^)]+)\)/g);
      var transformArray = [];
      var matches;
      while (matches = regex.exec(transform)) {
        var _getKeyAndValueFromCS = _getKeyAndValueFromCSSTransform(matches[1], matches[2]),
          _key = _getKeyAndValueFromCS.key,
          value = _getKeyAndValueFromCS.value;
        if (value !== undefined) {
          transformArray.push({
            [_key]: value
          });
        }
      }
      transform = transformArray;
    }
    return transform;
  }
  var _getKeyAndValueFromCSSTransform = (key, args) => {
    var argsWithUnitsRegex = new RegExp(/([+-]?\d+(\.\d+)?)([a-zA-Z]+|%)?/g);
    switch (key) {
      case 'matrix':
        return {
          key,
          value: args.match(/[+-]?\d+(\.\d+)?/g)?.map(Number)
        };
      case 'translate':
      case 'translate3d':
        var parsedArgs = [];
        var missingUnitOfMeasurement = false;
        var matches;
        while (matches = argsWithUnitsRegex.exec(args)) {
          var _value = Number(matches[1]);
          var _unitOfMeasurement = matches[3];
          if (_value !== 0 && !_unitOfMeasurement) {
            missingUnitOfMeasurement = true;
          }
          if (_unitOfMeasurement === '%') {
            parsedArgs.push(`${_value}%`);
          } else {
            parsedArgs.push(_value);
          }
        }
        if (parsedArgs?.length === 1) {
          parsedArgs.push(0);
        }
        return {
          key: 'translate',
          value: parsedArgs
        };
      case 'translateX':
      case 'translateY':
      case 'perspective':
        var argMatches = argsWithUnitsRegex.exec(args);
        if (!argMatches?.length) {
          return {
            key,
            value: undefined
          };
        }
        var value = Number(argMatches[1]);
        var unitOfMeasurement = argMatches[3];
        return {
          key,
          value
        };
      default:
        return {
          key,
          value: !isNaN(args) ? Number(args) : args
        };
    }
  };
  var _default = exports.default = processTransform;
},111,[48,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = processTransformOrigin;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[2]));
  var INDEX_X = 0;
  var INDEX_Y = 1;
  var INDEX_Z = 2;
  function processTransformOrigin(transformOrigin) {
    if (typeof transformOrigin === 'string') {
      var transformOriginString = transformOrigin;
      var regex = /(top|bottom|left|right|center|\d+(?:%|px)|0)/gi;
      var transformOriginArray = ['50%', '50%', 0];
      var index = INDEX_X;
      var matches;
      outer: while (matches = regex.exec(transformOriginString)) {
        var nextIndex = index + 1;
        var value = matches[0];
        var valueLower = value.toLowerCase();
        switch (valueLower) {
          case 'left':
          case 'right':
            {
              (0, _invariant.default)(index === INDEX_X, 'Transform-origin %s can only be used for x-position', value);
              transformOriginArray[INDEX_X] = valueLower === 'left' ? 0 : '100%';
              break;
            }
          case 'top':
          case 'bottom':
            {
              (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin %s can only be used for y-position', value);
              transformOriginArray[INDEX_Y] = valueLower === 'top' ? 0 : '100%';
              if (index === INDEX_X) {
                var horizontal = regex.exec(transformOriginString);
                if (horizontal == null) {
                  break outer;
                }
                switch (horizontal[0].toLowerCase()) {
                  case 'left':
                    transformOriginArray[INDEX_X] = 0;
                    break;
                  case 'right':
                    transformOriginArray[INDEX_X] = '100%';
                    break;
                  case 'center':
                    transformOriginArray[INDEX_X] = '50%';
                    break;
                  default:
                    (0, _invariant.default)(false, 'Could not parse transform-origin: %s', transformOriginString);
                }
                nextIndex = INDEX_Z;
              }
              break;
            }
          case 'center':
            {
              (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin value %s cannot be used for z-position', value);
              transformOriginArray[index] = '50%';
              break;
            }
          default:
            {
              if (value.endsWith('%')) {
                transformOriginArray[index] = value;
              } else {
                transformOriginArray[index] = parseFloat(value);
              }
              break;
            }
        }
        index = nextIndex;
      }
      transformOrigin = transformOriginArray;
    }
    return transformOrigin;
  }
},112,[1,29,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var dummySize = {
    width: undefined,
    height: undefined
  };
  function sizesDiffer(one, two) {
    var defaultedOne = one || dummySize;
    var defaultedTwo = two || dummySize;
    return defaultedOne !== defaultedTwo && (defaultedOne.width !== defaultedTwo.width || defaultedOne.height !== defaultedTwo.height);
  }
  var _default = exports.default = sizesDiffer;
},113,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeSourceCode = _interopRequireDefault(require(_dependencyMap[1]));
  var AssetSourceResolver = require(_dependencyMap[2]).default;
  var _require = require(_dependencyMap[3]),
    pickScale = _require.pickScale;
  var AssetRegistry = require(_dependencyMap[4]);
  var _customSourceTransformers = [];
  var _serverURL;
  var _scriptURL;
  var _sourceCodeScriptURL;
  function getSourceCodeScriptURL() {
    if (_sourceCodeScriptURL != null) {
      return _sourceCodeScriptURL;
    }
    _sourceCodeScriptURL = _NativeSourceCode.default.getConstants().scriptURL;
    return _sourceCodeScriptURL;
  }
  function getDevServerURL() {
    if (_serverURL === undefined) {
      var sourceCodeScriptURL = getSourceCodeScriptURL();
      var match = sourceCodeScriptURL?.match(/^https?:\/\/.*?\//);
      if (match) {
        _serverURL = match[0];
      } else {
        _serverURL = null;
      }
    }
    return _serverURL;
  }
  function _coerceLocalScriptURL(scriptURL) {
    var normalizedScriptURL = scriptURL;
    if (normalizedScriptURL != null) {
      if (normalizedScriptURL.startsWith('assets://')) {
        return null;
      }
      normalizedScriptURL = normalizedScriptURL.substring(0, normalizedScriptURL.lastIndexOf('/') + 1);
      if (!normalizedScriptURL.includes('://')) {
        normalizedScriptURL = 'file://' + normalizedScriptURL;
      }
    }
    return normalizedScriptURL;
  }
  function getScriptURL() {
    if (_scriptURL === undefined) {
      _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
    }
    return _scriptURL;
  }
  function setCustomSourceTransformer(transformer) {
    _customSourceTransformers = [transformer];
  }
  function addCustomSourceTransformer(transformer) {
    _customSourceTransformers.push(transformer);
  }
  function resolveAssetSource(source) {
    if (source == null || typeof source === 'object') {
      return source;
    }
    var asset = AssetRegistry.getAssetByID(source);
    if (!asset) {
      return null;
    }
    var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);
    if (_customSourceTransformers) {
      for (var customSourceTransformer of _customSourceTransformers) {
        var transformedSource = customSourceTransformer(resolver);
        if (transformedSource != null) {
          return transformedSource;
        }
      }
    }
    return resolver.defaultAsset();
  }
  resolveAssetSource.pickScale = pickScale;
  resolveAssetSource.setCustomSourceTransformer = setCustomSourceTransformer;
  resolveAssetSource.addCustomSourceTransformer = addCustomSourceTransformer;
  var _default = exports.default = resolveAssetSource;
},114,[1,39,115,120,55]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var PixelRatio = require(_dependencyMap[3]).default;
  var Platform = require(_dependencyMap[4]).default;
  var _require = require(_dependencyMap[5]),
    pickScale = _require.pickScale;
  var _require2 = require(_dependencyMap[6]),
    getAndroidResourceFolderName = _require2.getAndroidResourceFolderName,
    getAndroidResourceIdentifier = _require2.getAndroidResourceIdentifier,
    getBasePath = _require2.getBasePath;
  var invariant = require(_dependencyMap[7]);
  function getScaledAssetPath(asset) {
    var scale = pickScale(asset.scales, PixelRatio.get());
    var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
    var assetDir = getBasePath(asset);
    return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
  }
  function getAssetPathInDrawableFolder(asset) {
    var scale = pickScale(asset.scales, PixelRatio.get());
    var drawableFolder = getAndroidResourceFolderName(asset, scale);
    var fileName = getAndroidResourceIdentifier(asset);
    return drawableFolder + '/' + fileName + '.' + asset.type;
  }
  function assetSupportsNetworkLoads(asset) {
    return !(asset.type === 'xml' && false);
  }
  var AssetSourceResolver = /*#__PURE__*/function () {
    function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
      (0, _classCallCheck2.default)(this, AssetSourceResolver);
      this.serverUrl = serverUrl;
      this.jsbundleUrl = jsbundleUrl;
      this.asset = asset;
    }
    return (0, _createClass2.default)(AssetSourceResolver, [{
      key: "isLoadedFromServer",
      value: function isLoadedFromServer() {
        return this.serverUrl != null && this.serverUrl !== '' && assetSupportsNetworkLoads(this.asset);
      }
    }, {
      key: "isLoadedFromFileSystem",
      value: function isLoadedFromFileSystem() {
        return this.jsbundleUrl != null && this.jsbundleUrl?.startsWith('file://');
      }
    }, {
      key: "defaultAsset",
      value: function defaultAsset() {
        if (this.isLoadedFromServer()) {
          return this.assetServerURL();
        }
        if (this.asset.resolver != null) {
          return this.getAssetUsingResolver(this.asset.resolver);
        }
        {
          return this.scaledAssetURLNearBundle();
        }
      }
    }, {
      key: "getAssetUsingResolver",
      value: function getAssetUsingResolver(resolver) {
        switch (resolver) {
          case 'android':
            return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
          case 'generic':
            return this.scaledAssetURLNearBundle();
          default:
            throw new Error("Don't know how to get asset via provided resolver: " + resolver + '\nAsset: ' + JSON.stringify(this.asset, null, '\t') + '\nPossible resolvers are:' + JSON.stringify(['android', 'generic'], null, '\t'));
        }
      }
    }, {
      key: "assetServerURL",
      value: function assetServerURL() {
        invariant(this.serverUrl != null, 'need server to load from');
        return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + "ios" + '&hash=' + this.asset.hash);
      }
    }, {
      key: "scaledAssetPath",
      value: function scaledAssetPath() {
        return this.fromSource(getScaledAssetPath(this.asset));
      }
    }, {
      key: "scaledAssetURLNearBundle",
      value: function scaledAssetURLNearBundle() {
        var path = this.jsbundleUrl ?? 'file://';
        return this.fromSource(path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
      }
    }, {
      key: "resourceIdentifierWithoutScale",
      value: function resourceIdentifierWithoutScale() {
        invariant(false, 'resource identifiers work on Android');
        return this.fromSource(getAndroidResourceIdentifier(this.asset));
      }
    }, {
      key: "drawableFolderInBundle",
      value: function drawableFolderInBundle() {
        var path = this.jsbundleUrl ?? 'file://';
        return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
      }
    }, {
      key: "fromSource",
      value: function fromSource(source) {
        return {
          __packager_asset: true,
          width: this.asset.width,
          height: this.asset.height,
          uri: source,
          scale: pickScale(this.asset.scales, PixelRatio.get())
        };
      }
    }]);
  }();
  AssetSourceResolver.pickScale = pickScale;
  var _default = exports.default = AssetSourceResolver;
},115,[1,10,11,116,87,120,121,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var Dimensions = require(_dependencyMap[3]).default;
  var PixelRatio = /*#__PURE__*/function () {
    function PixelRatio() {
      (0, _classCallCheck2.default)(this, PixelRatio);
    }
    return (0, _createClass2.default)(PixelRatio, null, [{
      key: "get",
      value: function get() {
        return Dimensions.get('window').scale;
      }
    }, {
      key: "getFontScale",
      value: function getFontScale() {
        return Dimensions.get('window').fontScale || PixelRatio.get();
      }
    }, {
      key: "getPixelSizeForLayoutSize",
      value: function getPixelSizeForLayoutSize(layoutSize) {
        return Math.round(layoutSize * PixelRatio.get());
      }
    }, {
      key: "roundToNearestPixel",
      value: function roundToNearestPixel(layoutSize) {
        var ratio = PixelRatio.get();
        return Math.round(layoutSize * ratio) / ratio;
      }
    }, {
      key: "startDetecting",
      value: function startDetecting() {}
    }]);
  }();
  var _default = exports.default = PixelRatio;
},116,[1,10,11,117]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[3]));
  var _EventEmitter = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativeDeviceInfo = _interopRequireDefault(require(_dependencyMap[5]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[6]));
  var eventEmitter = new _EventEmitter.default();
  var dimensionsInitialized = false;
  var dimensions;
  var Dimensions = /*#__PURE__*/function () {
    function Dimensions() {
      (0, _classCallCheck2.default)(this, Dimensions);
    }
    return (0, _createClass2.default)(Dimensions, null, [{
      key: "get",
      value: function get(dim) {
        (0, _invariant.default)(dimensions[dim], 'No dimension set for key ' + dim);
        return dimensions[dim];
      }
    }, {
      key: "set",
      value: function set(dims) {
        var screen = dims.screen,
          window = dims.window;
        var windowPhysicalPixels = dims.windowPhysicalPixels;
        if (windowPhysicalPixels) {
          window = {
            width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
            height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
            scale: windowPhysicalPixels.scale,
            fontScale: windowPhysicalPixels.fontScale
          };
        }
        var screenPhysicalPixels = dims.screenPhysicalPixels;
        if (screenPhysicalPixels) {
          screen = {
            width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
            height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
            scale: screenPhysicalPixels.scale,
            fontScale: screenPhysicalPixels.fontScale
          };
        } else if (screen == null) {
          screen = window;
        }
        dimensions = {
          window,
          screen
        };
        if (dimensionsInitialized) {
          eventEmitter.emit('change', dimensions);
        } else {
          dimensionsInitialized = true;
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        (0, _invariant.default)(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
        return eventEmitter.addListener(type, handler);
      }
    }]);
  }();
  _RCTDeviceEventEmitter.default.addListener('didUpdateDimensions', update => {
    Dimensions.set(update);
  });
  Dimensions.set(_NativeDeviceInfo.default.getConstants().Dimensions);
  var _default = exports.default = Dimensions;
},117,[1,10,11,63,71,118,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeDeviceInfo = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeDeviceInfo).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeDeviceInfo[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeDeviceInfo[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeDeviceInfo.default;
},118,[119]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var NativeModule = TurboModuleRegistry.getEnforcing('DeviceInfo');
  var constants = null;
  var NativeDeviceInfo = {
    getConstants() {
      if (constants == null) {
        constants = NativeModule.getConstants();
      }
      return constants;
    }
  };
  var _default = exports.default = NativeDeviceInfo;
},119,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getUrlCacheBreaker = getUrlCacheBreaker;
  exports.pickScale = pickScale;
  exports.setUrlCacheBreaker = setUrlCacheBreaker;
  var _PixelRatio = _interopRequireDefault(require(_dependencyMap[1]));
  var cacheBreaker;
  var warnIfCacheBreakerUnset = true;
  function pickScale(scales, deviceScale) {
    var requiredDeviceScale = deviceScale ?? _PixelRatio.default.get();
    for (var i = 0; i < scales.length; i++) {
      if (scales[i] >= requiredDeviceScale) {
        return scales[i];
      }
    }
    return scales[scales.length - 1] || 1;
  }
  function setUrlCacheBreaker(appendage) {
    cacheBreaker = appendage;
  }
  function getUrlCacheBreaker() {
    if (cacheBreaker == null) {
      return '';
    }
    return cacheBreaker;
  }
},120,[1,116]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var androidScaleSuffix = {
    '0.75': 'ldpi',
    '1': 'mdpi',
    '1.5': 'hdpi',
    '2': 'xhdpi',
    '3': 'xxhdpi',
    '4': 'xxxhdpi'
  };
  var ANDROID_BASE_DENSITY = 160;
  function getAndroidAssetSuffix(scale) {
    if (scale.toString() in androidScaleSuffix) {
      return androidScaleSuffix[scale.toString()];
    }
    if (Number.isFinite(scale) && scale > 0) {
      return Math.round(scale * ANDROID_BASE_DENSITY) + 'dpi';
    }
    throw new Error('no such scale ' + scale.toString());
  }
  var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'ktx', 'png', 'webp', 'xml']);
  function getAndroidResourceFolderName(asset, scale) {
    if (!drawableFileTypes.has(asset.type)) {
      return 'raw';
    }
    var suffix = getAndroidAssetSuffix(scale);
    if (!suffix) {
      throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
    }
    return 'drawable-' + suffix;
  }
  function getAndroidResourceIdentifier(asset) {
    return (getBasePath(asset) + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^(?:assets|assetsunstable_path)_/, '');
  }
  function getBasePath(asset) {
    var basePath = asset.httpServerLocation;
    return basePath.startsWith('/') ? basePath.slice(1) : basePath;
  }
  module.exports = {
    getAndroidResourceFolderName,
    getAndroidResourceIdentifier,
    getBasePath
  };
},121,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _processColor = _interopRequireDefault(require(_dependencyMap[1]));
  var TRANSPARENT = 0;
  function processColorArray(colors) {
    return colors == null ? null : colors.map(processColorElement);
  }
  function processColorElement(color) {
    var value = (0, _processColor.default)(color);
    if (value == null) {
      console.error('Invalid value in color array:', color);
      return TRANSPARENT;
    }
    return value;
  }
  var _default = exports.default = processColorArray;
},122,[1,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var dummyInsets = {
    top: undefined,
    left: undefined,
    right: undefined,
    bottom: undefined
  };
  function insetsDiffer(one, two) {
    one = one || dummyInsets;
    two = two || dummyInsets;
    return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
  }
  var _default = exports.default = insetsDiffer;
},123,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  function matricesDiffer(one, two) {
    if (one === two) {
      return false;
    }
    return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[0] !== two[0] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
  }
  var _default = exports.default = matricesDiffer;
},124,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var dummyPoint = {
    x: undefined,
    y: undefined
  };
  function pointsDiffer(one, two) {
    one = one || dummyPoint;
    two = two || dummyPoint;
    return one !== two && (one.x !== two.x || one.y !== two.y);
  }
  var _default = exports.default = pointsDiffer;
},125,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _FabricUIManager = require(_dependencyMap[1]);
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[2]));
  function isFabricReactTag(reactTag) {
    return reactTag % 2 === 0;
  }
  var UIManagerImpl = global.RN$Bridgeless === true ? require(_dependencyMap[3]).default : require(_dependencyMap[4]).default;
  var UIManager = {
    ...UIManagerImpl,
    measure(reactTag, callback) {
      if (isFabricReactTag(reactTag)) {
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (shadowNode) {
          FabricUIManager.measure(shadowNode, callback);
        } else {
          console.warn(`measure cannot find view with tag #${reactTag}`);
          callback();
        }
      } else {
        UIManagerImpl.measure(reactTag, callback);
      }
    },
    measureInWindow(reactTag, callback) {
      if (isFabricReactTag(reactTag)) {
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (shadowNode) {
          FabricUIManager.measureInWindow(shadowNode, callback);
        } else {
          console.warn(`measure cannot find view with tag #${reactTag}`);
          callback();
        }
      } else {
        UIManagerImpl.measureInWindow(reactTag, callback);
      }
    },
    measureLayout(reactTag, ancestorReactTag, errorCallback, callback) {
      if (isFabricReactTag(reactTag)) {
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        var ancestorShadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(ancestorReactTag);
        if (!shadowNode || !ancestorShadowNode) {
          return;
        }
        FabricUIManager.measureLayout(shadowNode, ancestorShadowNode, errorCallback, callback);
      } else {
        UIManagerImpl.measureLayout(reactTag, ancestorReactTag, errorCallback, callback);
      }
    },
    measureLayoutRelativeToParent(reactTag, errorCallback, callback) {
      if (isFabricReactTag(reactTag)) {
        console.warn('RCTUIManager.measureLayoutRelativeToParent method is deprecated and it will not be implemented in newer versions of RN (Fabric) - T47686450');
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (shadowNode) {
          FabricUIManager.measure(shadowNode, (left, top, width, height, pageX, pageY) => {
            callback(left, top, width, height);
          });
        }
      } else {
        UIManagerImpl.measureLayoutRelativeToParent(reactTag, errorCallback, callback);
      }
    },
    dispatchViewManagerCommand(reactTag, commandName, commandArgs) {
      if (typeof reactTag !== 'number') {
        throw new Error('dispatchViewManagerCommand: found null reactTag');
      }
      if (isFabricReactTag(reactTag)) {
        var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
        var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
        if (shadowNode) {
          commandName = `${commandName}`;
          FabricUIManager.dispatchCommand(shadowNode, commandName, commandArgs);
        }
      } else {
        UIManagerImpl.dispatchViewManagerCommand(reactTag, commandName, commandArgs);
      }
    }
  };
  var _default = exports.default = UIManager;
},126,[1,127,128,129,131]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getFabricUIManager = getFabricUIManager;
  var _defineLazyObjectProperty = _interopRequireDefault(require(_dependencyMap[1]));
  var nativeFabricUIManagerProxy;
  var CACHED_PROPERTIES = ['createNode', 'cloneNode', 'cloneNodeWithNewChildren', 'cloneNodeWithNewProps', 'cloneNodeWithNewChildrenAndProps', 'createChildSet', 'appendChild', 'appendChildToSet', 'completeRoot', 'measure', 'measureInWindow', 'measureLayout', 'configureNextLayoutAnimation', 'sendAccessibilityEvent', 'findShadowNodeByTag_DEPRECATED', 'setNativeProps', 'dispatchCommand', 'compareDocumentPosition', 'getBoundingClientRect'];
  function getFabricUIManager() {
    if (nativeFabricUIManagerProxy == null && global.nativeFabricUIManager != null) {
      nativeFabricUIManagerProxy = createProxyWithCachedProperties(global.nativeFabricUIManager, CACHED_PROPERTIES);
    }
    return nativeFabricUIManagerProxy;
  }
  function createProxyWithCachedProperties(implementation, propertiesToCache) {
    var proxy = Object.create(implementation);
    var _loop = function (propertyName) {
      (0, _defineLazyObjectProperty.default)(proxy, propertyName, {
        get: () => implementation[propertyName]
      });
    };
    for (var propertyName of propertiesToCache) {
      _loop(propertyName);
    }
    return proxy;
  }
},127,[1,7]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function nullthrows(x, message) {
    if (x != null) {
      return x;
    }
    var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);
    error.framesToPop = 1; // Skip nullthrows's own stack frame.
    throw error;
  }
  module.exports = nullthrows;
  module.exports.default = nullthrows;
  Object.defineProperty(module.exports, '__esModule', {
    value: true
  });
},128,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeComponentRegistryUnstable = require(_dependencyMap[1]);
  var _defineLazyObjectProperty = _interopRequireDefault(require(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var _FabricUIManager = require(_dependencyMap[4]);
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[5]));
  function raiseSoftError(methodName, details) {
    console.error(`[ReactNative Architecture][JS] '${methodName}' is not available in the new React Native architecture.` + (details ? ` ${details}` : ''));
  }
  var getUIManagerConstants = global.RN$LegacyInterop_UIManager_getConstants;
  var getUIManagerConstantsCached = function () {
    var wasCalledOnce = false;
    var result = {};
    return () => {
      if (!wasCalledOnce) {
        result = (0, _nullthrows.default)(getUIManagerConstants)();
        wasCalledOnce = true;
      }
      return result;
    };
  }();
  var getConstantsForViewManager = global.RN$LegacyInterop_UIManager_getConstantsForViewManager;
  var getDefaultEventTypes = global.RN$LegacyInterop_UIManager_getDefaultEventTypes;
  var getDefaultEventTypesCached = function () {
    var wasCalledOnce = false;
    var result = null;
    return () => {
      if (!wasCalledOnce) {
        result = (0, _nullthrows.default)(getDefaultEventTypes)();
        wasCalledOnce = true;
      }
      return result;
    };
  }();
  var UIManagerJSOverridenAPIs = {
    measure: (reactTag, callback) => {
      raiseSoftError('measure');
    },
    measureInWindow: (reactTag, callback) => {
      raiseSoftError('measureInWindow');
    },
    measureLayout: (reactTag, ancestorReactTag, errorCallback, callback) => {
      raiseSoftError('measureLayout');
    },
    measureLayoutRelativeToParent: (reactTag, errorCallback, callback) => {
      raiseSoftError('measureLayoutRelativeToParent');
    },
    dispatchViewManagerCommand: (reactTag, commandID, commandArgs) => {
      raiseSoftError('dispatchViewManagerCommand');
    }
  };
  var UIManagerJSUnusedInNewArchAPIs = {
    createView: (reactTag, viewName, rootTag, props) => {
      raiseSoftError('createView');
    },
    updateView: (reactTag, viewName, props) => {
      raiseSoftError('updateView');
    },
    setChildren: (containerTag, reactTags) => {
      raiseSoftError('setChildren');
    },
    manageChildren: (containerTag, moveFromIndices, moveToIndices, addChildReactTags, addAtIndices, removeAtIndices) => {
      raiseSoftError('manageChildren');
    },
    setJSResponder: (reactTag, blockNativeResponder) => {
      raiseSoftError('setJSResponder');
    },
    clearJSResponder: () => {
      raiseSoftError('clearJSResponder');
    }
  };
  var UIManagerJSDeprecatedPlatformAPIs = undefined;
  var UIManagerJSPlatformAPIs = {
    lazilyLoadView: name => {
      raiseSoftError('lazilyLoadView');
      return {};
    },
    focus: reactTag => {
      var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
      var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
      if (!shadowNode) {
        console.error(`focus() noop: Cannot find view with tag #${reactTag}`);
        return;
      }
      FabricUIManager.dispatchCommand(shadowNode, 'focus', []);
    },
    blur: reactTag => {
      var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
      var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
      if (!shadowNode) {
        console.error(`blur() noop: Cannot find view with tag #${reactTag}`);
        return;
      }
      FabricUIManager.dispatchCommand(shadowNode, 'blur', []);
    }
  };
  var UIManagerJS = {
    ...UIManagerJSOverridenAPIs,
    ...UIManagerJSDeprecatedPlatformAPIs,
    ...UIManagerJSPlatformAPIs,
    ...UIManagerJSUnusedInNewArchAPIs,
    getViewManagerConfig: viewManagerName => {
      if (getUIManagerConstants) {
        var constants = getUIManagerConstantsCached();
        if (!constants[viewManagerName] && UIManagerJS.getConstantsForViewManager) {
          constants[viewManagerName] = UIManagerJS.getConstantsForViewManager(viewManagerName);
        }
        return constants[viewManagerName];
      } else {
        raiseSoftError(`getViewManagerConfig('${viewManagerName}')`, `If '${viewManagerName}' has a ViewManager and you want to retrieve its native ViewConfig, please turn on the native ViewConfig interop layer. If you want to see if this component is registered with React Native, please call hasViewManagerConfig('${viewManagerName}') instead.`);
        return null;
      }
    },
    hasViewManagerConfig: viewManagerName => {
      return (0, _NativeComponentRegistryUnstable.unstable_hasComponent)(viewManagerName);
    },
    getConstants: () => {
      if (getUIManagerConstants) {
        return getUIManagerConstantsCached();
      } else {
        raiseSoftError('getConstants');
        return null;
      }
    },
    findSubviewIn: (reactTag, point, callback) => {
      var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
      var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
      if (!shadowNode) {
        console.error(`findSubviewIn() noop: Cannot find view with reactTag ${reactTag}`);
        return;
      }
      FabricUIManager.findNodeAtPoint(shadowNode, point[0], point[1], function (internalInstanceHandle) {
        if (internalInstanceHandle == null) {
          console.error('findSubviewIn(): Cannot find node at point');
          return;
        }
        var instanceHandle = internalInstanceHandle;
        var node = instanceHandle.stateNode.node;
        if (!node) {
          console.error('findSubviewIn(): Cannot find node at point');
          return;
        }
        var nativeViewTag = instanceHandle.stateNode.canonical.nativeTag;
        FabricUIManager.measure(node, function (x, y, width, height, pageX, pageY) {
          callback(nativeViewTag, pageX, pageY, width, height);
        });
      });
    },
    viewIsDescendantOf: (reactTag, ancestorReactTag, callback) => {
      var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
      var shadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(reactTag);
      if (!shadowNode) {
        console.error(`viewIsDescendantOf() noop: Cannot find view with reactTag ${reactTag}`);
        return;
      }
      var ancestorShadowNode = FabricUIManager.findShadowNodeByTag_DEPRECATED(ancestorReactTag);
      if (!ancestorShadowNode) {
        console.error(`viewIsDescendantOf() noop: Cannot find view with ancestorReactTag ${ancestorReactTag}`);
        return;
      }
      var DOCUMENT_POSITION_CONTAINED_BY = 16;
      var result = FabricUIManager.compareDocumentPosition(ancestorShadowNode, shadowNode);
      var isAncestor = (result & DOCUMENT_POSITION_CONTAINED_BY) !== 0;
      callback([isAncestor]);
    },
    configureNextLayoutAnimation: (config, callback, errorCallback) => {
      var FabricUIManager = (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)());
      FabricUIManager.configureNextLayoutAnimation(config, callback, errorCallback);
    }
  };
  if (getUIManagerConstants) {
    Object.keys(getUIManagerConstantsCached()).forEach(viewConfigName => {
      UIManagerJS[viewConfigName] = getUIManagerConstantsCached()[viewConfigName];
    });
    if (UIManagerJS.getConstants().ViewManagerNames) {
      UIManagerJS.getConstants().ViewManagerNames.forEach(viewManagerName => {
        (0, _defineLazyObjectProperty.default)(UIManagerJS, viewManagerName, {
          get: () => (0, _nullthrows.default)(UIManagerJS.getConstantsForViewManager)(viewManagerName)
        });
      });
    }
  }
  var _default = exports.default = UIManagerJS;
},129,[1,130,7,87,127,128]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.unstable_hasComponent = unstable_hasComponent;
  var componentNameToExists = new Map();
  function unstable_hasComponent(name) {
    var hasNativeComponent = componentNameToExists.get(name);
    if (hasNativeComponent == null) {
      if (global.__nativeComponentRegistry__hasComponent) {
        hasNativeComponent = global.__nativeComponentRegistry__hasComponent(name);
        componentNameToExists.set(name, hasNativeComponent);
      } else {
        throw `unstable_hasComponent('${name}'): Global function is not registered`;
      }
    }
    return hasNativeComponent;
  }
},130,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeUIManager = _interopRequireDefault(require(_dependencyMap[1]));
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[2]));
  var NativeModules = require(_dependencyMap[3]).default;
  var defineLazyObjectProperty = require(_dependencyMap[4]).default;
  var Platform = require(_dependencyMap[5]).default;
  var UIManagerProperties = require(_dependencyMap[6]).default;
  var viewManagerConfigs = {};
  var triedLoadingConfig = new Set();
  var NativeUIManagerConstants = {};
  var isNativeUIManagerConstantsSet = false;
  function getConstants() {
    if (!isNativeUIManagerConstantsSet) {
      NativeUIManagerConstants = _NativeUIManager.default.getConstants();
      isNativeUIManagerConstantsSet = true;
    }
    return NativeUIManagerConstants;
  }
  function getViewManagerConfig(viewManagerName) {
    if (viewManagerConfigs[viewManagerName] === undefined && _NativeUIManager.default.getConstantsForViewManager) {
      try {
        viewManagerConfigs[viewManagerName] = _NativeUIManager.default.getConstantsForViewManager(viewManagerName);
      } catch (e) {
        console.error("NativeUIManager.getConstantsForViewManager('" + viewManagerName + "') threw an exception.", e);
        viewManagerConfigs[viewManagerName] = null;
      }
    }
    var config = viewManagerConfigs[viewManagerName];
    if (config) {
      return config;
    }
    if (!global.nativeCallSyncHook) {
      return config;
    }
    if (_NativeUIManager.default.lazilyLoadView && !triedLoadingConfig.has(viewManagerName)) {
      var result = (0, _nullthrows.default)(_NativeUIManager.default.lazilyLoadView)(viewManagerName);
      triedLoadingConfig.add(viewManagerName);
      if (result != null && result.viewConfig != null) {
        getConstants()[viewManagerName] = result.viewConfig;
        lazifyViewManagerConfig(viewManagerName);
      }
    }
    return viewManagerConfigs[viewManagerName];
  }
  var UIManagerJS = {
    ..._NativeUIManager.default,
    createView(reactTag, viewName, rootTag, props) {
      if (viewManagerConfigs[viewName] === undefined) {
        getViewManagerConfig(viewName);
      }
      _NativeUIManager.default.createView(reactTag, viewName, rootTag, props);
    },
    getConstants() {
      return getConstants();
    },
    getViewManagerConfig(viewManagerName) {
      return getViewManagerConfig(viewManagerName);
    },
    hasViewManagerConfig(viewManagerName) {
      return getViewManagerConfig(viewManagerName) != null;
    }
  };
  _NativeUIManager.default.getViewManagerConfig = UIManagerJS.getViewManagerConfig;
  function lazifyViewManagerConfig(viewName) {
    var viewConfig = getConstants()[viewName];
    viewManagerConfigs[viewName] = viewConfig;
    if (viewConfig.Manager) {
      defineLazyObjectProperty(viewConfig, 'Constants', {
        get: () => {
          var viewManager = NativeModules[viewConfig.Manager];
          var constants = {};
          viewManager && Object.keys(viewManager).forEach(key => {
            var value = viewManager[key];
            if (typeof value !== 'function') {
              constants[key] = value;
            }
          });
          return constants;
        }
      });
      defineLazyObjectProperty(viewConfig, 'Commands', {
        get: () => {
          var viewManager = NativeModules[viewConfig.Manager];
          var commands = {};
          var index = 0;
          viewManager && Object.keys(viewManager).forEach(key => {
            var value = viewManager[key];
            if (typeof value === 'function') {
              commands[key] = index++;
            }
          });
          return commands;
        }
      });
    }
  }
  {
    Object.keys(getConstants()).forEach(viewName => {
      lazifyViewManagerConfig(viewName);
    });
  }
  if (!global.nativeCallSyncHook) {
    Object.keys(getConstants()).forEach(viewManagerName => {
      if (!UIManagerProperties.includes(viewManagerName)) {
        if (!viewManagerConfigs[viewManagerName]) {
          viewManagerConfigs[viewManagerName] = getConstants()[viewManagerName];
        }
        defineLazyObjectProperty(_NativeUIManager.default, viewManagerName, {
          get: () => {
            console.warn(`Accessing view manager configs directly off UIManager via UIManager['${viewManagerName}'] ` + `is no longer supported. Use UIManager.getViewManagerConfig('${viewManagerName}') instead.`);
            return UIManagerJS.getViewManagerConfig(viewManagerName);
          }
        });
      }
    });
  }
  var _default = exports.default = UIManagerJS;
},131,[1,132,128,43,7,87,134]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeUIManager = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeUIManager).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeUIManager[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeUIManager[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeUIManager.default;
},132,[133]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('UIManager');
},133,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var UIManagerProperties = ['clearJSResponder', 'configureNextLayoutAnimation', 'createView', 'dispatchViewManagerCommand', 'findSubviewIn', 'getConstantsForViewManager', 'getDefaultEventTypes', 'manageChildren', 'measure', 'measureInWindow', 'measureLayout', 'measureLayoutRelativeToParent', 'removeRootView', 'sendAccessibilityEvent', 'setChildren', 'setJSResponder', 'setLayoutAnimationEnabledExperimental', 'updateView', 'viewIsDescendantOf', 'LazyViewManagersEnabled', 'ViewManagerNames', 'StyleConstants', 'AccessibilityEventTypes', 'UIView', 'getViewManagerConfig', 'hasViewManagerConfig', 'blur', 'focus', 'genericBubblingEventTypes', 'genericDirectEventTypes', 'lazilyLoadView'];
  var _default = exports.default = UIManagerProperties;
},134,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.stringifyValidationResult = stringifyValidationResult;
  exports.validate = validate;
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function validate(name, nativeViewConfig, staticViewConfig) {
    var differences = [];
    accumulateDifferences(differences, [], {
      bubblingEventTypes: nativeViewConfig.bubblingEventTypes,
      directEventTypes: nativeViewConfig.directEventTypes,
      uiViewClassName: nativeViewConfig.uiViewClassName,
      validAttributes: nativeViewConfig.validAttributes
    }, {
      bubblingEventTypes: staticViewConfig.bubblingEventTypes,
      directEventTypes: staticViewConfig.directEventTypes,
      uiViewClassName: staticViewConfig.uiViewClassName,
      validAttributes: staticViewConfig.validAttributes
    });
    if (differences.length === 0) {
      return {
        type: 'valid'
      };
    }
    return {
      type: 'invalid',
      differences
    };
  }
  function stringifyValidationResult(name, validationResult) {
    var differences = validationResult.differences;
    return [`StaticViewConfigValidator: Invalid static view config for '${name}'.`, '', ...differences.map(difference => {
      var type = difference.type,
        path = difference.path;
      switch (type) {
        case 'missing':
          return `- '${path.join('.')}' is missing.`;
        case 'unequal':
          return `- '${path.join('.')}' is the wrong value.`;
      }
    }), ''].join('\n');
  }
  function accumulateDifferences(differences, path, nativeObject, staticObject) {
    for (var nativeKey in nativeObject) {
      var nativeValue = nativeObject[nativeKey];
      if (!staticObject.hasOwnProperty(nativeKey)) {
        differences.push({
          path: [...path, nativeKey],
          type: 'missing',
          nativeValue
        });
        continue;
      }
      var staticValue = staticObject[nativeKey];
      var nativeValueIfObject = ifObject(nativeValue);
      if (nativeValueIfObject != null) {
        var staticValueIfObject = ifObject(staticValue);
        if (staticValueIfObject != null) {
          path.push(nativeKey);
          accumulateDifferences(differences, path, nativeValueIfObject, staticValueIfObject);
          path.pop();
          continue;
        }
      }
      if (nativeValue !== staticValue && !ReactNativeFeatureFlags.enableNativeCSSParsing()) {
        differences.push({
          path: [...path, nativeKey],
          type: 'unequal',
          nativeValue,
          staticValue
        });
      }
    }
  }
  function ifObject(value) {
    return typeof value === 'object' && !Array.isArray(value) ? value : null;
  }
},135,[104]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createViewConfig = createViewConfig;
  var _PlatformBaseViewConfig = _interopRequireDefault(require(_dependencyMap[1]));
  function createViewConfig(partialViewConfig) {
    return {
      uiViewClassName: partialViewConfig.uiViewClassName,
      Commands: {},
      bubblingEventTypes: composeIndexers(_PlatformBaseViewConfig.default.bubblingEventTypes, partialViewConfig.bubblingEventTypes),
      directEventTypes: composeIndexers(_PlatformBaseViewConfig.default.directEventTypes, partialViewConfig.directEventTypes),
      validAttributes: composeIndexers(_PlatformBaseViewConfig.default.validAttributes, partialViewConfig.validAttributes)
    };
  }
  function composeIndexers(maybeA, maybeB) {
    return maybeA == null || maybeB == null ? maybeA ?? maybeB ?? {} : {
      ...maybeA,
      ...maybeB
    };
  }
},136,[1,137]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _BaseViewConfig = _interopRequireDefault(require(_dependencyMap[1]));
  var PlatformBaseViewConfig = _BaseViewConfig.default;
  var _default = exports.default = PlatformBaseViewConfig;
},137,[1,138]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[1]));
  var _NativeReactNativeFeatureFlags = _interopRequireDefault(require(_dependencyMap[2]));
  var _ReactNativeStyleAttributes = _interopRequireDefault(require(_dependencyMap[3]));
  var _ViewConfigIgnore = require(_dependencyMap[4]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var bubblingEventTypes = {
    topPress: {
      phasedRegistrationNames: {
        bubbled: 'onPress',
        captured: 'onPressCapture'
      }
    },
    topChange: {
      phasedRegistrationNames: {
        bubbled: 'onChange',
        captured: 'onChangeCapture'
      }
    },
    topFocus: {
      phasedRegistrationNames: {
        bubbled: 'onFocus',
        captured: 'onFocusCapture'
      }
    },
    topBlur: {
      phasedRegistrationNames: {
        bubbled: 'onBlur',
        captured: 'onBlurCapture'
      }
    },
    topSubmitEditing: {
      phasedRegistrationNames: {
        bubbled: 'onSubmitEditing',
        captured: 'onSubmitEditingCapture'
      }
    },
    topEndEditing: {
      phasedRegistrationNames: {
        bubbled: 'onEndEditing',
        captured: 'onEndEditingCapture'
      }
    },
    topKeyPress: {
      phasedRegistrationNames: {
        bubbled: 'onKeyPress',
        captured: 'onKeyPressCapture'
      }
    },
    topTouchStart: {
      phasedRegistrationNames: {
        bubbled: 'onTouchStart',
        captured: 'onTouchStartCapture'
      }
    },
    topTouchMove: {
      phasedRegistrationNames: {
        bubbled: 'onTouchMove',
        captured: 'onTouchMoveCapture'
      }
    },
    topTouchCancel: {
      phasedRegistrationNames: {
        bubbled: 'onTouchCancel',
        captured: 'onTouchCancelCapture'
      }
    },
    topTouchEnd: {
      phasedRegistrationNames: {
        bubbled: 'onTouchEnd',
        captured: 'onTouchEndCapture'
      }
    },
    topClick: {
      phasedRegistrationNames: {
        captured: 'onClickCapture',
        bubbled: 'onClick'
      }
    },
    topPointerCancel: {
      phasedRegistrationNames: {
        captured: 'onPointerCancelCapture',
        bubbled: 'onPointerCancel'
      }
    },
    topPointerDown: {
      phasedRegistrationNames: {
        captured: 'onPointerDownCapture',
        bubbled: 'onPointerDown'
      }
    },
    topPointerMove: {
      phasedRegistrationNames: {
        captured: 'onPointerMoveCapture',
        bubbled: 'onPointerMove'
      }
    },
    topPointerUp: {
      phasedRegistrationNames: {
        captured: 'onPointerUpCapture',
        bubbled: 'onPointerUp'
      }
    },
    topPointerEnter: {
      phasedRegistrationNames: {
        captured: 'onPointerEnterCapture',
        bubbled: 'onPointerEnter',
        skipBubbling: true
      }
    },
    topPointerLeave: {
      phasedRegistrationNames: {
        captured: 'onPointerLeaveCapture',
        bubbled: 'onPointerLeave',
        skipBubbling: true
      }
    },
    topPointerOver: {
      phasedRegistrationNames: {
        captured: 'onPointerOverCapture',
        bubbled: 'onPointerOver'
      }
    },
    topPointerOut: {
      phasedRegistrationNames: {
        captured: 'onPointerOutCapture',
        bubbled: 'onPointerOut'
      }
    },
    topGotPointerCapture: {
      phasedRegistrationNames: {
        captured: 'onGotPointerCaptureCapture',
        bubbled: 'onGotPointerCapture'
      }
    },
    topLostPointerCapture: {
      phasedRegistrationNames: {
        captured: 'onLostPointerCaptureCapture',
        bubbled: 'onLostPointerCapture'
      }
    }
  };
  var directEventTypes = {
    topAccessibilityAction: {
      registrationName: 'onAccessibilityAction'
    },
    topAccessibilityTap: {
      registrationName: 'onAccessibilityTap'
    },
    topMagicTap: {
      registrationName: 'onMagicTap'
    },
    topAccessibilityEscape: {
      registrationName: 'onAccessibilityEscape'
    },
    topLayout: {
      registrationName: 'onLayout'
    },
    onGestureHandlerEvent: (0, _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
      registrationName: 'onGestureHandlerEvent'
    }),
    onGestureHandlerStateChange: (0, _ViewConfigIgnore.DynamicallyInjectedByGestureHandler)({
      registrationName: 'onGestureHandlerStateChange'
    })
  };
  var validAttributesForNonEventProps = {
    accessible: true,
    accessibilityActions: true,
    accessibilityLabel: true,
    accessibilityHint: true,
    accessibilityLanguage: true,
    accessibilityValue: true,
    accessibilityViewIsModal: true,
    accessibilityElementsHidden: true,
    accessibilityIgnoresInvertColors: true,
    accessibilityShowsLargeContentViewer: true,
    accessibilityLargeContentTitle: true,
    testID: true,
    backgroundColor: {
      process: require(_dependencyMap[5]).default
    },
    backfaceVisibility: true,
    cursor: true,
    opacity: true,
    shadowColor: {
      process: require(_dependencyMap[5]).default
    },
    shadowOffset: {
      diff: require(_dependencyMap[6]).default
    },
    shadowOpacity: true,
    shadowRadius: true,
    needsOffscreenAlphaCompositing: true,
    overflow: true,
    shouldRasterizeIOS: true,
    transform: {
      diff: require(_dependencyMap[7]).default
    },
    transformOrigin: true,
    accessibilityRole: true,
    accessibilityState: true,
    nativeID: true,
    pointerEvents: true,
    removeClippedSubviews: true,
    role: true,
    borderRadius: true,
    borderColor: {
      process: require(_dependencyMap[5]).default
    },
    borderBlockColor: {
      process: require(_dependencyMap[5]).default
    },
    borderCurve: true,
    borderWidth: true,
    borderBlockWidth: true,
    borderStyle: true,
    hitSlop: {
      diff: require(_dependencyMap[8]).default
    },
    collapsable: true,
    collapsableChildren: true,
    filter: _NativeReactNativeFeatureFlags.default != null && ReactNativeFeatureFlags.enableNativeCSSParsing() ? true : {
      process: require(_dependencyMap[9]).default
    },
    boxShadow: _NativeReactNativeFeatureFlags.default != null && ReactNativeFeatureFlags.enableNativeCSSParsing() ? true : {
      process: require(_dependencyMap[10]).default
    },
    mixBlendMode: true,
    isolation: true,
    borderTopWidth: true,
    borderTopColor: {
      process: require(_dependencyMap[5]).default
    },
    borderRightWidth: true,
    borderRightColor: {
      process: require(_dependencyMap[5]).default
    },
    borderBottomWidth: true,
    borderBottomColor: {
      process: require(_dependencyMap[5]).default
    },
    borderLeftWidth: true,
    borderLeftColor: {
      process: require(_dependencyMap[5]).default
    },
    borderStartWidth: true,
    borderBlockStartWidth: true,
    borderStartColor: {
      process: require(_dependencyMap[5]).default
    },
    borderBlockStartColor: {
      process: require(_dependencyMap[5]).default
    },
    borderEndWidth: true,
    borderBlockEndWidth: true,
    borderEndColor: {
      process: require(_dependencyMap[5]).default
    },
    borderBlockEndColor: {
      process: require(_dependencyMap[5]).default
    },
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    borderTopEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderBottomEndRadius: true,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    display: true,
    zIndex: true,
    top: true,
    right: true,
    start: true,
    end: true,
    bottom: true,
    left: true,
    inset: true,
    insetBlock: true,
    insetBlockEnd: true,
    insetBlockStart: true,
    insetInline: true,
    insetInlineEnd: true,
    insetInlineStart: true,
    width: true,
    height: true,
    minWidth: true,
    maxWidth: true,
    minHeight: true,
    maxHeight: true,
    margin: true,
    marginBlock: true,
    marginBlockEnd: true,
    marginBlockStart: true,
    marginBottom: true,
    marginEnd: true,
    marginHorizontal: true,
    marginInline: true,
    marginInlineEnd: true,
    marginInlineStart: true,
    marginLeft: true,
    marginRight: true,
    marginStart: true,
    marginTop: true,
    marginVertical: true,
    padding: true,
    paddingBlock: true,
    paddingBlockEnd: true,
    paddingBlockStart: true,
    paddingBottom: true,
    paddingEnd: true,
    paddingHorizontal: true,
    paddingInline: true,
    paddingInlineEnd: true,
    paddingInlineStart: true,
    paddingLeft: true,
    paddingRight: true,
    paddingStart: true,
    paddingTop: true,
    paddingVertical: true,
    flex: true,
    flexGrow: true,
    rowGap: true,
    columnGap: true,
    gap: true,
    flexShrink: true,
    flexBasis: true,
    flexDirection: true,
    flexWrap: true,
    justifyContent: true,
    alignItems: true,
    alignSelf: true,
    alignContent: true,
    position: true,
    aspectRatio: true,
    boxSizing: true,
    direction: true,
    style: _ReactNativeStyleAttributes.default
  };
  var validAttributesForEventProps = (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
    onLayout: true,
    onMagicTap: true,
    onAccessibilityAction: true,
    onAccessibilityEscape: true,
    onAccessibilityTap: true,
    onMoveShouldSetResponder: true,
    onMoveShouldSetResponderCapture: true,
    onStartShouldSetResponder: true,
    onStartShouldSetResponderCapture: true,
    onResponderGrant: true,
    onResponderReject: true,
    onResponderStart: true,
    onResponderEnd: true,
    onResponderRelease: true,
    onResponderMove: true,
    onResponderTerminate: true,
    onResponderTerminationRequest: true,
    onShouldBlockNativeResponder: true,
    onTouchStart: true,
    onTouchMove: true,
    onTouchEnd: true,
    onTouchCancel: true,
    onClick: true,
    onClickCapture: true,
    onPointerUp: true,
    onPointerDown: true,
    onPointerCancel: true,
    onPointerEnter: true,
    onPointerMove: true,
    onPointerLeave: true,
    onPointerOver: true,
    onPointerOut: true,
    onGotPointerCapture: true,
    onLostPointerCapture: true
  });
  var PlatformBaseViewConfigIos = {
    bubblingEventTypes,
    directEventTypes,
    validAttributes: {
      ...validAttributesForNonEventProps,
      ...validAttributesForEventProps
    }
  };
  var _default = exports.default = PlatformBaseViewConfigIos;
},138,[1,104,106,103,139,99,113,124,123,109,98]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ConditionallyIgnoredEventHandlers = ConditionallyIgnoredEventHandlers;
  exports.DynamicallyInjectedByGestureHandler = DynamicallyInjectedByGestureHandler;
  exports.isIgnored = isIgnored;
  var _Platform = _interopRequireDefault(require(_dependencyMap[1]));
  var ignoredViewConfigProps = new WeakSet();
  function DynamicallyInjectedByGestureHandler(object) {
    ignoredViewConfigProps.add(object);
    return object;
  }
  function ConditionallyIgnoredEventHandlers(value) {
    {
      return value;
    }
    return undefined;
  }
  function isIgnored(value) {
    if (typeof value === 'object' && value != null) {
      return ignoredViewConfigProps.has(value);
    }
    return false;
  }
},139,[1,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = require(_dependencyMap[0]);
  }
},140,[141]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * react.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  "use strict";

  var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
    REACT_PORTAL_TYPE = Symbol.for("react.portal"),
    REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
    REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
    REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
    REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
    REACT_CONTEXT_TYPE = Symbol.for("react.context"),
    REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
    REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
    REACT_MEMO_TYPE = Symbol.for("react.memo"),
    REACT_LAZY_TYPE = Symbol.for("react.lazy"),
    MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }
  var ReactNoopUpdateQueue = {
      isMounted: function () {
        return false;
      },
      enqueueForceUpdate: function () {},
      enqueueReplaceState: function () {},
      enqueueSetState: function () {}
    },
    assign = Object.assign,
    emptyObject = {};
  function Component(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    this.updater = updater || ReactNoopUpdateQueue;
  }
  Component.prototype.isReactComponent = {};
  Component.prototype.setState = function (partialState, callback) {
    if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState) throw Error("takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, partialState, callback, "setState");
  };
  Component.prototype.forceUpdate = function (callback) {
    this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
  };
  function ComponentDummy() {}
  ComponentDummy.prototype = Component.prototype;
  function PureComponent(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    this.updater = updater || ReactNoopUpdateQueue;
  }
  var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
  pureComponentPrototype.constructor = PureComponent;
  assign(pureComponentPrototype, Component.prototype);
  pureComponentPrototype.isPureReactComponent = true;
  var isArrayImpl = Array.isArray,
    ReactSharedInternals = {
      H: null,
      A: null,
      T: null,
      S: null
    },
    hasOwnProperty = Object.prototype.hasOwnProperty;
  function ReactElement(type, key, self, source, owner, props) {
    self = props.ref;
    return {
      $$typeof: REACT_ELEMENT_TYPE,
      type: type,
      key: key,
      ref: undefined !== self ? self : null,
      props: props
    };
  }
  function cloneAndReplaceKey(oldElement, newKey) {
    return ReactElement(oldElement.type, newKey, undefined, undefined, undefined, oldElement.props);
  }
  function isValidElement(object) {
    return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
  }
  function escape(key) {
    var escaperLookup = {
      "=": "=0",
      ":": "=2"
    };
    return "$" + key.replace(/[=:]/g, function (match) {
      return escaperLookup[match];
    });
  }
  var userProvidedKeyEscapeRegex = /\/+/g;
  function getElementKey(element, index) {
    return "object" === typeof element && null !== element && null != element.key ? escape("" + element.key) : index.toString(36);
  }
  function noop$1() {}
  function resolveThenable(thenable) {
    switch (thenable.status) {
      case "fulfilled":
        return thenable.value;
      case "rejected":
        throw thenable.reason;
      default:
        switch ("string" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenable.status = "pending", thenable.then(function (fulfilledValue) {
          "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
        }, function (error) {
          "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
        })), thenable.status) {
          case "fulfilled":
            return thenable.value;
          case "rejected":
            throw thenable.reason;
        }
    }
    throw thenable;
  }
  function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
    var type = typeof children;
    if ("undefined" === type || "boolean" === type) children = null;
    var invokeCallback = false;
    if (null === children) invokeCallback = true;else switch (type) {
      case "bigint":
      case "string":
      case "number":
        invokeCallback = true;
        break;
      case "object":
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
            break;
          case REACT_LAZY_TYPE:
            return invokeCallback = children._init, mapIntoArray(invokeCallback(children._payload), array, escapedPrefix, nameSoFar, callback);
        }
    }
    if (invokeCallback) return callback = callback(children), invokeCallback = "" === nameSoFar ? "." + getElementKey(children, 0) : nameSoFar, isArrayImpl(callback) ? (escapedPrefix = "", null != invokeCallback && (escapedPrefix = invokeCallback.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function (c) {
      return c;
    })) : null != callback && (isValidElement(callback) && (callback = cloneAndReplaceKey(callback, escapedPrefix + (null == callback.key || children && children.key === callback.key ? "" : ("" + callback.key).replace(userProvidedKeyEscapeRegex, "$&/") + "/") + invokeCallback)), array.push(callback)), 1;
    invokeCallback = 0;
    var nextNamePrefix = "" === nameSoFar ? "." : nameSoFar + ":";
    if (isArrayImpl(children)) for (var i = 0; i < children.length; i++) nameSoFar = children[i], type = nextNamePrefix + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);else if (i = getIteratorFn(children), "function" === typeof i) for (children = i.call(children), i = 0; !(nameSoFar = children.next()).done;) nameSoFar = nameSoFar.value, type = nextNamePrefix + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);else if ("object" === type) {
      if ("function" === typeof children.then) return mapIntoArray(resolveThenable(children), array, escapedPrefix, nameSoFar, callback);
      array = String(children);
      throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === array ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead.");
    }
    return invokeCallback;
  }
  function mapChildren(children, func, context) {
    if (null == children) return children;
    var result = [],
      count = 0;
    mapIntoArray(children, result, "", "", function (child) {
      return func.call(context, child, count++);
    });
    return result;
  }
  function lazyInitializer(payload) {
    if (-1 === payload._status) {
      var ctor = payload._result;
      ctor = ctor();
      ctor.then(function (moduleObject) {
        if (0 === payload._status || -1 === payload._status) payload._status = 1, payload._result = moduleObject;
      }, function (error) {
        if (0 === payload._status || -1 === payload._status) payload._status = 2, payload._result = error;
      });
      -1 === payload._status && (payload._status = 0, payload._result = ctor);
    }
    if (1 === payload._status) return payload._result.default;
    throw payload._result;
  }
  var reportGlobalError = "function" === typeof reportError ? reportError : function (error) {
    if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
      var event = new window.ErrorEvent("error", {
        bubbles: true,
        cancelable: true,
        message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
        error: error
      });
      if (!window.dispatchEvent(event)) return;
    } else if ("object" === typeof process && "function" === typeof process.emit) {
      process.emit("uncaughtException", error);
      return;
    }
    console.error(error);
  };
  function noop() {}
  exports.Children = {
    map: mapChildren,
    forEach: function (children, forEachFunc, forEachContext) {
      mapChildren(children, function () {
        forEachFunc.apply(this, arguments);
      }, forEachContext);
    },
    count: function (children) {
      var n = 0;
      mapChildren(children, function () {
        n++;
      });
      return n;
    },
    toArray: function (children) {
      return mapChildren(children, function (child) {
        return child;
      }) || [];
    },
    only: function (children) {
      if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
      return children;
    }
  };
  exports.Component = Component;
  exports.Fragment = REACT_FRAGMENT_TYPE;
  exports.Profiler = REACT_PROFILER_TYPE;
  exports.PureComponent = PureComponent;
  exports.StrictMode = REACT_STRICT_MODE_TYPE;
  exports.Suspense = REACT_SUSPENSE_TYPE;
  exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
  exports.act = function () {
    throw Error("act(...) is not supported in production builds of React.");
  };
  exports.cache = function (fn) {
    return function () {
      return fn.apply(null, arguments);
    };
  };
  exports.cloneElement = function (element, config, children) {
    if (null === element || undefined === element) throw Error("The argument must be a React element, but you passed " + element + ".");
    var props = assign({}, element.props),
      key = element.key,
      owner = undefined;
    if (null != config) for (propName in undefined !== config.ref && (owner = undefined), undefined !== config.key && (key = "" + config.key), config) !hasOwnProperty.call(config, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && undefined === config.ref || (props[propName] = config[propName]);
    var propName = arguments.length - 2;
    if (1 === propName) props.children = children;else if (1 < propName) {
      for (var childArray = Array(propName), i = 0; i < propName; i++) childArray[i] = arguments[i + 2];
      props.children = childArray;
    }
    return ReactElement(element.type, key, undefined, undefined, owner, props);
  };
  exports.createContext = function (defaultValue) {
    defaultValue = {
      $$typeof: REACT_CONTEXT_TYPE,
      _currentValue: defaultValue,
      _currentValue2: defaultValue,
      _threadCount: 0,
      Provider: null,
      Consumer: null
    };
    defaultValue.Provider = defaultValue;
    defaultValue.Consumer = {
      $$typeof: REACT_CONSUMER_TYPE,
      _context: defaultValue
    };
    return defaultValue;
  };
  exports.createElement = function (type, config, children) {
    var propName,
      props = {},
      key = null;
    if (null != config) for (propName in undefined !== config.key && (key = "" + config.key), config) hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (props[propName] = config[propName]);
    var childrenLength = arguments.length - 2;
    if (1 === childrenLength) props.children = children;else if (1 < childrenLength) {
      for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++) childArray[i] = arguments[i + 2];
      props.children = childArray;
    }
    if (type && type.defaultProps) for (propName in childrenLength = type.defaultProps, childrenLength) undefined === props[propName] && (props[propName] = childrenLength[propName]);
    return ReactElement(type, key, undefined, undefined, null, props);
  };
  exports.createRef = function () {
    return {
      current: null
    };
  };
  exports.forwardRef = function (render) {
    return {
      $$typeof: REACT_FORWARD_REF_TYPE,
      render: render
    };
  };
  exports.isValidElement = isValidElement;
  exports.lazy = function (ctor) {
    return {
      $$typeof: REACT_LAZY_TYPE,
      _payload: {
        _status: -1,
        _result: ctor
      },
      _init: lazyInitializer
    };
  };
  exports.memo = function (type, compare) {
    return {
      $$typeof: REACT_MEMO_TYPE,
      type: type,
      compare: undefined === compare ? null : compare
    };
  };
  exports.startTransition = function (scope) {
    var prevTransition = ReactSharedInternals.T,
      currentTransition = {};
    ReactSharedInternals.T = currentTransition;
    try {
      var returnValue = scope(),
        onStartTransitionFinish = ReactSharedInternals.S;
      null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
      "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && returnValue.then(noop, reportGlobalError);
    } catch (error) {
      reportGlobalError(error);
    } finally {
      ReactSharedInternals.T = prevTransition;
    }
  };
  exports.unstable_useCacheRefresh = function () {
    return ReactSharedInternals.H.useCacheRefresh();
  };
  exports.use = function (usable) {
    return ReactSharedInternals.H.use(usable);
  };
  exports.useActionState = function (action, initialState, permalink) {
    return ReactSharedInternals.H.useActionState(action, initialState, permalink);
  };
  exports.useCallback = function (callback, deps) {
    return ReactSharedInternals.H.useCallback(callback, deps);
  };
  exports.useContext = function (Context) {
    return ReactSharedInternals.H.useContext(Context);
  };
  exports.useDebugValue = function () {};
  exports.useDeferredValue = function (value, initialValue) {
    return ReactSharedInternals.H.useDeferredValue(value, initialValue);
  };
  exports.useEffect = function (create, deps) {
    return ReactSharedInternals.H.useEffect(create, deps);
  };
  exports.useId = function () {
    return ReactSharedInternals.H.useId();
  };
  exports.useImperativeHandle = function (ref, create, deps) {
    return ReactSharedInternals.H.useImperativeHandle(ref, create, deps);
  };
  exports.useInsertionEffect = function (create, deps) {
    return ReactSharedInternals.H.useInsertionEffect(create, deps);
  };
  exports.useLayoutEffect = function (create, deps) {
    return ReactSharedInternals.H.useLayoutEffect(create, deps);
  };
  exports.useMemo = function (create, deps) {
    return ReactSharedInternals.H.useMemo(create, deps);
  };
  exports.useOptimistic = function (passthrough, reducer) {
    return ReactSharedInternals.H.useOptimistic(passthrough, reducer);
  };
  exports.useReducer = function (reducer, initialArg, init) {
    return ReactSharedInternals.H.useReducer(reducer, initialArg, init);
  };
  exports.useRef = function (initialValue) {
    return ReactSharedInternals.H.useRef(initialValue);
  };
  exports.useState = function (initialState) {
    return ReactSharedInternals.H.useState(initialState);
  };
  exports.useSyncExternalStore = function (subscribe, getSnapshot, getServerSnapshot) {
    return ReactSharedInternals.H.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
  };
  exports.useTransition = function () {
    return ReactSharedInternals.H.useTransition();
  };
  exports.version = "19.0.0";
},141,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _require = require(_dependencyMap[0]),
    dispatchCommand = _require.dispatchCommand;
  function codegenNativeCommands(options) {
    var commandObj = {};
    options.supportedCommands.forEach(command => {
      commandObj[command] = function (ref) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        dispatchCommand(ref, command, args);
      };
    });
    return commandObj;
  }
  var _default = exports.default = codegenNativeCommands;
},142,[74]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[2]));
  var _RCTTextInputViewConfig = _interopRequireDefault(require(_dependencyMap[3]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['focus', 'blur', 'setTextAndSelection']
  });
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTSinglelineTextInputView',
    ..._RCTTextInputViewConfig.default
  };
  var SinglelineTextInputNativeComponent = NativeComponentRegistry.get('RCTSinglelineTextInputView', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = SinglelineTextInputNativeComponent;
},143,[1,96,142,144]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ViewConfigIgnore = require(_dependencyMap[0]);
  var RCTTextInputViewConfig = {
    bubblingEventTypes: {
      topBlur: {
        phasedRegistrationNames: {
          bubbled: 'onBlur',
          captured: 'onBlurCapture'
        }
      },
      topChange: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        }
      },
      topEndEditing: {
        phasedRegistrationNames: {
          bubbled: 'onEndEditing',
          captured: 'onEndEditingCapture'
        }
      },
      topFocus: {
        phasedRegistrationNames: {
          bubbled: 'onFocus',
          captured: 'onFocusCapture'
        }
      },
      topKeyPress: {
        phasedRegistrationNames: {
          bubbled: 'onKeyPress',
          captured: 'onKeyPressCapture'
        }
      },
      topSubmitEditing: {
        phasedRegistrationNames: {
          bubbled: 'onSubmitEditing',
          captured: 'onSubmitEditingCapture'
        }
      },
      topTouchCancel: {
        phasedRegistrationNames: {
          bubbled: 'onTouchCancel',
          captured: 'onTouchCancelCapture'
        }
      },
      topTouchEnd: {
        phasedRegistrationNames: {
          bubbled: 'onTouchEnd',
          captured: 'onTouchEndCapture'
        }
      },
      topTouchMove: {
        phasedRegistrationNames: {
          bubbled: 'onTouchMove',
          captured: 'onTouchMoveCapture'
        }
      }
    },
    directEventTypes: {
      topScroll: {
        registrationName: 'onScroll'
      },
      topSelectionChange: {
        registrationName: 'onSelectionChange'
      },
      topContentSizeChange: {
        registrationName: 'onContentSizeChange'
      },
      topChangeSync: {
        registrationName: 'onChangeSync'
      },
      topKeyPressSync: {
        registrationName: 'onKeyPressSync'
      }
    },
    validAttributes: {
      dynamicTypeRamp: true,
      fontSize: true,
      fontWeight: true,
      fontVariant: true,
      textShadowOffset: {
        diff: require(_dependencyMap[1]).default
      },
      allowFontScaling: true,
      fontStyle: true,
      textTransform: true,
      textAlign: true,
      fontFamily: true,
      lineHeight: true,
      isHighlighted: true,
      writingDirection: true,
      textDecorationLine: true,
      textShadowRadius: true,
      letterSpacing: true,
      textDecorationStyle: true,
      textDecorationColor: {
        process: require(_dependencyMap[2]).default
      },
      color: {
        process: require(_dependencyMap[2]).default
      },
      maxFontSizeMultiplier: true,
      textShadowColor: {
        process: require(_dependencyMap[2]).default
      },
      editable: true,
      inputAccessoryViewID: true,
      inputAccessoryViewButtonLabel: true,
      caretHidden: true,
      enablesReturnKeyAutomatically: true,
      placeholderTextColor: {
        process: require(_dependencyMap[2]).default
      },
      clearButtonMode: true,
      keyboardType: true,
      selection: true,
      returnKeyType: true,
      submitBehavior: true,
      mostRecentEventCount: true,
      scrollEnabled: true,
      selectionColor: {
        process: require(_dependencyMap[2]).default
      },
      contextMenuHidden: true,
      secureTextEntry: true,
      placeholder: true,
      autoCorrect: true,
      multiline: true,
      numberOfLines: true,
      textContentType: true,
      maxLength: true,
      autoCapitalize: true,
      keyboardAppearance: true,
      passwordRules: true,
      spellCheck: true,
      selectTextOnFocus: true,
      text: true,
      clearTextOnFocus: true,
      showSoftInputOnFocus: true,
      autoFocus: true,
      lineBreakStrategyIOS: true,
      lineBreakModeIOS: true,
      smartInsertDelete: true,
      ...(0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onChange: true,
        onSelectionChange: true,
        onContentSizeChange: true,
        onScroll: true,
        onChangeSync: true,
        onKeyPressSync: true
      }),
      disableKeyboardShortcuts: true
    }
  };
  var _default = exports.default = RCTTextInputViewConfig;
},144,[139,113,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var logListeners;
  function unstable_setLogListeners(listeners) {
    logListeners = listeners;
  }
  function deepDiffer(one, two) {
    var maxDepthOrOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
    var maybeOptions = arguments.length > 3 ? arguments[3] : undefined;
    var options = typeof maxDepthOrOptions === 'number' ? maybeOptions : maxDepthOrOptions;
    var maxDepth = typeof maxDepthOrOptions === 'number' ? maxDepthOrOptions : -1;
    if (maxDepth === 0) {
      return true;
    }
    if (one === two) {
      return false;
    }
    if (typeof one === 'function' && typeof two === 'function') {
      var unsafelyIgnoreFunctions = options?.unsafelyIgnoreFunctions;
      if (unsafelyIgnoreFunctions == null) {
        if (logListeners && logListeners.onDifferentFunctionsIgnored && (!options || !('unsafelyIgnoreFunctions' in options))) {
          logListeners.onDifferentFunctionsIgnored(one.name, two.name);
        }
        unsafelyIgnoreFunctions = true;
      }
      return !unsafelyIgnoreFunctions;
    }
    if (typeof one !== 'object' || one === null) {
      return one !== two;
    }
    if (typeof two !== 'object' || two === null) {
      return true;
    }
    if (one.constructor !== two.constructor) {
      return true;
    }
    if (Array.isArray(one)) {
      var len = one.length;
      if (two.length !== len) {
        return true;
      }
      for (var ii = 0; ii < len; ii++) {
        if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {
          return true;
        }
      }
    } else {
      for (var key in one) {
        if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {
          return true;
        }
      }
      for (var twoKey in two) {
        if (one[twoKey] === undefined && two[twoKey] !== undefined) {
          return true;
        }
      }
    }
    return false;
  }
  deepDiffer.unstable_setLogListeners = unstable_setLogListeners;
  var _default = exports.default = deepDiffer;
},145,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  function flattenStyle(style) {
    if (style === null || typeof style !== 'object') {
      return undefined;
    }
    if (!Array.isArray(style)) {
      return style;
    }
    var result = {};
    for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
      var computedStyle = flattenStyle(style[i]);
      if (computedStyle) {
        for (var key in computedStyle) {
          result[key] = computedStyle[key];
        }
      }
    }
    return result;
  }
  var _default = exports.default = flattenStyle;
},146,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ExceptionsManager = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var ReactFiberErrorDialog = {
    showErrorDialog(_ref) {
      var componentStack = _ref.componentStack,
        errorValue = _ref.error;
      var error;
      if (errorValue instanceof Error) {
        error = errorValue;
      } else if (typeof errorValue === 'string') {
        error = new _ExceptionsManager.SyntheticError(errorValue);
      } else {
        error = new _ExceptionsManager.SyntheticError('Unspecified error');
      }
      try {
        error.componentStack = componentStack;
        error.isComponentError = true;
      } catch {}
      _ExceptionsManager.default.handleException(error, false);
      return false;
    }
  };
  var _default = exports.default = ReactFiberErrorDialog;
},147,[77]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeAccessibilityManager = _interopRequireDefault(require(_dependencyMap[1]));
  function legacySendAccessibilityEvent(reactTag, eventType) {
    if (eventType === 'focus' && _NativeAccessibilityManager.default) {
      _NativeAccessibilityManager.default.setAccessibilityFocus(reactTag);
    }
  }
  var _default = exports.default = legacySendAccessibilityEvent;
},148,[1,149]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeAccessibilityManager = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeAccessibilityManager).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeAccessibilityManager[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeAccessibilityManager[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeAccessibilityManager.default;
},149,[150]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('AccessibilityManager');
},150,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _EventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var RawEventEmitter = new _EventEmitter.default();
  var _default = exports.default = RawEventEmitter;
},151,[1,71]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _EventPolyfill2 = _interopRequireDefault(require(_dependencyMap[6]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var CustomEvent = /*#__PURE__*/function (_EventPolyfill) {
    function CustomEvent(typeArg, options) {
      var _this;
      (0, _classCallCheck2.default)(this, CustomEvent);
      var bubbles = options.bubbles,
        cancelable = options.cancelable,
        composed = options.composed;
      _this = _callSuper(this, CustomEvent, [typeArg, {
        bubbles,
        cancelable,
        composed
      }]);
      _this.detail = options.detail;
      return _this;
    }
    (0, _inherits2.default)(CustomEvent, _EventPolyfill);
    return (0, _createClass2.default)(CustomEvent);
  }(_EventPolyfill2.default);
  var _default = exports.default = CustomEvent;
},152,[1,11,10,64,66,69,153]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var EventPolyfill = /*#__PURE__*/function () {
    function EventPolyfill(type, eventInitDict) {
      (0, _classCallCheck2.default)(this, EventPolyfill);
      this.type = type;
      this.bubbles = !!(eventInitDict?.bubbles || false);
      this.cancelable = !!(eventInitDict?.cancelable || false);
      this.composed = !!(eventInitDict?.composed || false);
      this.scoped = !!(eventInitDict?.scoped || false);
      this.isTrusted = false;
      this.timeStamp = Date.now();
      this.defaultPrevented = false;
      this.NONE = 0;
      this.AT_TARGET = 1;
      this.BUBBLING_PHASE = 2;
      this.CAPTURING_PHASE = 3;
      this.eventPhase = this.NONE;
      this.currentTarget = null;
      this.target = null;
      this.srcElement = null;
    }
    return (0, _createClass2.default)(EventPolyfill, [{
      key: "composedPath",
      value: function composedPath() {
        throw new Error('TODO: not yet implemented');
      }
    }, {
      key: "preventDefault",
      value: function preventDefault() {
        this.defaultPrevented = true;
        if (this._syntheticEvent != null) {
          this._syntheticEvent.preventDefault();
        }
      }
    }, {
      key: "initEvent",
      value: function initEvent(type, bubbles, cancelable) {
        throw new Error('TODO: not yet implemented. This method is also deprecated.');
      }
    }, {
      key: "stopImmediatePropagation",
      value: function stopImmediatePropagation() {
        throw new Error('TODO: not yet implemented');
      }
    }, {
      key: "stopPropagation",
      value: function stopPropagation() {
        if (this._syntheticEvent != null) {
          this._syntheticEvent.stopPropagation();
        }
      }
    }, {
      key: "setSyntheticEvent",
      value: function setSyntheticEvent(value) {
        this._syntheticEvent = value;
      }
    }]);
  }();
  global.Event = EventPolyfill;
  var _default = exports.default = EventPolyfill;
},153,[1,10,11]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.diff = diff;
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[1]));
  var _deepDiffer = _interopRequireDefault(require(_dependencyMap[2]));
  var emptyObject = {};
  var removedKeys = null;
  var removedKeyCount = 0;
  var deepDifferOptions = {
    unsafelyIgnoreFunctions: true
  };
  function defaultDiffer(prevProp, nextProp) {
    if (typeof nextProp !== 'object' || nextProp === null) {
      return true;
    } else {
      return (0, _deepDiffer.default)(prevProp, nextProp, deepDifferOptions);
    }
  }
  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) {
      var i = node.length;
      while (i-- && removedKeyCount > 0) {
        restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
      }
    } else if (node && removedKeyCount > 0) {
      var obj = node;
      for (var propKey in removedKeys) {
        if (!removedKeys[propKey]) {
          continue;
        }
        var nextProp = obj[propKey];
        if (nextProp === undefined) {
          continue;
        }
        var attributeConfig = validAttributes[propKey];
        if (!attributeConfig) {
          continue;
        }
        if (typeof nextProp === 'function') {
          nextProp = true;
        }
        if (typeof nextProp === 'undefined') {
          nextProp = null;
        }
        if (typeof attributeConfig !== 'object') {
          updatePayload[propKey] = nextProp;
        } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
          var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
          updatePayload[propKey] = nextValue;
        }
        removedKeys[propKey] = false;
        removedKeyCount--;
      }
    }
  }
  function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
    var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
    var i;
    for (i = 0; i < minLength; i++) {
      updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
    }
    for (; i < prevArray.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
    }
    for (; i < nextArray.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
    }
    return updatePayload;
  }
  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) {
      return updatePayload;
    }
    if (!prevProp || !nextProp) {
      if (nextProp) {
        return addNestedProperty(updatePayload, nextProp, validAttributes);
      }
      if (prevProp) {
        return clearNestedProperty(updatePayload, prevProp, validAttributes);
      }
      return updatePayload;
    }
    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
      return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
    }
    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
      return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
    }
    if (Array.isArray(prevProp)) {
      return diffProperties(updatePayload, (0, _flattenStyle.default)(prevProp), nextProp, validAttributes);
    }
    return diffProperties(updatePayload, prevProp, (0, _flattenStyle.default)(nextProp), validAttributes);
  }
  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) {
      return updatePayload;
    }
    if (!Array.isArray(nextProp)) {
      return addProperties(updatePayload, nextProp, validAttributes);
    }
    for (var i = 0; i < nextProp.length; i++) {
      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }
    return updatePayload;
  }
  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) {
      return updatePayload;
    }
    if (!Array.isArray(prevProp)) {
      return clearProperties(updatePayload, prevProp, validAttributes);
    }
    for (var i = 0; i < prevProp.length; i++) {
      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }
    return updatePayload;
  }
  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig;
    var nextProp;
    var prevProp;
    for (var propKey in nextProps) {
      attributeConfig = validAttributes[propKey];
      if (!attributeConfig) {
        continue;
      }
      prevProp = prevProps[propKey];
      nextProp = nextProps[propKey];
      if (typeof nextProp === 'function') {
        nextProp = true;
        if (typeof prevProp === 'function') {
          prevProp = true;
        }
      }
      if (typeof nextProp === 'undefined') {
        nextProp = null;
        if (typeof prevProp === 'undefined') {
          prevProp = null;
        }
      }
      if (removedKeys) {
        removedKeys[propKey] = false;
      }
      if (updatePayload && updatePayload[propKey] !== undefined) {
        if (typeof attributeConfig !== 'object') {
          updatePayload[propKey] = nextProp;
        } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
          var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
          updatePayload[propKey] = nextValue;
        }
        continue;
      }
      if (prevProp === nextProp) {
        continue;
      }
      if (typeof attributeConfig !== 'object') {
        if (defaultDiffer(prevProp, nextProp)) {
          (updatePayload || (updatePayload = {}))[propKey] = nextProp;
        }
      } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
        var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === 'function' ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));
        if (shouldUpdate) {
          var _nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
          (updatePayload || (updatePayload = {}))[propKey] = _nextValue;
        }
      } else {
        removedKeys = null;
        removedKeyCount = 0;
        updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);
        if (removedKeyCount > 0 && updatePayload) {
          restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
          removedKeys = null;
        }
      }
    }
    for (var _propKey in prevProps) {
      if (nextProps[_propKey] !== undefined) {
        continue;
      }
      attributeConfig = validAttributes[_propKey];
      if (!attributeConfig) {
        continue;
      }
      if (updatePayload && updatePayload[_propKey] !== undefined) {
        continue;
      }
      prevProp = prevProps[_propKey];
      if (prevProp === undefined) {
        continue;
      }
      if (typeof attributeConfig !== 'object' || typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
        (updatePayload || (updatePayload = {}))[_propKey] = null;
        if (!removedKeys) {
          removedKeys = {};
        }
        if (!removedKeys[_propKey]) {
          removedKeys[_propKey] = true;
          removedKeyCount++;
        }
      } else {
        updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
      }
    }
    return updatePayload;
  }
  function addProperties(updatePayload, props, validAttributes) {
    return diffProperties(updatePayload, emptyObject, props, validAttributes);
  }
  function clearProperties(updatePayload, prevProps, validAttributes) {
    return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);
  }
  function create(props, validAttributes) {
    return addProperties(null, props, validAttributes);
  }
  function diff(prevProps, nextProps, validAttributes) {
    return diffProperties(null, prevProps, nextProps, validAttributes);
  }
},154,[1,146,145]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createPublicInstance = createPublicInstance;
  exports.createPublicRootInstance = createPublicRootInstance;
  exports.createPublicTextInstance = createPublicTextInstance;
  exports.getInternalInstanceHandleFromPublicInstance = getInternalInstanceHandleFromPublicInstance;
  exports.getNativeTagFromPublicInstance = getNativeTagFromPublicInstance;
  exports.getNodeFromPublicInstance = getNodeFromPublicInstance;
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var ReactNativeDocumentModuleObject;
  var ReactFabricHostComponentClass;
  var ReactNativeElementClass;
  var ReadOnlyTextClass;
  var RendererProxy;
  function getReactNativeDocumentModule() {
    if (ReactNativeDocumentModuleObject == null) {
      ReactNativeDocumentModuleObject = require(_dependencyMap[1]);
    }
    return ReactNativeDocumentModuleObject;
  }
  function getReactNativeElementClass() {
    if (ReactNativeElementClass == null) {
      ReactNativeElementClass = require(_dependencyMap[2]).default;
    }
    return ReactNativeElementClass;
  }
  function getReactFabricHostComponentClass() {
    if (ReactFabricHostComponentClass == null) {
      ReactFabricHostComponentClass = require(_dependencyMap[3]).default;
    }
    return ReactFabricHostComponentClass;
  }
  function getReadOnlyTextClass() {
    if (ReadOnlyTextClass == null) {
      ReadOnlyTextClass = require(_dependencyMap[4]).default;
    }
    return ReadOnlyTextClass;
  }
  function createPublicRootInstance(rootTag) {
    if (ReactNativeFeatureFlags.enableAccessToHostTreeInFabric() && ReactNativeFeatureFlags.enableDOMDocumentAPI()) {
      var ReactNativeDocumentModule = getReactNativeDocumentModule();
      return ReactNativeDocumentModule.createReactNativeDocument(rootTag);
    }
    return null;
  }
  function createPublicInstance(tag, viewConfig, internalInstanceHandle, ownerDocument) {
    if (ReactNativeFeatureFlags.enableAccessToHostTreeInFabric()) {
      var ReactNativeElement = getReactNativeElementClass();
      return new ReactNativeElement(tag, viewConfig, internalInstanceHandle, ownerDocument);
    } else {
      var ReactFabricHostComponent = getReactFabricHostComponentClass();
      return new ReactFabricHostComponent(tag, viewConfig, internalInstanceHandle);
    }
  }
  function createPublicTextInstance(internalInstanceHandle, ownerDocument) {
    var ReadOnlyText = getReadOnlyTextClass();
    return new ReadOnlyText(internalInstanceHandle, ownerDocument);
  }
  function getNativeTagFromPublicInstance(publicInstance) {
    return publicInstance.__nativeTag;
  }
  function getNodeFromPublicInstance(publicInstance) {
    if (publicInstance.__internalInstanceHandle == null) {
      return null;
    }
    if (RendererProxy == null) {
      RendererProxy = require(_dependencyMap[5]);
    }
    return RendererProxy.getNodeFromInternalInstanceHandle(publicInstance.__internalInstanceHandle);
  }
  function getInternalInstanceHandleFromPublicInstance(publicInstance) {
    if (publicInstance._internalInstanceHandle != null) {
      return publicInstance._internalInstanceHandle;
    }
    return publicInstance.__internalInstanceHandle;
  }
},155,[104,156,161,171,172,74]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createReactNativeDocument = createReactNativeDocument;
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _HTMLCollection = require(_dependencyMap[6]);
  var _ReactNativeDocumentElementInstanceHandle = require(_dependencyMap[7]);
  var _ReactNativeDocumentInstanceHandle = require(_dependencyMap[8]);
  var _ReactNativeElement = _interopRequireDefault(require(_dependencyMap[9]));
  var _ReadOnlyNode2 = _interopRequireDefault(require(_dependencyMap[10]));
  var _NativeDOM = _interopRequireDefault(require(_dependencyMap[11]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var ReactNativeDocument = exports.default = /*#__PURE__*/function (_ReadOnlyNode) {
    function ReactNativeDocument(rootTag, instanceHandle) {
      var _this;
      (0, _classCallCheck2.default)(this, ReactNativeDocument);
      _this = _callSuper(this, ReactNativeDocument, [instanceHandle, null]);
      _this._documentElement = createDocumentElement(rootTag, _this);
      return _this;
    }
    (0, _inherits2.default)(ReactNativeDocument, _ReadOnlyNode);
    return (0, _createClass2.default)(ReactNativeDocument, [{
      key: "childElementCount",
      get: function () {
        return 1;
      }
    }, {
      key: "children",
      get: function () {
        return (0, _HTMLCollection.createHTMLCollection)([this.documentElement]);
      }
    }, {
      key: "documentElement",
      get: function () {
        return this._documentElement;
      }
    }, {
      key: "firstElementChild",
      get: function () {
        return this.documentElement;
      }
    }, {
      key: "lastElementChild",
      get: function () {
        return this.documentElement;
      }
    }, {
      key: "nodeName",
      get: function () {
        return '#document';
      }
    }, {
      key: "nodeType",
      get: function () {
        return _ReadOnlyNode2.default.DOCUMENT_NODE;
      }
    }, {
      key: "nodeValue",
      get: function () {
        return null;
      }
    }, {
      key: "textContent",
      get: function () {
        return null;
      }
    }]);
  }(_ReadOnlyNode2.default);
  function createDocumentElement(rootTag, ownerDocument) {
    var instanceHandle = (0, _ReactNativeDocumentElementInstanceHandle.createReactNativeDocumentElementInstanceHandle)();
    var rootTagIsNumber = rootTag;
    var viewConfig = null;
    var documentElement = new _ReactNativeElement.default(rootTagIsNumber, viewConfig, instanceHandle, ownerDocument);
    var rootShadowNode = _NativeDOM.default.linkRootNode(rootTag, instanceHandle);
    (0, _ReactNativeDocumentElementInstanceHandle.setNativeElementReferenceForReactNativeDocumentElementInstanceHandle)(instanceHandle, rootShadowNode);
    (0, _ReactNativeDocumentElementInstanceHandle.setPublicInstanceForReactNativeDocumentElementInstanceHandle)(instanceHandle, documentElement);
    return documentElement;
  }
  function createReactNativeDocument(rootTag) {
    var instanceHandle = (0, _ReactNativeDocumentInstanceHandle.createReactNativeDocumentInstanceHandle)(rootTag);
    var document = new ReactNativeDocument(rootTag, instanceHandle);
    return document;
  }
},156,[1,10,11,64,66,69,157,159,160,161,168,170]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createHTMLCollection = createHTMLCollection;
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _ArrayLikeUtils = require(_dependencyMap[5]);
  var _length = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("length");
  var HTMLCollection = exports.default = /*#__PURE__*/function () {
    function HTMLCollection(elements) {
      (0, _classCallCheck2.default)(this, HTMLCollection);
      Object.defineProperty(this, _length, {
        writable: true,
        value: undefined
      });
      for (var i = 0; i < elements.length; i++) {
        Object.defineProperty(this, i, {
          value: elements[i],
          enumerable: true,
          configurable: false,
          writable: false
        });
      }
      (0, _classPrivateFieldLooseBase2.default)(this, _length)[_length] = elements.length;
    }
    return (0, _createClass2.default)(HTMLCollection, [{
      key: "length",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _length)[_length];
      }
    }, {
      key: "item",
      value: function item(index) {
        if (index < 0 || index >= (0, _classPrivateFieldLooseBase2.default)(this, _length)[_length]) {
          return null;
        }
        var arrayLike = this;
        return arrayLike[index];
      }
    }, {
      key: "namedItem",
      value: function namedItem(name) {
        return null;
      }
    }, {
      key: Symbol.iterator,
      value: function () {
        return (0, _ArrayLikeUtils.createValueIterator)(this);
      }
    }]);
  }();
  function createHTMLCollection(elements) {
    return new HTMLCollection(elements);
  }
},157,[1,10,11,72,73,158]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createEntriesIterator = createEntriesIterator;
  exports.createKeyIterator = createKeyIterator;
  exports.createValueIterator = createValueIterator;
  function* createValueIterator(arrayLike) {
    for (var i = 0; i < arrayLike.length; i++) {
      yield arrayLike[i];
    }
  }
  function* createKeyIterator(arrayLike) {
    for (var i = 0; i < arrayLike.length; i++) {
      yield i;
    }
  }
  function* createEntriesIterator(arrayLike) {
    for (var i = 0; i < arrayLike.length; i++) {
      yield [i, arrayLike[i]];
    }
  }
},158,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createReactNativeDocumentElementInstanceHandle = createReactNativeDocumentElementInstanceHandle;
  exports.getNativeElementReferenceFromReactNativeDocumentElementInstanceHandle = getNativeElementReferenceFromReactNativeDocumentElementInstanceHandle;
  exports.getPublicInstanceFromReactNativeDocumentElementInstanceHandle = getPublicInstanceFromReactNativeDocumentElementInstanceHandle;
  exports.isReactNativeDocumentElementInstanceHandle = isReactNativeDocumentElementInstanceHandle;
  exports.setNativeElementReferenceForReactNativeDocumentElementInstanceHandle = setNativeElementReferenceForReactNativeDocumentElementInstanceHandle;
  exports.setPublicInstanceForReactNativeDocumentElementInstanceHandle = setPublicInstanceForReactNativeDocumentElementInstanceHandle;
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var ReactNativeDocumentElementInstanceHandleImpl = /*#__PURE__*/(0, _createClass2.default)(function ReactNativeDocumentElementInstanceHandleImpl() {
    (0, _classCallCheck2.default)(this, ReactNativeDocumentElementInstanceHandleImpl);
  });
  function createReactNativeDocumentElementInstanceHandle() {
    return new ReactNativeDocumentElementInstanceHandleImpl();
  }
  function getNativeElementReferenceFromReactNativeDocumentElementInstanceHandle(instanceHandle) {
    return instanceHandle.nativeElementReference;
  }
  function setNativeElementReferenceForReactNativeDocumentElementInstanceHandle(instanceHandle, nativeElementReference) {
    instanceHandle.nativeElementReference = nativeElementReference;
  }
  function getPublicInstanceFromReactNativeDocumentElementInstanceHandle(instanceHandle) {
    return instanceHandle.publicInstance;
  }
  function setPublicInstanceForReactNativeDocumentElementInstanceHandle(instanceHandle, publicInstance) {
    instanceHandle.publicInstance = publicInstance;
  }
  function isReactNativeDocumentElementInstanceHandle(instanceHandle) {
    return instanceHandle instanceof ReactNativeDocumentElementInstanceHandleImpl;
  }
},159,[1,11,10]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createReactNativeDocumentInstanceHandle = createReactNativeDocumentInstanceHandle;
  exports.getNativeNodeReferenceFromReactNativeDocumentInstanceHandle = getNativeNodeReferenceFromReactNativeDocumentInstanceHandle;
  exports.getPublicInstanceFromReactNativeDocumentInstanceHandle = getPublicInstanceFromReactNativeDocumentInstanceHandle;
  exports.isReactNativeDocumentInstanceHandle = isReactNativeDocumentInstanceHandle;
  var RendererProxy = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function createReactNativeDocumentInstanceHandle(rootTag) {
    return rootTag;
  }
  function getNativeNodeReferenceFromReactNativeDocumentInstanceHandle(instanceHandle) {
    return instanceHandle;
  }
  function getPublicInstanceFromReactNativeDocumentInstanceHandle(instanceHandle) {
    return RendererProxy.getPublicInstanceFromRootTag(Number(instanceHandle));
  }
  function isReactNativeDocumentInstanceHandle(instanceHandle) {
    return typeof instanceHandle === 'number' && instanceHandle % 10 === 1;
  }
},160,[74]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _TextInputState = _interopRequireDefault(require(_dependencyMap[6]));
  var _FabricUIManager = require(_dependencyMap[7]);
  var _ReactNativeAttributePayload = require(_dependencyMap[8]);
  var _warnForStyleProps = _interopRequireDefault(require(_dependencyMap[9]));
  var _NodeInternals = require(_dependencyMap[10]);
  var _ReadOnlyElement2 = _interopRequireWildcard(require(_dependencyMap[11]));
  var _NativeDOM = _interopRequireDefault(require(_dependencyMap[12]));
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[13]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var noop = () => {};
  var ReactNativeElement = /*#__PURE__*/function (_ReadOnlyElement) {
    function ReactNativeElement(tag, viewConfig, instanceHandle, ownerDocument) {
      var _this;
      (0, _classCallCheck2.default)(this, ReactNativeElement);
      _this = _callSuper(this, ReactNativeElement, [instanceHandle, ownerDocument]);
      _this.__nativeTag = tag;
      _this.__internalInstanceHandle = instanceHandle;
      _this.__viewConfig = viewConfig;
      return _this;
    }
    (0, _inherits2.default)(ReactNativeElement, _ReadOnlyElement);
    return (0, _createClass2.default)(ReactNativeElement, [{
      key: "offsetHeight",
      get: function () {
        return Math.round((0, _ReadOnlyElement2.getBoundingClientRect)(this, {
          includeTransform: false
        }).height);
      }
    }, {
      key: "offsetLeft",
      get: function () {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          var offset = _NativeDOM.default.getOffset(node);
          return Math.round(offset[2]);
        }
        return 0;
      }
    }, {
      key: "offsetParent",
      get: function () {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          var offset = _NativeDOM.default.getOffset(node);
          if (offset[0] != null) {
            var offsetParentInstanceHandle = offset[0];
            var offsetParent = (0, _NodeInternals.getPublicInstanceFromInstanceHandle)(offsetParentInstanceHandle);
            var offsetParentElement = offsetParent;
            return offsetParentElement;
          }
        }
        return null;
      }
    }, {
      key: "offsetTop",
      get: function () {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          var offset = _NativeDOM.default.getOffset(node);
          return Math.round(offset[1]);
        }
        return 0;
      }
    }, {
      key: "offsetWidth",
      get: function () {
        return Math.round((0, _ReadOnlyElement2.getBoundingClientRect)(this, {
          includeTransform: false
        }).width);
      }
    }, {
      key: "blur",
      value: function blur() {
        _TextInputState.default.blurTextInput(this);
      }
    }, {
      key: "focus",
      value: function focus() {
        _TextInputState.default.focusTextInput(this);
      }
    }, {
      key: "measure",
      value: function measure(callback) {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          var shadowNode = node;
          (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).measure(shadowNode, callback);
        }
      }
    }, {
      key: "measureInWindow",
      value: function measureInWindow(callback) {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          var shadowNode = node;
          (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).measureInWindow(shadowNode, callback);
        }
      }
    }, {
      key: "measureLayout",
      value: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        if (!(relativeToNativeNode instanceof ReactNativeElement)) {
          return;
        }
        var toStateNode = (0, _NodeInternals.getNativeElementReference)(this);
        var fromStateNode = (0, _NodeInternals.getNativeElementReference)(relativeToNativeNode);
        if (toStateNode != null && fromStateNode != null) {
          var toStateShadowNode = toStateNode;
          var fromStateShadowNode = fromStateNode;
          (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).measureLayout(toStateShadowNode, fromStateShadowNode, onFail != null ? onFail : noop, onSuccess != null ? onSuccess : noop);
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        var updatePayload = (0, _ReactNativeAttributePayload.create)(nativeProps, this.__viewConfig.validAttributes);
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null && updatePayload != null) {
          var shadowNode = node;
          (0, _nullthrows.default)((0, _FabricUIManager.getFabricUIManager)()).setNativeProps(shadowNode, updatePayload);
        }
      }
    }]);
  }(_ReadOnlyElement2.default);
  function replaceConstructorWithoutSuper(ReactNativeElementClass) {
    function ReactNativeElement(tag, viewConfig, internalInstanceHandle, ownerDocument) {
      (0, _NodeInternals.setOwnerDocument)(this, ownerDocument);
      (0, _NodeInternals.setInstanceHandle)(this, internalInstanceHandle);
      this.__nativeTag = tag;
      this.__internalInstanceHandle = internalInstanceHandle;
      this.__viewConfig = viewConfig;
    }
    ReactNativeElement.prototype = ReactNativeElementClass.prototype;
    return ReactNativeElement;
  }
  var _default = exports.default = replaceConstructorWithoutSuper(ReactNativeElement);
},161,[1,10,11,64,66,69,94,127,154,162,163,164,170,128]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = warnForStyleProps;
  function warnForStyleProps(props, validAttributes) {}
},162,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getInstanceHandle = getInstanceHandle;
  exports.getNativeElementReference = getNativeElementReference;
  exports.getNativeNodeReference = getNativeNodeReference;
  exports.getNativeTextReference = getNativeTextReference;
  exports.getOwnerDocument = getOwnerDocument;
  exports.getPublicInstanceFromInstanceHandle = getPublicInstanceFromInstanceHandle;
  exports.setInstanceHandle = setInstanceHandle;
  exports.setOwnerDocument = setOwnerDocument;
  var _ReactNativeDocumentElementInstanceHandle = require(_dependencyMap[0]);
  var _ReactNativeDocumentInstanceHandle = require(_dependencyMap[1]);
  var RendererProxy;
  function getRendererProxy() {
    if (RendererProxy == null) {
      RendererProxy = require(_dependencyMap[2]);
    }
    return RendererProxy;
  }
  var INSTANCE_HANDLE_KEY = Symbol('internalInstanceHandle');
  var OWNER_DOCUMENT_KEY = Symbol('ownerDocument');
  function getInstanceHandle(node) {
    return node[INSTANCE_HANDLE_KEY];
  }
  function setInstanceHandle(node, instanceHandle) {
    node[INSTANCE_HANDLE_KEY] = instanceHandle;
  }
  function getOwnerDocument(node) {
    return node[OWNER_DOCUMENT_KEY] ?? null;
  }
  function setOwnerDocument(node, ownerDocument) {
    node[OWNER_DOCUMENT_KEY] = ownerDocument;
  }
  function getPublicInstanceFromInstanceHandle(instanceHandle) {
    if ((0, _ReactNativeDocumentInstanceHandle.isReactNativeDocumentInstanceHandle)(instanceHandle)) {
      return (0, _ReactNativeDocumentInstanceHandle.getPublicInstanceFromReactNativeDocumentInstanceHandle)(instanceHandle);
    }
    if ((0, _ReactNativeDocumentElementInstanceHandle.isReactNativeDocumentElementInstanceHandle)(instanceHandle)) {
      return (0, _ReactNativeDocumentElementInstanceHandle.getPublicInstanceFromReactNativeDocumentElementInstanceHandle)(instanceHandle);
    }
    var mixedPublicInstance = getRendererProxy().getPublicInstanceFromInternalInstanceHandle(instanceHandle);
    return mixedPublicInstance;
  }
  function getNativeNodeReference(node) {
    var instanceHandle = getInstanceHandle(node);
    if ((0, _ReactNativeDocumentInstanceHandle.isReactNativeDocumentInstanceHandle)(instanceHandle)) {
      return (0, _ReactNativeDocumentInstanceHandle.getNativeNodeReferenceFromReactNativeDocumentInstanceHandle)(instanceHandle);
    }
    if ((0, _ReactNativeDocumentElementInstanceHandle.isReactNativeDocumentElementInstanceHandle)(instanceHandle)) {
      return (0, _ReactNativeDocumentElementInstanceHandle.getNativeElementReferenceFromReactNativeDocumentElementInstanceHandle)(instanceHandle);
    }
    return getRendererProxy().getNodeFromInternalInstanceHandle(instanceHandle);
  }
  function getNativeElementReference(node) {
    var instanceHandle = getInstanceHandle(node);
    return getRendererProxy().getNodeFromInternalInstanceHandle(instanceHandle);
  }
  function getNativeTextReference(node) {
    var instanceHandle = getInstanceHandle(node);
    return getRendererProxy().getNodeFromInternalInstanceHandle(instanceHandle);
  }
},163,[159,160,74]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.getBoundingClientRect = _getBoundingClientRect;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _DOMRect = _interopRequireDefault(require(_dependencyMap[6]));
  var _HTMLCollection = require(_dependencyMap[7]);
  var _NodeInternals = require(_dependencyMap[8]);
  var _Traversal = require(_dependencyMap[9]);
  var _ReadOnlyNode2 = _interopRequireWildcard(require(_dependencyMap[10]));
  var _NativeDOM = _interopRequireDefault(require(_dependencyMap[11]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var ReadOnlyElement = exports.default = /*#__PURE__*/function (_ReadOnlyNode) {
    function ReadOnlyElement() {
      (0, _classCallCheck2.default)(this, ReadOnlyElement);
      return _callSuper(this, ReadOnlyElement, arguments);
    }
    (0, _inherits2.default)(ReadOnlyElement, _ReadOnlyNode);
    return (0, _createClass2.default)(ReadOnlyElement, [{
      key: "childElementCount",
      get: function () {
        return getChildElements(this).length;
      }
    }, {
      key: "children",
      get: function () {
        return (0, _HTMLCollection.createHTMLCollection)(getChildElements(this));
      }
    }, {
      key: "clientHeight",
      get: function () {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          var innerSize = _NativeDOM.default.getInnerSize(node);
          return innerSize[1];
        }
        return 0;
      }
    }, {
      key: "clientLeft",
      get: function () {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          var borderSize = _NativeDOM.default.getBorderWidth(node);
          return borderSize[3];
        }
        return 0;
      }
    }, {
      key: "clientTop",
      get: function () {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          var borderSize = _NativeDOM.default.getBorderWidth(node);
          return borderSize[0];
        }
        return 0;
      }
    }, {
      key: "clientWidth",
      get: function () {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          var innerSize = _NativeDOM.default.getInnerSize(node);
          return innerSize[0];
        }
        return 0;
      }
    }, {
      key: "firstElementChild",
      get: function () {
        var childElements = getChildElements(this);
        if (childElements.length === 0) {
          return null;
        }
        return childElements[0];
      }
    }, {
      key: "id",
      get: function () {
        var instanceHandle = (0, _NodeInternals.getInstanceHandle)(this);
        var props = instanceHandle?.stateNode?.canonical?.currentProps;
        return props?.id ?? props?.nativeID ?? '';
      }
    }, {
      key: "lastElementChild",
      get: function () {
        var childElements = getChildElements(this);
        if (childElements.length === 0) {
          return null;
        }
        return childElements[childElements.length - 1];
      }
    }, {
      key: "nextElementSibling",
      get: function () {
        return (0, _Traversal.getElementSibling)(this, 'next');
      }
    }, {
      key: "nodeName",
      get: function () {
        return this.tagName;
      }
    }, {
      key: "nodeType",
      get: function () {
        return _ReadOnlyNode2.default.ELEMENT_NODE;
      }
    }, {
      key: "nodeValue",
      get: function () {
        return null;
      },
      set: function (value) {}
    }, {
      key: "previousElementSibling",
      get: function () {
        return (0, _Traversal.getElementSibling)(this, 'previous');
      }
    }, {
      key: "scrollHeight",
      get: function () {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          var scrollSize = _NativeDOM.default.getScrollSize(node);
          return scrollSize[1];
        }
        return 0;
      }
    }, {
      key: "scrollLeft",
      get: function () {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          var scrollPosition = _NativeDOM.default.getScrollPosition(node);
          return scrollPosition[0];
        }
        return 0;
      }
    }, {
      key: "scrollTop",
      get: function () {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          var scrollPosition = _NativeDOM.default.getScrollPosition(node);
          return scrollPosition[1];
        }
        return 0;
      }
    }, {
      key: "scrollWidth",
      get: function () {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          var scrollSize = _NativeDOM.default.getScrollSize(node);
          return scrollSize[0];
        }
        return 0;
      }
    }, {
      key: "tagName",
      get: function () {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          return _NativeDOM.default.getTagName(node);
        }
        return '';
      }
    }, {
      key: "textContent",
      get: function () {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          return _NativeDOM.default.getTextContent(node);
        }
        return '';
      }
    }, {
      key: "getBoundingClientRect",
      value: function getBoundingClientRect() {
        return _getBoundingClientRect(this, {
          includeTransform: true
        });
      }
    }, {
      key: "hasPointerCapture",
      value: function hasPointerCapture(pointerId) {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          return _NativeDOM.default.hasPointerCapture(node, pointerId);
        }
        return false;
      }
    }, {
      key: "setPointerCapture",
      value: function setPointerCapture(pointerId) {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          _NativeDOM.default.setPointerCapture(node, pointerId);
        }
      }
    }, {
      key: "releasePointerCapture",
      value: function releasePointerCapture(pointerId) {
        var node = (0, _NodeInternals.getNativeElementReference)(this);
        if (node != null) {
          _NativeDOM.default.releasePointerCapture(node, pointerId);
        }
      }
    }]);
  }(_ReadOnlyNode2.default);
  function getChildElements(node) {
    return (0, _ReadOnlyNode2.getChildNodes)(node).filter(childNode => childNode instanceof ReadOnlyElement);
  }
  function _getBoundingClientRect(element, _ref) {
    var includeTransform = _ref.includeTransform;
    var node = (0, _NodeInternals.getNativeElementReference)(element);
    if (node != null) {
      var rect = _NativeDOM.default.getBoundingClientRect(node, includeTransform);
      return new _DOMRect.default(rect[0], rect[1], rect[2], rect[3]);
    }
    return new _DOMRect.default(0, 0, 0, 0);
  }
},164,[1,10,11,64,66,69,165,157,163,167,168,170]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _DOMRectReadOnly2 = _interopRequireDefault(require(_dependencyMap[6]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var DOMRect = exports.default = /*#__PURE__*/function (_DOMRectReadOnly) {
    function DOMRect() {
      (0, _classCallCheck2.default)(this, DOMRect);
      return _callSuper(this, DOMRect, arguments);
    }
    (0, _inherits2.default)(DOMRect, _DOMRectReadOnly);
    return (0, _createClass2.default)(DOMRect, [{
      key: "x",
      get: function () {
        return this.__getInternalX();
      },
      set: function (x) {
        this.__setInternalX(x);
      }
    }, {
      key: "y",
      get: function () {
        return this.__getInternalY();
      },
      set: function (y) {
        this.__setInternalY(y);
      }
    }, {
      key: "width",
      get: function () {
        return this.__getInternalWidth();
      },
      set: function (width) {
        this.__setInternalWidth(width);
      }
    }, {
      key: "height",
      get: function () {
        return this.__getInternalHeight();
      },
      set: function (height) {
        this.__setInternalHeight(height);
      }
    }], [{
      key: "fromRect",
      value: function fromRect(rect) {
        if (!rect) {
          return new DOMRect();
        }
        return new DOMRect(rect.x, rect.y, rect.width, rect.height);
      }
    }]);
  }(_DOMRectReadOnly2.default);
},165,[1,10,11,64,66,69,166]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[4]));
  function castToNumber(value) {
    return value ? Number(value) : 0;
  }
  var _x = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("x");
  var _y = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("y");
  var _width = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("width");
  var _height = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("height");
  var DOMRectReadOnly = exports.default = /*#__PURE__*/function () {
    function DOMRectReadOnly(x, y, width, height) {
      (0, _classCallCheck2.default)(this, DOMRectReadOnly);
      Object.defineProperty(this, _x, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _y, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _width, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _height, {
        writable: true,
        value: undefined
      });
      this.__setInternalX(x);
      this.__setInternalY(y);
      this.__setInternalWidth(width);
      this.__setInternalHeight(height);
    }
    return (0, _createClass2.default)(DOMRectReadOnly, [{
      key: "x",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _x)[_x];
      }
    }, {
      key: "y",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _y)[_y];
      }
    }, {
      key: "width",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _width)[_width];
      }
    }, {
      key: "height",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _height)[_height];
      }
    }, {
      key: "top",
      get: function () {
        var height = (0, _classPrivateFieldLooseBase2.default)(this, _height)[_height];
        var y = (0, _classPrivateFieldLooseBase2.default)(this, _y)[_y];
        if (height < 0) {
          return y + height;
        }
        return y;
      }
    }, {
      key: "right",
      get: function () {
        var width = (0, _classPrivateFieldLooseBase2.default)(this, _width)[_width];
        var x = (0, _classPrivateFieldLooseBase2.default)(this, _x)[_x];
        if (width < 0) {
          return x;
        }
        return x + width;
      }
    }, {
      key: "bottom",
      get: function () {
        var height = (0, _classPrivateFieldLooseBase2.default)(this, _height)[_height];
        var y = (0, _classPrivateFieldLooseBase2.default)(this, _y)[_y];
        if (height < 0) {
          return y;
        }
        return y + height;
      }
    }, {
      key: "left",
      get: function () {
        var width = (0, _classPrivateFieldLooseBase2.default)(this, _width)[_width];
        var x = (0, _classPrivateFieldLooseBase2.default)(this, _x)[_x];
        if (width < 0) {
          return x + width;
        }
        return x;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var x = this.x,
          y = this.y,
          width = this.width,
          height = this.height,
          top = this.top,
          left = this.left,
          bottom = this.bottom,
          right = this.right;
        return {
          x,
          y,
          width,
          height,
          top,
          left,
          bottom,
          right
        };
      }
    }, {
      key: "__getInternalX",
      value: function __getInternalX() {
        return (0, _classPrivateFieldLooseBase2.default)(this, _x)[_x];
      }
    }, {
      key: "__getInternalY",
      value: function __getInternalY() {
        return (0, _classPrivateFieldLooseBase2.default)(this, _y)[_y];
      }
    }, {
      key: "__getInternalWidth",
      value: function __getInternalWidth() {
        return (0, _classPrivateFieldLooseBase2.default)(this, _width)[_width];
      }
    }, {
      key: "__getInternalHeight",
      value: function __getInternalHeight() {
        return (0, _classPrivateFieldLooseBase2.default)(this, _height)[_height];
      }
    }, {
      key: "__setInternalX",
      value: function __setInternalX(x) {
        (0, _classPrivateFieldLooseBase2.default)(this, _x)[_x] = castToNumber(x);
      }
    }, {
      key: "__setInternalY",
      value: function __setInternalY(y) {
        (0, _classPrivateFieldLooseBase2.default)(this, _y)[_y] = castToNumber(y);
      }
    }, {
      key: "__setInternalWidth",
      value: function __setInternalWidth(width) {
        (0, _classPrivateFieldLooseBase2.default)(this, _width)[_width] = castToNumber(width);
      }
    }, {
      key: "__setInternalHeight",
      value: function __setInternalHeight(height) {
        (0, _classPrivateFieldLooseBase2.default)(this, _height)[_height] = castToNumber(height);
      }
    }], [{
      key: "fromRect",
      value: function fromRect(rect) {
        if (!rect) {
          return new DOMRectReadOnly();
        }
        return new DOMRectReadOnly(rect.x, rect.y, rect.width, rect.height);
      }
    }]);
  }();
},166,[1,10,11,72,73]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getElementSibling = getElementSibling;
  var _ReadOnlyNode = require(_dependencyMap[0]);
  var ReadOnlyElementClass;
  function getElementSibling(node, direction) {
    var parent = node.parentNode;
    if (parent == null) {
      return null;
    }
    var childNodes = (0, _ReadOnlyNode.getChildNodes)(parent);
    var startPosition = childNodes.indexOf(node);
    if (startPosition === -1) {
      return null;
    }
    var increment = direction === 'next' ? 1 : -1;
    var position = startPosition + increment;
    if (ReadOnlyElementClass == null) {
      ReadOnlyElementClass = require(_dependencyMap[1]).default;
    }
    while (childNodes[position] != null && !(childNodes[position] instanceof ReadOnlyElementClass)) {
      position = position + increment;
    }
    return childNodes[position] ?? null;
  }
},167,[168,164]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.getChildNodes = getChildNodes;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[4]));
  var _NodeList = require(_dependencyMap[5]);
  var _NodeInternals = require(_dependencyMap[6]);
  var _NativeDOM = _interopRequireDefault(require(_dependencyMap[7]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var ReadOnlyNode = exports.default = /*#__PURE__*/function () {
    function ReadOnlyNode(instanceHandle, ownerDocument) {
      (0, _classCallCheck2.default)(this, ReadOnlyNode);
      (0, _NodeInternals.setOwnerDocument)(this, ownerDocument);
      (0, _NodeInternals.setInstanceHandle)(this, instanceHandle);
    }
    return (0, _createClass2.default)(ReadOnlyNode, [{
      key: "childNodes",
      get: function () {
        var childNodes = getChildNodes(this);
        return (0, _NodeList.createNodeList)(childNodes);
      }
    }, {
      key: "firstChild",
      get: function () {
        var childNodes = getChildNodes(this);
        if (childNodes.length === 0) {
          return null;
        }
        return childNodes[0];
      }
    }, {
      key: "isConnected",
      get: function () {
        var shadowNode = (0, _NodeInternals.getNativeNodeReference)(this);
        if (shadowNode == null) {
          return false;
        }
        return _NativeDOM.default.isConnected(shadowNode);
      }
    }, {
      key: "lastChild",
      get: function () {
        var childNodes = getChildNodes(this);
        if (childNodes.length === 0) {
          return null;
        }
        return childNodes[childNodes.length - 1];
      }
    }, {
      key: "nextSibling",
      get: function () {
        var _getNodeSiblingsAndPo = getNodeSiblingsAndPosition(this),
          _getNodeSiblingsAndPo2 = (0, _slicedToArray2.default)(_getNodeSiblingsAndPo, 2),
          siblings = _getNodeSiblingsAndPo2[0],
          position = _getNodeSiblingsAndPo2[1];
        if (position === siblings.length - 1) {
          return null;
        }
        return siblings[position + 1];
      }
    }, {
      key: "nodeName",
      get: function () {
        throw new TypeError('`nodeName` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
      }
    }, {
      key: "nodeType",
      get: function () {
        throw new TypeError('`nodeType` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
      }
    }, {
      key: "nodeValue",
      get: function () {
        throw new TypeError('`nodeValue` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
      }
    }, {
      key: "ownerDocument",
      get: function () {
        return (0, _NodeInternals.getOwnerDocument)(this);
      }
    }, {
      key: "parentElement",
      get: function () {
        var parentNode = this.parentNode;
        if (parentNode instanceof getReadOnlyElementClass()) {
          return parentNode;
        }
        return null;
      }
    }, {
      key: "parentNode",
      get: function () {
        var shadowNode = (0, _NodeInternals.getNativeNodeReference)(this);
        if (shadowNode == null) {
          return null;
        }
        var parentInstanceHandle = _NativeDOM.default.getParentNode(shadowNode);
        if (parentInstanceHandle == null) {
          return null;
        }
        return (0, _NodeInternals.getPublicInstanceFromInstanceHandle)(parentInstanceHandle) ?? null;
      }
    }, {
      key: "previousSibling",
      get: function () {
        var _getNodeSiblingsAndPo3 = getNodeSiblingsAndPosition(this),
          _getNodeSiblingsAndPo4 = (0, _slicedToArray2.default)(_getNodeSiblingsAndPo3, 2),
          siblings = _getNodeSiblingsAndPo4[0],
          position = _getNodeSiblingsAndPo4[1];
        if (position === 0) {
          return null;
        }
        return siblings[position - 1];
      }
    }, {
      key: "textContent",
      get: function () {
        throw new TypeError('`textContent` is abstract and must be implemented in a subclass of `ReadOnlyNode`');
      }
    }, {
      key: "compareDocumentPosition",
      value: function compareDocumentPosition(otherNode) {
        if (otherNode === this) {
          return 0;
        }
        var shadowNode = (0, _NodeInternals.getNativeNodeReference)(this);
        var otherShadowNode = (0, _NodeInternals.getNativeNodeReference)(otherNode);
        if (shadowNode == null || otherShadowNode == null) {
          return ReadOnlyNode.DOCUMENT_POSITION_DISCONNECTED;
        }
        return _NativeDOM.default.compareDocumentPosition(shadowNode, otherShadowNode);
      }
    }, {
      key: "contains",
      value: function contains(otherNode) {
        if (otherNode === this) {
          return true;
        }
        var position = this.compareDocumentPosition(otherNode);
        return (position & ReadOnlyNode.DOCUMENT_POSITION_CONTAINED_BY) !== 0;
      }
    }, {
      key: "getRootNode",
      value: function getRootNode() {
        if (ReactNativeFeatureFlags.enableDOMDocumentAPI()) {
          if (this.isConnected) {
            return this.ownerDocument ?? this;
          }
          return this;
        } else {
          var lastKnownParent = this;
          var nextPossibleParent = this.parentNode;
          while (nextPossibleParent != null) {
            lastKnownParent = nextPossibleParent;
            nextPossibleParent = nextPossibleParent.parentNode;
          }
          return lastKnownParent;
        }
      }
    }, {
      key: "hasChildNodes",
      value: function hasChildNodes() {
        return getChildNodes(this).length > 0;
      }
    }]);
  }();
  ReadOnlyNode.ELEMENT_NODE = 1;
  ReadOnlyNode.ATTRIBUTE_NODE = 2;
  ReadOnlyNode.TEXT_NODE = 3;
  ReadOnlyNode.CDATA_SECTION_NODE = 4;
  ReadOnlyNode.ENTITY_REFERENCE_NODE = 5;
  ReadOnlyNode.ENTITY_NODE = 6;
  ReadOnlyNode.PROCESSING_INSTRUCTION_NODE = 7;
  ReadOnlyNode.COMMENT_NODE = 8;
  ReadOnlyNode.DOCUMENT_NODE = 9;
  ReadOnlyNode.DOCUMENT_TYPE_NODE = 10;
  ReadOnlyNode.DOCUMENT_FRAGMENT_NODE = 11;
  ReadOnlyNode.NOTATION_NODE = 12;
  ReadOnlyNode.DOCUMENT_POSITION_DISCONNECTED = 1;
  ReadOnlyNode.DOCUMENT_POSITION_PRECEDING = 2;
  ReadOnlyNode.DOCUMENT_POSITION_FOLLOWING = 4;
  ReadOnlyNode.DOCUMENT_POSITION_CONTAINS = 8;
  ReadOnlyNode.DOCUMENT_POSITION_CONTAINED_BY = 16;
  ReadOnlyNode.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;
  function getChildNodes(node) {
    var shadowNode = (0, _NodeInternals.getNativeNodeReference)(node);
    if (shadowNode == null) {
      return [];
    }
    var childNodeInstanceHandles = _NativeDOM.default.getChildNodes(shadowNode);
    return childNodeInstanceHandles.map(instanceHandle => (0, _NodeInternals.getPublicInstanceFromInstanceHandle)(instanceHandle)).filter(Boolean);
  }
  function getNodeSiblingsAndPosition(node) {
    var parent = node.parentNode;
    if (parent == null) {
      return [[node], 0];
    }
    var siblings = getChildNodes(parent);
    var position = siblings.indexOf(node);
    if (position === -1) {
      throw new TypeError("Missing node in parent's child node list");
    }
    return [siblings, position];
  }
  var ReadOnlyElementClass;
  function getReadOnlyElementClass() {
    if (ReadOnlyElementClass == null) {
      ReadOnlyElementClass = require(_dependencyMap[8]).default;
    }
    return ReadOnlyElementClass;
  }
},168,[1,29,10,11,104,169,163,170,164]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createNodeList = createNodeList;
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _ArrayLikeUtils = require(_dependencyMap[5]);
  var _length = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("length");
  var NodeList = exports.default = /*#__PURE__*/function () {
    function NodeList(elements) {
      (0, _classCallCheck2.default)(this, NodeList);
      Object.defineProperty(this, _length, {
        writable: true,
        value: undefined
      });
      for (var i = 0; i < elements.length; i++) {
        Object.defineProperty(this, i, {
          value: elements[i],
          writable: false
        });
      }
      (0, _classPrivateFieldLooseBase2.default)(this, _length)[_length] = elements.length;
    }
    return (0, _createClass2.default)(NodeList, [{
      key: "length",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _length)[_length];
      }
    }, {
      key: "item",
      value: function item(index) {
        if (index < 0 || index >= (0, _classPrivateFieldLooseBase2.default)(this, _length)[_length]) {
          return null;
        }
        var arrayLike = this;
        return arrayLike[index];
      }
    }, {
      key: "entries",
      value: function entries() {
        return (0, _ArrayLikeUtils.createEntriesIterator)(this);
      }
    }, {
      key: "forEach",
      value: function forEach(callbackFn, thisArg) {
        var arrayLike = this;
        for (var _index = 0; _index < (0, _classPrivateFieldLooseBase2.default)(this, _length)[_length]; _index++) {
          if (thisArg == null) {
            callbackFn(arrayLike[_index], _index, this);
          } else {
            callbackFn.call(thisArg, arrayLike[_index], _index, this);
          }
        }
      }
    }, {
      key: "keys",
      value: function keys() {
        return (0, _ArrayLikeUtils.createKeyIterator)(this);
      }
    }, {
      key: "values",
      value: function values() {
        return (0, _ArrayLikeUtils.createValueIterator)(this);
      }
    }, {
      key: Symbol.iterator,
      value: function () {
        return (0, _ArrayLikeUtils.createValueIterator)(this);
      }
    }]);
  }();
  function createNodeList(elements) {
    return new NodeList(elements);
  }
},169,[1,10,11,72,73,158]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[2]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var RawNativeDOM = TurboModuleRegistry.get('NativeDOMCxx');
  var NativeDOM = {
    compareDocumentPosition(nativeNodeReference, otherNativeNodeReference) {
      return (0, _nullthrows.default)(RawNativeDOM).compareDocumentPosition(nativeNodeReference, otherNativeNodeReference);
    },
    getChildNodes(nativeNodeReference) {
      return (0, _nullthrows.default)(RawNativeDOM).getChildNodes(nativeNodeReference);
    },
    getParentNode(nativeNodeReference) {
      return (0, _nullthrows.default)(RawNativeDOM).getParentNode(nativeNodeReference);
    },
    isConnected(nativeNodeReference) {
      return (0, _nullthrows.default)(RawNativeDOM).isConnected(nativeNodeReference);
    },
    getBorderWidth(nativeNodeReference) {
      return (0, _nullthrows.default)(RawNativeDOM).getBorderWidth(nativeNodeReference);
    },
    getBoundingClientRect(nativeNodeReference, includeTransform) {
      return (0, _nullthrows.default)(RawNativeDOM).getBoundingClientRect(nativeNodeReference, includeTransform);
    },
    getInnerSize(nativeNodeReference) {
      return (0, _nullthrows.default)(RawNativeDOM).getInnerSize(nativeNodeReference);
    },
    getScrollPosition(nativeNodeReference) {
      return (0, _nullthrows.default)(RawNativeDOM).getScrollPosition(nativeNodeReference);
    },
    getScrollSize(nativeNodeReference) {
      return (0, _nullthrows.default)(RawNativeDOM).getScrollSize(nativeNodeReference);
    },
    getTagName(nativeNodeReference) {
      return (0, _nullthrows.default)(RawNativeDOM).getTagName(nativeNodeReference);
    },
    getTextContent(nativeNodeReference) {
      return (0, _nullthrows.default)(RawNativeDOM).getTextContent(nativeNodeReference);
    },
    hasPointerCapture(nativeNodeReference, pointerId) {
      return (0, _nullthrows.default)(RawNativeDOM).hasPointerCapture(nativeNodeReference, pointerId);
    },
    releasePointerCapture(nativeNodeReference, pointerId) {
      return (0, _nullthrows.default)(RawNativeDOM).releasePointerCapture(nativeNodeReference, pointerId);
    },
    setPointerCapture(nativeNodeReference, pointerId) {
      return (0, _nullthrows.default)(RawNativeDOM).setPointerCapture(nativeNodeReference, pointerId);
    },
    getOffset(nativeNodeReference) {
      return (0, _nullthrows.default)(RawNativeDOM).getOffset(nativeNodeReference);
    },
    linkRootNode(rootTag, instanceHandle) {
      return (0, _nullthrows.default)(RawNativeDOM?.linkRootNode)(rootTag, instanceHandle);
    },
    measure(nativeNodeReference, callback) {
      return (0, _nullthrows.default)(RawNativeDOM).measure(nativeNodeReference, callback);
    },
    measureInWindow(nativeNodeReference, callback) {
      return (0, _nullthrows.default)(RawNativeDOM).measureInWindow(nativeNodeReference, callback);
    },
    measureLayout(nativeNodeReference, relativeNode, onFail, onSuccess) {
      return (0, _nullthrows.default)(RawNativeDOM).measureLayout(nativeNodeReference, relativeNode, onFail, onSuccess);
    }
  };
  var _default = exports.default = NativeDOM;
},170,[1,41,128]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _TextInputState = _interopRequireDefault(require(_dependencyMap[3]));
  var _RendererProxy = require(_dependencyMap[4]);
  var _FabricUIManager = require(_dependencyMap[5]);
  var _ReactNativeAttributePayload = require(_dependencyMap[6]);
  var _warnForStyleProps = _interopRequireDefault(require(_dependencyMap[7]));
  var _nullthrows2 = _interopRequireDefault(require(_dependencyMap[8]));
  var _nullthrows = (0, _nullthrows2.default)((0, _FabricUIManager.getFabricUIManager)()),
    fabricMeasure = _nullthrows.measure,
    fabricMeasureInWindow = _nullthrows.measureInWindow,
    fabricMeasureLayout = _nullthrows.measureLayout,
    fabricGetBoundingClientRect = _nullthrows.getBoundingClientRect,
    _setNativeProps = _nullthrows.setNativeProps;
  var noop = () => {};
  var ReactFabricHostComponent = exports.default = /*#__PURE__*/function () {
    function ReactFabricHostComponent(tag, viewConfig, internalInstanceHandle) {
      (0, _classCallCheck2.default)(this, ReactFabricHostComponent);
      this.__nativeTag = tag;
      this._viewConfig = viewConfig;
      this.__internalInstanceHandle = internalInstanceHandle;
    }
    return (0, _createClass2.default)(ReactFabricHostComponent, [{
      key: "blur",
      value: function blur() {
        _TextInputState.default.blurTextInput(this);
      }
    }, {
      key: "focus",
      value: function focus() {
        _TextInputState.default.focusTextInput(this);
      }
    }, {
      key: "measure",
      value: function measure(callback) {
        var node = (0, _RendererProxy.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        if (node != null) {
          fabricMeasure(node, callback);
        }
      }
    }, {
      key: "measureInWindow",
      value: function measureInWindow(callback) {
        var node = (0, _RendererProxy.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        if (node != null) {
          fabricMeasureInWindow(node, callback);
        }
      }
    }, {
      key: "measureLayout",
      value: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        if (typeof relativeToNativeNode === 'number' || !(relativeToNativeNode instanceof ReactFabricHostComponent)) {
          return;
        }
        var toStateNode = (0, _RendererProxy.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        var fromStateNode = (0, _RendererProxy.getNodeFromInternalInstanceHandle)(relativeToNativeNode.__internalInstanceHandle);
        if (toStateNode != null && fromStateNode != null) {
          fabricMeasureLayout(toStateNode, fromStateNode, onFail != null ? onFail : noop, onSuccess != null ? onSuccess : noop);
        }
      }
    }, {
      key: "unstable_getBoundingClientRect",
      value: function unstable_getBoundingClientRect() {
        var node = (0, _RendererProxy.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        if (node != null) {
          var rect = fabricGetBoundingClientRect(node, true);
          if (rect) {
            return new DOMRect(rect[0], rect[1], rect[2], rect[3]);
          }
        }
        return new DOMRect(0, 0, 0, 0);
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        var updatePayload = (0, _ReactNativeAttributePayload.create)(nativeProps, this._viewConfig.validAttributes);
        var node = (0, _RendererProxy.getNodeFromInternalInstanceHandle)(this.__internalInstanceHandle);
        if (node != null && updatePayload != null) {
          _setNativeProps(node, updatePayload);
        }
      }
    }]);
  }();
},171,[1,10,11,94,74,127,154,162,128]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _ReadOnlyCharacterData = _interopRequireDefault(require(_dependencyMap[6]));
  var _ReadOnlyNode = _interopRequireDefault(require(_dependencyMap[7]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var ReadOnlyText = exports.default = /*#__PURE__*/function (_ReadOnlyCharacterDat) {
    function ReadOnlyText() {
      (0, _classCallCheck2.default)(this, ReadOnlyText);
      return _callSuper(this, ReadOnlyText, arguments);
    }
    (0, _inherits2.default)(ReadOnlyText, _ReadOnlyCharacterDat);
    return (0, _createClass2.default)(ReadOnlyText, [{
      key: "nodeName",
      get: function () {
        return '#text';
      }
    }, {
      key: "nodeType",
      get: function () {
        return _ReadOnlyNode.default.TEXT_NODE;
      }
    }]);
  }(_ReadOnlyCharacterData.default);
},172,[1,10,11,64,66,69,173,168]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _NodeInternals = require(_dependencyMap[6]);
  var _Traversal = require(_dependencyMap[7]);
  var _ReadOnlyNode2 = _interopRequireDefault(require(_dependencyMap[8]));
  var _NativeDOM = _interopRequireDefault(require(_dependencyMap[9]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var ReadOnlyCharacterData = exports.default = /*#__PURE__*/function (_ReadOnlyNode) {
    function ReadOnlyCharacterData() {
      (0, _classCallCheck2.default)(this, ReadOnlyCharacterData);
      return _callSuper(this, ReadOnlyCharacterData, arguments);
    }
    (0, _inherits2.default)(ReadOnlyCharacterData, _ReadOnlyNode);
    return (0, _createClass2.default)(ReadOnlyCharacterData, [{
      key: "nextElementSibling",
      get: function () {
        return (0, _Traversal.getElementSibling)(this, 'next');
      }
    }, {
      key: "previousElementSibling",
      get: function () {
        return (0, _Traversal.getElementSibling)(this, 'previous');
      }
    }, {
      key: "data",
      get: function () {
        var node = (0, _NodeInternals.getNativeTextReference)(this);
        if (node != null) {
          return _NativeDOM.default.getTextContent(node);
        }
        return '';
      }
    }, {
      key: "length",
      get: function () {
        return this.data.length;
      }
    }, {
      key: "textContent",
      get: function () {
        return this.data;
      }
    }, {
      key: "nodeValue",
      get: function () {
        return this.data;
      }
    }, {
      key: "substringData",
      value: function substringData(offset, count) {
        var data = this.data;
        if (offset < 0) {
          throw new TypeError(`Failed to execute 'substringData' on 'CharacterData': The offset ${offset} is negative.`);
        }
        if (offset > data.length) {
          throw new TypeError(`Failed to execute 'substringData' on 'CharacterData': The offset ${offset} is greater than the node's length (${data.length}).`);
        }
        var adjustedCount = count < 0 || count > data.length ? data.length : count;
        return data.slice(offset, offset + adjustedCount);
      }
    }]);
  }(_ReadOnlyNode2.default);
},173,[1,10,11,64,66,69,163,167,168,170]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @nolint
   * @preventMunge
   * @generated SignedSource<<558b9dfa7f6550519be8c208c6bc0eef>>
   *
   * This file was sync'd from the facebook/react repository.
   */

  "use strict";

  require(_dependencyMap[0]);
  var ReactNativePrivateInterface = require(_dependencyMap[1]),
    React = require(_dependencyMap[2]),
    Scheduler = require(_dependencyMap[3]),
    isArrayImpl = Array.isArray,
    ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
    REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"),
    REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
    REACT_PORTAL_TYPE = Symbol.for("react.portal"),
    REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
    REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
    REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
    REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
    REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
    REACT_CONTEXT_TYPE = Symbol.for("react.context"),
    REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
    REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
    REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
    REACT_MEMO_TYPE = Symbol.for("react.memo"),
    REACT_LAZY_TYPE = Symbol.for("react.lazy");
  Symbol.for("react.scope");
  Symbol.for("react.debug_trace_mode");
  var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
  Symbol.for("react.legacy_hidden");
  Symbol.for("react.tracing_marker");
  var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel"),
    MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }
  var assign = Object.assign,
    prefix,
    suffix;
  function describeBuiltInComponentFrame(name) {
    if (undefined === prefix) try {
      throw Error();
    } catch (x) {
      var match = x.stack.trim().match(/\n( *(at )?)/);
      prefix = match && match[1] || "";
      suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
    }
    return "\n" + prefix + name + suffix;
  }
  var reentry = false;
  function describeNativeComponentFrame(fn, construct) {
    if (!fn || reentry) return "";
    reentry = true;
    var previousPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = undefined;
    try {
      var RunInRootFrame = {
        DetermineComponentFrameRoot: function () {
          try {
            if (construct) {
              var Fake = function () {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function () {
                  throw Error();
                }
              });
              if ("object" === typeof Reflect && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  var control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x$0) {
                  control = x$0;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x$1) {
                control = x$1;
              }
              (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function () {});
            }
          } catch (sample) {
            if (sample && control && "string" === typeof sample.stack) return [sample.stack, control.stack];
          }
          return [null, null];
        }
      };
      RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
      var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
      namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", {
        value: "DetermineComponentFrameRoot"
      });
      var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),
        sampleStack = _RunInRootFrame$Deter[0],
        controlStack = _RunInRootFrame$Deter[1];
      if (sampleStack && controlStack) {
        var sampleLines = sampleStack.split("\n"),
          controlLines = controlStack.split("\n");
        for (namePropDescriptor = RunInRootFrame = 0; RunInRootFrame < sampleLines.length && !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot");) RunInRootFrame++;
        for (; namePropDescriptor < controlLines.length && !controlLines[namePropDescriptor].includes("DetermineComponentFrameRoot");) namePropDescriptor++;
        if (RunInRootFrame === sampleLines.length || namePropDescriptor === controlLines.length) for (RunInRootFrame = sampleLines.length - 1, namePropDescriptor = controlLines.length - 1; 1 <= RunInRootFrame && 0 <= namePropDescriptor && sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor];) namePropDescriptor--;
        for (; 1 <= RunInRootFrame && 0 <= namePropDescriptor; RunInRootFrame--, namePropDescriptor--) if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
          if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
            do if (RunInRootFrame--, namePropDescriptor--, 0 > namePropDescriptor || sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
              var frame = "\n" + sampleLines[RunInRootFrame].replace(" at new ", " at ");
              fn.displayName && frame.includes("<anonymous>") && (frame = frame.replace("<anonymous>", fn.displayName));
              return frame;
            } while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
          }
          break;
        }
      }
    } finally {
      reentry = false, Error.prepareStackTrace = previousPrepareStackTrace;
    }
    return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(previousPrepareStackTrace) : "";
  }
  function describeFiber(fiber) {
    switch (fiber.tag) {
      case 26:
      case 27:
      case 5:
        return describeBuiltInComponentFrame(fiber.type);
      case 16:
        return describeBuiltInComponentFrame("Lazy");
      case 13:
        return describeBuiltInComponentFrame("Suspense");
      case 19:
        return describeBuiltInComponentFrame("SuspenseList");
      case 0:
      case 15:
        return fiber = describeNativeComponentFrame(fiber.type, false), fiber;
      case 11:
        return fiber = describeNativeComponentFrame(fiber.type.render, false), fiber;
      case 1:
        return fiber = describeNativeComponentFrame(fiber.type, true), fiber;
      default:
        return "";
    }
  }
  function getStackByFiberInDevAndProd(workInProgress) {
    try {
      var info = "";
      do info += describeFiber(workInProgress), workInProgress = workInProgress.return; while (workInProgress);
      return info;
    } catch (x) {
      return "\nError generating stack: " + x.message + "\n" + x.stack;
    }
  }
  var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
  function getComponentNameFromType(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
    if ("string" === typeof type) return type;
    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";
      case REACT_PORTAL_TYPE:
        return "Portal";
      case REACT_PROFILER_TYPE:
        return "Profiler";
      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";
      case REACT_SUSPENSE_TYPE:
        return "Suspense";
      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
    }
    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return (type.displayName || "Context") + ".Provider";
      case REACT_CONSUMER_TYPE:
        return (type._context.displayName || "Context") + ".Consumer";
      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        type = type.displayName;
        type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
        return type;
      case REACT_MEMO_TYPE:
        return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
      case REACT_LAZY_TYPE:
        innerType = type._payload;
        type = type._init;
        try {
          return getComponentNameFromType(type(innerType));
        } catch (x) {}
    }
    return null;
  }
  var hasError = false,
    caughtError = null,
    getFiberCurrentPropsFromNode$1 = null,
    getInstanceFromNode$1 = null,
    getNodeFromInstance$1 = null;
  function executeDispatch(event, listener, inst) {
    event.currentTarget = getNodeFromInstance$1(inst);
    try {
      listener(event);
    } catch (error) {
      hasError || (hasError = true, caughtError = error);
    }
    event.currentTarget = null;
  }
  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
      dispatchInstance = event._dispatchInstances;
    if (isArrayImpl(dispatchListener)) throw Error("Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance$1(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }
  function functionThatReturnsTrue() {
    return true;
  }
  function functionThatReturnsFalse() {
    return false;
  }
  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    this._dispatchInstances = this._dispatchListeners = null;
    dispatchConfig = this.constructor.Interface;
    for (var propName in dispatchConfig) dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }
  assign(SyntheticEvent.prototype, {
    preventDefault: function () {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function () {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function () {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function () {
      var Interface = this.constructor.Interface,
        propName;
      for (propName in Interface) this[propName] = null;
      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });
  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function () {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function (event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };
  SyntheticEvent.extend = function (Interface) {
    function E() {}
    function Class() {
      return Super.apply(this, arguments);
    }
    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();
    assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = assign({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };
  addEventPoolingTo(SyntheticEvent);
  function createOrGetPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }
    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }
  function releasePooledEvent(event) {
    if (!(event instanceof this)) throw Error("Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }
  function addEventPoolingTo(EventConstructor) {
    EventConstructor.getPooled = createOrGetPooledEvent;
    EventConstructor.eventPool = [];
    EventConstructor.release = releasePooledEvent;
  }
  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function () {
      return null;
    }
  });
  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }
  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }
  var startDependencies = ["topTouchStart"],
    moveDependencies = ["topTouchMove"],
    endDependencies = ["topTouchCancel", "topTouchEnd"],
    touchBank = [],
    touchHistory = {
      touchBank: touchBank,
      numberActiveTouches: 0,
      indexOfSingleActiveTouch: -1,
      mostRecentTimeStamp: 0
    };
  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }
  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw Error("Touch object is missing identifier.");
    return _ref;
  }
  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
      touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }
  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }
  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }
  var instrumentationCallback,
    ResponderTouchHistoryStore = {
      instrument: function (callback) {
        instrumentationCallback = callback;
      },
      recordTouchTrack: function (topLevelType, nativeEvent) {
        null != instrumentationCallback && instrumentationCallback(topLevelType, nativeEvent);
        if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      },
      touchHistory: touchHistory
    };
  function accumulate(current, next) {
    if (null == next) throw Error("Accumulated items must not be null or undefined.");
    return null == current ? next : isArrayImpl(current) ? current.concat(next) : isArrayImpl(next) ? [current].concat(next) : [current, next];
  }
  function accumulateInto(current, next) {
    if (null == next) throw Error("Accumulated items must not be null or undefined.");
    if (null == current) return next;
    if (isArrayImpl(current)) {
      if (isArrayImpl(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }
    return isArrayImpl(next) ? [current].concat(next) : [current, next];
  }
  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }
  var responderInst = null,
    trackedTouchCount = 0;
  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }
  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  };
  function getParent$1(inst) {
    do inst = inst.return; while (inst && 5 !== inst.tag);
    return inst ? inst : null;
  }
  function traverseTwoPhase$1(inst, fn, arg) {
    for (var path = []; inst;) path.push(inst), inst = getParent$1(inst);
    for (inst = path.length; 0 < inst--;) fn(path[inst], "captured", arg);
    for (inst = 0; inst < path.length; inst++) fn(path[inst], "bubbled", arg);
  }
  function getListener$1(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode$1(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
  }
  function accumulateDirectionalDispatches$1(inst, phase, event) {
    if (phase = getListener$1(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
  function accumulateDirectDispatchesSingle$1(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;
      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener$1(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }
  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent$1(targetInst) : null;
      traverseTwoPhase$1(targetInst, accumulateDirectionalDispatches$1, event);
    }
  }
  function accumulateTwoPhaseDispatchesSingle$1(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase$1(event._targetInst, accumulateDirectionalDispatches$1, event);
  }
  var ResponderEventPlugin = {
      _getResponder: function () {
        return responderInst;
      },
      eventTypes: eventTypes,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return null;
        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
        if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
          var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
          if (responderInst) b: {
            var JSCompiler_temp = responderInst;
            for (var depthA = 0, tempA = JSCompiler_temp; tempA; tempA = getParent$1(tempA)) depthA++;
            tempA = 0;
            for (var tempB = targetInst; tempB; tempB = getParent$1(tempB)) tempA++;
            for (; 0 < depthA - tempA;) JSCompiler_temp = getParent$1(JSCompiler_temp), depthA--;
            for (; 0 < tempA - depthA;) targetInst = getParent$1(targetInst), tempA--;
            for (; depthA--;) {
              if (JSCompiler_temp === targetInst || JSCompiler_temp === targetInst.alternate) break b;
              JSCompiler_temp = getParent$1(JSCompiler_temp);
              targetInst = getParent$1(targetInst);
            }
            JSCompiler_temp = null;
          } else JSCompiler_temp = targetInst;
          targetInst = JSCompiler_temp;
          JSCompiler_temp = targetInst === responderInst;
          shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, targetInst, nativeEvent, nativeEventTarget);
          shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory;
          JSCompiler_temp ? forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingle$1);
          b: {
            JSCompiler_temp = shouldSetEventType._dispatchListeners;
            targetInst = shouldSetEventType._dispatchInstances;
            if (isArrayImpl(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !shouldSetEventType.isPropagationStopped(); depthA++) {
              if (JSCompiler_temp[depthA](shouldSetEventType, targetInst[depthA])) {
                JSCompiler_temp = targetInst[depthA];
                break b;
              }
            } else if (JSCompiler_temp && JSCompiler_temp(shouldSetEventType, targetInst)) {
              JSCompiler_temp = targetInst;
              break b;
            }
            JSCompiler_temp = null;
          }
          shouldSetEventType._dispatchInstances = null;
          shouldSetEventType._dispatchListeners = null;
          shouldSetEventType.isPersistent() || shouldSetEventType.constructor.release(shouldSetEventType);
          if (JSCompiler_temp && JSCompiler_temp !== responderInst) {
            if (shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), targetInst = true === executeDirectDispatch(shouldSetEventType), responderInst) {
              if (depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), depthA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(depthA, accumulateDirectDispatchesSingle$1), tempA = !depthA._dispatchListeners || executeDirectDispatch(depthA), depthA.isPersistent() || depthA.constructor.release(depthA), tempA) {
                depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
                depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
                forEachAccumulated(depthA, accumulateDirectDispatchesSingle$1);
                var JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [shouldSetEventType, depthA]);
                changeResponder(JSCompiler_temp, targetInst);
              } else shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
            } else JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType), changeResponder(JSCompiler_temp, targetInst);
          } else JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = null;
        shouldSetEventType = responderInst && isStartish(topLevelType);
        JSCompiler_temp = responderInst && isMoveish(topLevelType);
        targetInst = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
        if (shouldSetEventType = shouldSetEventType ? eventTypes.responderStart : JSCompiler_temp ? eventTypes.responderMove : targetInst ? eventTypes.responderEnd : null) shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, responderInst, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
        shouldSetEventType = responderInst && "topTouchCancel" === topLevelType;
        if (topLevelType = responderInst && !shouldSetEventType && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
          if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (JSCompiler_temp = 0; JSCompiler_temp < topLevelType.length; JSCompiler_temp++) if (targetInst = topLevelType[JSCompiler_temp].target, null !== targetInst && undefined !== targetInst && 0 !== targetInst) {
            depthA = getInstanceFromNode$1(targetInst);
            b: {
              for (targetInst = responderInst; depthA;) {
                if (targetInst === depthA || targetInst === depthA.alternate) {
                  targetInst = true;
                  break b;
                }
                depthA = getParent$1(depthA);
              }
              targetInst = false;
            }
            if (targetInst) {
              topLevelType = false;
              break a;
            }
          }
          topLevelType = true;
        }
        if (topLevelType = shouldSetEventType ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, nativeEvent), changeResponder(null);
        return JSCompiler_temp$jscomp$0;
      },
      GlobalResponderHandler: null,
      injection: {
        injectGlobalResponderHandler: function (GlobalResponderHandler) {
          ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        }
      }
    },
    eventPluginOrder = null,
    namesToPlugins = {};
  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
        pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (-1 >= pluginIndex) throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + (pluginName + "`."));
      if (!plugins[pluginIndex]) {
        if (!pluginModule.extractEvents) throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + (pluginName + "` does not."));
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;
        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName];
          if (eventNameDispatchConfigs.hasOwnProperty(eventName)) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + (eventName + "`."));
          eventNameDispatchConfigs[eventName] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule);
            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;
          if (!JSCompiler_inline_result) throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
        }
      }
    }
  }
  function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + (registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
  }
  var plugins = [],
    eventNameDispatchConfigs = {},
    registrationNameModules = {};
  function getListener(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode$1(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
  }
  var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,
    customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
  function traverseTwoPhase(inst, fn, arg, skipBubbling) {
    for (var path = []; inst;) {
      path.push(inst);
      do inst = inst.return; while (inst && 5 !== inst.tag);
      inst = inst ? inst : null;
    }
    for (inst = path.length; 0 < inst--;) fn(path[inst], "captured", arg);
    if (skipBubbling) fn(path[0], "bubbled", arg);else for (inst = 0; inst < path.length; inst++) fn(path[inst], "bubbled", arg);
  }
  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event, false);
  }
  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;
      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }
  if (eventPluginOrder) throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
  eventPluginOrder = Array.prototype.slice.call(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  recomputePluginOrdering();
  var injectedNamesToPlugins$jscomp$inline_281 = {
      ResponderEventPlugin: ResponderEventPlugin,
      ReactNativeBridgeEventPlugin: {
        eventTypes: {},
        extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (null == targetInst) return null;
          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType];
          if (!bubbleDispatchConfig && !directDispatchConfig) throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
          topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
          if (bubbleDispatchConfig) null != topLevelType && null != topLevelType.dispatchConfig.phasedRegistrationNames && topLevelType.dispatchConfig.phasedRegistrationNames.skipBubbling ? topLevelType && topLevelType.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(topLevelType._targetInst, accumulateDirectionalDispatches, topLevelType, true) : forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
          return topLevelType;
        }
      }
    },
    isOrderingDirty$jscomp$inline_282 = false,
    pluginName$jscomp$inline_283;
  for (pluginName$jscomp$inline_283 in injectedNamesToPlugins$jscomp$inline_281) if (injectedNamesToPlugins$jscomp$inline_281.hasOwnProperty(pluginName$jscomp$inline_283)) {
    var pluginModule$jscomp$inline_284 = injectedNamesToPlugins$jscomp$inline_281[pluginName$jscomp$inline_283];
    if (!namesToPlugins.hasOwnProperty(pluginName$jscomp$inline_283) || namesToPlugins[pluginName$jscomp$inline_283] !== pluginModule$jscomp$inline_284) {
      if (namesToPlugins[pluginName$jscomp$inline_283]) throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + (pluginName$jscomp$inline_283 + "`."));
      namesToPlugins[pluginName$jscomp$inline_283] = pluginModule$jscomp$inline_284;
      isOrderingDirty$jscomp$inline_282 = true;
    }
  }
  isOrderingDirty$jscomp$inline_282 && recomputePluginOrdering();
  var emptyObject = {},
    removedKeys = null,
    removedKeyCount = 0,
    deepDifferOptions = {
      unsafelyIgnoreFunctions: true
    };
  function defaultDiffer(prevProp, nextProp) {
    return "object" !== typeof nextProp || null === nextProp ? true : ReactNativePrivateInterface.deepDiffer(prevProp, nextProp, deepDifferOptions);
  }
  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (isArrayImpl(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);else if (node && 0 < removedKeyCount) for (i in removedKeys) if (removedKeys[i]) {
      var nextProp = node[i];
      if (undefined !== nextProp) {
        var attributeConfig = validAttributes[i];
        if (attributeConfig) {
          "function" === typeof nextProp && (nextProp = true);
          "undefined" === typeof nextProp && (nextProp = null);
          if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
          removedKeys[i] = false;
          removedKeyCount--;
        }
      }
    }
  }
  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!isArrayImpl(prevProp) && !isArrayImpl(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
    if (isArrayImpl(prevProp) && isArrayImpl(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
        i;
      for (i = 0; i < minLength; i++) updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      for (; i < prevProp.length; i++) updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      for (; i < nextProp.length; i++) updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      return updatePayload;
    }
    return isArrayImpl(prevProp) ? diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
  }
  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!isArrayImpl(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);
    for (var i = 0; i < nextProp.length; i++) updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    return updatePayload;
  }
  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!isArrayImpl(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);
    for (var i = 0; i < prevProp.length; i++) updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    return updatePayload;
  }
  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;
    for (propKey in nextProps) if (attributeConfig = validAttributes[propKey]) {
      var prevProp = prevProps[propKey];
      var nextProp = nextProps[propKey];
      "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
      "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
      removedKeys && (removedKeys[propKey] = false);
      if (updatePayload && undefined !== updatePayload[propKey]) {
        if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
          if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
        }
      } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
        if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
      } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }
    for (var propKey$5 in prevProps) undefined === nextProps[propKey$5] && (!(attributeConfig = validAttributes[propKey$5]) || updatePayload && undefined !== updatePayload[propKey$5] || (prevProp = prevProps[propKey$5], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey$5] = null, removedKeys || (removedKeys = {}), removedKeys[propKey$5] || (removedKeys[propKey$5] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    return updatePayload;
  }
  function fastAddProperties(payload, props, validAttributes) {
    if (isArrayImpl(props)) {
      for (var i = 0; i < props.length; i++) payload = fastAddProperties(payload, props[i], validAttributes);
      return payload;
    }
    for (i in props) {
      var prop = props[i],
        attributeConfig = validAttributes[i];
      if (null != attributeConfig) {
        var newValue = undefined;
        if (undefined === prop) {
          if (payload && undefined !== payload[i]) newValue = null;else continue;
        } else "function" === typeof prop ? newValue = true : "object" !== typeof attributeConfig ? newValue = prop : "function" === typeof attributeConfig.process ? newValue = attributeConfig.process(prop) : "function" === typeof attributeConfig.diff && (newValue = prop);
        undefined !== newValue ? (payload || (payload = {}), payload[i] = newValue) : payload = fastAddProperties(payload, prop, attributeConfig);
      }
    }
    return payload;
  }
  function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }
  var isInsideEventHandler = false;
  function batchedUpdates$1(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = true;
    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      isInsideEventHandler = false;
    }
  }
  var eventQueue = null;
  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
        dispatchInstances = e._dispatchInstances;
      if (isArrayImpl(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }
  function dispatchEvent(target, topLevelType, nativeEvent) {
    var eventTarget = null;
    if (null != target) {
      var stateNode = target.stateNode;
      null != stateNode && (eventTarget = getPublicInstance(stateNode));
    }
    batchedUpdates$1(function () {
      var event = {
        eventName: topLevelType,
        nativeEvent: nativeEvent
      };
      ReactNativePrivateInterface.RawEventEmitter.emit(topLevelType, event);
      ReactNativePrivateInterface.RawEventEmitter.emit("*", event);
      event = eventTarget;
      for (var events = null, legacyPlugins = plugins, i = 0; i < legacyPlugins.length; i++) {
        var possiblePlugin = legacyPlugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, target, nativeEvent, event)) && (events = accumulateInto(events, possiblePlugin));
      }
      event = events;
      null !== event && (eventQueue = accumulateInto(eventQueue, event));
      event = eventQueue;
      eventQueue = null;
      if (event) {
        forEachAccumulated(event, executeDispatchesAndReleaseTopLevel);
        if (eventQueue) throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
        if (hasError) throw event = caughtError, hasError = false, caughtError = null, event;
      }
    });
  }
  var scheduleCallback$3 = Scheduler.unstable_scheduleCallback,
    cancelCallback$1 = Scheduler.unstable_cancelCallback,
    shouldYield = Scheduler.unstable_shouldYield,
    requestPaint = Scheduler.unstable_requestPaint,
    now = Scheduler.unstable_now,
    ImmediatePriority = Scheduler.unstable_ImmediatePriority,
    UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    NormalPriority$1 = Scheduler.unstable_NormalPriority,
    IdlePriority = Scheduler.unstable_IdlePriority,
    log$1 = Scheduler.log,
    unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue,
    rendererID = null,
    injectedHook = null;
  function onCommitRoot(root) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot) try {
      injectedHook.onCommitFiberRoot(rendererID, root, undefined, 128 === (root.current.flags & 128));
    } catch (err) {}
  }
  function setIsStrictModeForDevtools(newIsStrictMode) {
    "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
    if (injectedHook && "function" === typeof injectedHook.setStrictMode) try {
      injectedHook.setStrictMode(rendererID, newIsStrictMode);
    } catch (err) {}
  }
  var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
    log = Math.log,
    LN2 = Math.LN2;
  function clz32Fallback(x) {
    x >>>= 0;
    return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
  }
  var nextTransitionLane = 128,
    nextRetryLane = 4194304;
  function getHighestPriorityLanes(lanes) {
    var pendingSyncLanes = lanes & 42;
    if (0 !== pendingSyncLanes) return pendingSyncLanes;
    switch (lanes & -lanes) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
        return 64;
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return lanes & 4194176;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
        return lanes & 62914560;
      case 67108864:
        return 67108864;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 0;
      default:
        return lanes;
    }
  }
  function getNextLanes(root, wipLanes) {
    var pendingLanes = root.pendingLanes;
    if (0 === pendingLanes) return 0;
    var nextLanes = 0,
      suspendedLanes = root.suspendedLanes,
      pingedLanes = root.pingedLanes,
      warmLanes = root.warmLanes;
    root = 0 !== root.finishedLanes;
    var nonIdlePendingLanes = pendingLanes & 134217727;
    0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : root || (warmLanes = nonIdlePendingLanes & ~warmLanes, 0 !== warmLanes && (nextLanes = getHighestPriorityLanes(warmLanes))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : root || (warmLanes = pendingLanes & ~warmLanes, 0 !== warmLanes && (nextLanes = getHighestPriorityLanes(warmLanes))));
    return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, warmLanes = wipLanes & -wipLanes, suspendedLanes >= warmLanes || 32 === suspendedLanes && 0 !== (warmLanes & 4194176)) ? wipLanes : nextLanes;
  }
  function checkIfRootIsPrerendering(root, renderLanes) {
    return 0 === (root.pendingLanes & ~(root.suspendedLanes & ~root.pingedLanes) & renderLanes);
  }
  function computeExpirationTime(lane, currentTime) {
    switch (lane) {
      case 1:
      case 2:
      case 4:
      case 8:
        return currentTime + 250;
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return currentTime + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
        return -1;
      case 67108864:
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function claimNextTransitionLane() {
    var lane = nextTransitionLane;
    nextTransitionLane <<= 1;
    0 === (nextTransitionLane & 4194176) && (nextTransitionLane = 128);
    return lane;
  }
  function claimNextRetryLane() {
    var lane = nextRetryLane;
    nextRetryLane <<= 1;
    0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
    return lane;
  }
  function createLaneMap(initial) {
    for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
    return laneMap;
  }
  function markRootUpdated$1(root, updateLane) {
    root.pendingLanes |= updateLane;
    268435456 !== updateLane && (root.suspendedLanes = 0, root.pingedLanes = 0, root.warmLanes = 0);
  }
  function markRootFinished(root, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
    var previouslyPendingLanes = root.pendingLanes;
    root.pendingLanes = remainingLanes;
    root.suspendedLanes = 0;
    root.pingedLanes = 0;
    root.warmLanes = 0;
    root.expiredLanes &= remainingLanes;
    root.entangledLanes &= remainingLanes;
    root.errorRecoveryDisabledLanes &= remainingLanes;
    root.shellSuspendCounter = 0;
    var entanglements = root.entanglements,
      expirationTimes = root.expirationTimes,
      hiddenUpdates = root.hiddenUpdates;
    for (remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes;) {
      var index$10 = 31 - clz32(remainingLanes),
        lane = 1 << index$10;
      entanglements[index$10] = 0;
      expirationTimes[index$10] = -1;
      var hiddenUpdatesForLane = hiddenUpdates[index$10];
      if (null !== hiddenUpdatesForLane) for (hiddenUpdates[index$10] = null, index$10 = 0; index$10 < hiddenUpdatesForLane.length; index$10++) {
        var update = hiddenUpdatesForLane[index$10];
        null !== update && (update.lane &= -536870913);
      }
      remainingLanes &= ~lane;
    }
    0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
    0 !== suspendedRetryLanes && 0 === updatedLanes && (root.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
  }
  function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
    root.pendingLanes |= spawnedLane;
    root.suspendedLanes &= ~spawnedLane;
    var spawnedLaneIndex = 31 - clz32(spawnedLane);
    root.entangledLanes |= spawnedLane;
    root.entanglements[spawnedLaneIndex] = root.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 4194218;
  }
  function markRootEntangled(root, entangledLanes) {
    var rootEntangledLanes = root.entangledLanes |= entangledLanes;
    for (root = root.entanglements; rootEntangledLanes;) {
      var index$11 = 31 - clz32(rootEntangledLanes),
        lane = 1 << index$11;
      lane & entangledLanes | root[index$11] & entangledLanes && (root[index$11] |= entangledLanes);
      rootEntangledLanes &= ~lane;
    }
  }
  function lanesToEventPriority(lanes) {
    lanes &= -lanes;
    return 2 < lanes ? 8 < lanes ? 0 !== (lanes & 134217727) ? 32 : 268435456 : 8 : 2;
  }
  function getNearestMountedFiber(fiber) {
    var node = fiber,
      nearestMounted = fiber;
    if (fiber.alternate) for (; node.return;) node = node.return;else {
      fiber = node;
      do node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return; while (fiber);
    }
    return 3 === node.tag ? nearestMounted : null;
  }
  function assertIsMounted(fiber) {
    if (getNearestMountedFiber(fiber) !== fiber) throw Error("Unable to find node on an unmounted component.");
  }
  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
      alternate = getNearestMountedFiber(fiber);
      if (null === alternate) throw Error("Unable to find node on an unmounted component.");
      return alternate !== fiber ? null : fiber;
    }
    for (var a = fiber, b = alternate;;) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;
      if (null === parentB) {
        b = parentA.return;
        if (null !== b) {
          a = b;
          continue;
        }
        break;
      }
      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB;) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }
        throw Error("Unable to find node on an unmounted component.");
      }
      if (a.return !== b.return) a = parentA, b = parentB;else {
        for (var didFindChild = false, child$12 = parentA.child; child$12;) {
          if (child$12 === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }
          if (child$12 === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }
          child$12 = child$12.sibling;
        }
        if (!didFindChild) {
          for (child$12 = parentB.child; child$12;) {
            if (child$12 === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }
            if (child$12 === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }
            child$12 = child$12.sibling;
          }
          if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      if (a.alternate !== b) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }
    if (3 !== a.tag) throw Error("Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }
  function findCurrentHostFiberImpl(node) {
    var tag = node.tag;
    if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
    for (node = node.child; null !== node;) {
      tag = findCurrentHostFiberImpl(node);
      if (null !== tag) return tag;
      node = node.sibling;
    }
    return null;
  }
  var valueStack = [],
    index = -1;
  function createCursor(defaultValue) {
    return {
      current: defaultValue
    };
  }
  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }
  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }
  var emptyContextObject = {};
  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }
  var objectIs = "function" === typeof Object.is ? Object.is : is,
    CapturedStacks = new WeakMap();
  function createCapturedValueAtFiber(value, source) {
    if ("object" === typeof value && null !== value) {
      var existing = CapturedStacks.get(value);
      if (undefined !== existing) return existing;
      source = {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
      };
      CapturedStacks.set(value, source);
      return source;
    }
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }
  var contextStackCursor = createCursor(null),
    contextFiberStackCursor = createCursor(null),
    rootInstanceStackCursor = createCursor(null),
    hostTransitionProviderCursor = createCursor(null);
  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance);
    push(contextFiberStackCursor, fiber);
    push(contextStackCursor, null);
    fiber = PROD_HOST_CONTEXT;
    pop(contextStackCursor);
    push(contextStackCursor, fiber);
  }
  function popHostContainer() {
    pop(contextStackCursor);
    pop(contextFiberStackCursor);
    pop(rootInstanceStackCursor);
  }
  function pushHostContext(fiber) {
    null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);
    var context = contextStackCursor.current;
    context !== context && (push(contextFiberStackCursor, fiber), push(contextStackCursor, context));
  }
  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor), pop(contextFiberStackCursor));
    hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor), HostTransitionContext._currentValue2 = null);
  }
  var hydrationErrors = null,
    concurrentQueues = [],
    concurrentQueuesIndex = 0,
    concurrentlyUpdatedLanes = 0;
  function finishQueueingConcurrentUpdates() {
    for (var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i < endIndex;) {
      var fiber = concurrentQueues[i];
      concurrentQueues[i++] = null;
      var queue = concurrentQueues[i];
      concurrentQueues[i++] = null;
      var update = concurrentQueues[i];
      concurrentQueues[i++] = null;
      var lane = concurrentQueues[i];
      concurrentQueues[i++] = null;
      if (null !== queue && null !== update) {
        var pending = queue.pending;
        null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
        queue.pending = update;
      }
      0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
    }
  }
  function enqueueUpdate$1(fiber, queue, update, lane) {
    concurrentQueues[concurrentQueuesIndex++] = fiber;
    concurrentQueues[concurrentQueuesIndex++] = queue;
    concurrentQueues[concurrentQueuesIndex++] = update;
    concurrentQueues[concurrentQueuesIndex++] = lane;
    concurrentlyUpdatedLanes |= lane;
    fiber.lanes |= lane;
    fiber = fiber.alternate;
    null !== fiber && (fiber.lanes |= lane);
  }
  function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
    enqueueUpdate$1(fiber, queue, update, lane);
    return getRootForUpdatedFiber(fiber);
  }
  function enqueueConcurrentRenderForLane(fiber, lane) {
    enqueueUpdate$1(fiber, null, null, lane);
    return getRootForUpdatedFiber(fiber);
  }
  function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
    sourceFiber.lanes |= lane;
    var alternate = sourceFiber.alternate;
    null !== alternate && (alternate.lanes |= lane);
    for (var isHidden = false, parent = sourceFiber.return; null !== parent;) parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & 1 || (isHidden = true)), sourceFiber = parent, parent = parent.return;
    isHidden && null !== update && 3 === sourceFiber.tag && (parent = sourceFiber.stateNode, isHidden = 31 - clz32(lane), parent = parent.hiddenUpdates, sourceFiber = parent[isHidden], null === sourceFiber ? parent[isHidden] = [update] : sourceFiber.push(update), update.lane = lane | 536870912);
  }
  function getRootForUpdatedFiber(sourceFiber) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
    for (var parent = sourceFiber.return; null !== parent;) sourceFiber = parent, parent = sourceFiber.return;
    return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;
  }
  var firstScheduledRoot = null,
    lastScheduledRoot = null,
    didScheduleMicrotask = false,
    mightHavePendingSyncWork = false,
    isFlushingWork = false,
    currentEventTransitionLane = 0;
  function ensureRootIsScheduled(root) {
    root !== lastScheduledRoot && null === root.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root : lastScheduledRoot = lastScheduledRoot.next = root);
    mightHavePendingSyncWork = true;
    didScheduleMicrotask || (didScheduleMicrotask = true, scheduleImmediateTask(processRootScheduleInMicrotask));
  }
  function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
    if (!isFlushingWork && mightHavePendingSyncWork) {
      isFlushingWork = true;
      do {
        var didPerformSomeWork = false;
        for (var root = firstScheduledRoot; null !== root;) {
          if (!onlyLegacy || 0 === root.tag) if (0 !== syncTransitionLanes) {
            var pendingLanes = root.pendingLanes;
            if (0 === pendingLanes) var JSCompiler_inline_result = 0;else {
              var suspendedLanes = root.suspendedLanes,
                pingedLanes = root.pingedLanes;
              JSCompiler_inline_result = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
              JSCompiler_inline_result &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
              JSCompiler_inline_result = JSCompiler_inline_result & 201326677 ? JSCompiler_inline_result & 201326677 | 1 : JSCompiler_inline_result ? JSCompiler_inline_result | 2 : 0;
            }
            0 !== JSCompiler_inline_result && (didPerformSomeWork = true, performSyncWorkOnRoot(root, JSCompiler_inline_result));
          } else JSCompiler_inline_result = workInProgressRootRenderLanes, JSCompiler_inline_result = getNextLanes(root, root === workInProgressRoot ? JSCompiler_inline_result : 0), 0 === (JSCompiler_inline_result & 3) || checkIfRootIsPrerendering(root, JSCompiler_inline_result) || (didPerformSomeWork = true, performSyncWorkOnRoot(root, JSCompiler_inline_result));
          root = root.next;
        }
      } while (didPerformSomeWork);
      isFlushingWork = false;
    }
  }
  function processRootScheduleInMicrotask() {
    mightHavePendingSyncWork = didScheduleMicrotask = false;
    0 !== currentEventTransitionLane && (currentEventTransitionLane = 0);
    for (var currentTime = now(), prev = null, root = firstScheduledRoot; null !== root;) {
      var next = root.next,
        nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
      0 === nextLanes ? (root.next = null, null === prev ? firstScheduledRoot = next : prev.next = next, null === next && (lastScheduledRoot = prev)) : (prev = root, 0 !== (nextLanes & 3) && (mightHavePendingSyncWork = true));
      root = next;
    }
    flushSyncWorkAcrossRoots_impl(0, false);
  }
  function scheduleTaskForRootDuringMicrotask(root, currentTime) {
    for (var suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, expirationTimes = root.expirationTimes, lanes = root.pendingLanes & -62914561; 0 < lanes;) {
      var index$8 = 31 - clz32(lanes),
        lane = 1 << index$8,
        expirationTime = expirationTimes[index$8];
      if (-1 === expirationTime) {
        if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes)) expirationTimes[index$8] = computeExpirationTime(lane, currentTime);
      } else expirationTime <= currentTime && (root.expiredLanes |= lane);
      lanes &= ~lane;
    }
    currentTime = workInProgressRoot;
    suspendedLanes = workInProgressRootRenderLanes;
    suspendedLanes = getNextLanes(root, root === currentTime ? suspendedLanes : 0);
    pingedLanes = root.callbackNode;
    if (0 === suspendedLanes || root === currentTime && 2 === workInProgressSuspendedReason || null !== root.cancelPendingCommit) return null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes), root.callbackNode = null, root.callbackPriority = 0;
    if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root, suspendedLanes)) {
      currentTime = suspendedLanes & -suspendedLanes;
      if (currentTime === root.callbackPriority) return currentTime;
      null !== pingedLanes && cancelCallback$1(pingedLanes);
      switch (lanesToEventPriority(suspendedLanes)) {
        case 2:
        case 8:
          suspendedLanes = UserBlockingPriority;
          break;
        case 32:
          suspendedLanes = NormalPriority$1;
          break;
        case 268435456:
          suspendedLanes = IdlePriority;
          break;
        default:
          suspendedLanes = NormalPriority$1;
      }
      pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
      suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
      root.callbackPriority = currentTime;
      root.callbackNode = suspendedLanes;
      return currentTime;
    }
    null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes);
    root.callbackPriority = 2;
    root.callbackNode = null;
    return 2;
  }
  function performWorkOnRootViaSchedulerTask(root, didTimeout) {
    var originalCallbackNode = root.callbackNode;
    if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode) return null;
    var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
    workInProgressRootRenderLanes$jscomp$0 = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0);
    if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
    performWorkOnRoot(root, workInProgressRootRenderLanes$jscomp$0, didTimeout);
    scheduleTaskForRootDuringMicrotask(root, now());
    return null != root.callbackNode && root.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root) : null;
  }
  function performSyncWorkOnRoot(root, lanes) {
    if (flushPassiveEffects()) return null;
    performWorkOnRoot(root, lanes, true);
  }
  function scheduleImmediateTask(cb) {
    supportsMicrotasks ? scheduleMicrotask(function () {
      0 !== (executionContext & 6) ? scheduleCallback$3(ImmediatePriority, cb) : cb();
    }) : scheduleCallback$3(ImmediatePriority, cb);
  }
  function requestTransitionLane() {
    0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
    return currentEventTransitionLane;
  }
  var currentEntangledListeners = null,
    currentEntangledPendingCount = 0,
    currentEntangledLane = 0,
    currentEntangledActionThenable = null;
  function entangleAsyncAction(transition, thenable) {
    if (null === currentEntangledListeners) {
      var entangledListeners = currentEntangledListeners = [];
      currentEntangledPendingCount = 0;
      currentEntangledLane = requestTransitionLane();
      currentEntangledActionThenable = {
        status: "pending",
        value: undefined,
        then: function (resolve) {
          entangledListeners.push(resolve);
        }
      };
    }
    currentEntangledPendingCount++;
    thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
    return thenable;
  }
  function pingEngtangledActionScope() {
    if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
      null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
      var listeners = currentEntangledListeners;
      currentEntangledListeners = null;
      currentEntangledLane = 0;
      currentEntangledActionThenable = null;
      for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
    }
  }
  function chainThenableValue(thenable, result) {
    var listeners = [],
      thenableWithOverride = {
        status: "pending",
        value: null,
        reason: null,
        then: function (resolve) {
          listeners.push(resolve);
        }
      };
    thenable.then(function () {
      thenableWithOverride.status = "fulfilled";
      thenableWithOverride.value = result;
      for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
    }, function (error) {
      thenableWithOverride.status = "rejected";
      thenableWithOverride.reason = error;
      for (error = 0; error < listeners.length; error++) (0, listeners[error])(undefined);
    });
    return thenableWithOverride;
  }
  var hasForceUpdate = false;
  function initializeUpdateQueue(fiber) {
    fiber.updateQueue = {
      baseState: fiber.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: {
        pending: null,
        lanes: 0,
        hiddenCallbacks: null
      },
      callbacks: null
    };
  }
  function cloneUpdateQueue(current, workInProgress) {
    current = current.updateQueue;
    workInProgress.updateQueue === current && (workInProgress.updateQueue = {
      baseState: current.baseState,
      firstBaseUpdate: current.firstBaseUpdate,
      lastBaseUpdate: current.lastBaseUpdate,
      shared: current.shared,
      callbacks: null
    });
  }
  function createUpdate(lane) {
    return {
      lane: lane,
      tag: 0,
      payload: null,
      callback: null,
      next: null
    };
  }
  function enqueueUpdate(fiber, update, lane) {
    var updateQueue = fiber.updateQueue;
    if (null === updateQueue) return null;
    updateQueue = updateQueue.shared;
    if (0 !== (executionContext & 2)) {
      var pending = updateQueue.pending;
      null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
      updateQueue.pending = update;
      update = getRootForUpdatedFiber(fiber);
      markUpdateLaneFromFiberToRoot(fiber, null, lane);
      return update;
    }
    enqueueUpdate$1(fiber, updateQueue, update, lane);
    return getRootForUpdatedFiber(fiber);
  }
  function entangleTransitions(root, fiber, lane) {
    fiber = fiber.updateQueue;
    if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194176))) {
      var queueLanes = fiber.lanes;
      queueLanes &= root.pendingLanes;
      lane |= queueLanes;
      fiber.lanes = lane;
      markRootEntangled(root, lane);
    }
  }
  function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
    var queue = workInProgress.updateQueue,
      current = workInProgress.alternate;
    if (null !== current && (current = current.updateQueue, queue === current)) {
      var newFirst = null,
        newLast = null;
      queue = queue.firstBaseUpdate;
      if (null !== queue) {
        do {
          var clone = {
            lane: queue.lane,
            tag: queue.tag,
            payload: queue.payload,
            callback: null,
            next: null
          };
          null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
          queue = queue.next;
        } while (null !== queue);
        null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
      } else newFirst = newLast = capturedUpdate;
      queue = {
        baseState: current.baseState,
        firstBaseUpdate: newFirst,
        lastBaseUpdate: newLast,
        shared: current.shared,
        callbacks: current.callbacks
      };
      workInProgress.updateQueue = queue;
      return;
    }
    workInProgress = queue.lastBaseUpdate;
    null === workInProgress ? queue.firstBaseUpdate = capturedUpdate : workInProgress.next = capturedUpdate;
    queue.lastBaseUpdate = capturedUpdate;
  }
  var didReadFromEntangledAsyncAction = false;
  function suspendIfUpdateReadFromEntangledAsyncAction() {
    if (didReadFromEntangledAsyncAction) {
      var entangledActionThenable = currentEntangledActionThenable;
      if (null !== entangledActionThenable) throw entangledActionThenable;
    }
  }
  function processUpdateQueue(workInProgress$jscomp$0, props, instance$jscomp$0, renderLanes) {
    didReadFromEntangledAsyncAction = false;
    var queue = workInProgress$jscomp$0.updateQueue;
    hasForceUpdate = false;
    var firstBaseUpdate = queue.firstBaseUpdate,
      lastBaseUpdate = queue.lastBaseUpdate,
      pendingQueue = queue.shared.pending;
    if (null !== pendingQueue) {
      queue.shared.pending = null;
      var lastPendingUpdate = pendingQueue,
        firstPendingUpdate = lastPendingUpdate.next;
      lastPendingUpdate.next = null;
      null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
      lastBaseUpdate = lastPendingUpdate;
      var current = workInProgress$jscomp$0.alternate;
      null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
    }
    if (null !== firstBaseUpdate) {
      var newState = queue.baseState;
      lastBaseUpdate = 0;
      current = firstPendingUpdate = lastPendingUpdate = null;
      pendingQueue = firstBaseUpdate;
      do {
        var updateLane = pendingQueue.lane & -536870913,
          isHiddenUpdate = updateLane !== pendingQueue.lane;
        if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
          0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = true);
          null !== current && (current = current.next = {
            lane: 0,
            tag: pendingQueue.tag,
            payload: pendingQueue.payload,
            callback: null,
            next: null
          });
          a: {
            var workInProgress = workInProgress$jscomp$0,
              update = pendingQueue;
            updateLane = props;
            var instance = instance$jscomp$0;
            switch (update.tag) {
              case 1:
                workInProgress = update.payload;
                if ("function" === typeof workInProgress) {
                  newState = workInProgress.call(instance, newState, updateLane);
                  break a;
                }
                newState = workInProgress;
                break a;
              case 3:
                workInProgress.flags = workInProgress.flags & -65537 | 128;
              case 0:
                workInProgress = update.payload;
                updateLane = "function" === typeof workInProgress ? workInProgress.call(instance, newState, updateLane) : workInProgress;
                if (null === updateLane || undefined === updateLane) break a;
                newState = assign({}, newState, updateLane);
                break a;
              case 2:
                hasForceUpdate = true;
            }
          }
          updateLane = pendingQueue.callback;
          null !== updateLane && (workInProgress$jscomp$0.flags |= 64, isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [updateLane] : isHiddenUpdate.push(updateLane));
        } else isHiddenUpdate = {
          lane: updateLane,
          tag: pendingQueue.tag,
          payload: pendingQueue.payload,
          callback: pendingQueue.callback,
          next: null
        }, null === current ? (firstPendingUpdate = current = isHiddenUpdate, lastPendingUpdate = newState) : current = current.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
        pendingQueue = pendingQueue.next;
        if (null === pendingQueue) if (pendingQueue = queue.shared.pending, null === pendingQueue) break;else isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
      } while (1);
      null === current && (lastPendingUpdate = newState);
      queue.baseState = lastPendingUpdate;
      queue.firstBaseUpdate = firstPendingUpdate;
      queue.lastBaseUpdate = current;
      null === firstBaseUpdate && (queue.shared.lanes = 0);
      workInProgressRootSkippedLanes |= lastBaseUpdate;
      workInProgress$jscomp$0.lanes = lastBaseUpdate;
      workInProgress$jscomp$0.memoizedState = newState;
    }
  }
  function callCallback(callback, context) {
    if ("function" !== typeof callback) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
    callback.call(context);
  }
  function commitCallbacks(updateQueue, context) {
    var callbacks = updateQueue.callbacks;
    if (null !== callbacks) for (updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++) callCallback(callbacks[updateQueue], context);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
      keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;
    for (keysB = 0; keysB < keysA.length; keysB++) {
      var currentKey = keysA[keysB];
      if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return false;
    }
    return true;
  }
  var SuspenseException = Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`"),
    SuspenseyCommitException = Error("Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."),
    noopSuspenseyCommitThenable = {
      then: function () {}
    };
  function isThenableResolved(thenable) {
    thenable = thenable.status;
    return "fulfilled" === thenable || "rejected" === thenable;
  }
  function noop() {}
  function trackUsedThenable(thenableState, thenable, index) {
    index = thenableState[index];
    undefined === index ? thenableState.push(thenable) : index !== thenable && (thenable.then(noop, noop), thenable = index);
    switch (thenable.status) {
      case "fulfilled":
        return thenable.value;
      case "rejected":
        throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
      default:
        if ("string" === typeof thenable.status) thenable.then(noop, noop);else {
          thenableState = workInProgressRoot;
          if (null !== thenableState && 100 < thenableState.shellSuspendCounter) throw Error("async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
          thenableState = thenable;
          thenableState.status = "pending";
          thenableState.then(function (fulfilledValue) {
            if ("pending" === thenable.status) {
              var fulfilledThenable = thenable;
              fulfilledThenable.status = "fulfilled";
              fulfilledThenable.value = fulfilledValue;
            }
          }, function (error) {
            if ("pending" === thenable.status) {
              var rejectedThenable = thenable;
              rejectedThenable.status = "rejected";
              rejectedThenable.reason = error;
            }
          });
        }
        switch (thenable.status) {
          case "fulfilled":
            return thenable.value;
          case "rejected":
            throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
        }
        suspendedThenable = thenable;
        throw SuspenseException;
    }
  }
  var suspendedThenable = null;
  function getSuspendedThenable() {
    if (null === suspendedThenable) throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
    var thenable = suspendedThenable;
    suspendedThenable = null;
    return thenable;
  }
  function checkIfUseWrappedInAsyncCatch(rejectedReason) {
    if (rejectedReason === SuspenseException) throw Error("Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
  }
  var thenableState$1 = null,
    thenableIndexCounter$1 = 0;
  function unwrapThenable(thenable) {
    var index = thenableIndexCounter$1;
    thenableIndexCounter$1 += 1;
    null === thenableState$1 && (thenableState$1 = []);
    return trackUsedThenable(thenableState$1, thenable, index);
  }
  function coerceRef(workInProgress, element) {
    element = element.props.ref;
    workInProgress.ref = undefined !== element ? element : null;
  }
  function throwOnInvalidObjectType(returnFiber, newChild) {
    if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE) throw Error('A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.');
    returnFiber = Object.prototype.toString.call(newChild);
    throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead.");
  }
  function resolveLazy(lazyType) {
    var init = lazyType._init;
    return init(lazyType._payload);
  }
  function createChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var deletions = returnFiber.deletions;
        null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
      }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;
      for (; null !== currentFirstChild;) deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      return null;
    }
    function mapRemainingChildren(currentFirstChild) {
      for (var existingChildren = new Map(); null !== currentFirstChild;) null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      return existingChildren;
    }
    function useFiber(fiber, pendingProps) {
      fiber = createWorkInProgress(fiber, pendingProps);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return newFiber.flags |= 1048576, lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 33554434, lastPlacedIndex) : newIndex;
      newFiber.flags |= 33554434;
      return lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 33554434);
      return newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, lanes) {
      if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
      current = useFiber(current, textContent);
      current.return = returnFiber;
      return current;
    }
    function updateElement(returnFiber, current, element, lanes) {
      var elementType = element.type;
      if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
      if (null !== current && (current.elementType === elementType || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type)) return current = useFiber(current, element.props), coerceRef(current, element), current.return = returnFiber, current;
      current = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, lanes);
      coerceRef(current, element);
      current.return = returnFiber;
      return current;
    }
    function updatePortal(returnFiber, current, portal, lanes) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
      current = useFiber(current, portal.children || []);
      current.return = returnFiber;
      return current;
    }
    function updateFragment(returnFiber, current, fragment, lanes, key) {
      if (null === current || 7 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, lanes, key), current.return = returnFiber, current;
      current = useFiber(current, fragment);
      current.return = returnFiber;
      return current;
    }
    function createChild(returnFiber, newChild, lanes) {
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes;
          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
          case REACT_LAZY_TYPE:
            var init = newChild._init;
            newChild = init(newChild._payload);
            return createChild(returnFiber, newChild, lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, lanes, null), newChild.return = returnFiber, newChild;
        if ("function" === typeof newChild.then) return createChild(returnFiber, unwrapThenable(newChild), lanes);
        if (newChild.$$typeof === REACT_CONTEXT_TYPE) return createChild(returnFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
          case REACT_LAZY_TYPE:
            return key = newChild._init, newChild = key(newChild._payload), updateSlot(returnFiber, oldFiber, newChild, lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
        if ("function" === typeof newChild.then) return updateSlot(returnFiber, oldFiber, unwrapThenable(newChild), lanes);
        if (newChild.$$typeof === REACT_CONTEXT_TYPE) return updateSlot(returnFiber, oldFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
          case REACT_LAZY_TYPE:
            var init = newChild._init;
            newChild = init(newChild._payload);
            return updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
        if ("function" === typeof newChild.then) return updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(newChild), lanes);
        if (newChild.$$typeof === REACT_CONTEXT_TYPE) return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconciliation(returnFiber, newChild), lanes);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }
        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        return resultingFirstChild;
      }
      for (oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++) nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], lanes), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
      if (null == newChildren) throw Error("An iterable object provided no iterator.");
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }
        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildren.next()) step = createChild(returnFiber, step.value, lanes), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
        return resultingFirstChild;
      }
      for (oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next()) step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }
    function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
      "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            a: {
              for (var key = newChild.key; null !== currentFirstChild;) {
                if (currentFirstChild.key === key) {
                  key = newChild.type;
                  if (key === REACT_FRAGMENT_TYPE) {
                    if (7 === currentFirstChild.tag) {
                      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                      lanes = useFiber(currentFirstChild, newChild.props.children);
                      lanes.return = returnFiber;
                      returnFiber = lanes;
                      break a;
                    }
                  } else if (currentFirstChild.elementType === key || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === currentFirstChild.type) {
                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                    lanes = useFiber(currentFirstChild, newChild.props);
                    coerceRef(lanes, newChild);
                    lanes.return = returnFiber;
                    returnFiber = lanes;
                    break a;
                  }
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                } else deleteChild(returnFiber, currentFirstChild);
                currentFirstChild = currentFirstChild.sibling;
              }
              newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(newChild.props.children, returnFiber.mode, lanes, newChild.key), lanes.return = returnFiber, returnFiber = lanes) : (lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = lanes);
            }
            return placeSingleChild(returnFiber);
          case REACT_PORTAL_TYPE:
            a: {
              for (key = newChild.key; null !== currentFirstChild;) {
                if (currentFirstChild.key === key) {
                  if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                    lanes = useFiber(currentFirstChild, newChild.children || []);
                    lanes.return = returnFiber;
                    returnFiber = lanes;
                    break a;
                  } else {
                    deleteRemainingChildren(returnFiber, currentFirstChild);
                    break;
                  }
                } else deleteChild(returnFiber, currentFirstChild);
                currentFirstChild = currentFirstChild.sibling;
              }
              lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
              lanes.return = returnFiber;
              returnFiber = lanes;
            }
            return placeSingleChild(returnFiber);
          case REACT_LAZY_TYPE:
            return key = newChild._init, newChild = key(newChild._payload), reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
        }
        if (isArrayImpl(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
        if (getIteratorFn(newChild)) {
          key = getIteratorFn(newChild);
          if ("function" !== typeof key) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          newChild = key.call(newChild);
          return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
        }
        if ("function" === typeof newChild.then) return reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(newChild), lanes);
        if (newChild.$$typeof === REACT_CONTEXT_TYPE) return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconciliation(returnFiber, newChild), lanes);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return "string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild ? (newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), lanes = useFiber(currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(newChild, returnFiber.mode, lanes), lanes.return = returnFiber, returnFiber = lanes), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return function (returnFiber, currentFirstChild, newChild, lanes) {
      try {
        thenableIndexCounter$1 = 0;
        var firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
        thenableState$1 = null;
        return firstChildFiber;
      } catch (x) {
        if (x === SuspenseException || 0 === (returnFiber.mode & 1) && "object" === typeof x && null !== x && "function" === typeof x.then) throw x;
        var fiber = createFiberImplClass(29, x, null, returnFiber.mode);
        fiber.lanes = lanes;
        fiber.return = returnFiber;
        return fiber;
      } finally {}
    };
  }
  var reconcileChildFibers = createChildReconciler(true),
    mountChildFibers = createChildReconciler(false),
    currentTreeHiddenStackCursor = createCursor(null),
    prevEntangledRenderLanesCursor = createCursor(0);
  function pushHiddenContext(fiber, context) {
    fiber = entangledRenderLanes;
    push(prevEntangledRenderLanesCursor, fiber);
    push(currentTreeHiddenStackCursor, context);
    entangledRenderLanes = fiber | context.baseLanes;
  }
  function reuseHiddenContextOnStack() {
    push(prevEntangledRenderLanesCursor, entangledRenderLanes);
    push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
  }
  function popHiddenContext() {
    entangledRenderLanes = prevEntangledRenderLanesCursor.current;
    pop(currentTreeHiddenStackCursor);
    pop(prevEntangledRenderLanesCursor);
  }
  var suspenseHandlerStackCursor = createCursor(null),
    shellBoundary = null;
  function pushPrimaryTreeSuspenseHandler(handler) {
    var current = handler.alternate;
    push(suspenseStackCursor, suspenseStackCursor.current & 1);
    push(suspenseHandlerStackCursor, handler);
    null === shellBoundary && (null === current || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current.memoizedState && (shellBoundary = handler));
  }
  function pushOffscreenSuspenseHandler(fiber) {
    if (22 === fiber.tag) {
      if (push(suspenseStackCursor, suspenseStackCursor.current), push(suspenseHandlerStackCursor, fiber), null === shellBoundary) {
        var current = fiber.alternate;
        null !== current && null !== current.memoizedState && (shellBoundary = fiber);
      }
    } else reuseSuspenseHandlerOnStack(fiber);
  }
  function reuseSuspenseHandlerOnStack() {
    push(suspenseStackCursor, suspenseStackCursor.current);
    push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
  }
  function popSuspenseHandler(fiber) {
    pop(suspenseHandlerStackCursor);
    shellBoundary === fiber && (shellBoundary = null);
    pop(suspenseStackCursor);
  }
  var suspenseStackCursor = createCursor(0);
  function findFirstSuspended(row) {
    for (var node = row; null !== node;) {
      if (13 === node.tag) {
        var state = node.memoizedState;
        if (null !== state && (null === state.dehydrated || shim$1() || shim$1())) return node;
      } else if (19 === node.tag && undefined !== node.memoizedProps.revealOrder) {
        if (0 !== (node.flags & 128)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === row) break;
      for (; null === node.sibling;) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
    return null;
  }
  var renderLanes = 0,
    currentlyRenderingFiber$1 = null,
    currentHook = null,
    workInProgressHook = null,
    didScheduleRenderPhaseUpdate = false,
    didScheduleRenderPhaseUpdateDuringThisPass = false,
    shouldDoubleInvokeUserFnsInHooksDEV = false,
    thenableIndexCounter = 0,
    thenableState = null,
    globalClientIdCounter = 0;
  function throwInvalidHookError() {
    throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
  }
  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return false;
    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) if (!objectIs(nextDeps[i], prevDeps[i])) return false;
    return true;
  }
  function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
    renderLanes = nextRenderLanes;
    currentlyRenderingFiber$1 = workInProgress;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.lanes = 0;
    ReactSharedInternals.H = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    shouldDoubleInvokeUserFnsInHooksDEV = false;
    nextRenderLanes = Component(props, secondArg);
    shouldDoubleInvokeUserFnsInHooksDEV = false;
    didScheduleRenderPhaseUpdateDuringThisPass && (nextRenderLanes = renderWithHooksAgain(workInProgress, Component, props, secondArg));
    finishRenderingHooks(current);
    return nextRenderLanes;
  }
  function finishRenderingHooks(current) {
    ReactSharedInternals.H = ContextOnlyDispatcher;
    var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdate = false;
    thenableIndexCounter = 0;
    thenableState = null;
    if (didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    null === current || didReceiveUpdate || (current = current.dependencies, null !== current && checkIfContextChanged(current) && (didReceiveUpdate = true));
  }
  function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
    currentlyRenderingFiber$1 = workInProgress;
    var numberOfReRenders = 0;
    do {
      didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
      thenableIndexCounter = 0;
      didScheduleRenderPhaseUpdateDuringThisPass = false;
      if (25 <= numberOfReRenders) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
      numberOfReRenders += 1;
      workInProgressHook = currentHook = null;
      if (null != workInProgress.updateQueue) {
        var children = workInProgress.updateQueue;
        children.lastEffect = null;
        children.events = null;
        children.stores = null;
        null != children.memoCache && (children.memoCache.index = 0);
      }
      ReactSharedInternals.H = HooksDispatcherOnRerender;
      children = Component(props, secondArg);
    } while (didScheduleRenderPhaseUpdateDuringThisPass);
    return children;
  }
  function TransitionAwareHostComponent() {
    var dispatcher = ReactSharedInternals.H,
      maybeThenable = dispatcher.useState()[0];
    maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
    dispatcher = dispatcher.useState()[0];
    (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber$1.flags |= 1024);
    return maybeThenable;
  }
  function bailoutHooks(current, workInProgress, lanes) {
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.flags &= -2053;
    current.lanes &= ~lanes;
  }
  function resetHooksOnUnwind(workInProgress) {
    if (didScheduleRenderPhaseUpdate) {
      for (workInProgress = workInProgress.memoizedState; null !== workInProgress;) {
        var queue = workInProgress.queue;
        null !== queue && (queue.pending = null);
        workInProgress = workInProgress.next;
      }
      didScheduleRenderPhaseUpdate = false;
    }
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdateDuringThisPass = false;
    thenableIndexCounter = 0;
    thenableState = null;
  }
  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };
    null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }
  function updateWorkInProgressHook() {
    if (null === currentHook) {
      var nextCurrentHook = currentlyRenderingFiber$1.alternate;
      nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
    } else nextCurrentHook = currentHook.next;
    var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;else {
      if (null === nextCurrentHook) {
        if (null === currentlyRenderingFiber$1.alternate) throw Error("Update hook called on initial render. This is likely a bug in React. Please file an issue.");
        throw Error("Rendered more hooks than during the previous render.");
      }
      currentHook = nextCurrentHook;
      nextCurrentHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        baseQueue: currentHook.baseQueue,
        queue: currentHook.queue,
        next: null
      };
      null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
    }
    return workInProgressHook;
  }
  var createFunctionComponentUpdateQueue;
  createFunctionComponentUpdateQueue = function () {
    return {
      lastEffect: null,
      events: null,
      stores: null,
      memoCache: null
    };
  };
  function useThenable(thenable) {
    var index = thenableIndexCounter;
    thenableIndexCounter += 1;
    null === thenableState && (thenableState = []);
    thenable = trackUsedThenable(thenableState, thenable, index);
    index = currentlyRenderingFiber$1;
    null === (null === workInProgressHook ? index.memoizedState : workInProgressHook.next) && (index = index.alternate, ReactSharedInternals.H = null === index || null === index.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate);
    return thenable;
  }
  function use(usable) {
    if (null !== usable && "object" === typeof usable) {
      if ("function" === typeof usable.then) return useThenable(usable);
      if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
    }
    throw Error("An unsupported type was passed to use(): " + String(usable));
  }
  function useMemoCache(size) {
    var memoCache = null,
      updateQueue = currentlyRenderingFiber$1.updateQueue;
    null !== updateQueue && (memoCache = updateQueue.memoCache);
    if (null == memoCache) {
      var current = currentlyRenderingFiber$1.alternate;
      null !== current && (current = current.updateQueue, null !== current && (current = current.memoCache, null != current && (memoCache = {
        data: current.data.map(function (array) {
          return array.slice();
        }),
        index: 0
      })));
    }
    null == memoCache && (memoCache = {
      data: [],
      index: 0
    });
    null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = updateQueue);
    updateQueue.memoCache = memoCache;
    updateQueue = memoCache.data[memoCache.index];
    if (undefined === updateQueue) for (updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0; current < size; current++) updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
    memoCache.index++;
    return updateQueue;
  }
  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }
  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook();
    return updateReducerImpl(hook, currentHook, reducer);
  }
  function updateReducerImpl(hook, current, reducer) {
    var queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
    queue.lastRenderedReducer = reducer;
    var baseQueue = hook.baseQueue,
      pendingQueue = queue.pending;
    if (null !== pendingQueue) {
      if (null !== baseQueue) {
        var baseFirst = baseQueue.next;
        baseQueue.next = pendingQueue.next;
        pendingQueue.next = baseFirst;
      }
      current.baseQueue = baseQueue = pendingQueue;
      queue.pending = null;
    }
    pendingQueue = hook.baseState;
    if (null === baseQueue) hook.memoizedState = pendingQueue;else {
      current = baseQueue.next;
      var newBaseQueueFirst = baseFirst = null,
        newBaseQueueLast = null,
        update = current,
        didReadFromEntangledAsyncAction$45 = false;
      do {
        var updateLane = update.lane & -536870913;
        if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
          var revertLane = update.revertLane;
          if (0 === revertLane) null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
            lane: 0,
            revertLane: 0,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction$45 = true);else if ((renderLanes & revertLane) === revertLane) {
            update = update.next;
            revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction$45 = true);
            continue;
          } else updateLane = {
            lane: 0,
            revertLane: update.revertLane,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber$1.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
          updateLane = update.action;
          shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
          pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
        } else revertLane = {
          lane: updateLane,
          revertLane: update.revertLane,
          action: update.action,
          hasEagerState: update.hasEagerState,
          eagerState: update.eagerState,
          next: null
        }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber$1.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
        update = update.next;
      } while (null !== update && update !== current);
      null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
      if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = true, didReadFromEntangledAsyncAction$45 && (reducer = currentEntangledActionThenable, null !== reducer))) throw reducer;
      hook.memoizedState = pendingQueue;
      hook.baseState = baseFirst;
      hook.baseQueue = newBaseQueueLast;
      queue.lastRenderedState = pendingQueue;
    }
    null === baseQueue && (queue.lanes = 0);
    return [hook.memoizedState, queue.dispatch];
  }
  function rerenderReducer(reducer) {
    var hook = updateWorkInProgressHook(),
      queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
    queue.lastRenderedReducer = reducer;
    var dispatch = queue.dispatch,
      lastRenderPhaseUpdate = queue.pending,
      newState = hook.memoizedState;
    if (null !== lastRenderPhaseUpdate) {
      queue.pending = null;
      var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      do newState = reducer(newState, update.action), update = update.next; while (update !== lastRenderPhaseUpdate);
      objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = newState;
      null === hook.baseQueue && (hook.baseState = newState);
      queue.lastRenderedState = newState;
    }
    return [newState, dispatch];
  }
  function updateSyncExternalStore(subscribe, getSnapshot) {
    var fiber = currentlyRenderingFiber$1,
      hook = updateWorkInProgressHook();
    var nextSnapshot = getSnapshot();
    var snapshotChanged = !objectIs((currentHook || hook).memoizedState, nextSnapshot);
    snapshotChanged && (hook.memoizedState = nextSnapshot, didReceiveUpdate = true);
    hook = hook.queue;
    updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [subscribe]);
    if (hook.getSnapshot !== getSnapshot || snapshotChanged || null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1) {
      fiber.flags |= 2048;
      pushEffect(9, updateStoreInstance.bind(null, fiber, hook, nextSnapshot, getSnapshot), {
        destroy: undefined
      }, null);
      if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
      0 !== (renderLanes & 60) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
    return nextSnapshot;
  }
  function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
    fiber.flags |= 16384;
    fiber = {
      getSnapshot: getSnapshot,
      value: renderedSnapshot
    };
    getSnapshot = currentlyRenderingFiber$1.updateQueue;
    null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
  }
  function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
    inst.value = nextSnapshot;
    inst.getSnapshot = getSnapshot;
    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
  }
  function subscribeToStore(fiber, inst, subscribe) {
    return subscribe(function () {
      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    });
  }
  function checkIfSnapshotChanged(inst) {
    var latestGetSnapshot = inst.getSnapshot;
    inst = inst.value;
    try {
      var nextValue = latestGetSnapshot();
      return !objectIs(inst, nextValue);
    } catch (error) {
      return true;
    }
  }
  function forceStoreRerender(fiber) {
    var root = enqueueConcurrentRenderForLane(fiber, 2);
    null !== root && scheduleUpdateOnFiber(root, fiber, 2);
  }
  function mountStateImpl(initialState) {
    var hook = mountWorkInProgressHook();
    if ("function" === typeof initialState) {
      var initialStateInitializer = initialState;
      initialState = initialStateInitializer();
      if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(true);
        try {
          initialStateInitializer();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
    }
    hook.memoizedState = hook.baseState = initialState;
    hook.queue = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: initialState
    };
    return hook;
  }
  function updateOptimisticImpl(hook, current, passthrough, reducer) {
    hook.baseState = passthrough;
    return updateReducerImpl(hook, currentHook, "function" === typeof reducer ? reducer : basicStateReducer);
  }
  function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
    if (isRenderPhaseUpdate(fiber)) throw Error("Cannot update form state while rendering.");
    fiber = actionQueue.action;
    if (null !== fiber) {
      var actionNode = {
        payload: payload,
        action: fiber,
        next: null,
        isTransition: true,
        status: "pending",
        value: null,
        reason: null,
        listeners: [],
        then: function (listener) {
          actionNode.listeners.push(listener);
        }
      };
      null !== ReactSharedInternals.T ? setPendingState(true) : actionNode.isTransition = false;
      setState(actionNode);
      setPendingState = actionQueue.pending;
      null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
    }
  }
  function runActionStateAction(actionQueue, node) {
    var action = node.action,
      payload = node.payload,
      prevState = actionQueue.state;
    if (node.isTransition) {
      var prevTransition = ReactSharedInternals.T,
        currentTransition = {};
      ReactSharedInternals.T = currentTransition;
      try {
        var returnValue = action(prevState, payload),
          onStartTransitionFinish = ReactSharedInternals.S;
        null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
        handleActionReturnValue(actionQueue, node, returnValue);
      } catch (error) {
        onActionError(actionQueue, node, error);
      } finally {
        ReactSharedInternals.T = prevTransition;
      }
    } else try {
      prevTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, prevTransition);
    } catch (error$49) {
      onActionError(actionQueue, node, error$49);
    }
  }
  function handleActionReturnValue(actionQueue, node, returnValue) {
    null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? returnValue.then(function (nextState) {
      onActionSuccess(actionQueue, node, nextState);
    }, function (error) {
      return onActionError(actionQueue, node, error);
    }) : onActionSuccess(actionQueue, node, returnValue);
  }
  function onActionSuccess(actionQueue, actionNode, nextState) {
    actionNode.status = "fulfilled";
    actionNode.value = nextState;
    notifyActionListeners(actionNode);
    actionQueue.state = nextState;
    actionNode = actionQueue.pending;
    null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
  }
  function onActionError(actionQueue, actionNode, error) {
    var last = actionQueue.pending;
    actionQueue.pending = null;
    if (null !== last) {
      last = last.next;
      do actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next; while (actionNode !== last);
    }
    actionQueue.action = null;
  }
  function notifyActionListeners(actionNode) {
    actionNode = actionNode.listeners;
    for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
  }
  function actionStateReducer(oldState, newState) {
    return newState;
  }
  function mountActionState(action, initialStateProp) {
    var stateHook = mountWorkInProgressHook();
    stateHook.memoizedState = stateHook.baseState = initialStateProp;
    var stateQueue = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: actionStateReducer,
      lastRenderedState: initialStateProp
    };
    stateHook.queue = stateQueue;
    stateHook = dispatchSetState.bind(null, currentlyRenderingFiber$1, stateQueue);
    stateQueue.dispatch = stateHook;
    stateQueue = mountStateImpl(false);
    var setPendingState = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, false, stateQueue.queue);
    stateQueue = mountWorkInProgressHook();
    var actionQueue = {
      state: initialStateProp,
      dispatch: null,
      action: action,
      pending: null
    };
    stateQueue.queue = actionQueue;
    stateHook = dispatchActionState.bind(null, currentlyRenderingFiber$1, actionQueue, setPendingState, stateHook);
    actionQueue.dispatch = stateHook;
    stateQueue.memoizedState = action;
    return [initialStateProp, stateHook, false];
  }
  function updateActionState(action) {
    var stateHook = updateWorkInProgressHook();
    return updateActionStateImpl(stateHook, currentHook, action);
  }
  function updateActionStateImpl(stateHook, currentStateHook, action) {
    currentStateHook = updateReducerImpl(stateHook, currentStateHook, actionStateReducer)[0];
    stateHook = updateReducer(basicStateReducer)[0];
    currentStateHook = "object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then ? useThenable(currentStateHook) : currentStateHook;
    var actionQueueHook = updateWorkInProgressHook(),
      actionQueue = actionQueueHook.queue,
      dispatch = actionQueue.dispatch;
    action !== actionQueueHook.memoizedState && (currentlyRenderingFiber$1.flags |= 2048, pushEffect(9, actionStateActionEffect.bind(null, actionQueue, action), {
      destroy: undefined
    }, null));
    return [currentStateHook, dispatch, stateHook];
  }
  function actionStateActionEffect(actionQueue, action) {
    actionQueue.action = action;
  }
  function rerenderActionState(action) {
    var stateHook = updateWorkInProgressHook(),
      currentStateHook = currentHook;
    if (null !== currentStateHook) return updateActionStateImpl(stateHook, currentStateHook, action);
    updateWorkInProgressHook();
    stateHook = stateHook.memoizedState;
    currentStateHook = updateWorkInProgressHook();
    var dispatch = currentStateHook.queue.dispatch;
    currentStateHook.memoizedState = action;
    return [stateHook, dispatch, false];
  }
  function pushEffect(tag, create, inst, deps) {
    tag = {
      tag: tag,
      create: create,
      inst: inst,
      deps: deps,
      next: null
    };
    create = currentlyRenderingFiber$1.updateQueue;
    null === create && (create = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = create);
    inst = create.lastEffect;
    null === inst ? create.lastEffect = tag.next = tag : (deps = inst.next, inst.next = tag, tag.next = deps, create.lastEffect = tag);
    return tag;
  }
  function updateRef() {
    return updateWorkInProgressHook().memoizedState;
  }
  function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = mountWorkInProgressHook();
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(1 | hookFlags, create, {
      destroy: undefined
    }, undefined === deps ? null : deps);
  }
  function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var inst = hook.memoizedState.inst;
    null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushEffect(hookFlags, create, inst, deps) : (currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(1 | hookFlags, create, inst, deps));
  }
  function mountEffect(create, deps) {
    mountEffectImpl(8390656, 8, create, deps);
  }
  function updateEffect(create, deps) {
    updateEffectImpl(2048, 8, create, deps);
  }
  function updateInsertionEffect(create, deps) {
    return updateEffectImpl(4, 2, create, deps);
  }
  function updateLayoutEffect(create, deps) {
    return updateEffectImpl(4, 4, create, deps);
  }
  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) {
      create = create();
      var refCleanup = ref(create);
      return function () {
        "function" === typeof refCleanup ? refCleanup() : ref(null);
      };
    }
    if (null !== ref && undefined !== ref) return create = create(), ref.current = create, function () {
      ref.current = null;
    };
  }
  function updateImperativeHandle(ref, create, deps) {
    deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
    updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
  }
  function mountDebugValue() {}
  function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    hook.memoizedState = [callback, deps];
    return callback;
  }
  function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    prevState = nextCreate();
    if (shouldDoubleInvokeUserFnsInHooksDEV) {
      setIsStrictModeForDevtools(true);
      try {
        nextCreate();
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }
    hook.memoizedState = [prevState, deps];
    return prevState;
  }
  function mountDeferredValueImpl(hook, value, initialValue) {
    if (undefined === initialValue || 0 !== (renderLanes & 1073741824)) return hook.memoizedState = value;
    hook.memoizedState = initialValue;
    hook = requestDeferredLane();
    currentlyRenderingFiber$1.lanes |= hook;
    workInProgressRootSkippedLanes |= hook;
    return initialValue;
  }
  function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
    if (objectIs(value, prevValue)) return value;
    if (null !== currentTreeHiddenStackCursor.current) return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = true), hook;
    if (0 === (renderLanes & 42)) return didReceiveUpdate = true, hook.memoizedState = value;
    hook = requestDeferredLane();
    currentlyRenderingFiber$1.lanes |= hook;
    workInProgressRootSkippedLanes |= hook;
    return prevValue;
  }
  function startTransition(fiber, queue, pendingState, finishedState, callback) {
    var previousPriority = currentUpdatePriority;
    currentUpdatePriority = 0 !== previousPriority && 8 > previousPriority ? previousPriority : 8;
    var prevTransition = ReactSharedInternals.T,
      currentTransition = {};
    ReactSharedInternals.T = currentTransition;
    dispatchOptimisticSetState(fiber, false, queue, pendingState);
    try {
      var returnValue = callback(),
        onStartTransitionFinish = ReactSharedInternals.S;
      null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
      if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
        var thenableForFinishedState = chainThenableValue(returnValue, finishedState);
        dispatchSetStateInternal(fiber, queue, thenableForFinishedState, requestUpdateLane(fiber));
      } else dispatchSetStateInternal(fiber, queue, finishedState, requestUpdateLane(fiber));
    } catch (error) {
      dispatchSetStateInternal(fiber, queue, {
        then: function () {},
        status: "rejected",
        reason: error
      }, requestUpdateLane(fiber));
    } finally {
      currentUpdatePriority = previousPriority, ReactSharedInternals.T = prevTransition;
    }
  }
  function useHostTransitionStatus() {
    return readContext(HostTransitionContext);
  }
  function updateId() {
    return updateWorkInProgressHook().memoizedState;
  }
  function updateRefresh() {
    return updateWorkInProgressHook().memoizedState;
  }
  function refreshCache(fiber) {
    for (var provider = fiber.return; null !== provider;) {
      switch (provider.tag) {
        case 24:
        case 3:
          var lane = requestUpdateLane(provider);
          fiber = createUpdate(lane);
          var root = enqueueUpdate(provider, fiber, lane);
          null !== root && (scheduleUpdateOnFiber(root, provider, lane), entangleTransitions(root, provider, lane));
          provider = {
            cache: createCache()
          };
          fiber.payload = provider;
          return;
      }
      provider = provider.return;
    }
  }
  function dispatchReducerAction(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    action = {
      lane: lane,
      revertLane: 0,
      action: action,
      hasEagerState: false,
      eagerState: null,
      next: null
    };
    isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, action) : (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), null !== action && (scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane)));
  }
  function dispatchSetState(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    dispatchSetStateInternal(fiber, queue, action, lane);
  }
  function dispatchSetStateInternal(fiber, queue, action, lane) {
    var update = {
      lane: lane,
      revertLane: 0,
      action: action,
      hasEagerState: false,
      eagerState: null,
      next: null
    };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);else {
      var alternate = fiber.alternate;
      if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
        var currentState = queue.lastRenderedState,
          eagerState = alternate(currentState, action);
        update.hasEagerState = true;
        update.eagerState = eagerState;
        if (objectIs(eagerState, currentState)) return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), false;
      } catch (error) {} finally {}
      action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
      if (null !== action) return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), true;
    }
    return false;
  }
  function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
    action = {
      lane: 2,
      revertLane: requestTransitionLane(),
      action: action,
      hasEagerState: false,
      eagerState: null,
      next: null
    };
    if (isRenderPhaseUpdate(fiber)) {
      if (throwIfDuringRender) throw Error("Cannot update optimistic state while rendering.");
    } else throwIfDuringRender = enqueueConcurrentHookUpdate(fiber, queue, action, 2), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
  }
  function isRenderPhaseUpdate(fiber) {
    var alternate = fiber.alternate;
    return fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1;
  }
  function enqueueRenderPhaseUpdate(queue, update) {
    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
    var pending = queue.pending;
    null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
    queue.pending = update;
  }
  function entangleTransitionUpdate(root, queue, lane) {
    if (0 !== (lane & 4194176)) {
      var queueLanes = queue.lanes;
      queueLanes &= root.pendingLanes;
      lane |= queueLanes;
      queue.lanes = lane;
      markRootEntangled(root, lane);
    }
  }
  var ContextOnlyDispatcher = {
    readContext: readContext,
    use: use,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useInsertionEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useDeferredValue: throwInvalidHookError,
    useTransition: throwInvalidHookError,
    useSyncExternalStore: throwInvalidHookError,
    useId: throwInvalidHookError
  };
  ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
  ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
  ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
  ContextOnlyDispatcher.useFormState = throwInvalidHookError;
  ContextOnlyDispatcher.useActionState = throwInvalidHookError;
  ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
  var HooksDispatcherOnMount = {
    readContext: readContext,
    use: use,
    useCallback: function (callback, deps) {
      mountWorkInProgressHook().memoizedState = [callback, undefined === deps ? null : deps];
      return callback;
    },
    useContext: readContext,
    useEffect: mountEffect,
    useImperativeHandle: function (ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      mountEffectImpl(4194308, 4, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function (create, deps) {
      return mountEffectImpl(4194308, 4, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      mountEffectImpl(4, 2, create, deps);
    },
    useMemo: function (nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var nextValue = nextCreate();
      if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(true);
        try {
          nextCreate();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
      hook.memoizedState = [nextValue, deps];
      return nextValue;
    },
    useReducer: function (reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      if (undefined !== init) {
        var initialState = init(initialArg);
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          setIsStrictModeForDevtools(true);
          try {
            init(initialArg);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
      } else initialState = initialArg;
      hook.memoizedState = hook.baseState = initialState;
      reducer = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      hook.queue = reducer;
      reducer = reducer.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, reducer);
      return [hook.memoizedState, reducer];
    },
    useRef: function (initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = {
        current: initialValue
      };
      return hook.memoizedState = initialValue;
    },
    useState: function (initialState) {
      initialState = mountStateImpl(initialState);
      var queue = initialState.queue,
        dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
      queue.dispatch = dispatch;
      return [initialState.memoizedState, dispatch];
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function (value, initialValue) {
      var hook = mountWorkInProgressHook();
      return mountDeferredValueImpl(hook, value, initialValue);
    },
    useTransition: function () {
      var stateHook = mountStateImpl(false);
      stateHook = startTransition.bind(null, currentlyRenderingFiber$1, stateHook.queue, true, false);
      mountWorkInProgressHook().memoizedState = stateHook;
      return [false, stateHook];
    },
    useSyncExternalStore: function (subscribe, getSnapshot) {
      var fiber = currentlyRenderingFiber$1,
        hook = mountWorkInProgressHook();
      var nextSnapshot = getSnapshot();
      if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
      0 !== (workInProgressRootRenderLanes & 60) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
      hook.memoizedState = nextSnapshot;
      var inst = {
        value: nextSnapshot,
        getSnapshot: getSnapshot
      };
      hook.queue = inst;
      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
      fiber.flags |= 2048;
      pushEffect(9, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), {
        destroy: undefined
      }, null);
      return nextSnapshot;
    },
    useId: function () {
      var hook = mountWorkInProgressHook(),
        identifierPrefix = workInProgressRoot.identifierPrefix,
        globalClientId = globalClientIdCounter++;
      identifierPrefix = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
      return hook.memoizedState = identifierPrefix;
    },
    useCacheRefresh: function () {
      return mountWorkInProgressHook().memoizedState = refreshCache.bind(null, currentlyRenderingFiber$1);
    }
  };
  HooksDispatcherOnMount.useMemoCache = useMemoCache;
  HooksDispatcherOnMount.useHostTransitionStatus = useHostTransitionStatus;
  HooksDispatcherOnMount.useFormState = mountActionState;
  HooksDispatcherOnMount.useActionState = mountActionState;
  HooksDispatcherOnMount.useOptimistic = function (passthrough) {
    var hook = mountWorkInProgressHook();
    hook.memoizedState = hook.baseState = passthrough;
    var queue = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: null,
      lastRenderedState: null
    };
    hook.queue = queue;
    hook = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, true, queue);
    queue.dispatch = hook;
    return [passthrough, hook];
  };
  var HooksDispatcherOnUpdate = {
    readContext: readContext,
    use: use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: updateReducer,
    useRef: updateRef,
    useState: function () {
      return updateReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function (value, initialValue) {
      var hook = updateWorkInProgressHook();
      return updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    },
    useTransition: function () {
      var booleanOrThenable = updateReducer(basicStateReducer)[0],
        start = updateWorkInProgressHook().memoizedState;
      return ["boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable), start];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId
  };
  HooksDispatcherOnUpdate.useCacheRefresh = updateRefresh;
  HooksDispatcherOnUpdate.useMemoCache = useMemoCache;
  HooksDispatcherOnUpdate.useHostTransitionStatus = useHostTransitionStatus;
  HooksDispatcherOnUpdate.useFormState = updateActionState;
  HooksDispatcherOnUpdate.useActionState = updateActionState;
  HooksDispatcherOnUpdate.useOptimistic = function (passthrough, reducer) {
    var hook = updateWorkInProgressHook();
    return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
  };
  var HooksDispatcherOnRerender = {
    readContext: readContext,
    use: use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: rerenderReducer,
    useRef: updateRef,
    useState: function () {
      return rerenderReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function (value, initialValue) {
      var hook = updateWorkInProgressHook();
      return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    },
    useTransition: function () {
      var booleanOrThenable = rerenderReducer(basicStateReducer)[0],
        start = updateWorkInProgressHook().memoizedState;
      return ["boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable), start];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId
  };
  HooksDispatcherOnRerender.useCacheRefresh = updateRefresh;
  HooksDispatcherOnRerender.useMemoCache = useMemoCache;
  HooksDispatcherOnRerender.useHostTransitionStatus = useHostTransitionStatus;
  HooksDispatcherOnRerender.useFormState = rerenderActionState;
  HooksDispatcherOnRerender.useActionState = rerenderActionState;
  HooksDispatcherOnRerender.useOptimistic = function (passthrough, reducer) {
    var hook = updateWorkInProgressHook();
    if (null !== currentHook) return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
    hook.baseState = passthrough;
    return [passthrough, hook.queue.dispatch];
  };
  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : assign({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    0 === workInProgress.lanes && (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
  }
  var classComponentUpdater = {
    isMounted: function (component) {
      return (component = component._reactInternals) ? getNearestMountedFiber(component) === component : false;
    },
    enqueueSetState: function (inst, payload, callback) {
      inst = inst._reactInternals;
      var lane = requestUpdateLane(inst),
        update = createUpdate(lane);
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueReplaceState: function (inst, payload, callback) {
      inst = inst._reactInternals;
      var lane = requestUpdateLane(inst),
        update = createUpdate(lane);
      update.tag = 1;
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueForceUpdate: function (inst, callback) {
      inst = inst._reactInternals;
      var lane = requestUpdateLane(inst),
        update = createUpdate(lane);
      update.tag = 2;
      undefined !== callback && null !== callback && (update.callback = callback);
      callback = enqueueUpdate(inst, update, lane);
      null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
    }
  };
  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }
  function constructClassInstance(workInProgress, ctor, props) {
    var context = emptyContextObject,
      contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType && (context = readContext(contextType));
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternals = workInProgress;
    return ctor;
  }
  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
  function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = {};
    initializeUpdateQueue(workInProgress);
    var contextType = ctor.contextType;
    instance.context = "object" === typeof contextType && null !== contextType ? readContext(contextType) : emptyContextObject;
    instance.state = workInProgress.memoizedState;
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), processUpdateQueue(workInProgress, newProps, instance, renderLanes), suspendIfUpdateReadFromEntangledAsyncAction(), instance.state = workInProgress.memoizedState);
    "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308);
  }
  function resolveClassComponentProps(Component, baseProps) {
    var newProps = baseProps;
    if ("ref" in baseProps) {
      newProps = {};
      for (var propName in baseProps) "ref" !== propName && (newProps[propName] = baseProps[propName]);
    }
    if (Component = Component.defaultProps) {
      newProps === baseProps && (newProps = assign({}, newProps));
      for (var propName$51 in Component) undefined === newProps[propName$51] && (newProps[propName$51] = Component[propName$51]);
    }
    return newProps;
  }
  var reportGlobalError = "function" === typeof reportError ? reportError : function (error) {
    if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
      var event = new window.ErrorEvent("error", {
        bubbles: true,
        cancelable: true,
        message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
        error: error
      });
      if (!window.dispatchEvent(event)) return;
    } else if ("object" === typeof process && "function" === typeof process.emit) {
      process.emit("uncaughtException", error);
      return;
    }
    console.error(error);
  };
  function defaultOnRecoverableError(error) {
    reportGlobalError(error);
  }
  function logUncaughtError(root, errorInfo) {
    try {
      var onUncaughtError = root.onUncaughtError;
      onUncaughtError(errorInfo.value, {
        componentStack: errorInfo.stack
      });
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }
  function logCaughtError(root, boundary, errorInfo) {
    try {
      var onCaughtError = root.onCaughtError;
      onCaughtError(errorInfo.value, {
        componentStack: errorInfo.stack,
        errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
      });
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }
  function createRootErrorUpdate(root, errorInfo, lane) {
    lane = createUpdate(lane);
    lane.tag = 3;
    lane.payload = {
      element: null
    };
    lane.callback = function () {
      logUncaughtError(root, errorInfo);
    };
    return lane;
  }
  function createClassErrorUpdate(lane) {
    lane = createUpdate(lane);
    lane.tag = 3;
    return lane;
  }
  function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;
      update.payload = function () {
        return getDerivedStateFromError(error);
      };
      update.callback = function () {
        logCaughtError(root, fiber, errorInfo);
      };
    }
    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function () {
      logCaughtError(root, fiber, errorInfo);
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
  }
  function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
    sourceFiber.flags |= 32768;
    if (null !== value && "object" === typeof value && "function" === typeof value.then) {
      var currentSourceFiber = sourceFiber.alternate;
      null !== currentSourceFiber && propagateParentContextChanges(currentSourceFiber, sourceFiber, rootRenderLanes, true);
      currentSourceFiber = sourceFiber.tag;
      0 !== (sourceFiber.mode & 1) || 0 !== currentSourceFiber && 11 !== currentSourceFiber && 15 !== currentSourceFiber || ((currentSourceFiber = sourceFiber.alternate) ? (sourceFiber.updateQueue = currentSourceFiber.updateQueue, sourceFiber.memoizedState = currentSourceFiber.memoizedState, sourceFiber.lanes = currentSourceFiber.lanes) : (sourceFiber.updateQueue = null, sourceFiber.memoizedState = null));
      currentSourceFiber = suspenseHandlerStackCursor.current;
      if (null !== currentSourceFiber) {
        switch (currentSourceFiber.tag) {
          case 13:
            return sourceFiber.mode & 1 && (null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === currentSourceFiber.alternate && 0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 3)), currentSourceFiber.flags &= -257, 0 === (currentSourceFiber.mode & 1) ? currentSourceFiber === returnFiber ? currentSourceFiber.flags |= 65536 : (currentSourceFiber.flags |= 128, sourceFiber.flags |= 131072, sourceFiber.flags &= -52805, 1 === sourceFiber.tag ? null === sourceFiber.alternate ? sourceFiber.tag = 17 : (returnFiber = createUpdate(2), returnFiber.tag = 2, enqueueUpdate(sourceFiber, returnFiber, 2)) : 0 === sourceFiber.tag && null === sourceFiber.alternate && (sourceFiber.tag = 28), sourceFiber.lanes |= 2) : (currentSourceFiber.flags |= 65536, currentSourceFiber.lanes = rootRenderLanes), value === noopSuspenseyCommitThenable ? currentSourceFiber.flags |= 16384 : (returnFiber = currentSourceFiber.updateQueue, null === returnFiber ? currentSourceFiber.updateQueue = new Set([value]) : returnFiber.add(value), currentSourceFiber.mode & 1 && attachPingListener(root, value, rootRenderLanes)), false;
          case 22:
            if (currentSourceFiber.mode & 1) return currentSourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? currentSourceFiber.flags |= 16384 : (returnFiber = currentSourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
              transitions: null,
              markerInstances: null,
              retryQueue: new Set([value])
            }, currentSourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = new Set([value]) : sourceFiber.add(value)), attachPingListener(root, value, rootRenderLanes)), false;
        }
        throw Error("Unexpected Suspense handler tag (" + currentSourceFiber.tag + "). This is a bug in React.");
      }
      if (1 === root.tag) return attachPingListener(root, value, rootRenderLanes), renderDidSuspendDelayIfPossible(), false;
      value = Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
    }
    currentSourceFiber = createCapturedValueAtFiber(Error("There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.", {
      cause: value
    }), sourceFiber);
    null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [currentSourceFiber] : workInProgressRootConcurrentErrors.push(currentSourceFiber);
    4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
    if (null === returnFiber) return true;
    value = createCapturedValueAtFiber(value, sourceFiber);
    do {
      switch (returnFiber.tag) {
        case 3:
          return returnFiber.flags |= 65536, root = rootRenderLanes & -rootRenderLanes, returnFiber.lanes |= root, root = createRootErrorUpdate(returnFiber.stateNode, value, root), enqueueCapturedUpdate(returnFiber, root), false;
        case 1:
          if (sourceFiber = returnFiber.type, currentSourceFiber = returnFiber.stateNode, 0 === (returnFiber.flags & 128) && ("function" === typeof sourceFiber.getDerivedStateFromError || null !== currentSourceFiber && "function" === typeof currentSourceFiber.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(currentSourceFiber)))) return returnFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, returnFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(rootRenderLanes, root, returnFiber, value), enqueueCapturedUpdate(returnFiber, rootRenderLanes), false;
      }
      returnFiber = returnFiber.return;
    } while (null !== returnFiber);
    return false;
  }
  var SelectiveHydrationException = Error("This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."),
    didReceiveUpdate = false;
  function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
    workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderLanes) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
  }
  function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
    Component = Component.render;
    var ref = workInProgress.ref;
    if ("ref" in nextProps) {
      var propsWithoutRef = {};
      for (var key in nextProps) "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
    } else propsWithoutRef = nextProps;
    prepareToReadContext(workInProgress);
    nextProps = renderWithHooks(current, workInProgress, Component, propsWithoutRef, ref, renderLanes);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
  }
  function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null === current) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && undefined === type.defaultProps && null === Component.compare) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current, workInProgress, type, nextProps, renderLanes);
      current = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
      current.ref = workInProgress.ref;
      current.return = workInProgress;
      return workInProgress.child = current;
    }
    type = current.child;
    if (!checkScheduledUpdateOrContext(current, renderLanes)) {
      var prevProps = type.memoizedProps;
      Component = Component.compare;
      Component = null !== Component ? Component : shallowEqual;
      if (Component(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    workInProgress.flags |= 1;
    current = createWorkInProgress(type, nextProps);
    current.ref = workInProgress.ref;
    current.return = workInProgress;
    return workInProgress.child = current;
  }
  function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null !== current) {
      var prevProps = current.memoizedProps;
      if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref) if (didReceiveUpdate = false, workInProgress.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current, renderLanes)) 0 !== (current.flags & 131072) && (didReceiveUpdate = true);else return workInProgress.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
  }
  function updateOffscreenComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      nextChildren = nextProps.children,
      nextIsDetached = 0 !== (workInProgress.stateNode._pendingVisibility & 2),
      prevState = null !== current ? current.memoizedState : null;
    markRef(current, workInProgress);
    if ("hidden" === nextProps.mode || nextIsDetached) {
      if (0 !== (workInProgress.flags & 128)) {
        nextProps = null !== prevState ? prevState.baseLanes | renderLanes : renderLanes;
        if (null !== current) {
          nextChildren = workInProgress.child = current.child;
          for (nextIsDetached = 0; null !== nextChildren;) nextIsDetached = nextIsDetached | nextChildren.lanes | nextChildren.childLanes, nextChildren = nextChildren.sibling;
          workInProgress.childLanes = nextIsDetached & ~nextProps;
        } else workInProgress.childLanes = 0, workInProgress.child = null;
        return deferHiddenOffscreenComponent(current, workInProgress, nextProps, renderLanes);
      }
      if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = {
        baseLanes: 0,
        cachePool: null
      }, null !== current && pushTransition(workInProgress, null), reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress);else if (0 !== (renderLanes & 536870912)) workInProgress.memoizedState = {
        baseLanes: 0,
        cachePool: null
      }, null !== current && pushTransition(workInProgress, null !== prevState ? prevState.cachePool : null), null !== prevState ? pushHiddenContext(workInProgress, prevState) : reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress);else return workInProgress.lanes = workInProgress.childLanes = 536870912, deferHiddenOffscreenComponent(current, workInProgress, null !== prevState ? prevState.baseLanes | renderLanes : renderLanes, renderLanes);
    } else null !== prevState ? (pushTransition(workInProgress, prevState.cachePool), pushHiddenContext(workInProgress, prevState), reuseSuspenseHandlerOnStack(workInProgress), workInProgress.memoizedState = null) : (null !== current && pushTransition(workInProgress, null), reuseHiddenContextOnStack(), reuseSuspenseHandlerOnStack(workInProgress));
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
  }
  function deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes, renderLanes) {
    var JSCompiler_inline_result = peekCacheFromPool();
    JSCompiler_inline_result = null === JSCompiler_inline_result ? null : {
      parent: CacheContext._currentValue2,
      pool: JSCompiler_inline_result
    };
    workInProgress.memoizedState = {
      baseLanes: nextBaseLanes,
      cachePool: JSCompiler_inline_result
    };
    null !== current && pushTransition(workInProgress, null);
    reuseHiddenContextOnStack();
    pushOffscreenSuspenseHandler(workInProgress);
    null !== current && propagateParentContextChanges(current, workInProgress, renderLanes, true);
    return null;
  }
  function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (null === ref) null !== current && null !== current.ref && (workInProgress.flags |= 2097664);else {
      if ("function" !== typeof ref && "object" !== typeof ref) throw Error("Expected ref to be a function, an object returned by React.createRef(), or undefined/null.");
      if (null === current || current.ref !== ref) workInProgress.flags |= 2097664;
    }
  }
  function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
    prepareToReadContext(workInProgress);
    Component = renderWithHooks(current, workInProgress, Component, nextProps, undefined, renderLanes);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, Component, renderLanes);
    return workInProgress.child;
  }
  function replayFunctionComponent(current, workInProgress, nextProps, Component, secondArg, renderLanes) {
    prepareToReadContext(workInProgress);
    workInProgress.updateQueue = null;
    nextProps = renderWithHooksAgain(workInProgress, Component, nextProps, secondArg);
    finishRenderingHooks(current);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
  }
  function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
    prepareToReadContext(workInProgress);
    if (null === workInProgress.stateNode) resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), constructClassInstance(workInProgress, Component, nextProps), mountClassInstance(workInProgress, Component, nextProps, renderLanes), nextProps = true;else if (null === current) {
      var instance = workInProgress.stateNode,
        unresolvedOldProps = workInProgress.memoizedProps,
        oldProps = resolveClassComponentProps(Component, unresolvedOldProps);
      instance.props = oldProps;
      var oldContext = instance.context,
        contextType = Component.contextType,
        nextContext = emptyContextObject;
      "object" === typeof contextType && null !== contextType && (nextContext = readContext(contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps;
      contextType = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
      contextType || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (unresolvedOldProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress, instance, nextProps, nextContext);
      hasForceUpdate = false;
      var oldState = workInProgress.memoizedState;
      instance.state = oldState;
      processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
      suspendIfUpdateReadFromEntangledAsyncAction();
      oldContext = workInProgress.memoizedState;
      unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, nextContext)) ? (contextType || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308)) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = nextContext, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308), nextProps = false);
    } else {
      instance = workInProgress.stateNode;
      cloneUpdateQueue(current, workInProgress);
      nextContext = workInProgress.memoizedProps;
      contextType = resolveClassComponentProps(Component, nextContext);
      instance.props = contextType;
      getDerivedStateFromProps = workInProgress.pendingProps;
      oldState = instance.context;
      oldContext = Component.contextType;
      oldProps = emptyContextObject;
      "object" === typeof oldContext && null !== oldContext && (oldProps = readContext(oldContext));
      unresolvedOldProps = Component.getDerivedStateFromProps;
      (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (nextContext !== getDerivedStateFromProps || oldState !== oldProps) && callComponentWillReceiveProps(workInProgress, instance, nextProps, oldProps);
      hasForceUpdate = false;
      oldState = workInProgress.memoizedState;
      instance.state = oldState;
      processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
      suspendIfUpdateReadFromEntangledAsyncAction();
      var newState = workInProgress.memoizedState;
      nextContext !== getDerivedStateFromProps || oldState !== newState || hasForceUpdate || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(workInProgress, Component, unresolvedOldProps, nextProps), newState = workInProgress.memoizedState), (contextType = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, contextType, nextProps, oldState, newState, oldProps) || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies)) ? (oldContext || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, newState, oldProps), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, newState, oldProps)), "function" === typeof instance.componentDidUpdate && (workInProgress.flags |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.flags |= 1024)) : ("function" !== typeof instance.componentDidUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = newState), instance.props = nextProps, instance.state = newState, instance.context = oldProps, nextProps = contextType) : ("function" !== typeof instance.componentDidUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), nextProps = false);
    }
    return finishClassComponent(current, workInProgress, Component, nextProps, false, renderLanes);
  }
  function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
    markRef(current, workInProgress);
    hasContext = 0 !== (workInProgress.flags & 128);
    if (!shouldUpdate && !hasContext) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    shouldUpdate = workInProgress.stateNode;
    Component = hasContext && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.flags |= 1;
    null !== current && hasContext ? (workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes), workInProgress.child = reconcileChildFibers(workInProgress, null, Component, renderLanes)) : reconcileChildren(current, workInProgress, Component, renderLanes);
    workInProgress.memoizedState = shouldUpdate.state;
    return workInProgress.child;
  }
  var SUSPENDED_MARKER = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0
  };
  function mountSuspenseOffscreenState(renderLanes) {
    return {
      baseLanes: renderLanes,
      cachePool: getSuspendedCache()
    };
  }
  function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes) {
    current = null !== current ? current.childLanes & ~renderLanes : 0;
    primaryTreeDidDefer && (current |= workInProgressDeferredLane);
    return current;
  }
  function updateSuspenseComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      showFallback = false,
      didSuspend = 0 !== (workInProgress.flags & 128),
      JSCompiler_temp;
    (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current && null === current.memoizedState ? false : 0 !== (suspenseStackCursor.current & 2));
    JSCompiler_temp && (showFallback = true, workInProgress.flags &= -129);
    JSCompiler_temp = 0 !== (workInProgress.flags & 32);
    workInProgress.flags &= -33;
    if (null === current) {
      var nextPrimaryChildren = nextProps.children;
      nextProps = nextProps.fallback;
      if (showFallback) return reuseSuspenseHandlerOnStack(workInProgress), showFallback = workInProgress.mode, didSuspend = workInProgress.child, nextPrimaryChildren = {
        mode: "hidden",
        children: nextPrimaryChildren
      }, 0 === (showFallback & 1) && null !== didSuspend ? (didSuspend.childLanes = 0, didSuspend.pendingProps = nextPrimaryChildren) : didSuspend = createFiberFromOffscreen(nextPrimaryChildren, showFallback, 0, null), nextProps = createFiberFromFragment(nextProps, showFallback, renderLanes, null), didSuspend.return = workInProgress, nextProps.return = workInProgress, didSuspend.sibling = nextProps, workInProgress.child = didSuspend, nextPrimaryChildren = workInProgress.child, nextPrimaryChildren.memoizedState = mountSuspenseOffscreenState(renderLanes), nextPrimaryChildren.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, nextProps;
      pushPrimaryTreeSuspenseHandler(workInProgress);
      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
    }
    nextPrimaryChildren = current.memoizedState;
    if (null !== nextPrimaryChildren && null !== nextPrimaryChildren.dehydrated) {
      if (didSuspend) workInProgress.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags &= -257, workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes)) : null !== workInProgress.memoizedState ? (reuseSuspenseHandlerOnStack(workInProgress), workInProgress.child = current.child, workInProgress.flags |= 128, workInProgress = null) : (reuseSuspenseHandlerOnStack(workInProgress), nextPrimaryChildren = nextProps.fallback, showFallback = workInProgress.mode, nextProps = createFiberFromOffscreen({
        mode: "visible",
        children: nextProps.children
      }, showFallback, 0, null), nextPrimaryChildren = createFiberFromFragment(nextPrimaryChildren, showFallback, renderLanes, null), nextPrimaryChildren.flags |= 2, nextProps.return = workInProgress, nextPrimaryChildren.return = workInProgress, nextProps.sibling = nextPrimaryChildren, workInProgress.child = nextProps, 0 !== (workInProgress.mode & 1) && reconcileChildFibers(workInProgress, current.child, null, renderLanes), nextProps = workInProgress.child, nextProps.memoizedState = mountSuspenseOffscreenState(renderLanes), nextProps.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, workInProgress = nextPrimaryChildren);else if (pushPrimaryTreeSuspenseHandler(workInProgress), shim$1()) JSCompiler_temp = shim$1().digest, nextProps = Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."), nextProps.stack = "", nextProps.digest = JSCompiler_temp, JSCompiler_temp = {
        value: nextProps,
        source: null,
        stack: null
      }, null === hydrationErrors ? hydrationErrors = [JSCompiler_temp] : hydrationErrors.push(JSCompiler_temp), workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);else if (didReceiveUpdate || propagateParentContextChanges(current, workInProgress, renderLanes, false), JSCompiler_temp = 0 !== (renderLanes & current.childLanes), didReceiveUpdate || JSCompiler_temp) {
        JSCompiler_temp = workInProgressRoot;
        if (null !== JSCompiler_temp) {
          nextProps = renderLanes & -renderLanes;
          if (0 !== (nextProps & 42)) nextProps = 1;else switch (nextProps) {
            case 2:
              nextProps = 1;
              break;
            case 8:
              nextProps = 4;
              break;
            case 32:
              nextProps = 16;
              break;
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
              nextProps = 64;
              break;
            case 268435456:
              nextProps = 134217728;
              break;
            default:
              nextProps = 0;
          }
          nextProps = 0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes)) ? 0 : nextProps;
          if (0 !== nextProps && nextProps !== nextPrimaryChildren.retryLane) throw nextPrimaryChildren.retryLane = nextProps, enqueueConcurrentRenderForLane(current, nextProps), scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps), SelectiveHydrationException;
        }
        shim$1() || renderDidSuspendDelayIfPossible();
        workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);
      } else shim$1() ? (workInProgress.flags |= 128, workInProgress.child = current.child, retryDehydratedSuspenseBoundary.bind(null, current), shim$1(), workInProgress = null) : (workInProgress = mountSuspensePrimaryChildren(workInProgress, nextProps.children), workInProgress.flags |= 4096);
      return workInProgress;
    }
    if (showFallback) {
      reuseSuspenseHandlerOnStack(workInProgress);
      nextPrimaryChildren = nextProps.fallback;
      showFallback = workInProgress.mode;
      didSuspend = current.child;
      var currentFallbackChildFragment = didSuspend.sibling,
        primaryChildProps = {
          mode: "hidden",
          children: nextProps.children
        };
      0 === (showFallback & 1) && workInProgress.child !== didSuspend ? (nextProps = workInProgress.child, nextProps.childLanes = 0, nextProps.pendingProps = primaryChildProps, workInProgress.deletions = null) : (nextProps = createWorkInProgress(didSuspend, primaryChildProps), nextProps.subtreeFlags = didSuspend.subtreeFlags & 31457280);
      null !== currentFallbackChildFragment ? nextPrimaryChildren = createWorkInProgress(currentFallbackChildFragment, nextPrimaryChildren) : (nextPrimaryChildren = createFiberFromFragment(nextPrimaryChildren, showFallback, renderLanes, null), nextPrimaryChildren.flags |= 2);
      nextPrimaryChildren.return = workInProgress;
      nextProps.return = workInProgress;
      nextProps.sibling = nextPrimaryChildren;
      workInProgress.child = nextProps;
      nextProps = nextPrimaryChildren;
      nextPrimaryChildren = workInProgress.child;
      showFallback = current.child.memoizedState;
      null === showFallback ? showFallback = mountSuspenseOffscreenState(renderLanes) : (didSuspend = showFallback.cachePool, null !== didSuspend ? (currentFallbackChildFragment = CacheContext._currentValue2, didSuspend = didSuspend.parent !== currentFallbackChildFragment ? {
        parent: currentFallbackChildFragment,
        pool: currentFallbackChildFragment
      } : didSuspend) : didSuspend = getSuspendedCache(), showFallback = {
        baseLanes: showFallback.baseLanes | renderLanes,
        cachePool: didSuspend
      });
      nextPrimaryChildren.memoizedState = showFallback;
      nextPrimaryChildren.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return nextProps;
    }
    pushPrimaryTreeSuspenseHandler(workInProgress);
    JSCompiler_temp = current.child;
    current = JSCompiler_temp.sibling;
    JSCompiler_temp = createWorkInProgress(JSCompiler_temp, {
      mode: "visible",
      children: nextProps.children
    });
    0 === (workInProgress.mode & 1) && (JSCompiler_temp.lanes = renderLanes);
    JSCompiler_temp.return = workInProgress;
    JSCompiler_temp.sibling = null;
    null !== current && (renderLanes = workInProgress.deletions, null === renderLanes ? (workInProgress.deletions = [current], workInProgress.flags |= 16) : renderLanes.push(current));
    workInProgress.child = JSCompiler_temp;
    workInProgress.memoizedState = null;
    return JSCompiler_temp;
  }
  function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
    primaryChildren = createFiberFromOffscreen({
      mode: "visible",
      children: primaryChildren
    }, workInProgress.mode, 0, null);
    primaryChildren.return = workInProgress;
    return workInProgress.child = primaryChildren;
  }
  function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes) {
    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
    current = mountSuspensePrimaryChildren(workInProgress, workInProgress.pendingProps.children);
    current.flags |= 2;
    workInProgress.memoizedState = null;
    return current;
  }
  function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
    fiber.lanes |= renderLanes;
    var alternate = fiber.alternate;
    null !== alternate && (alternate.lanes |= renderLanes);
    scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
  }
  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
  }
  function updateSuspenseListComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      revealOrder = nextProps.revealOrder,
      tailMode = nextProps.tail;
    reconcileChildren(current, workInProgress, nextProps.children, renderLanes);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & 2)) nextProps = nextProps & 1 | 2, workInProgress.flags |= 128;else {
      if (null !== current && 0 !== (current.flags & 128)) a: for (current = workInProgress.child; null !== current;) {
        if (13 === current.tag) null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);else if (19 === current.tag) scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);else if (null !== current.child) {
          current.child.return = current;
          current = current.child;
          continue;
        }
        if (current === workInProgress) break a;
        for (; null === current.sibling;) {
          if (null === current.return || current.return === workInProgress) break a;
          current = current.return;
        }
        current.sibling.return = current.return;
        current = current.sibling;
      }
      nextProps &= 1;
    }
    push(suspenseStackCursor, nextProps);
    if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = null;else switch (revealOrder) {
      case "forwards":
        renderLanes = workInProgress.child;
        for (revealOrder = null; null !== renderLanes;) current = renderLanes.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes), renderLanes = renderLanes.sibling;
        renderLanes = revealOrder;
        null === renderLanes ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderLanes.sibling, renderLanes.sibling = null);
        initSuspenseListRenderState(workInProgress, false, revealOrder, renderLanes, tailMode);
        break;
      case "backwards":
        renderLanes = null;
        revealOrder = workInProgress.child;
        for (workInProgress.child = null; null !== revealOrder;) {
          current = revealOrder.alternate;
          if (null !== current && null === findFirstSuspended(current)) {
            workInProgress.child = revealOrder;
            break;
          }
          current = revealOrder.sibling;
          revealOrder.sibling = renderLanes;
          renderLanes = revealOrder;
          revealOrder = current;
        }
        initSuspenseListRenderState(workInProgress, true, renderLanes, null, tailMode);
        break;
      case "together":
        initSuspenseListRenderState(workInProgress, false, null, null, undefined);
        break;
      default:
        workInProgress.memoizedState = null;
    }
    return workInProgress.child;
  }
  function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
    0 === (workInProgress.mode & 1) && null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.flags |= 2);
  }
  function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
    null !== current && (workInProgress.dependencies = current.dependencies);
    workInProgressRootSkippedLanes |= workInProgress.lanes;
    if (0 === (renderLanes & workInProgress.childLanes)) if (null !== current) {
      if (propagateParentContextChanges(current, workInProgress, renderLanes, false), 0 === (renderLanes & workInProgress.childLanes)) return null;
    } else return null;
    if (null !== current && workInProgress.child !== current.child) throw Error("Resuming work not yet implemented.");
    if (null !== workInProgress.child) {
      current = workInProgress.child;
      renderLanes = createWorkInProgress(current, current.pendingProps);
      workInProgress.child = renderLanes;
      for (renderLanes.return = workInProgress; null !== current.sibling;) current = current.sibling, renderLanes = renderLanes.sibling = createWorkInProgress(current, current.pendingProps), renderLanes.return = workInProgress;
      renderLanes.sibling = null;
    }
    return workInProgress.child;
  }
  function checkScheduledUpdateOrContext(current, renderLanes) {
    if (0 !== (current.lanes & renderLanes)) return true;
    current = current.dependencies;
    return null !== current && checkIfContextChanged(current) ? true : false;
  }
  function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
    switch (workInProgress.tag) {
      case 3:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
        break;
      case 27:
      case 5:
        pushHostContext(workInProgress);
        break;
      case 4:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        break;
      case 10:
        pushProvider(workInProgress, workInProgress.type, workInProgress.memoizedProps.value);
        break;
      case 13:
        var state = workInProgress.memoizedState;
        if (null !== state) {
          if (null !== state.dehydrated) return pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags |= 128, null;
          if (0 !== (renderLanes & workInProgress.child.childLanes)) return updateSuspenseComponent(current, workInProgress, renderLanes);
          pushPrimaryTreeSuspenseHandler(workInProgress);
          current = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          return null !== current ? current.sibling : null;
        }
        pushPrimaryTreeSuspenseHandler(workInProgress);
        break;
      case 19:
        var didSuspendBefore = 0 !== (current.flags & 128);
        state = 0 !== (renderLanes & workInProgress.childLanes);
        state || (propagateParentContextChanges(current, workInProgress, renderLanes, false), state = 0 !== (renderLanes & workInProgress.childLanes));
        if (didSuspendBefore) {
          if (state) return updateSuspenseListComponent(current, workInProgress, renderLanes);
          workInProgress.flags |= 128;
        }
        didSuspendBefore = workInProgress.memoizedState;
        null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
        push(suspenseStackCursor, suspenseStackCursor.current);
        if (state) break;else return null;
      case 22:
      case 23:
        return workInProgress.lanes = 0, updateOffscreenComponent(current, workInProgress, renderLanes);
      case 24:
        pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
    }
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }
  function beginWork(current, workInProgress, renderLanes) {
    if (null !== current) {
      if (current.memoizedProps !== workInProgress.pendingProps) didReceiveUpdate = true;else {
        if (!checkScheduledUpdateOrContext(current, renderLanes) && 0 === (workInProgress.flags & 128)) return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
        didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
      }
    } else didReceiveUpdate = false;
    workInProgress.lanes = 0;
    switch (workInProgress.tag) {
      case 16:
        var elementType = workInProgress.elementType;
        a: {
          resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
          current = workInProgress.pendingProps;
          var init = elementType._init;
          elementType = init(elementType._payload);
          workInProgress.type = elementType;
          if ("function" === typeof elementType) shouldConstruct(elementType) ? (current = resolveClassComponentProps(elementType, current), workInProgress.tag = 1, workInProgress = updateClassComponent(null, workInProgress, elementType, current, renderLanes)) : (workInProgress.tag = 0, workInProgress = updateFunctionComponent(null, workInProgress, elementType, current, renderLanes));else {
            if (undefined !== elementType && null !== elementType) if (init = elementType.$$typeof, init === REACT_FORWARD_REF_TYPE) {
              workInProgress.tag = 11;
              workInProgress = updateForwardRef(null, workInProgress, elementType, current, renderLanes);
              break a;
            } else if (init === REACT_MEMO_TYPE) {
              workInProgress.tag = 14;
              workInProgress = updateMemoComponent(null, workInProgress, elementType, current, renderLanes);
              break a;
            }
            workInProgress = getComponentNameFromType(elementType) || elementType;
            throw Error("Element type is invalid. Received a promise that resolves to: " + workInProgress + ". Lazy element type must resolve to a class or function.");
          }
        }
        return workInProgress;
      case 0:
        return updateFunctionComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      case 1:
        return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), updateClassComponent(current, workInProgress, elementType, init, renderLanes);
      case 3:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        if (null === current) throw Error("Should have a current fiber. This is a bug in React.");
        var nextProps = workInProgress.pendingProps;
        init = workInProgress.memoizedState;
        elementType = init.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
        nextProps = workInProgress.memoizedState;
        var nextCache = nextProps.cache;
        pushProvider(workInProgress, CacheContext, nextCache);
        nextCache !== init.cache && propagateContextChanges(workInProgress, [CacheContext], renderLanes, true);
        suspendIfUpdateReadFromEntangledAsyncAction();
        init = nextProps.element;
        init === elementType ? workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) : (reconcileChildren(current, workInProgress, init, renderLanes), workInProgress = workInProgress.child);
        return workInProgress;
      case 26:
      case 27:
      case 5:
        return pushHostContext(workInProgress), elementType = workInProgress.pendingProps.children, null !== workInProgress.memoizedState && (init = renderWithHooks(current, workInProgress, TransitionAwareHostComponent, null, null, renderLanes), HostTransitionContext._currentValue2 = init), markRef(current, workInProgress), reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
      case 6:
        return null;
      case 13:
        return updateSuspenseComponent(current, workInProgress, renderLanes);
      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), elementType = workInProgress.pendingProps, null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, elementType, renderLanes) : reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
      case 11:
        return updateForwardRef(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      case 7:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderLanes), workInProgress.child;
      case 8:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
      case 12:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
      case 10:
        return elementType = workInProgress.pendingProps, pushProvider(workInProgress, workInProgress.type, elementType.value), reconcileChildren(current, workInProgress, elementType.children, renderLanes), workInProgress.child;
      case 9:
        return init = workInProgress.type._context, elementType = workInProgress.pendingProps.children, prepareToReadContext(workInProgress), init = readContext(init), elementType = elementType(init), workInProgress.flags |= 1, reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
      case 14:
        return updateMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      case 15:
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      case 17:
        return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 1, prepareToReadContext(workInProgress), constructClassInstance(workInProgress, elementType, init), mountClassInstance(workInProgress, elementType, init, renderLanes), finishClassComponent(null, workInProgress, elementType, true, false, renderLanes);
      case 28:
        return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 0, updateFunctionComponent(null, workInProgress, elementType, init, renderLanes);
      case 19:
        return updateSuspenseListComponent(current, workInProgress, renderLanes);
      case 22:
        return updateOffscreenComponent(current, workInProgress, renderLanes);
      case 24:
        return prepareToReadContext(workInProgress), elementType = readContext(CacheContext), null === current ? (init = peekCacheFromPool(), null === init && (init = workInProgressRoot, nextProps = createCache(), init.pooledCache = nextProps, nextProps.refCount++, null !== nextProps && (init.pooledCacheLanes |= renderLanes), init = nextProps), workInProgress.memoizedState = {
          parent: elementType,
          cache: init
        }, initializeUpdateQueue(workInProgress), pushProvider(workInProgress, CacheContext, init)) : (0 !== (current.lanes & renderLanes) && (cloneUpdateQueue(current, workInProgress), processUpdateQueue(workInProgress, null, null, renderLanes), suspendIfUpdateReadFromEntangledAsyncAction()), init = current.memoizedState, nextProps = workInProgress.memoizedState, init.parent !== elementType ? (init = {
          parent: elementType,
          cache: elementType
        }, workInProgress.memoizedState = init, 0 === workInProgress.lanes && (workInProgress.memoizedState = workInProgress.updateQueue.baseState = init), pushProvider(workInProgress, CacheContext, elementType)) : (elementType = nextProps.cache, pushProvider(workInProgress, CacheContext, elementType), elementType !== init.cache && propagateContextChanges(workInProgress, [CacheContext], renderLanes, true))), reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
      case 29:
        throw workInProgress.pendingProps;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  }
  var valueCursor = createCursor(null),
    currentlyRenderingFiber = null,
    lastContextDependency = null;
  function pushProvider(providerFiber, context, nextValue) {
    push(valueCursor, context._currentValue2);
    context._currentValue2 = nextValue;
  }
  function popProvider(context) {
    context._currentValue2 = valueCursor.current;
    pop(valueCursor);
  }
  function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
    for (; null !== parent;) {
      var alternate = parent.alternate;
      (parent.childLanes & renderLanes) !== renderLanes ? (parent.childLanes |= renderLanes, null !== alternate && (alternate.childLanes |= renderLanes)) : null !== alternate && (alternate.childLanes & renderLanes) !== renderLanes && (alternate.childLanes |= renderLanes);
      if (parent === propagationRoot) break;
      parent = parent.return;
    }
  }
  function propagateContextChanges(workInProgress, contexts, renderLanes, forcePropagateEntireTree) {
    var fiber = workInProgress.child;
    null !== fiber && (fiber.return = workInProgress);
    for (; null !== fiber;) {
      var list = fiber.dependencies;
      if (null !== list) {
        var nextFiber = fiber.child;
        list = list.firstContext;
        a: for (; null !== list;) {
          var dependency = list;
          list = fiber;
          for (var i = 0; i < contexts.length; i++) if (dependency.context === contexts[i]) {
            list.lanes |= renderLanes;
            dependency = list.alternate;
            null !== dependency && (dependency.lanes |= renderLanes);
            scheduleContextWorkOnParentPath(list.return, renderLanes, workInProgress);
            forcePropagateEntireTree || (nextFiber = null);
            break a;
          }
          list = dependency.next;
        }
      } else if (18 === fiber.tag) {
        nextFiber = fiber.return;
        if (null === nextFiber) throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
        nextFiber.lanes |= renderLanes;
        list = nextFiber.alternate;
        null !== list && (list.lanes |= renderLanes);
        scheduleContextWorkOnParentPath(nextFiber, renderLanes, workInProgress);
        nextFiber = null;
      } else nextFiber = fiber.child;
      if (null !== nextFiber) nextFiber.return = fiber;else for (nextFiber = fiber; null !== nextFiber;) {
        if (nextFiber === workInProgress) {
          nextFiber = null;
          break;
        }
        fiber = nextFiber.sibling;
        if (null !== fiber) {
          fiber.return = nextFiber.return;
          nextFiber = fiber;
          break;
        }
        nextFiber = nextFiber.return;
      }
      fiber = nextFiber;
    }
  }
  function propagateParentContextChanges(current, workInProgress, renderLanes, forcePropagateEntireTree) {
    current = null;
    for (var parent = workInProgress, isInsidePropagationBailout = false; null !== parent;) {
      if (!isInsidePropagationBailout) if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true;else if (0 !== (parent.flags & 262144)) break;
      if (10 === parent.tag) {
        var currentParent = parent.alternate;
        if (null === currentParent) throw Error("Should have a current fiber. This is a bug in React.");
        currentParent = currentParent.memoizedProps;
        if (null !== currentParent) {
          var context = parent.type;
          objectIs(parent.pendingProps.value, currentParent.value) || (null !== current ? current.push(context) : current = [context]);
        }
      } else if (parent === hostTransitionProviderCursor.current) {
        currentParent = parent.alternate;
        if (null === currentParent) throw Error("Should have a current fiber. This is a bug in React.");
        currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current ? current.push(HostTransitionContext) : current = [HostTransitionContext]);
      }
      parent = parent.return;
    }
    null !== current && propagateContextChanges(workInProgress, current, renderLanes, forcePropagateEntireTree);
    workInProgress.flags |= 262144;
  }
  function checkIfContextChanged(currentDependencies) {
    for (currentDependencies = currentDependencies.firstContext; null !== currentDependencies;) {
      if (!objectIs(currentDependencies.context._currentValue2, currentDependencies.memoizedValue)) return true;
      currentDependencies = currentDependencies.next;
    }
    return false;
  }
  function prepareToReadContext(workInProgress) {
    currentlyRenderingFiber = workInProgress;
    lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && (workInProgress.firstContext = null);
  }
  function readContext(context) {
    return readContextForConsumer(currentlyRenderingFiber, context);
  }
  function readContextDuringReconciliation(consumer, context) {
    null === currentlyRenderingFiber && prepareToReadContext(consumer);
    return readContextForConsumer(consumer, context);
  }
  function readContextForConsumer(consumer, context) {
    var value = context._currentValue2;
    context = {
      context: context,
      memoizedValue: value,
      next: null
    };
    if (null === lastContextDependency) {
      if (null === consumer) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      lastContextDependency = context;
      consumer.dependencies = {
        lanes: 0,
        firstContext: context
      };
      consumer.flags |= 524288;
    } else lastContextDependency = lastContextDependency.next = context;
    return value;
  }
  var AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function () {
      var listeners = [],
        signal = this.signal = {
          aborted: false,
          addEventListener: function (type, listener) {
            listeners.push(listener);
          }
        };
      this.abort = function () {
        signal.aborted = true;
        listeners.forEach(function (listener) {
          return listener();
        });
      };
    },
    scheduleCallback$1 = Scheduler.unstable_scheduleCallback,
    NormalPriority = Scheduler.unstable_NormalPriority,
    CacheContext = {
      $$typeof: REACT_CONTEXT_TYPE,
      Consumer: null,
      Provider: null,
      _currentValue: null,
      _currentValue2: null,
      _threadCount: 0
    };
  function createCache() {
    return {
      controller: new AbortControllerLocal(),
      data: new Map(),
      refCount: 0
    };
  }
  function releaseCache(cache) {
    cache.refCount--;
    0 === cache.refCount && scheduleCallback$1(NormalPriority, function () {
      cache.controller.abort();
    });
  }
  var prevOnStartTransitionFinish = ReactSharedInternals.S;
  ReactSharedInternals.S = function (transition, returnValue) {
    "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
    null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
  };
  var resumedCache = createCursor(null);
  function peekCacheFromPool() {
    var cacheResumedFromPreviousRender = resumedCache.current;
    return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
  }
  function pushTransition(offscreenWorkInProgress, prevCachePool) {
    null === prevCachePool ? push(resumedCache, resumedCache.current) : push(resumedCache, prevCachePool.pool);
  }
  function getSuspendedCache() {
    var cacheFromPool = peekCacheFromPool();
    return null === cacheFromPool ? null : {
      parent: CacheContext._currentValue2,
      pool: cacheFromPool
    };
  }
  function doesRequireClone(current, completedWork) {
    if (null !== current && current.child === completedWork.child) return false;
    if (0 !== (completedWork.flags & 16)) return true;
    for (current = completedWork.child; null !== current;) {
      if (0 !== (current.flags & 13878) || 0 !== (current.subtreeFlags & 13878)) return true;
      current = current.sibling;
    }
    return false;
  }
  function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag) {
        var instance = node.stateNode;
        needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance));
        appendChildNode(parent.node, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;
        if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
        appendChildNode(parent.node, instance.node);
      } else if (4 !== node.tag) if (22 === node.tag && null !== node.memoizedState) instance = node.child, null !== instance && (instance.return = node), appendAllChildren(parent, node, true, true);else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) break;
      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
  function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    for (var node = workInProgress.child; null !== node;) {
      if (5 === node.tag) {
        var instance = node.stateNode;
        needsVisibilityToggle && isHidden && (instance = cloneHiddenInstance(instance));
        appendChildNodeToSet(containerChildSet, instance.node);
      } else if (6 === node.tag) {
        instance = node.stateNode;
        if (needsVisibilityToggle && isHidden) throw Error("Not yet implemented.");
        appendChildNodeToSet(containerChildSet, instance.node);
      } else if (4 !== node.tag) if (22 === node.tag && null !== node.memoizedState) instance = node.child, null !== instance && (instance.return = node), appendAllChildrenToContainer(containerChildSet, node, !(null !== node.memoizedProps && "manual" === node.memoizedProps.mode), true);else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) break;
      for (; null === node.sibling;) {
        if (null === node.return || node.return === workInProgress) return;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
  function updateHostContainer(current, workInProgress) {
    if (doesRequireClone(current, workInProgress)) {
      current = workInProgress.stateNode;
      var container = current.containerInfo,
        newChildSet = createChildNodeSet();
      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
      current.pendingChildren = newChildSet;
      workInProgress.flags |= 4;
      completeRoot(container, newChildSet);
    }
  }
  function scheduleRetryEffect(workInProgress, retryQueue) {
    null !== retryQueue && (workInProgress.flags |= 4);
    workInProgress.flags & 16384 && (retryQueue = 22 !== workInProgress.tag ? claimNextRetryLane() : 536870912, workInProgress.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
  }
  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;
        for (var lastTailNode = null; null !== hasRenderedATailFallback;) null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
        break;
      case "collapsed":
        lastTailNode = renderState.tail;
        for (var lastTailNode$92 = null; null !== lastTailNode;) null !== lastTailNode.alternate && (lastTailNode$92 = lastTailNode), lastTailNode = lastTailNode.sibling;
        null === lastTailNode$92 ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$92.sibling = null;
    }
  }
  function bubbleProperties(completedWork) {
    var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child,
      newChildLanes = 0,
      subtreeFlags = 0;
    if (didBailout) for (var child$93 = completedWork.child; null !== child$93;) newChildLanes |= child$93.lanes | child$93.childLanes, subtreeFlags |= child$93.subtreeFlags & 31457280, subtreeFlags |= child$93.flags & 31457280, child$93.return = completedWork, child$93 = child$93.sibling;else for (child$93 = completedWork.child; null !== child$93;) newChildLanes |= child$93.lanes | child$93.childLanes, subtreeFlags |= child$93.subtreeFlags, subtreeFlags |= child$93.flags, child$93.return = completedWork, child$93 = child$93.sibling;
    completedWork.subtreeFlags |= subtreeFlags;
    completedWork.childLanes = newChildLanes;
    return didBailout;
  }
  function completeWork(current, workInProgress, renderLanes) {
    var newProps = workInProgress.pendingProps;
    switch (workInProgress.tag) {
      case 28:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return bubbleProperties(workInProgress), null;
      case 1:
        return bubbleProperties(workInProgress), null;
      case 3:
        return newProps = workInProgress.stateNode, renderLanes = null, null !== current && (renderLanes = current.memoizedState.cache), workInProgress.memoizedState.cache !== renderLanes && (workInProgress.flags |= 2048), popProvider(CacheContext), popHostContainer(), newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null), null !== current && null !== current.child || null === current || current.memoizedState.isDehydrated && 0 === (workInProgress.flags & 256) || (workInProgress.flags |= 1024, null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null)), updateHostContainer(current, workInProgress), bubbleProperties(workInProgress), null;
      case 26:
      case 27:
      case 5:
        popHostContext(workInProgress);
        renderLanes = workInProgress.type;
        if (null !== current && null != workInProgress.stateNode) {
          renderLanes = current.stateNode;
          var oldProps = current.memoizedProps;
          if ((current = doesRequireClone(current, workInProgress)) || oldProps !== newProps) {
            b: {
              oldProps = diffProperties(null, oldProps, newProps, renderLanes.canonical.viewConfig.validAttributes);
              renderLanes.canonical.currentProps = newProps;
              newProps = renderLanes.node;
              if (current) newProps = null !== oldProps ? cloneNodeWithNewChildrenAndProps(newProps, oldProps) : cloneNodeWithNewChildren(newProps);else if (null !== oldProps) newProps = cloneNodeWithNewProps(newProps, oldProps);else {
                newProps = renderLanes;
                break b;
              }
              newProps = {
                node: newProps,
                canonical: renderLanes.canonical
              };
            }
            newProps === renderLanes ? workInProgress.stateNode = renderLanes : (workInProgress.stateNode = newProps, current ? appendAllChildren(newProps, workInProgress, false, false) : workInProgress.flags |= 4);
          } else workInProgress.stateNode = renderLanes;
        } else {
          if (!newProps) {
            if (null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            bubbleProperties(workInProgress);
            return null;
          }
          oldProps = rootInstanceStackCursor.current;
          current = nextReactTag;
          nextReactTag += 2;
          renderLanes = getViewConfigForType(renderLanes);
          var updatePayload = fastAddProperties(null, newProps, renderLanes.validAttributes);
          oldProps = createNode(current, renderLanes.uiViewClassName, oldProps, updatePayload, workInProgress);
          updatePayload = ReactNativePrivateInterface.createPublicInstance(current, renderLanes, workInProgress);
          current = {
            node: oldProps,
            canonical: {
              nativeTag: current,
              viewConfig: renderLanes,
              currentProps: newProps,
              internalInstanceHandle: workInProgress,
              publicInstance: updatePayload
            }
          };
          appendAllChildren(current, workInProgress, false, false);
          workInProgress.stateNode = current;
        }
        bubbleProperties(workInProgress);
        workInProgress.flags &= -16777217;
        return null;
      case 6:
        if (current && null != workInProgress.stateNode) current.memoizedProps !== newProps ? (workInProgress.stateNode = createTextInstance(newProps, rootInstanceStackCursor.current, contextStackCursor.current, workInProgress), workInProgress.flags |= 4) : workInProgress.stateNode = current.stateNode;else {
          if ("string" !== typeof newProps && null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
          workInProgress.stateNode = createTextInstance(newProps, rootInstanceStackCursor.current, contextStackCursor.current, workInProgress);
        }
        bubbleProperties(workInProgress);
        return null;
      case 13:
        newProps = workInProgress.memoizedState;
        if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
          if (null !== newProps && null !== newProps.dehydrated) {
            if (null === current) {
              throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
            }
            0 === (workInProgress.flags & 128) && (workInProgress.memoizedState = null);
            workInProgress.flags |= 4;
            bubbleProperties(workInProgress);
            oldProps = false;
          } else null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null), oldProps = true;
          if (!oldProps) {
            if (workInProgress.flags & 256) return popSuspenseHandler(workInProgress), workInProgress;
            popSuspenseHandler(workInProgress);
            return null;
          }
        }
        popSuspenseHandler(workInProgress);
        if (0 !== (workInProgress.flags & 128)) return workInProgress.lanes = renderLanes, workInProgress;
        newProps = null !== newProps;
        current = null !== current && null !== current.memoizedState;
        newProps && (renderLanes = workInProgress.child, oldProps = null, null !== renderLanes.alternate && null !== renderLanes.alternate.memoizedState && null !== renderLanes.alternate.memoizedState.cachePool && (oldProps = renderLanes.alternate.memoizedState.cachePool.pool), updatePayload = null, null !== renderLanes.memoizedState && null !== renderLanes.memoizedState.cachePool && (updatePayload = renderLanes.memoizedState.cachePool.pool), updatePayload !== oldProps && (renderLanes.flags |= 2048));
        newProps !== current && newProps && (workInProgress.child.flags |= 8192);
        scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
        bubbleProperties(workInProgress);
        return null;
      case 4:
        return popHostContainer(), updateHostContainer(current, workInProgress), bubbleProperties(workInProgress), null;
      case 10:
        return popProvider(workInProgress.type), bubbleProperties(workInProgress), null;
      case 17:
        return bubbleProperties(workInProgress), null;
      case 19:
        pop(suspenseStackCursor);
        oldProps = workInProgress.memoizedState;
        if (null === oldProps) return bubbleProperties(workInProgress), null;
        newProps = 0 !== (workInProgress.flags & 128);
        updatePayload = oldProps.rendering;
        if (null === updatePayload) {
          if (newProps) cutOffTailIfNeeded(oldProps, false);else {
            if (0 !== workInProgressRootExitStatus || null !== current && 0 !== (current.flags & 128)) for (current = workInProgress.child; null !== current;) {
              updatePayload = findFirstSuspended(current);
              if (null !== updatePayload) {
                workInProgress.flags |= 128;
                cutOffTailIfNeeded(oldProps, false);
                current = updatePayload.updateQueue;
                workInProgress.updateQueue = current;
                scheduleRetryEffect(workInProgress, current);
                workInProgress.subtreeFlags = 0;
                current = renderLanes;
                for (newProps = workInProgress.child; null !== newProps;) resetWorkInProgress(newProps, current), newProps = newProps.sibling;
                push(suspenseStackCursor, suspenseStackCursor.current & 1 | 2);
                return workInProgress.child;
              }
              current = current.sibling;
            }
            null !== oldProps.tail && now() > workInProgressRootRenderTargetTime && (workInProgress.flags |= 128, newProps = true, cutOffTailIfNeeded(oldProps, false), workInProgress.lanes = 4194304);
          }
        } else {
          if (!newProps) if (current = findFirstSuspended(updatePayload), null !== current) {
            if (workInProgress.flags |= 128, newProps = true, current = current.updateQueue, workInProgress.updateQueue = current, scheduleRetryEffect(workInProgress, current), cutOffTailIfNeeded(oldProps, true), null === oldProps.tail && "hidden" === oldProps.tailMode && !updatePayload.alternate) return bubbleProperties(workInProgress), null;
          } else 2 * now() - oldProps.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes && (workInProgress.flags |= 128, newProps = true, cutOffTailIfNeeded(oldProps, false), workInProgress.lanes = 4194304);
          oldProps.isBackwards ? (updatePayload.sibling = workInProgress.child, workInProgress.child = updatePayload) : (current = oldProps.last, null !== current ? current.sibling = updatePayload : workInProgress.child = updatePayload, oldProps.last = updatePayload);
        }
        if (null !== oldProps.tail) return workInProgress = oldProps.tail, oldProps.rendering = workInProgress, oldProps.tail = workInProgress.sibling, oldProps.renderingStartTime = now(), workInProgress.sibling = null, current = suspenseStackCursor.current, push(suspenseStackCursor, newProps ? current & 1 | 2 : current & 1), workInProgress;
        bubbleProperties(workInProgress);
        return null;
      case 22:
      case 23:
        return popSuspenseHandler(workInProgress), popHiddenContext(), newProps = null !== workInProgress.memoizedState, null !== current ? null !== current.memoizedState !== newProps && (workInProgress.flags |= 8192) : newProps && (workInProgress.flags |= 8192), newProps && 0 !== (workInProgress.mode & 1) ? 0 !== (renderLanes & 536870912) && 0 === (workInProgress.flags & 128) && (bubbleProperties(workInProgress), workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192)) : bubbleProperties(workInProgress), newProps = workInProgress.updateQueue, null !== newProps && scheduleRetryEffect(workInProgress, newProps.retryQueue), newProps = null, null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (newProps = current.memoizedState.cachePool.pool), renderLanes = null, null !== workInProgress.memoizedState && null !== workInProgress.memoizedState.cachePool && (renderLanes = workInProgress.memoizedState.cachePool.pool), renderLanes !== newProps && (workInProgress.flags |= 2048), null !== current && pop(resumedCache), null;
      case 24:
        return newProps = null, null !== current && (newProps = current.memoizedState.cache), workInProgress.memoizedState.cache !== newProps && (workInProgress.flags |= 2048), popProvider(CacheContext), bubbleProperties(workInProgress), null;
      case 25:
        return null;
      case 29:
        return null;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  }
  function unwindWork(current, workInProgress) {
    switch (workInProgress.tag) {
      case 1:
        return current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 3:
        return popProvider(CacheContext), popHostContainer(), current = workInProgress.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 26:
      case 27:
      case 5:
        return popHostContext(workInProgress), null;
      case 13:
        popSuspenseHandler(workInProgress);
        current = workInProgress.memoizedState;
        if (null !== current && null !== current.dehydrated && null === workInProgress.alternate) throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
        current = workInProgress.flags;
        return current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 19:
        return pop(suspenseStackCursor), null;
      case 4:
        return popHostContainer(), null;
      case 10:
        return popProvider(workInProgress.type), null;
      case 22:
      case 23:
        return popSuspenseHandler(workInProgress), popHiddenContext(), null !== current && pop(resumedCache), current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 24:
        return popProvider(CacheContext), null;
      case 25:
        return null;
      default:
        return null;
    }
  }
  function unwindInterruptedWork(current, interruptedWork) {
    switch (interruptedWork.tag) {
      case 3:
        popProvider(CacheContext);
        popHostContainer();
        break;
      case 26:
      case 27:
      case 5:
        popHostContext(interruptedWork);
        break;
      case 4:
        popHostContainer();
        break;
      case 13:
        popSuspenseHandler(interruptedWork);
        break;
      case 19:
        pop(suspenseStackCursor);
        break;
      case 10:
        popProvider(interruptedWork.type);
        break;
      case 22:
      case 23:
        popSuspenseHandler(interruptedWork);
        popHiddenContext();
        null !== current && pop(resumedCache);
        break;
      case 24:
        popProvider(CacheContext);
    }
  }
  function commitHookEffectListMount(flags, finishedWork) {
    try {
      var updateQueue = finishedWork.updateQueue,
        lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
      if (null !== lastEffect) {
        var firstEffect = lastEffect.next;
        updateQueue = firstEffect;
        do {
          if ((updateQueue.tag & flags) === flags) {
            lastEffect = undefined;
            var create$114 = updateQueue.create,
              inst = updateQueue.inst;
            lastEffect = create$114();
            inst.destroy = lastEffect;
          }
          updateQueue = updateQueue.next;
        } while (updateQueue !== firstEffect);
      }
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
  }
  function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor$jscomp$0) {
    try {
      var updateQueue = finishedWork.updateQueue,
        lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
      if (null !== lastEffect) {
        var firstEffect = lastEffect.next;
        updateQueue = firstEffect;
        do {
          if ((updateQueue.tag & flags) === flags) {
            var inst = updateQueue.inst,
              destroy = inst.destroy;
            if (undefined !== destroy) {
              inst.destroy = undefined;
              lastEffect = finishedWork;
              var nearestMountedAncestor = nearestMountedAncestor$jscomp$0;
              try {
                destroy();
              } catch (error) {
                captureCommitPhaseError(lastEffect, nearestMountedAncestor, error);
              }
            }
          }
          updateQueue = updateQueue.next;
        } while (updateQueue !== firstEffect);
      }
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
  }
  function commitClassCallbacks(finishedWork) {
    var updateQueue = finishedWork.updateQueue;
    if (null !== updateQueue) {
      var instance = finishedWork.stateNode;
      try {
        commitCallbacks(updateQueue, instance);
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
  }
  function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
    instance.props = resolveClassComponentProps(current.type, current.memoizedProps);
    instance.state = current.memoizedState;
    try {
      instance.componentWillUnmount();
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
  }
  function safelyAttachRef(current, nearestMountedAncestor) {
    try {
      var ref = current.ref;
      if (null !== ref) {
        var instance = current.stateNode;
        switch (current.tag) {
          case 26:
          case 27:
          case 5:
            var instanceToUse = getPublicInstance(instance);
            break;
          default:
            instanceToUse = instance;
        }
        "function" === typeof ref ? current.refCleanup = ref(instanceToUse) : ref.current = instanceToUse;
      }
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
  }
  function safelyDetachRef(current, nearestMountedAncestor) {
    var ref = current.ref,
      refCleanup = current.refCleanup;
    if (null !== ref) if ("function" === typeof refCleanup) try {
      refCleanup();
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    } finally {
      current.refCleanup = null, current = current.alternate, null != current && (current.refCleanup = null);
    } else if ("function" === typeof ref) try {
      ref(null);
    } catch (error$116) {
      captureCommitPhaseError(current, nearestMountedAncestor, error$116);
    } else ref.current = null;
  }
  function commitHostMount(finishedWork) {
    try {
      throw Error("The current renderer does not support mutation. This error is likely caused by a bug in React. Please file an issue.");
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
  }
  var offscreenSubtreeIsHidden = false,
    offscreenSubtreeWasHidden = false,
    PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
    nextEffect = null,
    shouldFireAfterActiveInstanceBlur = false;
  function commitBeforeMutationEffects(root, firstChild) {
    for (nextEffect = firstChild; null !== nextEffect;) if (root = nextEffect, firstChild = root.child, 0 !== (root.subtreeFlags & 1028) && null !== firstChild) firstChild.return = root, nextEffect = firstChild;else for (; null !== nextEffect;) {
      root = nextEffect;
      var current = root.alternate;
      firstChild = root.flags;
      switch (root.tag) {
        case 0:
          break;
        case 11:
        case 15:
          break;
        case 1:
          if (0 !== (firstChild & 1024) && null !== current) {
            firstChild = undefined;
            var finishedWork = root,
              prevProps = current.memoizedProps;
            current = current.memoizedState;
            var instance = finishedWork.stateNode;
            try {
              var resolvedPrevProps = resolveClassComponentProps(finishedWork.type, prevProps, finishedWork.elementType === finishedWork.type);
              firstChild = instance.getSnapshotBeforeUpdate(resolvedPrevProps, current);
              instance.__reactInternalSnapshotBeforeUpdate = firstChild;
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          break;
        case 3:
          break;
        case 5:
        case 26:
        case 27:
        case 6:
        case 4:
        case 17:
          break;
        default:
          if (0 !== (firstChild & 1024)) throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
      }
      firstChild = root.sibling;
      if (null !== firstChild) {
        firstChild.return = root.return;
        nextEffect = firstChild;
        break;
      }
      nextEffect = root.return;
    }
    resolvedPrevProps = shouldFireAfterActiveInstanceBlur;
    shouldFireAfterActiveInstanceBlur = false;
    return resolvedPrevProps;
  }
  function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
    var flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        flags & 4 && commitHookEffectListMount(5, finishedWork);
        break;
      case 1:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        if (flags & 4) if (finishedRoot = finishedWork.stateNode, null === current) try {
          finishedRoot.componentDidMount();
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        } else {
          var prevProps = resolveClassComponentProps(finishedWork.type, current.memoizedProps);
          current = current.memoizedState;
          try {
            finishedRoot.componentDidUpdate(prevProps, current, finishedRoot.__reactInternalSnapshotBeforeUpdate);
          } catch (error$115) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$115);
          }
        }
        flags & 64 && commitClassCallbacks(finishedWork);
        flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
        break;
      case 3:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        if (flags & 64 && (flags = finishedWork.updateQueue, null !== flags)) {
          finishedRoot = null;
          if (null !== finishedWork.child) switch (finishedWork.child.tag) {
            case 27:
            case 5:
              finishedRoot = getPublicInstance(finishedWork.child.stateNode);
              break;
            case 1:
              finishedRoot = finishedWork.child.stateNode;
          }
          try {
            commitCallbacks(flags, finishedRoot);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        break;
      case 26:
      case 27:
      case 5:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        null === current && flags & 4 && commitHostMount(finishedWork);
        flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
        break;
      case 12:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        break;
      case 13:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        break;
      case 22:
        if (0 !== (finishedWork.mode & 1)) {
          if (prevProps = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden, !prevProps) {
            current = null !== current && null !== current.memoizedState || offscreenSubtreeWasHidden;
            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,
              prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = prevProps;
            (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, 0 !== (finishedWork.subtreeFlags & 8772)) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          }
        } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        flags & 512 && ("manual" === finishedWork.memoizedProps.mode ? safelyAttachRef(finishedWork, finishedWork.return) : safelyDetachRef(finishedWork, finishedWork.return));
        break;
      default:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
    }
  }
  function detachFiberAfterEffects(fiber) {
    var alternate = fiber.alternate;
    null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
    fiber.child = null;
    fiber.deletions = null;
    fiber.sibling = null;
    fiber.stateNode = null;
    fiber.return = null;
    fiber.dependencies = null;
    fiber.memoizedProps = null;
    fiber.memoizedState = null;
    fiber.pendingProps = null;
    fiber.stateNode = null;
    fiber.updateQueue = null;
  }
  function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
    for (parent = parent.child; null !== parent;) commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
  }
  function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount) try {
      injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
    } catch (err) {}
    switch (deletedFiber.tag) {
      case 26:
      case 27:
      case 5:
        offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
      case 6:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 18:
        break;
      case 4:
        createChildNodeSet();
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        offscreenSubtreeWasHidden || commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
        offscreenSubtreeWasHidden || commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 1:
        if (!offscreenSubtreeWasHidden) {
          safelyDetachRef(deletedFiber, nearestMountedAncestor);
          var instance = deletedFiber.stateNode;
          "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
        }
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 21:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 22:
        offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
        deletedFiber.mode & 1 ? (offscreenSubtreeWasHidden = (instance = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), offscreenSubtreeWasHidden = instance) : recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      default:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
    }
  }
  function getRetryCache(finishedWork) {
    switch (finishedWork.tag) {
      case 13:
      case 19:
        var retryCache = finishedWork.stateNode;
        null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
        return retryCache;
      case 22:
        return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
      default:
        throw Error("Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a bug in React.");
    }
  }
  function attachSuspenseRetryListeners(finishedWork, wakeables) {
    var retryCache = getRetryCache(finishedWork);
    wakeables.forEach(function (wakeable) {
      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
      retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry));
    });
  }
  function recursivelyTraverseMutationEffects(root, parentFiber) {
    var deletions = parentFiber.deletions;
    if (null !== deletions) for (var i = 0; i < deletions.length; i++) {
      var childToDelete = deletions[i];
      commitDeletionEffectsOnFiber(root, parentFiber, childToDelete);
      var alternate = childToDelete.alternate;
      null !== alternate && (alternate.return = null);
      childToDelete.return = null;
    }
    if (parentFiber.subtreeFlags & 13878) for (parentFiber = parentFiber.child; null !== parentFiber;) commitMutationEffectsOnFiber(parentFiber, root), parentFiber = parentFiber.sibling;
  }
  function commitMutationEffectsOnFiber(finishedWork, root) {
    var current = finishedWork.alternate,
      flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 4 && (commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork), commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
        break;
      case 1:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
        flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags && (current = finishedWork.shared.hiddenCallbacks, finishedWork.shared.hiddenCallbacks = null === current ? flags : current.concat(flags))));
        break;
      case 26:
      case 27:
      case 5:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
        break;
      case 6:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 3:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 4:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 12:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 13:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        finishedWork.child.flags & 8192 && (current = null !== current && null !== current.memoizedState, null === finishedWork.memoizedState || current || (globalMostRecentFallbackTime = now()));
        flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
        break;
      case 22:
        flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
        var isHidden = null !== finishedWork.memoizedState,
          wasHidden = null !== current && null !== current.memoizedState;
        if (finishedWork.mode & 1) {
          var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,
            prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || isHidden;
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
          recursivelyTraverseMutationEffects(root, finishedWork);
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
        } else recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        root = finishedWork.stateNode;
        root._current = finishedWork;
        root._visibility &= -3;
        root._visibility |= root._pendingVisibility & 2;
        flags & 8192 && (root._visibility = isHidden ? root._visibility & -2 : root._visibility | 1, isHidden && (isHidden = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden, null === current || wasHidden || isHidden || 0 !== (finishedWork.mode & 1) && recursivelyTraverseDisappearLayoutEffects(finishedWork)));
        flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (current = flags.retryQueue, null !== current && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current))));
        break;
      case 19:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
        break;
      case 21:
        break;
      default:
        recursivelyTraverseMutationEffects(root, finishedWork), commitReconciliationEffects(finishedWork);
    }
  }
  function commitReconciliationEffects(finishedWork) {
    var flags = finishedWork.flags;
    flags & 2 && (finishedWork.flags &= -3);
    flags & 4096 && (finishedWork.flags &= -4097);
  }
  function recursivelyTraverseLayoutEffects(root, parentFiber) {
    if (parentFiber.subtreeFlags & 8772) for (parentFiber = parentFiber.child; null !== parentFiber;) commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
  }
  function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
    for (parentFiber = parentFiber.child; null !== parentFiber;) {
      var finishedWork = parentFiber;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 1:
          safelyDetachRef(finishedWork, finishedWork.return);
          var instance = finishedWork.stateNode;
          "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 26:
        case 27:
        case 5:
          safelyDetachRef(finishedWork, finishedWork.return);
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 22:
          safelyDetachRef(finishedWork, finishedWork.return);
          null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        default:
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
      }
      parentFiber = parentFiber.sibling;
    }
  }
  function recursivelyTraverseReappearLayoutEffects(finishedRoot$jscomp$0, parentFiber, includeWorkInProgressEffects) {
    includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
    for (parentFiber = parentFiber.child; null !== parentFiber;) {
      var current = parentFiber.alternate,
        finishedRoot = finishedRoot$jscomp$0,
        finishedWork = parentFiber,
        flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          commitHookEffectListMount(4, finishedWork);
          break;
        case 1:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          current = finishedWork;
          finishedRoot = current.stateNode;
          if ("function" === typeof finishedRoot.componentDidMount) try {
            finishedRoot.componentDidMount();
          } catch (error) {
            captureCommitPhaseError(current, current.return, error);
          }
          current = finishedWork;
          finishedRoot = current.updateQueue;
          if (null !== finishedRoot) {
            var instance = current.stateNode;
            try {
              var hiddenCallbacks = finishedRoot.shared.hiddenCallbacks;
              if (null !== hiddenCallbacks) for (finishedRoot.shared.hiddenCallbacks = null, finishedRoot = 0; finishedRoot < hiddenCallbacks.length; finishedRoot++) callCallback(hiddenCallbacks[finishedRoot], instance);
            } catch (error) {
              captureCommitPhaseError(current, current.return, error);
            }
          }
          includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 26:
        case 27:
        case 5:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          includeWorkInProgressEffects && null === current && flags & 4 && commitHostMount(finishedWork);
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 12:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          break;
        case 13:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          break;
        case 22:
          null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        default:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
      }
      parentFiber = parentFiber.sibling;
    }
  }
  function commitOffscreenPassiveMountEffects(current, finishedWork) {
    var previousCache = null;
    null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (previousCache = current.memoizedState.cachePool.pool);
    current = null;
    null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current = finishedWork.memoizedState.cachePool.pool);
    current !== previousCache && (null != current && current.refCount++, null != previousCache && releaseCache(previousCache));
  }
  function commitCachePassiveMountEffect(current, finishedWork) {
    current = null;
    null !== finishedWork.alternate && (current = finishedWork.alternate.memoizedState.cache);
    finishedWork = finishedWork.memoizedState.cache;
    finishedWork !== current && (finishedWork.refCount++, null != current && releaseCache(current));
  }
  function recursivelyTraversePassiveMountEffects(root, parentFiber, committedLanes, committedTransitions) {
    if (parentFiber.subtreeFlags & 10256) for (parentFiber = parentFiber.child; null !== parentFiber;) commitPassiveMountOnFiber(root, parentFiber, committedLanes, committedTransitions), parentFiber = parentFiber.sibling;
  }
  function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
    var flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
        flags & 2048 && commitHookEffectListMount(9, finishedWork);
        break;
      case 3:
        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
        flags & 2048 && (finishedRoot = null, null !== finishedWork.alternate && (finishedRoot = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== finishedRoot && (finishedWork.refCount++, null != finishedRoot && releaseCache(finishedRoot)));
        break;
      case 12:
        if (flags & 2048) {
          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
          finishedRoot = finishedWork.stateNode;
          try {
            var _finishedWork$memoize2 = finishedWork.memoizedProps,
              id = _finishedWork$memoize2.id,
              onPostCommit = _finishedWork$memoize2.onPostCommit;
            "function" === typeof onPostCommit && onPostCommit(id, null === finishedWork.alternate ? "mount" : "update", finishedRoot.passiveEffectDuration, -0);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        } else recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
        break;
      case 23:
        break;
      case 22:
        _finishedWork$memoize2 = finishedWork.stateNode;
        null !== finishedWork.memoizedState ? _finishedWork$memoize2._visibility & 4 ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : finishedWork.mode & 1 ? recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : (_finishedWork$memoize2._visibility |= 4, recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions)) : _finishedWork$memoize2._visibility & 4 ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : (_finishedWork$memoize2._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, 0 !== (finishedWork.subtreeFlags & 10256)));
        flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
        break;
      case 24:
        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
        flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
        break;
      default:
        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
    }
  }
  function recursivelyTraverseReconnectPassiveEffects(finishedRoot$jscomp$0, parentFiber, committedLanes$jscomp$0, committedTransitions$jscomp$0, includeWorkInProgressEffects) {
    includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
    for (parentFiber = parentFiber.child; null !== parentFiber;) {
      var finishedRoot = finishedRoot$jscomp$0,
        finishedWork = parentFiber,
        committedLanes = committedLanes$jscomp$0,
        committedTransitions = committedTransitions$jscomp$0,
        flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
          commitHookEffectListMount(8, finishedWork);
          break;
        case 23:
          break;
        case 22:
          var instance = finishedWork.stateNode;
          null !== finishedWork.memoizedState ? instance._visibility & 4 ? recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) : finishedWork.mode & 1 ? recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : (instance._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects)) : (instance._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects));
          includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
          break;
        case 24:
          recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
          includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
          break;
        default:
          recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
      }
      parentFiber = parentFiber.sibling;
    }
  }
  function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
    if (parentFiber.subtreeFlags & 10256) for (parentFiber = parentFiber.child; null !== parentFiber;) {
      var finishedRoot = finishedRoot$jscomp$0,
        finishedWork = parentFiber,
        flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 22:
          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
          flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
          break;
        case 24:
          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
          flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
          break;
        default:
          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
      }
      parentFiber = parentFiber.sibling;
    }
  }
  var suspenseyCommitFlag = 8192;
  function recursivelyAccumulateSuspenseyCommit(parentFiber) {
    if (parentFiber.subtreeFlags & suspenseyCommitFlag) for (parentFiber = parentFiber.child; null !== parentFiber;) accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
  }
  function accumulateSuspenseyCommitOnFiber(fiber) {
    switch (fiber.tag) {
      case 26:
        recursivelyAccumulateSuspenseyCommit(fiber);
        fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && shim();
        break;
      case 5:
        recursivelyAccumulateSuspenseyCommit(fiber);
        break;
      case 3:
      case 4:
        recursivelyAccumulateSuspenseyCommit(fiber);
        break;
      case 22:
        if (null === fiber.memoizedState) {
          var current = fiber.alternate;
          null !== current && null !== current.memoizedState ? (current = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = current) : recursivelyAccumulateSuspenseyCommit(fiber);
        }
        break;
      default:
        recursivelyAccumulateSuspenseyCommit(fiber);
    }
  }
  function detachAlternateSiblings(parentFiber) {
    var previousFiber = parentFiber.alternate;
    if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
      previousFiber.child = null;
      do previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber; while (null !== parentFiber);
    }
  }
  function recursivelyTraversePassiveUnmountEffects(parentFiber) {
    var deletions = parentFiber.deletions;
    if (0 !== (parentFiber.flags & 16)) {
      if (null !== deletions) for (var i = 0; i < deletions.length; i++) {
        var childToDelete = deletions[i];
        nextEffect = childToDelete;
        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
      }
      detachAlternateSiblings(parentFiber);
    }
    if (parentFiber.subtreeFlags & 10256) for (parentFiber = parentFiber.child; null !== parentFiber;) commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
  }
  function commitPassiveUnmountOnFiber(finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
        recursivelyTraversePassiveUnmountEffects(finishedWork);
        finishedWork.flags & 2048 && commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
        break;
      case 3:
        recursivelyTraversePassiveUnmountEffects(finishedWork);
        break;
      case 12:
        recursivelyTraversePassiveUnmountEffects(finishedWork);
        break;
      case 22:
        var instance = finishedWork.stateNode;
        null !== finishedWork.memoizedState && instance._visibility & 4 && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (instance._visibility &= -5, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
        break;
      default:
        recursivelyTraversePassiveUnmountEffects(finishedWork);
    }
  }
  function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
    var deletions = parentFiber.deletions;
    if (0 !== (parentFiber.flags & 16)) {
      if (null !== deletions) for (var i = 0; i < deletions.length; i++) {
        var childToDelete = deletions[i];
        nextEffect = childToDelete;
        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
      }
      detachAlternateSiblings(parentFiber);
    }
    for (parentFiber = parentFiber.child; null !== parentFiber;) {
      deletions = parentFiber;
      switch (deletions.tag) {
        case 0:
        case 11:
        case 15:
          commitHookEffectListUnmount(8, deletions, deletions.return);
          recursivelyTraverseDisconnectPassiveEffects(deletions);
          break;
        case 22:
          i = deletions.stateNode;
          i._visibility & 4 && (i._visibility &= -5, recursivelyTraverseDisconnectPassiveEffects(deletions));
          break;
        default:
          recursivelyTraverseDisconnectPassiveEffects(deletions);
      }
      parentFiber = parentFiber.sibling;
    }
  }
  function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
    for (; null !== nextEffect;) {
      var fiber = nextEffect;
      switch (fiber.tag) {
        case 0:
        case 11:
        case 15:
          commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
          break;
        case 23:
        case 22:
          if (null !== fiber.memoizedState && null !== fiber.memoizedState.cachePool) {
            var cache = fiber.memoizedState.cachePool.pool;
            null != cache && cache.refCount++;
          }
          break;
        case 24:
          releaseCache(fiber.memoizedState.cache);
      }
      cache = fiber.child;
      if (null !== cache) cache.return = fiber, nextEffect = cache;else a: for (fiber = deletedSubtreeRoot; null !== nextEffect;) {
        cache = nextEffect;
        var sibling = cache.sibling,
          returnFiber = cache.return;
        detachFiberAfterEffects(cache);
        if (cache === fiber) {
          nextEffect = null;
          break a;
        }
        if (null !== sibling) {
          sibling.return = returnFiber;
          nextEffect = sibling;
          break a;
        }
        nextEffect = returnFiber;
      }
    }
  }
  var DefaultAsyncDispatcher = {
      getCacheForType: function (resourceType) {
        var cache = readContext(CacheContext),
          cacheForType = cache.data.get(resourceType);
        undefined === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
        return cacheForType;
      }
    },
    PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map,
    executionContext = 0,
    workInProgressRoot = null,
    workInProgress = null,
    workInProgressRootRenderLanes = 0,
    workInProgressSuspendedReason = 0,
    workInProgressThrownValue = null,
    workInProgressRootDidSkipSuspendedSiblings = false,
    workInProgressRootIsPrerendering = false,
    workInProgressRootDidAttachPingListener = false,
    entangledRenderLanes = 0,
    workInProgressRootExitStatus = 0,
    workInProgressRootSkippedLanes = 0,
    workInProgressRootInterleavedUpdatedLanes = 0,
    workInProgressRootPingedLanes = 0,
    workInProgressDeferredLane = 0,
    workInProgressSuspendedRetryLanes = 0,
    workInProgressRootConcurrentErrors = null,
    workInProgressRootRecoverableErrors = null,
    workInProgressRootDidIncludeRecursiveRenderUpdate = false,
    globalMostRecentFallbackTime = 0,
    workInProgressRootRenderTargetTime = Infinity,
    workInProgressTransitions = null,
    legacyErrorBoundariesThatAlreadyFailed = null,
    rootDoesHavePassiveEffects = false,
    rootWithPendingPassiveEffects = null,
    pendingPassiveEffectsLanes = 0,
    pendingPassiveEffectsRemainingLanes = 0,
    pendingPassiveTransitions = null,
    nestedUpdateCount = 0,
    rootWithNestedUpdates = null;
  function requestUpdateLane(fiber) {
    return 0 === (fiber.mode & 1) ? 2 : 0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes ? workInProgressRootRenderLanes & -workInProgressRootRenderLanes : null !== ReactSharedInternals.T ? (fiber = currentEntangledLane, 0 !== fiber ? fiber : requestTransitionLane()) : resolveUpdatePriority();
  }
  function requestDeferredLane() {
    0 === workInProgressDeferredLane && (workInProgressDeferredLane = 0 !== (workInProgressRootRenderLanes & 536870912) ? 536870912 : claimNextTransitionLane());
    var suspenseHandler = suspenseHandlerStackCursor.current;
    null !== suspenseHandler && (suspenseHandler.flags |= 32);
    return workInProgressDeferredLane;
  }
  function scheduleUpdateOnFiber(root, fiber, lane) {
    if (root === workInProgressRoot && 2 === workInProgressSuspendedReason || null !== root.cancelPendingCommit) prepareFreshStack(root, 0), markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane, false);
    markRootUpdated$1(root, lane);
    if (0 === (executionContext & 2) || root !== workInProgressRoot) root === workInProgressRoot && (0 === (executionContext & 2) && (workInProgressRootInterleavedUpdatedLanes |= lane), 4 === workInProgressRootExitStatus && markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane, false)), ensureRootIsScheduled(root), 2 === lane && 0 === executionContext && 0 === (fiber.mode & 1) && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, true));
  }
  function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var shouldTimeSlice = !forceSync && 0 === (lanes & 60) && 0 === (lanes & root$jscomp$0.expiredLanes) || checkIfRootIsPrerendering(root$jscomp$0, lanes),
      exitStatus = shouldTimeSlice ? renderRootConcurrent(root$jscomp$0, lanes) : renderRootSync(root$jscomp$0, lanes, true),
      renderWasConcurrent = shouldTimeSlice;
    do {
      if (0 === exitStatus) {
        workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root$jscomp$0, lanes, 0, false);
        break;
      } else if (6 === exitStatus) markRootSuspended(root$jscomp$0, lanes, 0, !workInProgressRootDidSkipSuspendedSiblings);else {
        forceSync = root$jscomp$0.current.alternate;
        if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
          exitStatus = renderRootSync(root$jscomp$0, lanes, false);
          renderWasConcurrent = false;
          continue;
        }
        if (0 !== root$jscomp$0.tag && 2 === exitStatus) {
          renderWasConcurrent = lanes;
          if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent) var JSCompiler_inline_result = 0;else JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913, JSCompiler_inline_result = 0 !== JSCompiler_inline_result ? JSCompiler_inline_result : JSCompiler_inline_result & 536870912 ? 536870912 : 0;
          if (0 !== JSCompiler_inline_result) {
            lanes = JSCompiler_inline_result;
            a: {
              var root = root$jscomp$0;
              exitStatus = workInProgressRootConcurrentErrors;
              JSCompiler_inline_result = renderRootSync(root, JSCompiler_inline_result, false);
              if (2 !== JSCompiler_inline_result) {
                if (workInProgressRootDidAttachPingListener) {
                  root.errorRecoveryDisabledLanes |= renderWasConcurrent;
                  workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                  exitStatus = 4;
                  break a;
                }
                renderWasConcurrent = workInProgressRootRecoverableErrors;
                workInProgressRootRecoverableErrors = exitStatus;
                null !== renderWasConcurrent && queueRecoverableErrors(renderWasConcurrent);
              }
              exitStatus = JSCompiler_inline_result;
            }
            renderWasConcurrent = false;
            if (2 !== exitStatus) continue;
          }
        }
        if (1 === exitStatus) {
          prepareFreshStack(root$jscomp$0, 0);
          markRootSuspended(root$jscomp$0, lanes, 0, true);
          break;
        }
        a: {
          shouldTimeSlice = root$jscomp$0;
          renderWasConcurrent = exitStatus;
          switch (renderWasConcurrent) {
            case 0:
            case 1:
              throw Error("Root did not complete. This is a bug in React.");
            case 4:
              if ((lanes & 4194176) === lanes) {
                markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
                break a;
              }
              break;
            case 2:
              workInProgressRootRecoverableErrors = null;
              break;
            case 3:
            case 5:
              break;
            default:
              throw Error("Unknown root exit status.");
          }
          shouldTimeSlice.finishedWork = forceSync;
          shouldTimeSlice.finishedLanes = lanes;
          if ((lanes & 62914560) === lanes && 3 === renderWasConcurrent && (renderWasConcurrent = globalMostRecentFallbackTime + 300 - now(), 10 < renderWasConcurrent)) {
            markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
            if (0 !== getNextLanes(shouldTimeSlice, 0)) break a;
            shouldTimeSlice.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, 2, -0, 0), renderWasConcurrent);
            break a;
          }
          commitRootWhenReady(shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, 0, -0, 0);
        }
      }
      break;
    } while (1);
    ensureRootIsScheduled(root$jscomp$0);
  }
  function queueRecoverableErrors(errors) {
    null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
  }
  function commitRootWhenReady(root, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
    lanes = finishedWork.subtreeFlags;
    (lanes & 8192 || 16785408 === (lanes & 16785408)) && accumulateSuspenseyCommitOnFiber(finishedWork);
    finishedWork = ReactSharedInternals.T;
    lanes = currentUpdatePriority;
    try {
      currentUpdatePriority = 2, ReactSharedInternals.T = null, commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime);
    } finally {
      ReactSharedInternals.T = finishedWork, currentUpdatePriority = lanes;
    }
  }
  function isRenderConsistentWithExternalStores(finishedWork) {
    for (var node = finishedWork;;) {
      var tag = node.tag;
      if ((0 === tag || 11 === tag || 15 === tag) && node.flags & 16384 && (tag = node.updateQueue, null !== tag && (tag = tag.stores, null !== tag))) for (var i = 0; i < tag.length; i++) {
        var check = tag[i],
          getSnapshot = check.getSnapshot;
        check = check.value;
        try {
          if (!objectIs(getSnapshot(), check)) return false;
        } catch (error) {
          return false;
        }
      }
      tag = node.child;
      if (node.subtreeFlags & 16384 && null !== tag) tag.return = node, node = tag;else {
        if (node === finishedWork) break;
        for (; null === node.sibling;) {
          if (null === node.return || node.return === finishedWork) return true;
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    return true;
  }
  function markRootSuspended(root, suspendedLanes, spawnedLane, didAttemptEntireTree) {
    suspendedLanes &= ~workInProgressRootPingedLanes;
    suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
    root.suspendedLanes |= suspendedLanes;
    root.pingedLanes &= ~suspendedLanes;
    didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
    didAttemptEntireTree = root.expirationTimes;
    for (var lanes = suspendedLanes; 0 < lanes;) {
      var index$9 = 31 - clz32(lanes),
        lane = 1 << index$9;
      didAttemptEntireTree[index$9] = -1;
      lanes &= ~lane;
    }
    0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
  }
  function resetWorkInProgressStack() {
    if (null !== workInProgress) {
      if (0 === workInProgressSuspendedReason) var interruptedWork = workInProgress.return;else interruptedWork = workInProgress, lastContextDependency = currentlyRenderingFiber = null, resetHooksOnUnwind(interruptedWork), thenableState$1 = null, thenableIndexCounter$1 = 0, interruptedWork = workInProgress;
      for (; null !== interruptedWork;) unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
      workInProgress = null;
    }
  }
  function prepareFreshStack(root, lanes) {
    root.finishedWork = null;
    root.finishedLanes = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    timeoutHandle = root.cancelPendingCommit;
    null !== timeoutHandle && (root.cancelPendingCommit = null, timeoutHandle());
    resetWorkInProgressStack();
    workInProgressRoot = root;
    workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
    workInProgressRootRenderLanes = lanes;
    workInProgressSuspendedReason = 0;
    workInProgressThrownValue = null;
    workInProgressRootDidSkipSuspendedSiblings = false;
    workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
    workInProgressRootDidAttachPingListener = false;
    workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = workInProgressRootExitStatus = 0;
    workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
    workInProgressRootDidIncludeRecursiveRenderUpdate = false;
    0 !== (lanes & 8) && (lanes |= lanes & 32);
    var allEntangledLanes = root.entangledLanes;
    if (0 !== allEntangledLanes) for (root = root.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes;) {
      var index$7 = 31 - clz32(allEntangledLanes),
        lane = 1 << index$7;
      lanes |= root[index$7];
      allEntangledLanes &= ~lane;
    }
    entangledRenderLanes = lanes;
    finishQueueingConcurrentUpdates();
    return timeoutHandle;
  }
  function handleThrow(root, thrownValue) {
    currentlyRenderingFiber$1 = null;
    ReactSharedInternals.H = ContextOnlyDispatcher;
    thrownValue === SuspenseException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 3) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 4) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? 8 : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? 6 : 1;
    workInProgressThrownValue = thrownValue;
    null === workInProgress && (workInProgressRootExitStatus = 1, logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current)));
  }
  function pushDispatcher() {
    var prevDispatcher = ReactSharedInternals.H;
    ReactSharedInternals.H = ContextOnlyDispatcher;
    return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
  }
  function pushAsyncDispatcher() {
    var prevAsyncDispatcher = ReactSharedInternals.A;
    ReactSharedInternals.A = DefaultAsyncDispatcher;
    return prevAsyncDispatcher;
  }
  function renderDidSuspendDelayIfPossible() {
    workInProgressRootExitStatus = 4;
    workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194176) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = true);
    0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes, workInProgressDeferredLane, false);
  }
  function renderRootSync(root, lanes, shouldYieldForPrerendering) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher(),
      prevAsyncDispatcher = pushAsyncDispatcher();
    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) workInProgressTransitions = null, prepareFreshStack(root, lanes);
    lanes = false;
    var exitStatus = workInProgressRootExitStatus;
    a: do try {
      if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
        var unitOfWork = workInProgress,
          thrownValue = workInProgressThrownValue;
        switch (workInProgressSuspendedReason) {
          case 8:
            resetWorkInProgressStack();
            exitStatus = 6;
            break a;
          case 3:
          case 2:
          case 6:
            null === suspenseHandlerStackCursor.current && (lanes = true);
            var reason = workInProgressSuspendedReason;
            workInProgressSuspendedReason = 0;
            workInProgressThrownValue = null;
            throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
            if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
              exitStatus = 0;
              break a;
            }
            break;
          default:
            reason = workInProgressSuspendedReason, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
        }
      }
      workLoopSync();
      exitStatus = workInProgressRootExitStatus;
      break;
    } catch (thrownValue$129) {
      handleThrow(root, thrownValue$129);
    } while (1);
    lanes && root.shellSuspendCounter++;
    lastContextDependency = currentlyRenderingFiber = null;
    executionContext = prevExecutionContext;
    ReactSharedInternals.H = prevDispatcher;
    ReactSharedInternals.A = prevAsyncDispatcher;
    null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
    return exitStatus;
  }
  function workLoopSync() {
    for (; null !== workInProgress;) performUnitOfWork(workInProgress);
  }
  function renderRootConcurrent(root, lanes) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher(),
      prevAsyncDispatcher = pushAsyncDispatcher();
    workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes ? (workInProgressTransitions = null, workInProgressRootRenderTargetTime = now() + 500, prepareFreshStack(root, lanes)) : workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
    a: do try {
      if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
        lanes = workInProgress;
        var thrownValue = workInProgressThrownValue;
        b: switch (workInProgressSuspendedReason) {
          case 1:
            workInProgressSuspendedReason = 0;
            workInProgressThrownValue = null;
            throwAndUnwindWorkLoop(root, lanes, thrownValue, 1);
            break;
          case 2:
            if (isThenableResolved(thrownValue)) {
              workInProgressSuspendedReason = 0;
              workInProgressThrownValue = null;
              replaySuspendedUnitOfWork(lanes);
              break;
            }
            lanes = function () {
              2 === workInProgressSuspendedReason && workInProgressRoot === root && (workInProgressSuspendedReason = 7);
              ensureRootIsScheduled(root);
            };
            thrownValue.then(lanes, lanes);
            break a;
          case 3:
            workInProgressSuspendedReason = 7;
            break a;
          case 4:
            workInProgressSuspendedReason = 5;
            break a;
          case 7:
            isThenableResolved(thrownValue) ? (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root, lanes, thrownValue, 7));
            break;
          case 5:
            var resource = null;
            switch (workInProgress.tag) {
              case 26:
                resource = workInProgress.memoizedState;
              case 5:
              case 27:
                var hostFiber = workInProgress;
                if (resource ? shim(resource) : 1) {
                  workInProgressSuspendedReason = 0;
                  workInProgressThrownValue = null;
                  var sibling = hostFiber.sibling;
                  if (null !== sibling) workInProgress = sibling;else {
                    var returnFiber = hostFiber.return;
                    null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                  }
                  break b;
                }
            }
            workInProgressSuspendedReason = 0;
            workInProgressThrownValue = null;
            throwAndUnwindWorkLoop(root, lanes, thrownValue, 5);
            break;
          case 6:
            workInProgressSuspendedReason = 0;
            workInProgressThrownValue = null;
            throwAndUnwindWorkLoop(root, lanes, thrownValue, 6);
            break;
          case 8:
            resetWorkInProgressStack();
            workInProgressRootExitStatus = 6;
            break a;
          default:
            throw Error("Unexpected SuspendedReason. This is a bug in React.");
        }
      }
      workLoopConcurrent();
      break;
    } catch (thrownValue$131) {
      handleThrow(root, thrownValue$131);
    } while (1);
    lastContextDependency = currentlyRenderingFiber = null;
    ReactSharedInternals.H = prevDispatcher;
    ReactSharedInternals.A = prevAsyncDispatcher;
    executionContext = prevExecutionContext;
    if (null !== workInProgress) return 0;
    workInProgressRoot = null;
    workInProgressRootRenderLanes = 0;
    finishQueueingConcurrentUpdates();
    return workInProgressRootExitStatus;
  }
  function workLoopConcurrent() {
    for (; null !== workInProgress && !shouldYield();) performUnitOfWork(workInProgress);
  }
  function performUnitOfWork(unitOfWork) {
    var next = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
  }
  function replaySuspendedUnitOfWork(unitOfWork) {
    var next = unitOfWork;
    var current = next.alternate;
    switch (next.tag) {
      case 15:
      case 0:
        next = replayFunctionComponent(current, next, next.pendingProps, next.type, undefined, workInProgressRootRenderLanes);
        break;
      case 11:
        next = replayFunctionComponent(current, next, next.pendingProps, next.type.render, next.ref, workInProgressRootRenderLanes);
        break;
      case 5:
        resetHooksOnUnwind(next);
      default:
        unwindInterruptedWork(current, next), next = workInProgress = resetWorkInProgress(next, entangledRenderLanes), next = beginWork(current, next, entangledRenderLanes);
    }
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
  }
  function throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, suspendedReason) {
    lastContextDependency = currentlyRenderingFiber = null;
    resetHooksOnUnwind(unitOfWork);
    thenableState$1 = null;
    thenableIndexCounter$1 = 0;
    var returnFiber = unitOfWork.return;
    try {
      if (throwException(root, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes)) {
        workInProgressRootExitStatus = 1;
        logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
        workInProgress = null;
        return;
      }
    } catch (error) {
      if (null !== returnFiber) throw workInProgress = returnFiber, error;
      workInProgressRootExitStatus = 1;
      logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
      workInProgress = null;
      return;
    }
    if (unitOfWork.flags & 32768) {
      if (1 === suspendedReason) root = true;else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912)) root = false;else if (workInProgressRootDidSkipSuspendedSiblings = root = true, 2 === suspendedReason || 3 === suspendedReason || 6 === suspendedReason) suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
      unwindUnitOfWork(unitOfWork, root);
    } else completeUnitOfWork(unitOfWork);
  }
  function completeUnitOfWork(unitOfWork) {
    var completedWork = unitOfWork;
    do {
      if (0 !== (completedWork.flags & 32768)) {
        unwindUnitOfWork(completedWork, workInProgressRootDidSkipSuspendedSiblings);
        return;
      }
      unitOfWork = completedWork.return;
      var next = completeWork(completedWork.alternate, completedWork, entangledRenderLanes);
      if (null !== next) {
        workInProgress = next;
        return;
      }
      completedWork = completedWork.sibling;
      if (null !== completedWork) {
        workInProgress = completedWork;
        return;
      }
      workInProgress = completedWork = unitOfWork;
    } while (null !== completedWork);
    0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
  }
  function unwindUnitOfWork(unitOfWork, skipSiblings) {
    do {
      var next = unwindWork(unitOfWork.alternate, unitOfWork);
      if (null !== next) {
        next.flags &= 32767;
        workInProgress = next;
        return;
      }
      next = unitOfWork.return;
      null !== next && (next.flags |= 32768, next.subtreeFlags = 0, next.deletions = null);
      if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
        workInProgress = unitOfWork;
        return;
      }
      workInProgress = unitOfWork = next;
    } while (null !== unitOfWork);
    workInProgressRootExitStatus = 6;
    workInProgress = null;
  }
  function commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, renderPriorityLevel, spawnedLane, updatedLanes, suspendedRetryLanes) {
    do flushPassiveEffects(); while (null !== rootWithPendingPassiveEffects);
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var finishedWork = root.finishedWork;
    didIncludeRenderPhaseUpdate = root.finishedLanes;
    if (null === finishedWork) return null;
    root.finishedWork = null;
    root.finishedLanes = 0;
    if (finishedWork === root.current) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    root.callbackNode = null;
    root.callbackPriority = 0;
    root.cancelPendingCommit = null;
    var remainingLanes = finishedWork.lanes | finishedWork.childLanes;
    remainingLanes |= concurrentlyUpdatedLanes;
    markRootFinished(root, didIncludeRenderPhaseUpdate, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
    0 === (finishedWork.subtreeFlags & 10256) && 0 === (finishedWork.flags & 10256) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = true, pendingPassiveEffectsRemainingLanes = remainingLanes, pendingPassiveTransitions = transitions, scheduleCallback(NormalPriority$1, function () {
      flushPassiveEffects(true);
      return null;
    }));
    transitions = 0 !== (finishedWork.flags & 15990);
    0 !== (finishedWork.subtreeFlags & 15990) || transitions ? (transitions = ReactSharedInternals.T, ReactSharedInternals.T = null, spawnedLane = currentUpdatePriority, currentUpdatePriority = 2, updatedLanes = executionContext, executionContext |= 4, commitBeforeMutationEffects(root, finishedWork), commitMutationEffectsOnFiber(finishedWork, root), root.current = finishedWork, commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork), requestPaint(), executionContext = updatedLanes, currentUpdatePriority = spawnedLane, ReactSharedInternals.T = transitions) : root.current = finishedWork;
    rootDoesHavePassiveEffects ? (rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = root, pendingPassiveEffectsLanes = didIncludeRenderPhaseUpdate) : releaseRootPooledCache(root, remainingLanes);
    remainingLanes = root.pendingLanes;
    0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
    onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
    ensureRootIsScheduled(root);
    if (null !== recoverableErrors) for (renderPriorityLevel = root.onRecoverableError, finishedWork = 0; finishedWork < recoverableErrors.length; finishedWork++) remainingLanes = recoverableErrors[finishedWork], renderPriorityLevel(remainingLanes.value, {
      componentStack: remainingLanes.stack
    });
    0 !== (pendingPassiveEffectsLanes & 3) && 0 !== root.tag && flushPassiveEffects();
    remainingLanes = root.pendingLanes;
    0 !== (didIncludeRenderPhaseUpdate & 4194218) && 0 !== (remainingLanes & 42) ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    flushSyncWorkAcrossRoots_impl(0, false);
    return null;
  }
  function releaseRootPooledCache(root, remainingLanes) {
    0 === (root.pooledCacheLanes &= remainingLanes) && (remainingLanes = root.pooledCache, null != remainingLanes && (root.pooledCache = null, releaseCache(remainingLanes)));
  }
  function flushPassiveEffects() {
    if (null !== rootWithPendingPassiveEffects) {
      var root = rootWithPendingPassiveEffects,
        remainingLanes = pendingPassiveEffectsRemainingLanes;
      pendingPassiveEffectsRemainingLanes = 0;
      var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),
        prevTransition = ReactSharedInternals.T,
        previousPriority = currentUpdatePriority;
      try {
        currentUpdatePriority = 32 > renderPriority ? 32 : renderPriority;
        ReactSharedInternals.T = null;
        if (null === rootWithPendingPassiveEffects) var JSCompiler_inline_result = false;else {
          renderPriority = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root$jscomp$0 = rootWithPendingPassiveEffects,
            lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = 0;
          if (0 !== (executionContext & 6)) throw Error("Cannot flush passive effects while already rendering.");
          var prevExecutionContext = executionContext;
          executionContext |= 4;
          commitPassiveUnmountOnFiber(root$jscomp$0.current);
          commitPassiveMountOnFiber(root$jscomp$0, root$jscomp$0.current, lanes, renderPriority);
          executionContext = prevExecutionContext;
          flushSyncWorkAcrossRoots_impl(0, false);
          if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot) try {
            injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
          } catch (err) {}
          JSCompiler_inline_result = true;
        }
        return JSCompiler_inline_result;
      } finally {
        currentUpdatePriority = previousPriority, ReactSharedInternals.T = prevTransition, releaseRootPooledCache(root, remainingLanes);
      }
    }
    return false;
  }
  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
    rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
    null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
  }
  function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);else for (; null !== nearestMountedAncestor;) {
      if (3 === nearestMountedAncestor.tag) {
        captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error);
        break;
      } else if (1 === nearestMountedAncestor.tag) {
        var instance = nearestMountedAncestor.stateNode;
        if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
          error = createClassErrorUpdate(2);
          instance = enqueueUpdate(nearestMountedAncestor, error, 2);
          null !== instance && (initializeClassErrorUpdate(error, instance, nearestMountedAncestor, sourceFiber), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
          break;
        }
      }
      nearestMountedAncestor = nearestMountedAncestor.return;
    }
  }
  function attachPingListener(root, wakeable, lanes) {
    var pingCache = root.pingCache;
    if (null === pingCache) {
      pingCache = root.pingCache = new PossiblyWeakMap();
      var threadIDs = new Set();
      pingCache.set(wakeable, threadIDs);
    } else threadIDs = pingCache.get(wakeable), undefined === threadIDs && (threadIDs = new Set(), pingCache.set(wakeable, threadIDs));
    threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = true, threadIDs.add(lanes), root = pingSuspendedRoot.bind(null, root, wakeable, lanes), wakeable.then(root, root));
  }
  function pingSuspendedRoot(root, wakeable, pingedLanes) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(wakeable);
    root.pingedLanes |= root.suspendedLanes & pingedLanes;
    root.warmLanes &= ~pingedLanes;
    workInProgressRoot === root && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (4 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && 300 > now() - globalMostRecentFallbackTime ? 0 === (executionContext & 2) && prepareFreshStack(root, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
    ensureRootIsScheduled(root);
  }
  function retryTimedOutBoundary(boundaryFiber, retryLane) {
    0 === retryLane && (retryLane = 0 === (boundaryFiber.mode & 1) ? 2 : claimNextRetryLane());
    boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
    null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
  }
  function retryDehydratedSuspenseBoundary(boundaryFiber) {
    var suspenseState = boundaryFiber.memoizedState,
      retryLane = 0;
    null !== suspenseState && (retryLane = suspenseState.retryLane);
    retryTimedOutBoundary(boundaryFiber, retryLane);
  }
  function resolveRetryWakeable(boundaryFiber, wakeable) {
    var retryLane = 0;
    switch (boundaryFiber.tag) {
      case 13:
        var retryCache = boundaryFiber.stateNode;
        var suspenseState = boundaryFiber.memoizedState;
        null !== suspenseState && (retryLane = suspenseState.retryLane);
        break;
      case 19:
        retryCache = boundaryFiber.stateNode;
        break;
      case 22:
        retryCache = boundaryFiber.stateNode._retryCache;
        break;
      default:
        throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
    }
    null !== retryCache && retryCache.delete(wakeable);
    retryTimedOutBoundary(boundaryFiber, retryLane);
  }
  function scheduleCallback(priorityLevel, callback) {
    return scheduleCallback$3(priorityLevel, callback);
  }
  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.refCleanup = this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
  }
  function createFiberImplClass(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }
  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }
  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiberImplClass(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.type = current.type, workInProgress.flags = 0, workInProgress.subtreeFlags = 0, workInProgress.deletions = null);
    workInProgress.flags = current.flags & 31457280;
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
      lanes: pendingProps.lanes,
      firstContext: pendingProps.firstContext
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    workInProgress.refCleanup = current.refCleanup;
    return workInProgress;
  }
  function resetWorkInProgress(workInProgress, renderLanes) {
    workInProgress.flags &= 31457282;
    var current = workInProgress.alternate;
    null === current ? (workInProgress.childLanes = 0, workInProgress.lanes = renderLanes, workInProgress.child = null, workInProgress.subtreeFlags = 0, workInProgress.memoizedProps = null, workInProgress.memoizedState = null, workInProgress.updateQueue = null, workInProgress.dependencies = null, workInProgress.stateNode = null) : (workInProgress.childLanes = current.childLanes, workInProgress.lanes = current.lanes, workInProgress.child = current.child, workInProgress.subtreeFlags = 0, workInProgress.deletions = null, workInProgress.memoizedProps = current.memoizedProps, workInProgress.memoizedState = current.memoizedState, workInProgress.updateQueue = current.updateQueue, workInProgress.type = current.type, renderLanes = current.dependencies, workInProgress.dependencies = null === renderLanes ? null : {
      lanes: renderLanes.lanes,
      firstContext: renderLanes.firstContext
    });
    return workInProgress;
  }
  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
    var fiberTag = 0;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, lanes, key);
      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 8;
        0 !== (mode & 1) && (mode |= 16);
        break;
      case REACT_PROFILER_TYPE:
        return type = createFiberImplClass(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type;
      case REACT_SUSPENSE_TYPE:
        return type = createFiberImplClass(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
      case REACT_SUSPENSE_LIST_TYPE:
        return type = createFiberImplClass(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
      case REACT_OFFSCREEN_TYPE:
        return createFiberFromOffscreen(pendingProps, mode, lanes, key);
      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
          case REACT_CONTEXT_TYPE:
            fiberTag = 10;
            break a;
          case REACT_CONSUMER_TYPE:
            fiberTag = 9;
            break a;
          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;
          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;
          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;
        }
        fiberTag = 29;
        pendingProps = Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null === type ? "null" : typeof type) + "."));
        owner = null;
    }
    key = createFiberImplClass(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.lanes = lanes;
    return key;
  }
  function createFiberFromFragment(elements, mode, lanes, key) {
    elements = createFiberImplClass(7, elements, key, mode);
    elements.lanes = lanes;
    return elements;
  }
  function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
    pendingProps = createFiberImplClass(22, pendingProps, key, mode);
    pendingProps.elementType = REACT_OFFSCREEN_TYPE;
    pendingProps.lanes = lanes;
    var primaryChildInstance = {
      _visibility: 1,
      _pendingVisibility: 1,
      _pendingMarkers: null,
      _retryCache: null,
      _transitions: null,
      _current: null,
      detach: function () {
        var fiber = primaryChildInstance._current;
        if (null === fiber) throw Error("Calling Offscreen.detach before instance handle has been set.");
        if (0 === (primaryChildInstance._pendingVisibility & 2)) {
          var root = enqueueConcurrentRenderForLane(fiber, 2);
          null !== root && (primaryChildInstance._pendingVisibility |= 2, scheduleUpdateOnFiber(root, fiber, 2));
        }
      },
      attach: function () {
        var fiber = primaryChildInstance._current;
        if (null === fiber) throw Error("Calling Offscreen.detach before instance handle has been set.");
        if (0 !== (primaryChildInstance._pendingVisibility & 2)) {
          var root = enqueueConcurrentRenderForLane(fiber, 2);
          null !== root && (primaryChildInstance._pendingVisibility &= -3, scheduleUpdateOnFiber(root, fiber, 2));
        }
      }
    };
    pendingProps.stateNode = primaryChildInstance;
    return pendingProps;
  }
  function createFiberFromText(content, mode, lanes) {
    content = createFiberImplClass(6, content, null, mode);
    content.lanes = lanes;
    return content;
  }
  function createFiberFromPortal(portal, mode, lanes) {
    mode = createFiberImplClass(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.lanes = lanes;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }
  function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
    this.tag = tag;
    this.containerInfo = containerInfo;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
    this.callbackPriority = 0;
    this.expirationTimes = createLaneMap(-1);
    this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = createLaneMap(0);
    this.hiddenUpdates = createLaneMap(null);
    this.identifierPrefix = identifierPrefix;
    this.onUncaughtError = onUncaughtError;
    this.onCaughtError = onCaughtError;
    this.onRecoverableError = onRecoverableError;
    this.pooledCache = null;
    this.pooledCacheLanes = 0;
    this.formState = formState;
    this.incompleteTransitions = new Map();
  }
  function createPortal$1(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }
  function findHostInstance(component) {
    var fiber = component._reactInternals;
    if (undefined === fiber) {
      if ("function" === typeof component.render) throw Error("Unable to find node on an unmounted component.");
      component = Object.keys(component).join(",");
      throw Error("Argument appears to not be a ReactComponent. Keys: " + component);
    }
    component = findCurrentFiberUsingSlowPath(fiber);
    component = null !== component ? findCurrentHostFiberImpl(component) : null;
    return null === component ? null : getPublicInstance(component.stateNode);
  }
  function updateContainer(element, container, parentComponent, callback) {
    parentComponent = container.current;
    var lane = requestUpdateLane(parentComponent);
    null === container.context ? container.context = emptyContextObject : container.pendingContext = emptyContextObject;
    container = createUpdate(lane);
    container.payload = {
      element: element
    };
    callback = undefined === callback ? null : callback;
    null !== callback && (container.callback = callback);
    element = enqueueUpdate(parentComponent, container, lane);
    null !== element && (scheduleUpdateOnFiber(element, parentComponent, lane), entangleTransitions(element, parentComponent, lane));
    return lane;
  }
  function getInspectorDataForInstance() {
    throw Error("getInspectorDataForInstance() is not available in production");
  }
  function shim$1() {
    throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
  }
  function shim() {
    throw Error("The current renderer does not support Resources. This error is likely caused by a bug in React. Please file an issue.");
  }
  var _nativeFabricUIManage = nativeFabricUIManager,
    createNode = _nativeFabricUIManage.createNode,
    cloneNodeWithNewChildren = _nativeFabricUIManage.cloneNodeWithNewChildren,
    cloneNodeWithNewChildrenAndProps = _nativeFabricUIManage.cloneNodeWithNewChildrenAndProps,
    cloneNodeWithNewProps = _nativeFabricUIManage.cloneNodeWithNewProps,
    createChildNodeSet = _nativeFabricUIManage.createChildSet,
    appendChildNode = _nativeFabricUIManage.appendChild,
    appendChildNodeToSet = _nativeFabricUIManage.appendChildToSet,
    completeRoot = _nativeFabricUIManage.completeRoot,
    registerEventHandler = _nativeFabricUIManage.registerEventHandler,
    FabricDiscretePriority = _nativeFabricUIManage.unstable_DiscreteEventPriority,
    fabricGetCurrentEventPriority = _nativeFabricUIManage.unstable_getCurrentEventPriority,
    extraDevToolsConfig = {
      getInspectorDataForInstance: getInspectorDataForInstance,
      getInspectorDataForViewTag: function () {
        throw Error("getInspectorDataForViewTag() is not available in production");
      },
      getInspectorDataForViewAtPoint: function () {
        throw Error("getInspectorDataForViewAtPoint() is not available in production.");
      }
    },
    getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get,
    nextReactTag = 2;
  registerEventHandler && registerEventHandler(dispatchEvent);
  var PROD_HOST_CONTEXT = {
    isInAParentText: true
  };
  function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
    hostContext = nextReactTag;
    nextReactTag += 2;
    return {
      node: createNode(hostContext, "RCTRawText", rootContainerInstance, {
        text: text
      }, internalInstanceHandle)
    };
  }
  function getPublicInstance(instance) {
    return null != instance.canonical && null != instance.canonical.publicInstance ? instance.canonical.publicInstance : null != instance._nativeTag ? instance : null;
  }
  var currentUpdatePriority = 0;
  function resolveUpdatePriority() {
    if (0 !== currentUpdatePriority) return currentUpdatePriority;
    var currentEventPriority = fabricGetCurrentEventPriority ? fabricGetCurrentEventPriority() : null;
    if (null != currentEventPriority) switch (currentEventPriority) {
      case FabricDiscretePriority:
        return 2;
    }
    return 32;
  }
  var scheduleTimeout = setTimeout,
    cancelTimeout = clearTimeout;
  function cloneHiddenInstance(instance) {
    var node = instance.node;
    var JSCompiler_inline_result = fastAddProperties(null, {
      style: {
        display: "none"
      }
    }, instance.canonical.viewConfig.validAttributes);
    return {
      node: cloneNodeWithNewProps(node, JSCompiler_inline_result),
      canonical: instance.canonical
    };
  }
  var HostTransitionContext = {
      $$typeof: REACT_CONTEXT_TYPE,
      Provider: null,
      Consumer: null,
      _currentValue: null,
      _currentValue2: null,
      _threadCount: 0
    },
    supportsMicrotasks = "undefined" !== typeof RN$enableMicrotasksInReact && !!RN$enableMicrotasksInReact,
    scheduleMicrotask = "function" === typeof queueMicrotask ? queueMicrotask : scheduleTimeout;
  function getInstanceFromNode(node) {
    return null != node.canonical && null != node.canonical.internalInstanceHandle ? node.canonical.internalInstanceHandle : node;
  }
  getFiberCurrentPropsFromNode$1 = function (instance) {
    return instance.canonical.currentProps;
  };
  getInstanceFromNode$1 = getInstanceFromNode;
  getNodeFromInstance$1 = function (fiber) {
    fiber = getPublicInstance(fiber.stateNode);
    if (null == fiber) throw Error("Could not find host instance from fiber");
    return fiber;
  };
  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function (from, to, blockNativeResponder) {
      from && from.stateNode && nativeFabricUIManager.setIsJSResponder(from.stateNode.node, false, blockNativeResponder || false);
      to && to.stateNode && nativeFabricUIManager.setIsJSResponder(to.stateNode.node, true, blockNativeResponder || false);
    }
  });
  if ("function" !== typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog) throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");
  function nativeOnUncaughtError(error, errorInfo) {
    false !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
      errorBoundary: null,
      error: error,
      componentStack: null != errorInfo.componentStack ? errorInfo.componentStack : ""
    }) && reportGlobalError(error);
  }
  function nativeOnCaughtError(error, errorInfo) {
    false !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
      errorBoundary: errorInfo.errorBoundary,
      error: error,
      componentStack: null != errorInfo.componentStack ? errorInfo.componentStack : ""
    }) && console.error(error);
  }
  batchedUpdatesImpl = function (fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;
    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext, 0 === executionContext && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, true));
    }
  };
  var roots = new Map(),
    internals$jscomp$inline_1147 = {
      bundleType: 0,
      version: "19.0.0",
      rendererPackageName: "react-native-renderer",
      currentDispatcherRef: ReactSharedInternals,
      findFiberByHostInstance: getInstanceFromNode,
      reconcilerVersion: "19.0.0"
    };
  null !== extraDevToolsConfig && (internals$jscomp$inline_1147.rendererConfig = extraDevToolsConfig);
  if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var hook$jscomp$inline_1463 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!hook$jscomp$inline_1463.isDisabled && hook$jscomp$inline_1463.supportsFiber) try {
      rendererID = hook$jscomp$inline_1463.inject(internals$jscomp$inline_1147), injectedHook = hook$jscomp$inline_1463;
    } catch (err) {}
  }
  exports.createPortal = function (children, containerTag) {
    return createPortal$1(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
  };
  exports.dispatchCommand = function (handle, command, args) {
    var nativeTag = null != handle._nativeTag ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);
    null != nativeTag && (handle = ReactNativePrivateInterface.getNodeFromPublicInstance(handle), null != handle ? nativeFabricUIManager.dispatchCommand(handle, command, args) : ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(nativeTag, command, args));
  };
  exports.findHostInstance_DEPRECATED = function (componentOrHandle) {
    return null == componentOrHandle ? null : componentOrHandle.canonical && componentOrHandle.canonical.publicInstance ? componentOrHandle.canonical.publicInstance : componentOrHandle._nativeTag ? componentOrHandle : findHostInstance(componentOrHandle);
  };
  exports.findNodeHandle = function (componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (null != componentOrHandle.canonical && null != componentOrHandle.canonical.nativeTag) return componentOrHandle.canonical.nativeTag;
    var nativeTag = ReactNativePrivateInterface.getNativeTagFromPublicInstance(componentOrHandle);
    if (nativeTag) return nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : null != componentOrHandle._nativeTag ? componentOrHandle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(componentOrHandle);
  };
  exports.getInspectorDataForInstance = getInspectorDataForInstance;
  exports.getNodeFromInternalInstanceHandle = function (internalInstanceHandle) {
    return internalInstanceHandle && internalInstanceHandle.stateNode && internalInstanceHandle.stateNode.node;
  };
  exports.getPublicInstanceFromInternalInstanceHandle = function (internalInstanceHandle) {
    var instance = internalInstanceHandle.stateNode;
    return null == instance ? null : 6 === internalInstanceHandle.tag ? (null == instance.publicInstance && (instance.publicInstance = ReactNativePrivateInterface.createPublicTextInstance(internalInstanceHandle)), instance.publicInstance) : getPublicInstance(internalInstanceHandle.stateNode);
  };
  exports.isChildPublicInstance = function () {
    throw Error("isChildPublicInstance() is not available in production.");
  };
  exports.render = function (element, containerTag, callback, concurrentRoot, options) {
    var root = roots.get(containerTag);
    if (!root) {
      root = nativeOnUncaughtError;
      var onCaughtError = nativeOnCaughtError,
        onRecoverableError = defaultOnRecoverableError;
      options && undefined !== options.onUncaughtError && (root = options.onUncaughtError);
      options && undefined !== options.onCaughtError && (onCaughtError = options.onCaughtError);
      options && undefined !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError);
      concurrentRoot = concurrentRoot ? 1 : 0;
      options = new FiberRootNode(containerTag, concurrentRoot, false, "", root, onCaughtError, onRecoverableError, null);
      concurrentRoot = createFiberImplClass(3, null, null, 1 === concurrentRoot ? 1 : 0);
      options.current = concurrentRoot;
      concurrentRoot.stateNode = options;
      root = createCache();
      root.refCount++;
      options.pooledCache = root;
      root.refCount++;
      concurrentRoot.memoizedState = {
        element: null,
        isDehydrated: false,
        cache: root
      };
      initializeUpdateQueue(concurrentRoot);
      root = options;
      roots.set(containerTag, root);
    }
    updateContainer(element, root, null, callback);
    a: if (element = root.current, element.child) switch (element.child.tag) {
      case 27:
      case 5:
        element = getPublicInstance(element.child.stateNode);
        break a;
      default:
        element = element.child.stateNode;
    } else element = null;
    return element;
  };
  exports.sendAccessibilityEvent = function (handle, eventType) {
    var nativeTag = null != handle._nativeTag ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);
    null != nativeTag && (handle = ReactNativePrivateInterface.getNodeFromPublicInstance(handle), null != handle ? nativeFabricUIManager.sendAccessibilityEvent(handle, eventType) : ReactNativePrivateInterface.legacySendAccessibilityEvent(nativeTag, eventType));
  };
  exports.stopSurface = function (containerTag) {
    var root = roots.get(containerTag);
    root && updateContainer(null, root, null, function () {
      roots.delete(containerTag);
    });
  };
  exports.unmountComponentAtNode = function (containerTag) {
    this.stopSurface(containerTag);
  };
},174,[175,91,140,295]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  require(_dependencyMap[0]);
},175,[176]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use client';
  'use strict';

  var start = Date.now();
  require(_dependencyMap[0]);
  require(_dependencyMap[1]).default();
  require(_dependencyMap[2]);
  require(_dependencyMap[3]);
  require(_dependencyMap[4]);
  require(_dependencyMap[5]);
  require(_dependencyMap[6]);
  require(_dependencyMap[7]);
  require(_dependencyMap[8]);
  require(_dependencyMap[9]);
  require(_dependencyMap[10]);
  require(_dependencyMap[11]);
  require(_dependencyMap[12]);
  var GlobalPerformanceLogger = require(_dependencyMap[13]).default;
  GlobalPerformanceLogger.markPoint('initializeCore_start', GlobalPerformanceLogger.currentTimestamp() - (Date.now() - start));
  GlobalPerformanceLogger.markPoint('initializeCore_end');
},176,[177,178,180,192,197,205,206,209,256,261,262,266,269,223]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use client';
  'use strict';

  if (global.window === undefined) {
    global.window = global;
  }
  if (global.self === undefined) {
    global.self = global;
  }
  global.process = global.process || {};
  global.process.env = global.process.env || {};
  if (!global.process.env.NODE_ENV) {
    global.process.env.NODE_ENV = 'production';
  }
},177,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = setUpDOM;
  var _PolyfillFunctions = require(_dependencyMap[0]);
  var initialized = false;
  function setUpDOM() {
    if (initialized) {
      return;
    }
    initialized = true;
    (0, _PolyfillFunctions.polyfillGlobal)('DOMRect', () => require(_dependencyMap[1]).default);
    (0, _PolyfillFunctions.polyfillGlobal)('DOMRectReadOnly', () => require(_dependencyMap[2]).default);
    (0, _PolyfillFunctions.polyfillGlobal)('DOMRectList', () => require(_dependencyMap[3]).default);
    (0, _PolyfillFunctions.polyfillGlobal)('HTMLCollection', () => require(_dependencyMap[4]).default);
    (0, _PolyfillFunctions.polyfillGlobal)('NodeList', () => require(_dependencyMap[5]).default);
    (0, _PolyfillFunctions.polyfillGlobal)('Node', () => require(_dependencyMap[6]).default);
    (0, _PolyfillFunctions.polyfillGlobal)('Document', () => require(_dependencyMap[7]).default);
    (0, _PolyfillFunctions.polyfillGlobal)('CharacterData', () => require(_dependencyMap[8]).default);
    (0, _PolyfillFunctions.polyfillGlobal)('Text', () => require(_dependencyMap[9]).default);
    (0, _PolyfillFunctions.polyfillGlobal)('Element', () => require(_dependencyMap[10]).default);
    (0, _PolyfillFunctions.polyfillGlobal)('HTMLElement', () => require(_dependencyMap[11]).default);
  }
},178,[6,165,166,179,157,169,168,156,173,172,164,161]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createDOMRectList = createDOMRectList;
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _ArrayLikeUtils = require(_dependencyMap[5]);
  var _length = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("length");
  var DOMRectList = exports.default = /*#__PURE__*/function () {
    function DOMRectList(elements) {
      (0, _classCallCheck2.default)(this, DOMRectList);
      Object.defineProperty(this, _length, {
        writable: true,
        value: undefined
      });
      for (var i = 0; i < elements.length; i++) {
        Object.defineProperty(this, i, {
          value: elements[i],
          enumerable: true,
          configurable: false,
          writable: false
        });
      }
      (0, _classPrivateFieldLooseBase2.default)(this, _length)[_length] = elements.length;
    }
    return (0, _createClass2.default)(DOMRectList, [{
      key: "length",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _length)[_length];
      }
    }, {
      key: "item",
      value: function item(index) {
        if (index < 0 || index >= (0, _classPrivateFieldLooseBase2.default)(this, _length)[_length]) {
          return null;
        }
        var arrayLike = this;
        return arrayLike[index];
      }
    }, {
      key: Symbol.iterator,
      value: function () {
        return (0, _ArrayLikeUtils.createValueIterator)(this);
      }
    }]);
  }();
  function createDOMRectList(elements) {
    return new DOMRectList(elements);
  }
},179,[1,10,11,72,73,158]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _Performance = _interopRequireDefault(require(_dependencyMap[1]));
  var _NativePerformance = _interopRequireDefault(require(_dependencyMap[2]));
  if (_NativePerformance.default) {
    global.performance = new _Performance.default();
  } else {
    if (!global.performance) {
      global.performance = {
        mark: () => {},
        measure: () => {},
        now: () => {
          var performanceNow = global.nativePerformanceNow || Date.now;
          return performanceNow();
        }
      };
    }
  }
},180,[1,181,186]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _readOnlyError2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _EventTiming = require(_dependencyMap[5]);
  var _RawPerformanceEntry = require(_dependencyMap[6]);
  var _Utilities = require(_dependencyMap[7]);
  var _MemoryInfo = _interopRequireDefault(require(_dependencyMap[8]));
  var _ReactNativeStartupTiming = _interopRequireDefault(require(_dependencyMap[9]));
  var _NativePerformance = _interopRequireDefault(require(_dependencyMap[10]));
  var _UserTiming = require(_dependencyMap[11]);
  var getCurrentTimeStamp = _NativePerformance.default?.now ?? global.nativePerformanceNow ?? (() => Date.now());
  var ENTRY_TYPES_AVAILABLE_FROM_TIMELINE = ['mark', 'measure'];
  var Performance = exports.default = /*#__PURE__*/function () {
    function Performance() {
      (0, _classCallCheck2.default)(this, Performance);
      this.eventCounts = new _EventTiming.EventCounts();
    }
    return (0, _createClass2.default)(Performance, [{
      key: "memory",
      get: function () {
        if (_NativePerformance.default?.getSimpleMemoryInfo) {
          var memoryInfo = _NativePerformance.default.getSimpleMemoryInfo();
          if (memoryInfo.hasOwnProperty('hermes_heapSize')) {
            var totalJSHeapSize = memoryInfo.hermes_heapSize,
              usedJSHeapSize = memoryInfo.hermes_allocatedBytes;
            return new _MemoryInfo.default({
              jsHeapSizeLimit: null,
              totalJSHeapSize,
              usedJSHeapSize
            });
          } else {
            return new _MemoryInfo.default();
          }
        }
        return new _MemoryInfo.default();
      }
    }, {
      key: "rnStartupTiming",
      get: function () {
        if (_NativePerformance.default?.getReactNativeStartupTiming) {
          var _NativePerformance$ge = _NativePerformance.default.getReactNativeStartupTiming(),
            startTime = _NativePerformance$ge.startTime,
            endTime = _NativePerformance$ge.endTime,
            initializeRuntimeStart = _NativePerformance$ge.initializeRuntimeStart,
            initializeRuntimeEnd = _NativePerformance$ge.initializeRuntimeEnd,
            executeJavaScriptBundleEntryPointStart = _NativePerformance$ge.executeJavaScriptBundleEntryPointStart,
            executeJavaScriptBundleEntryPointEnd = _NativePerformance$ge.executeJavaScriptBundleEntryPointEnd;
          return new _ReactNativeStartupTiming.default({
            startTime,
            endTime,
            initializeRuntimeStart,
            initializeRuntimeEnd,
            executeJavaScriptBundleEntryPointStart,
            executeJavaScriptBundleEntryPointEnd
          });
        }
        return new _ReactNativeStartupTiming.default();
      }
    }, {
      key: "mark",
      value: function mark(markName, markOptions) {
        var computedStartTime;
        if (_NativePerformance.default?.markWithResult) {
          computedStartTime = _NativePerformance.default.markWithResult(markName, markOptions?.startTime);
        } else {
          (0, _Utilities.warnNoNativePerformance)();
          computedStartTime = performance.now();
        }
        return new _UserTiming.PerformanceMark(markName, {
          startTime: computedStartTime,
          detail: markOptions?.detail
        });
      }
    }, {
      key: "clearMarks",
      value: function clearMarks(markName) {
        if (!_NativePerformance.default?.clearMarks) {
          (0, _Utilities.warnNoNativePerformance)();
          return;
        }
        _NativePerformance.default.clearMarks(markName);
      }
    }, {
      key: "measure",
      value: function measure(measureName, startMarkOrOptions, endMark) {
        var options;
        var startMarkName,
          endMarkName = endMark,
          duration,
          startTime = 0,
          endTime = 0;
        if (typeof startMarkOrOptions === 'string') {
          startMarkName = startMarkOrOptions;
          options = {};
        } else if (startMarkOrOptions !== undefined) {
          options = startMarkOrOptions;
          if (endMark !== undefined) {
            throw new TypeError("Performance.measure: Can't have both options and endMark");
          }
          if (options.start === undefined && options.end === undefined) {
            throw new TypeError('Performance.measure: Must have at least one of start/end specified in options');
          }
          if (options.start !== undefined && options.end !== undefined && options.duration !== undefined) {
            throw new TypeError("Performance.measure: Can't have both start/end and duration explicitly in options");
          }
          if (typeof options.start === 'number') {
            startTime = options.start;
          } else {
            startMarkName = options.start;
          }
          if (typeof options.end === 'number') {
            endTime = options.end;
          } else {
            endMarkName = options.end;
          }
          duration = options.duration ?? duration;
        }
        var computedStartTime = startTime;
        var computedDuration = duration;
        if (_NativePerformance.default?.measureWithResult) {
          var _NativePerformance$me = _NativePerformance.default.measureWithResult(measureName, startTime, endTime, duration, startMarkName, endMarkName);
          var _NativePerformance$me2 = (0, _slicedToArray2.default)(_NativePerformance$me, 2);
          computedStartTime = _NativePerformance$me2[0];
          computedDuration = _NativePerformance$me2[1];
        } else {
          (0, _Utilities.warnNoNativePerformance)();
        }
        var measure = new _UserTiming.PerformanceMeasure(measureName, {
          startTime: computedStartTime,
          duration: computedDuration ?? 0,
          detail: options?.detail
        });
        return measure;
      }
    }, {
      key: "clearMeasures",
      value: function clearMeasures(measureName) {
        if (!_NativePerformance.default?.clearMeasures) {
          (0, _Utilities.warnNoNativePerformance)();
          return;
        }
        _NativePerformance.default?.clearMeasures(measureName);
      }
    }, {
      key: "now",
      value: function now() {
        return getCurrentTimeStamp();
      }
    }, {
      key: "getEntries",
      value: function getEntries() {
        if (!_NativePerformance.default?.getEntries) {
          (0, _Utilities.warnNoNativePerformance)();
          return [];
        }
        return _NativePerformance.default.getEntries().map(_RawPerformanceEntry.rawToPerformanceEntry);
      }
    }, {
      key: "getEntriesByType",
      value: function getEntriesByType(entryType) {
        if (entryType != null && !ENTRY_TYPES_AVAILABLE_FROM_TIMELINE.includes(entryType)) {
          console.warn('Deprecated API for given entry type.');
          return [];
        }
        if (!_NativePerformance.default?.getEntriesByType) {
          (0, _Utilities.warnNoNativePerformance)();
          return [];
        }
        return _NativePerformance.default.getEntriesByType((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType)).map(_RawPerformanceEntry.rawToPerformanceEntry);
      }
    }, {
      key: "getEntriesByName",
      value: function getEntriesByName(entryName, entryType) {
        if (entryType != null && !ENTRY_TYPES_AVAILABLE_FROM_TIMELINE.includes(entryType)) {
          console.warn('Deprecated API for given entry type.');
          return [];
        }
        if (!_NativePerformance.default?.getEntriesByName) {
          (0, _Utilities.warnNoNativePerformance)();
          return [];
        }
        return _NativePerformance.default.getEntriesByName(entryName, entryType != null ? (0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType) : undefined).map(_RawPerformanceEntry.rawToPerformanceEntry);
      }
    }]);
  }();
},181,[1,182,29,10,11,183,187,184,190,191,186,189]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _readOnlyError(r) {
    throw new TypeError('"' + r + '" is read-only');
  }
  module.exports = _readOnlyError, module.exports.__esModule = true, module.exports["default"] = module.exports;
},182,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PerformanceEventTiming = exports.EventCounts = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[8]));
  var _Utilities = require(_dependencyMap[9]);
  var _PerformanceEntry2 = require(_dependencyMap[10]);
  var _NativePerformance = _interopRequireDefault(require(_dependencyMap[11]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var _processingStart = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("processingStart");
  var _processingEnd = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("processingEnd");
  var _interactionId = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("interactionId");
  var PerformanceEventTiming = exports.PerformanceEventTiming = /*#__PURE__*/function (_PerformanceEntry) {
    function PerformanceEventTiming(init) {
      var _this;
      (0, _classCallCheck2.default)(this, PerformanceEventTiming);
      _this = _callSuper(this, PerformanceEventTiming, [{
        name: init.name,
        entryType: 'event',
        startTime: init.startTime ?? 0,
        duration: init.duration ?? 0
      }]);
      Object.defineProperty(_this, _processingStart, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(_this, _processingEnd, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(_this, _interactionId, {
        writable: true,
        value: undefined
      });
      (0, _classPrivateFieldLooseBase2.default)(_this, _processingStart)[_processingStart] = init.processingStart ?? 0;
      (0, _classPrivateFieldLooseBase2.default)(_this, _processingEnd)[_processingEnd] = init.processingEnd ?? 0;
      (0, _classPrivateFieldLooseBase2.default)(_this, _interactionId)[_interactionId] = init.interactionId ?? 0;
      return _this;
    }
    (0, _inherits2.default)(PerformanceEventTiming, _PerformanceEntry);
    return (0, _createClass2.default)(PerformanceEventTiming, [{
      key: "processingStart",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _processingStart)[_processingStart];
      }
    }, {
      key: "processingEnd",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _processingEnd)[_processingEnd];
      }
    }, {
      key: "interactionId",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _interactionId)[_interactionId];
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          ..._superPropGet(PerformanceEventTiming, "toJSON", this, 3)([]),
          processingStart: (0, _classPrivateFieldLooseBase2.default)(this, _processingStart)[_processingStart],
          processingEnd: (0, _classPrivateFieldLooseBase2.default)(this, _processingEnd)[_processingEnd],
          interactionId: (0, _classPrivateFieldLooseBase2.default)(this, _interactionId)[_interactionId]
        };
      }
    }]);
  }(_PerformanceEntry2.PerformanceEntry);
  var cachedEventCounts;
  function getCachedEventCounts() {
    if (cachedEventCounts) {
      return cachedEventCounts;
    }
    if (!_NativePerformance.default || !_NativePerformance.default?.getEventCounts) {
      (0, _Utilities.warnNoNativePerformance)();
      cachedEventCounts = new Map();
      return cachedEventCounts;
    }
    var eventCounts = new Map(_NativePerformance.default.getEventCounts?.() ?? []);
    cachedEventCounts = eventCounts;
    global.queueMicrotask(() => {
      cachedEventCounts = null;
    });
    return eventCounts;
  }
  var EventCounts = exports.EventCounts = /*#__PURE__*/function () {
    function EventCounts() {
      (0, _classCallCheck2.default)(this, EventCounts);
    }
    return (0, _createClass2.default)(EventCounts, [{
      key: "size",
      get: function () {
        return getCachedEventCounts().size;
      }
    }, {
      key: "entries",
      value: function entries() {
        return getCachedEventCounts().entries();
      }
    }, {
      key: "forEach",
      value: function forEach(callback) {
        return getCachedEventCounts().forEach(callback);
      }
    }, {
      key: "get",
      value: function get(key) {
        return getCachedEventCounts().get(key);
      }
    }, {
      key: "has",
      value: function has(key) {
        return getCachedEventCounts().has(key);
      }
    }, {
      key: "keys",
      value: function keys() {
        return getCachedEventCounts().keys();
      }
    }, {
      key: "values",
      value: function values() {
        return getCachedEventCounts().values();
      }
    }]);
  }();
},183,[1,10,11,64,66,67,69,72,73,184,185,186]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.warnNoNativePerformance = warnNoNativePerformance;
  var _warnOnce = _interopRequireDefault(require(_dependencyMap[1]));
  function warnNoNativePerformance() {
    (0, _warnOnce.default)('missing-native-performance', 'Missing native implementation of Performance');
  }
},184,[1,49]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PerformanceEntry = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _name = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("name");
  var _entryType = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("entryType");
  var _startTime = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("startTime");
  var _duration = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("duration");
  var PerformanceEntry = exports.PerformanceEntry = /*#__PURE__*/function () {
    function PerformanceEntry(init) {
      (0, _classCallCheck2.default)(this, PerformanceEntry);
      Object.defineProperty(this, _name, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _entryType, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _startTime, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _duration, {
        writable: true,
        value: undefined
      });
      (0, _classPrivateFieldLooseBase2.default)(this, _name)[_name] = init.name;
      (0, _classPrivateFieldLooseBase2.default)(this, _entryType)[_entryType] = init.entryType;
      (0, _classPrivateFieldLooseBase2.default)(this, _startTime)[_startTime] = init.startTime;
      (0, _classPrivateFieldLooseBase2.default)(this, _duration)[_duration] = init.duration;
    }
    return (0, _createClass2.default)(PerformanceEntry, [{
      key: "name",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _name)[_name];
      }
    }, {
      key: "entryType",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _entryType)[_entryType];
      }
    }, {
      key: "startTime",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _startTime)[_startTime];
      }
    }, {
      key: "duration",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _duration)[_duration];
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          name: (0, _classPrivateFieldLooseBase2.default)(this, _name)[_name],
          entryType: (0, _classPrivateFieldLooseBase2.default)(this, _entryType)[_entryType],
          startTime: (0, _classPrivateFieldLooseBase2.default)(this, _startTime)[_startTime],
          duration: (0, _classPrivateFieldLooseBase2.default)(this, _duration)[_duration]
        };
      }
    }]);
  }();
},185,[1,10,11,72,73]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('NativePerformanceCxx');
},186,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RawPerformanceEntryTypeValues = undefined;
  exports.performanceEntryTypeToRaw = performanceEntryTypeToRaw;
  exports.rawToPerformanceEntry = rawToPerformanceEntry;
  exports.rawToPerformanceEntryType = rawToPerformanceEntryType;
  var _EventTiming = require(_dependencyMap[0]);
  var _LongTasks = require(_dependencyMap[1]);
  var _PerformanceEntry = require(_dependencyMap[2]);
  var _UserTiming = require(_dependencyMap[3]);
  var RawPerformanceEntryTypeValues = exports.RawPerformanceEntryTypeValues = {
    MARK: 1,
    MEASURE: 2,
    EVENT: 3,
    LONGTASK: 4
  };
  function rawToPerformanceEntry(entry) {
    if (entry.entryType === RawPerformanceEntryTypeValues.EVENT) {
      return new _EventTiming.PerformanceEventTiming({
        name: entry.name,
        startTime: entry.startTime,
        duration: entry.duration,
        processingStart: entry.processingStart,
        processingEnd: entry.processingEnd,
        interactionId: entry.interactionId
      });
    } else if (entry.entryType === RawPerformanceEntryTypeValues.LONGTASK) {
      return new _LongTasks.PerformanceLongTaskTiming({
        name: entry.name,
        entryType: rawToPerformanceEntryType(entry.entryType),
        startTime: entry.startTime,
        duration: entry.duration
      });
    } else if (entry.entryType === RawPerformanceEntryTypeValues.MARK) {
      return new _UserTiming.PerformanceMark(entry.name, {
        startTime: entry.startTime
      });
    } else if (entry.entryType === RawPerformanceEntryTypeValues.MEASURE) {
      return new _UserTiming.PerformanceMeasure(entry.name, {
        startTime: entry.startTime,
        duration: entry.duration
      });
    } else {
      return new _PerformanceEntry.PerformanceEntry({
        name: entry.name,
        entryType: rawToPerformanceEntryType(entry.entryType),
        startTime: entry.startTime,
        duration: entry.duration
      });
    }
  }
  function rawToPerformanceEntryType(type) {
    switch (type) {
      case RawPerformanceEntryTypeValues.MARK:
        return 'mark';
      case RawPerformanceEntryTypeValues.MEASURE:
        return 'measure';
      case RawPerformanceEntryTypeValues.EVENT:
        return 'event';
      case RawPerformanceEntryTypeValues.LONGTASK:
        return 'longtask';
      default:
        throw new TypeError(`rawToPerformanceEntryType: unexpected performance entry type received: ${type}`);
    }
  }
  function performanceEntryTypeToRaw(type) {
    switch (type) {
      case 'mark':
        return RawPerformanceEntryTypeValues.MARK;
      case 'measure':
        return RawPerformanceEntryTypeValues.MEASURE;
      case 'event':
        return RawPerformanceEntryTypeValues.EVENT;
      case 'longtask':
        return RawPerformanceEntryTypeValues.LONGTASK;
      default:
        type;
        throw new TypeError(`performanceEntryTypeToRaw: unexpected performance entry type received: ${type}`);
    }
  }
},187,[183,188,185,189]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TaskAttributionTiming = exports.PerformanceLongTaskTiming = undefined;
  var _get2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _PerformanceEntry3 = require(_dependencyMap[7]);
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var TaskAttributionTiming = exports.TaskAttributionTiming = /*#__PURE__*/function (_PerformanceEntry) {
    function TaskAttributionTiming() {
      (0, _classCallCheck2.default)(this, TaskAttributionTiming);
      return _callSuper(this, TaskAttributionTiming, arguments);
    }
    (0, _inherits2.default)(TaskAttributionTiming, _PerformanceEntry);
    return (0, _createClass2.default)(TaskAttributionTiming);
  }(_PerformanceEntry3.PerformanceEntry);
  var EMPTY_ATTRIBUTION = Object.preventExtensions([]);
  var PerformanceLongTaskTiming = exports.PerformanceLongTaskTiming = /*#__PURE__*/function (_PerformanceEntry2) {
    function PerformanceLongTaskTiming() {
      (0, _classCallCheck2.default)(this, PerformanceLongTaskTiming);
      return _callSuper(this, PerformanceLongTaskTiming, arguments);
    }
    (0, _inherits2.default)(PerformanceLongTaskTiming, _PerformanceEntry2);
    return (0, _createClass2.default)(PerformanceLongTaskTiming, [{
      key: "attribution",
      get: function () {
        return EMPTY_ATTRIBUTION;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          ..._superPropGet(PerformanceLongTaskTiming, "toJSON", this, 3)([]),
          attribution: this.attribution
        };
      }
    }]);
  }(_PerformanceEntry3.PerformanceEntry);
},188,[1,67,11,10,64,66,69,185]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PerformanceMeasure = exports.PerformanceMark = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _PerformanceEntry3 = require(_dependencyMap[8]);
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var _detail = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("detail");
  var PerformanceMark = exports.PerformanceMark = /*#__PURE__*/function (_PerformanceEntry) {
    function PerformanceMark(markName, markOptions) {
      var _this;
      (0, _classCallCheck2.default)(this, PerformanceMark);
      _this = _callSuper(this, PerformanceMark, [{
        name: markName,
        entryType: 'mark',
        startTime: markOptions?.startTime ?? performance.now(),
        duration: 0
      }]);
      Object.defineProperty(_this, _detail, {
        writable: true,
        value: undefined
      });
      if (markOptions) {
        (0, _classPrivateFieldLooseBase2.default)(_this, _detail)[_detail] = markOptions.detail;
      }
      return _this;
    }
    (0, _inherits2.default)(PerformanceMark, _PerformanceEntry);
    return (0, _createClass2.default)(PerformanceMark, [{
      key: "detail",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _detail)[_detail];
      }
    }]);
  }(_PerformanceEntry3.PerformanceEntry);
  var _detail2 = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("detail");
  var PerformanceMeasure = exports.PerformanceMeasure = /*#__PURE__*/function (_PerformanceEntry2) {
    function PerformanceMeasure(measureName, measureOptions) {
      var _this2;
      (0, _classCallCheck2.default)(this, PerformanceMeasure);
      _this2 = _callSuper(this, PerformanceMeasure, [{
        name: measureName,
        entryType: 'measure',
        startTime: measureOptions.startTime,
        duration: measureOptions.duration
      }]);
      Object.defineProperty(_this2, _detail2, {
        writable: true,
        value: undefined
      });
      if (measureOptions) {
        (0, _classPrivateFieldLooseBase2.default)(_this2, _detail2)[_detail2] = measureOptions.detail;
      }
      return _this2;
    }
    (0, _inherits2.default)(PerformanceMeasure, _PerformanceEntry2);
    return (0, _createClass2.default)(PerformanceMeasure, [{
      key: "detail",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _detail2)[_detail2];
      }
    }]);
  }(_PerformanceEntry3.PerformanceEntry);
},189,[1,10,11,64,66,69,72,73,185]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _jsHeapSizeLimit = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("jsHeapSizeLimit");
  var _totalJSHeapSize = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("totalJSHeapSize");
  var _usedJSHeapSize = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("usedJSHeapSize");
  var MemoryInfo = exports.default = /*#__PURE__*/function () {
    function MemoryInfo(memoryInfo) {
      (0, _classCallCheck2.default)(this, MemoryInfo);
      Object.defineProperty(this, _jsHeapSizeLimit, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _totalJSHeapSize, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _usedJSHeapSize, {
        writable: true,
        value: undefined
      });
      if (memoryInfo != null) {
        (0, _classPrivateFieldLooseBase2.default)(this, _jsHeapSizeLimit)[_jsHeapSizeLimit] = memoryInfo.jsHeapSizeLimit;
        (0, _classPrivateFieldLooseBase2.default)(this, _totalJSHeapSize)[_totalJSHeapSize] = memoryInfo.totalJSHeapSize;
        (0, _classPrivateFieldLooseBase2.default)(this, _usedJSHeapSize)[_usedJSHeapSize] = memoryInfo.usedJSHeapSize;
      }
    }
    return (0, _createClass2.default)(MemoryInfo, [{
      key: "jsHeapSizeLimit",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _jsHeapSizeLimit)[_jsHeapSizeLimit];
      }
    }, {
      key: "totalJSHeapSize",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _totalJSHeapSize)[_totalJSHeapSize];
      }
    }, {
      key: "usedJSHeapSize",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _usedJSHeapSize)[_usedJSHeapSize];
      }
    }]);
  }();
},190,[1,10,11,72,73]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _startTime = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("startTime");
  var _endTime = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("endTime");
  var _initializeRuntimeStart = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("initializeRuntimeStart");
  var _initializeRuntimeEnd = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("initializeRuntimeEnd");
  var _executeJavaScriptBundleEntryPointStart = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("executeJavaScriptBundleEntryPointStart");
  var _executeJavaScriptBundleEntryPointEnd = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("executeJavaScriptBundleEntryPointEnd");
  var ReactNativeStartupTiming = exports.default = /*#__PURE__*/function () {
    function ReactNativeStartupTiming(startUpTiming) {
      (0, _classCallCheck2.default)(this, ReactNativeStartupTiming);
      Object.defineProperty(this, _startTime, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _endTime, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _initializeRuntimeStart, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _initializeRuntimeEnd, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _executeJavaScriptBundleEntryPointStart, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _executeJavaScriptBundleEntryPointEnd, {
        writable: true,
        value: undefined
      });
      if (startUpTiming != null) {
        (0, _classPrivateFieldLooseBase2.default)(this, _startTime)[_startTime] = startUpTiming.startTime;
        (0, _classPrivateFieldLooseBase2.default)(this, _endTime)[_endTime] = startUpTiming.endTime;
        (0, _classPrivateFieldLooseBase2.default)(this, _initializeRuntimeStart)[_initializeRuntimeStart] = startUpTiming.initializeRuntimeStart;
        (0, _classPrivateFieldLooseBase2.default)(this, _initializeRuntimeEnd)[_initializeRuntimeEnd] = startUpTiming.initializeRuntimeEnd;
        (0, _classPrivateFieldLooseBase2.default)(this, _executeJavaScriptBundleEntryPointStart)[_executeJavaScriptBundleEntryPointStart] = startUpTiming.executeJavaScriptBundleEntryPointStart;
        (0, _classPrivateFieldLooseBase2.default)(this, _executeJavaScriptBundleEntryPointEnd)[_executeJavaScriptBundleEntryPointEnd] = startUpTiming.executeJavaScriptBundleEntryPointEnd;
      }
    }
    return (0, _createClass2.default)(ReactNativeStartupTiming, [{
      key: "startTime",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _startTime)[_startTime];
      }
    }, {
      key: "endTime",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _endTime)[_endTime];
      }
    }, {
      key: "initializeRuntimeStart",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _initializeRuntimeStart)[_initializeRuntimeStart];
      }
    }, {
      key: "initializeRuntimeEnd",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _initializeRuntimeEnd)[_initializeRuntimeEnd];
      }
    }, {
      key: "executeJavaScriptBundleEntryPointStart",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _executeJavaScriptBundleEntryPointStart)[_executeJavaScriptBundleEntryPointStart];
      }
    }, {
      key: "executeJavaScriptBundleEntryPointEnd",
      get: function () {
        return (0, _classPrivateFieldLooseBase2.default)(this, _executeJavaScriptBundleEntryPointEnd)[_executeJavaScriptBundleEntryPointEnd];
      }
    }]);
  }();
},191,[1,10,11,72,73]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0]),
    polyfillGlobal = _require.polyfillGlobal;
  if (global?.HermesInternal?.hasPromise?.()) {
    var HermesPromise = global.Promise;
  } else {
    polyfillGlobal('Promise', () => require(_dependencyMap[1]).default);
  }
},192,[6,193]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _es6Extensions = _interopRequireDefault(require(_dependencyMap[1]));
  require(_dependencyMap[2]);
  var _default = exports.default = _es6Extensions.default;
},193,[1,194,196]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  //This file contains the ES6 extensions to the core Promises/A+ API
  var Promise = require(_dependencyMap[0]);
  module.exports = Promise;

  /* Static Functions */

  var TRUE = valuePromise(true);
  var FALSE = valuePromise(false);
  var NULL = valuePromise(null);
  var UNDEFINED = valuePromise(undefined);
  var ZERO = valuePromise(0);
  var EMPTYSTRING = valuePromise('');
  function valuePromise(value) {
    var p = new Promise(Promise._D);
    p._y = 1;
    p._z = value;
    return p;
  }
  Promise.resolve = function (value) {
    if (value instanceof Promise) return value;
    if (value === null) return NULL;
    if (value === undefined) return UNDEFINED;
    if (value === true) return TRUE;
    if (value === false) return FALSE;
    if (value === 0) return ZERO;
    if (value === '') return EMPTYSTRING;
    if (typeof value === 'object' || typeof value === 'function') {
      try {
        var then = value.then;
        if (typeof then === 'function') {
          return new Promise(then.bind(value));
        }
      } catch (ex) {
        return new Promise(function (resolve, reject) {
          reject(ex);
        });
      }
    }
    return valuePromise(value);
  };
  var iterableToArray = function (iterable) {
    if (typeof Array.from === 'function') {
      // ES2015+, iterables exist
      iterableToArray = Array.from;
      return Array.from(iterable);
    }

    // ES5, only arrays and array-likes exist
    iterableToArray = function (x) {
      return Array.prototype.slice.call(x);
    };
    return Array.prototype.slice.call(iterable);
  };
  Promise.all = function (arr) {
    var args = iterableToArray(arr);
    return new Promise(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;
      function res(i, val) {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          if (val instanceof Promise && val.then === Promise.prototype.then) {
            while (val._y === 3) {
              val = val._z;
            }
            if (val._y === 1) return res(i, val._z);
            if (val._y === 2) reject(val._z);
            val.then(function (val) {
              res(i, val);
            }, reject);
            return;
          } else {
            var then = val.then;
            if (typeof then === 'function') {
              var p = new Promise(then.bind(val));
              p.then(function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
        }
        args[i] = val;
        if (--remaining === 0) {
          resolve(args);
        }
      }
      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };
  function onSettledFulfill(value) {
    return {
      status: 'fulfilled',
      value: value
    };
  }
  function onSettledReject(reason) {
    return {
      status: 'rejected',
      reason: reason
    };
  }
  function mapAllSettled(item) {
    if (item && (typeof item === 'object' || typeof item === 'function')) {
      if (item instanceof Promise && item.then === Promise.prototype.then) {
        return item.then(onSettledFulfill, onSettledReject);
      }
      var then = item.then;
      if (typeof then === 'function') {
        return new Promise(then.bind(item)).then(onSettledFulfill, onSettledReject);
      }
    }
    return onSettledFulfill(item);
  }
  Promise.allSettled = function (iterable) {
    return Promise.all(iterableToArray(iterable).map(mapAllSettled));
  };
  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };
  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      iterableToArray(values).forEach(function (value) {
        Promise.resolve(value).then(resolve, reject);
      });
    });
  };

  /* Prototype Methods */

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };
  function getAggregateError(errors) {
    if (typeof AggregateError === 'function') {
      return new AggregateError(errors, 'All promises were rejected');
    }
    var error = new Error('All promises were rejected');
    error.name = 'AggregateError';
    error.errors = errors;
    return error;
  }
  Promise.any = function promiseAny(values) {
    return new Promise(function (resolve, reject) {
      var promises = iterableToArray(values);
      var hasResolved = false;
      var rejectionReasons = [];
      function resolveOnce(value) {
        if (!hasResolved) {
          hasResolved = true;
          resolve(value);
        }
      }
      function rejectionCheck(reason) {
        rejectionReasons.push(reason);
        if (rejectionReasons.length === promises.length) {
          reject(getAggregateError(rejectionReasons));
        }
      }
      if (promises.length === 0) {
        reject(getAggregateError(rejectionReasons));
      } else {
        promises.forEach(function (value) {
          Promise.resolve(value).then(resolveOnce, rejectionCheck);
        });
      }
    });
  };
},194,[195]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function noop() {}

  // States:
  //
  // 0 - pending
  // 1 - fulfilled with _value
  // 2 - rejected with _value
  // 3 - adopted the state of another promise, _value
  //
  // once the state is no longer pending (0) it is immutable

  // All `_` prefixed properties will be reduced to `_{random number}`
  // at build time to obfuscate them and discourage their use.
  // We don't use symbols or Object.defineProperty to fully hide them
  // because the performance isn't good enough.

  // to avoid using try/catch inside critical functions, we
  // extract them to here.
  var LAST_ERROR = null;
  var IS_ERROR = {};
  function getThen(obj) {
    try {
      return obj.then;
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }
  function tryCallOne(fn, a) {
    try {
      return fn(a);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }
  function tryCallTwo(fn, a, b) {
    try {
      fn(a, b);
    } catch (ex) {
      LAST_ERROR = ex;
      return IS_ERROR;
    }
  }
  module.exports = Promise;
  function Promise(fn) {
    if (typeof this !== 'object') {
      throw new TypeError('Promises must be constructed via new');
    }
    if (typeof fn !== 'function') {
      throw new TypeError('Promise constructor\'s argument is not a function');
    }
    this._x = 0;
    this._y = 0;
    this._z = null;
    this._A = null;
    if (fn === noop) return;
    doResolve(fn, this);
  }
  Promise._B = null;
  Promise._C = null;
  Promise._D = noop;
  Promise.prototype.then = function (onFulfilled, onRejected) {
    if (this.constructor !== Promise) {
      return safeThen(this, onFulfilled, onRejected);
    }
    var res = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, res));
    return res;
  };
  function safeThen(self, onFulfilled, onRejected) {
    return new self.constructor(function (resolve, reject) {
      var res = new Promise(noop);
      res.then(resolve, reject);
      handle(self, new Handler(onFulfilled, onRejected, res));
    });
  }
  function handle(self, deferred) {
    while (self._y === 3) {
      self = self._z;
    }
    if (Promise._B) {
      Promise._B(self);
    }
    if (self._y === 0) {
      if (self._x === 0) {
        self._x = 1;
        self._A = deferred;
        return;
      }
      if (self._x === 1) {
        self._x = 2;
        self._A = [self._A, deferred];
        return;
      }
      self._A.push(deferred);
      return;
    }
    handleResolved(self, deferred);
  }
  function handleResolved(self, deferred) {
    setImmediate(function () {
      var cb = self._y === 1 ? deferred.onFulfilled : deferred.onRejected;
      if (cb === null) {
        if (self._y === 1) {
          resolve(deferred.promise, self._z);
        } else {
          reject(deferred.promise, self._z);
        }
        return;
      }
      var ret = tryCallOne(cb, self._z);
      if (ret === IS_ERROR) {
        reject(deferred.promise, LAST_ERROR);
      } else {
        resolve(deferred.promise, ret);
      }
    });
  }
  function resolve(self, newValue) {
    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    if (newValue === self) {
      return reject(self, new TypeError('A promise cannot be resolved with itself.'));
    }
    if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
      var then = getThen(newValue);
      if (then === IS_ERROR) {
        return reject(self, LAST_ERROR);
      }
      if (then === self.then && newValue instanceof Promise) {
        self._y = 3;
        self._z = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(then.bind(newValue), self);
        return;
      }
    }
    self._y = 1;
    self._z = newValue;
    finale(self);
  }
  function reject(self, newValue) {
    self._y = 2;
    self._z = newValue;
    if (Promise._C) {
      Promise._C(self, newValue);
    }
    finale(self);
  }
  function finale(self) {
    if (self._x === 1) {
      handle(self, self._A);
      self._A = null;
    }
    if (self._x === 2) {
      for (var i = 0; i < self._A.length; i++) {
        handle(self, self._A[i]);
      }
      self._A = null;
    }
  }
  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  /**
   * Take a potentially misbehaving resolver function and make sure
   * onFulfilled and onRejected are only called once.
   *
   * Makes no guarantees about asynchrony.
   */
  function doResolve(fn, promise) {
    var done = false;
    var res = tryCallTwo(fn, function (value) {
      if (done) return;
      done = true;
      resolve(promise, value);
    }, function (reason) {
      if (done) return;
      done = true;
      reject(promise, reason);
    });
    if (!done && res === IS_ERROR) {
      done = true;
      reject(promise, LAST_ERROR);
    }
  }
},195,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Promise = require(_dependencyMap[0]);
  module.exports = Promise;
  Promise.prototype.finally = function (f) {
    return this.then(function (value) {
      return Promise.resolve(f()).then(function () {
        return value;
      });
    }, function (err) {
      return Promise.resolve(f()).then(function () {
        throw err;
      });
    });
  };
},196,[195]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0]),
    polyfillGlobal = _require.polyfillGlobal;
  if (global.RN$Bridgeless === true) {
    global.RN$enableMicrotasksInReact = true;
    polyfillGlobal('queueMicrotask', () => require(_dependencyMap[1]).default.queueMicrotask);
    polyfillGlobal('setImmediate', () => require(_dependencyMap[2]).setImmediate);
    polyfillGlobal('clearImmediate', () => require(_dependencyMap[2]).clearImmediate);
    polyfillGlobal('requestIdleCallback', () => require(_dependencyMap[3]).default.requestIdleCallback);
    polyfillGlobal('cancelIdleCallback', () => require(_dependencyMap[3]).default.cancelIdleCallback);
  } else {
    var defineLazyTimer = name => {
      polyfillGlobal(name, () => require(_dependencyMap[4]).default[name]);
    };
    defineLazyTimer('setTimeout');
    defineLazyTimer('clearTimeout');
    defineLazyTimer('setInterval');
    defineLazyTimer('clearInterval');
    defineLazyTimer('requestAnimationFrame');
    defineLazyTimer('cancelAnimationFrame');
    defineLazyTimer('requestIdleCallback');
    defineLazyTimer('cancelIdleCallback');
    polyfillGlobal('queueMicrotask', () => require(_dependencyMap[5]).default);
    polyfillGlobal('setImmediate', () => require(_dependencyMap[4]).default.queueReactNativeMicrotask);
    polyfillGlobal('clearImmediate', () => require(_dependencyMap[4]).default.clearReactNativeMicrotask);
  }
},197,[6,198,199,200,201,204]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('NativeMicrotasksCxx');
},198,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.clearImmediate = clearImmediate;
  exports.setImmediate = setImmediate;
  var GUIID = 1;
  var clearedImmediates = new Set();
  function setImmediate(callback) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (arguments.length < 1) {
      throw new TypeError('setImmediate must be called with at least one argument (a function to call)');
    }
    if (typeof callback !== 'function') {
      throw new TypeError('The first argument to setImmediate must be a function.');
    }
    var id = GUIID++;
    if (clearedImmediates.has(id)) {
      clearedImmediates.delete(id);
    }
    global.queueMicrotask(() => {
      if (!clearedImmediates.has(id)) {
        callback.apply(undefined, args);
      } else {
        clearedImmediates.delete(id);
      }
    });
    return id;
  }
  function clearImmediate(immediateID) {
    clearedImmediates.add(immediateID);
  }
},199,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('NativeIdleCallbacksCxx');
},200,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeTiming = _interopRequireDefault(require(_dependencyMap[1]));
  var BatchedBridge = require(_dependencyMap[2]).default;
  var Systrace = require(_dependencyMap[3]);
  var invariant = require(_dependencyMap[4]);
  var FRAME_DURATION = 16.666666666666668;
  var IDLE_CALLBACK_FRAME_DEADLINE = 1;
  var callbacks = [];
  var types = [];
  var timerIDs = [];
  var freeIdxs = [];
  var reactNativeMicrotasks = [];
  var requestIdleCallbacks = [];
  var requestIdleCallbackTimeouts = {};
  var GUID = 1;
  var errors = [];
  var hasEmittedTimeDriftWarning = false;
  function _getFreeIndex() {
    var freeIdx = freeIdxs.pop();
    if (freeIdx === undefined) {
      return timerIDs.length;
    }
    return freeIdx;
  }
  function _allocateCallback(func, type) {
    var id = GUID++;
    var freeIndex = _getFreeIndex();
    timerIDs[freeIndex] = id;
    callbacks[freeIndex] = func;
    types[freeIndex] = type;
    return id;
  }
  function _callTimer(timerID, frameTime, didTimeout) {
    if (timerID > GUID) {
      console.warn('Tried to call timer with ID %s but no such timer exists.', timerID);
    }
    var timerIndex = timerIDs.indexOf(timerID);
    if (timerIndex === -1) {
      return;
    }
    var type = types[timerIndex];
    var callback = callbacks[timerIndex];
    if (!callback || !type) {
      console.error('No callback found for timerID ' + timerID);
      return;
    }
    if (type !== 'setInterval') {
      _clearIndex(timerIndex);
    }
    try {
      if (type === 'setTimeout' || type === 'setInterval' || type === 'queueReactNativeMicrotask') {
        callback();
      } else if (type === 'requestAnimationFrame') {
        callback(global.performance.now());
      } else if (type === 'requestIdleCallback') {
        callback({
          timeRemaining: function () {
            return Math.max(0, FRAME_DURATION - (global.performance.now() - frameTime));
          },
          didTimeout: !!didTimeout
        });
      } else {
        console.error('Tried to call a callback with invalid type: ' + type);
      }
    } catch (e) {
      errors.push(e);
    }
  }
  function _callReactNativeMicrotasksPass() {
    if (reactNativeMicrotasks.length === 0) {
      return false;
    }
    var passReactNativeMicrotasks = reactNativeMicrotasks;
    reactNativeMicrotasks = [];
    for (var i = 0; i < passReactNativeMicrotasks.length; ++i) {
      _callTimer(passReactNativeMicrotasks[i], 0);
    }
    return reactNativeMicrotasks.length > 0;
  }
  function _clearIndex(i) {
    timerIDs[i] = null;
    callbacks[i] = null;
    types[i] = null;
    freeIdxs.push(i);
  }
  function _freeCallback(timerID) {
    if (timerID == null) {
      return;
    }
    var index = timerIDs.indexOf(timerID);
    if (index !== -1) {
      var type = types[index];
      _clearIndex(index);
      if (type !== 'queueReactNativeMicrotask' && type !== 'requestIdleCallback') {
        deleteTimer(timerID);
      }
    }
  }
  var JSTimers = {
    setTimeout: function (func, duration) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }
      var id = _allocateCallback(() => func.apply(undefined, args), 'setTimeout');
      createTimer(id, duration || 0, Date.now(), false);
      return id;
    },
    setInterval: function (func, duration) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }
      var id = _allocateCallback(() => func.apply(undefined, args), 'setInterval');
      createTimer(id, duration || 0, Date.now(), true);
      return id;
    },
    queueReactNativeMicrotask: function (func) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      var id = _allocateCallback(() => func.apply(undefined, args), 'queueReactNativeMicrotask');
      reactNativeMicrotasks.push(id);
      return id;
    },
    requestAnimationFrame: function (func) {
      var id = _allocateCallback(func, 'requestAnimationFrame');
      createTimer(id, 1, Date.now(), false);
      return id;
    },
    requestIdleCallback: function (func, options) {
      if (requestIdleCallbacks.length === 0) {
        setSendIdleEvents(true);
      }
      var timeout = options && options.timeout;
      var id = _allocateCallback(timeout != null ? deadline => {
        var timeoutId = requestIdleCallbackTimeouts[id];
        if (timeoutId) {
          JSTimers.clearTimeout(timeoutId);
          delete requestIdleCallbackTimeouts[id];
        }
        return func(deadline);
      } : func, 'requestIdleCallback');
      requestIdleCallbacks.push(id);
      if (timeout != null) {
        var timeoutId = JSTimers.setTimeout(() => {
          var index = requestIdleCallbacks.indexOf(id);
          if (index > -1) {
            requestIdleCallbacks.splice(index, 1);
            _callTimer(id, global.performance.now(), true);
          }
          delete requestIdleCallbackTimeouts[id];
          if (requestIdleCallbacks.length === 0) {
            setSendIdleEvents(false);
          }
        }, timeout);
        requestIdleCallbackTimeouts[id] = timeoutId;
      }
      return id;
    },
    cancelIdleCallback: function (timerID) {
      _freeCallback(timerID);
      var index = requestIdleCallbacks.indexOf(timerID);
      if (index !== -1) {
        requestIdleCallbacks.splice(index, 1);
      }
      var timeoutId = requestIdleCallbackTimeouts[timerID];
      if (timeoutId) {
        JSTimers.clearTimeout(timeoutId);
        delete requestIdleCallbackTimeouts[timerID];
      }
      if (requestIdleCallbacks.length === 0) {
        setSendIdleEvents(false);
      }
    },
    clearTimeout: function (timerID) {
      _freeCallback(timerID);
    },
    clearInterval: function (timerID) {
      _freeCallback(timerID);
    },
    clearReactNativeMicrotask: function (timerID) {
      _freeCallback(timerID);
      var index = reactNativeMicrotasks.indexOf(timerID);
      if (index !== -1) {
        reactNativeMicrotasks.splice(index, 1);
      }
    },
    cancelAnimationFrame: function (timerID) {
      _freeCallback(timerID);
    },
    callTimers: function (timersToCall) {
      invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');
      errors.length = 0;
      for (var i = 0; i < timersToCall.length; i++) {
        _callTimer(timersToCall[i], 0);
      }
      var errorCount = errors.length;
      if (errorCount > 0) {
        if (errorCount > 1) {
          for (var ii = 1; ii < errorCount; ii++) {
            JSTimers.setTimeout((error => {
              throw error;
            }).bind(null, errors[ii]), 0);
          }
        }
        throw errors[0];
      }
    },
    callIdleCallbacks: function (frameTime) {
      if (FRAME_DURATION - (Date.now() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
        return;
      }
      errors.length = 0;
      if (requestIdleCallbacks.length > 0) {
        var passIdleCallbacks = requestIdleCallbacks;
        requestIdleCallbacks = [];
        for (var i = 0; i < passIdleCallbacks.length; ++i) {
          _callTimer(passIdleCallbacks[i], frameTime);
        }
      }
      if (requestIdleCallbacks.length === 0) {
        setSendIdleEvents(false);
      }
      errors.forEach(error => JSTimers.setTimeout(() => {
        throw error;
      }, 0));
    },
    callReactNativeMicrotasks() {
      errors.length = 0;
      while (_callReactNativeMicrotasksPass()) {}
      errors.forEach(error => JSTimers.setTimeout(() => {
        throw error;
      }, 0));
    },
    emitTimeDriftWarning(warningMessage) {
      if (hasEmittedTimeDriftWarning) {
        return;
      }
      hasEmittedTimeDriftWarning = true;
      console.warn(warningMessage);
    }
  };
  function createTimer(callbackID, duration, jsSchedulingTime, repeats) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.createTimer(callbackID, duration, jsSchedulingTime, repeats);
  }
  function deleteTimer(timerID) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.deleteTimer(timerID);
  }
  function setSendIdleEvents(sendIdleEvents) {
    invariant(_NativeTiming.default, 'NativeTiming is available');
    _NativeTiming.default.setSendIdleEvents(sendIdleEvents);
  }
  var ExportedJSTimers;
  if (!_NativeTiming.default) {
    console.warn("Timing native module is not available, can't set timers.");
    ExportedJSTimers = {
      callReactNativeMicrotasks: JSTimers.callReactNativeMicrotasks,
      queueReactNativeMicrotask: JSTimers.queueReactNativeMicrotask
    };
  } else {
    ExportedJSTimers = JSTimers;
  }
  BatchedBridge.setReactNativeMicrotasksCallback(JSTimers.callReactNativeMicrotasks);
  var _default = exports.default = ExportedJSTimers;
},201,[1,202,44,46,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeTiming = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeTiming).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeTiming[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeTiming[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeTiming.default;
},202,[203]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('Timing');
},203,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = queueMicrotask;
  var resolvedPromise;
  function queueMicrotask(callback) {
    if (arguments.length < 1) {
      throw new TypeError('queueMicrotask must be called with at least one argument (a function to call)');
    }
    if (typeof callback !== 'function') {
      throw new TypeError('The argument to queueMicrotask must be a function.');
    }
    (resolvedPromise || (resolvedPromise = Promise.resolve())).then(callback).catch(error => setTimeout(() => {
      throw error;
    }, 0));
  }
},204,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (global.RN$useAlwaysAvailableJSErrorHandling !== true) {
    var ExceptionsManager = require(_dependencyMap[0]).default;
    ExceptionsManager.installConsoleErrorReporter();
    if (!global.__fbDisableExceptionsManager) {
      var handleError = (e, isFatal) => {
        try {
          ExceptionsManager.handleException(e, isFatal);
        } catch (ee) {
          console.log('Failed to print error: ', ee.message);
          throw e;
        }
      };
      var ErrorUtils = require(_dependencyMap[1]).default;
      ErrorUtils.setGlobalHandler(handleError);
    }
  }
},205,[77,50]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0]),
    hasNativeConstructor = _require.hasNativeConstructor;
  var _require2 = require(_dependencyMap[1]),
    polyfillGlobal = _require2.polyfillGlobal;
  var hasNativeGenerator;
  try {
    hasNativeGenerator = hasNativeConstructor(function* () {}, 'GeneratorFunction');
  } catch {
    hasNativeGenerator = false;
  }
  if (!hasNativeGenerator) {
    polyfillGlobal('regeneratorRuntime', () => {
      delete global.regeneratorRuntime;
      return require(_dependencyMap[2]);
    });
  }
},206,[207,6,208]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.hasNativeConstructor = hasNativeConstructor;
  exports.isNativeFunction = isNativeFunction;
  function isNativeFunction(f) {
    return typeof f === 'function' && f.toString().indexOf('[native code]') > -1;
  }
  function hasNativeConstructor(o, expectedName) {
    var con = Object.getPrototypeOf(o).constructor;
    return con.name === expectedName && isNativeFunction(con);
  }
},207,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime = function (exports) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    };
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function (obj, key, value) {
        return obj[key] = value;
      };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      defineProperty(generator, "_invoke", {
        value: makeInvokeMethod(innerFn, self, context)
      });
      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    defineProperty(Gp, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: true
    });
    defineProperty(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: true
    });
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }
    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction ||
      // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }
          return PromiseImpl.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }
      var previousPromise;
      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
        // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      defineProperty(this, "_invoke", {
        value: enqueue
      });
    }
    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    });
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === undefined) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };
    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }
        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }
        context.method = method;
        context.arg = arg;
        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }
            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }
          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;
            if (record.arg === ContinueSentinel) {
              continue;
            }
            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var methodName = context.method;
      var method = delegate.iterator[methodName];
      if (method === undefined) {
        // A .throw or .return when the delegate iterator has no .throw
        // method, or a missing .next mehtod, always terminate the
        // yield* loop.
        context.delegate = null;

        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (methodName === "throw" && delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);
          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }
        if (methodName !== "return") {
          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method");
        }
        return ContinueSentinel;
      }
      var record = tryCatch(method, delegate.iterator, context.arg);
      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }
      var info = record.arg;
      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }
      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    define(Gp, iteratorSymbol, function () {
      return this;
    });
    define(Gp, "toString", function () {
      return "[object Generator]";
    });
    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      if (1 in locs) {
        entry.catchLoc = locs[1];
      }
      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }
      this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }
    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }
    exports.keys = function (val) {
      var object = Object(val);
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }
        if (typeof iterable.next === "function") {
          return iterable;
        }
        if (!isNaN(iterable.length)) {
          var i = -1,
            next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }
              next.value = undefined;
              next.done = true;
              return next;
            };
          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return {
        next: doneResult
      };
    }
    exports.values = values;
    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }
    Context.prototype = {
      constructor: Context,
      reset: function (skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);
        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function () {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }
        return this.rval;
      },
      dispatchException: function (exception) {
        if (this.done) {
          throw exception;
        }
        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;
          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined;
          }
          return !!caught;
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;
          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }
        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;
        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }
        return this.complete(record);
      },
      complete: function (record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }
        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }
        return ContinueSentinel;
      },
      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },
      delegateYield: function (iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };
        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined;
        }
        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;
  }(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {});
  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
},208,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0]),
    polyfillGlobal = _require.polyfillGlobal;
  polyfillGlobal('XMLHttpRequest', () => require(_dependencyMap[1]).default);
  polyfillGlobal('FormData', () => require(_dependencyMap[2]).default);
  polyfillGlobal('fetch', () => require(_dependencyMap[3]).fetch);
  polyfillGlobal('Headers', () => require(_dependencyMap[3]).Headers);
  polyfillGlobal('Request', () => require(_dependencyMap[3]).Request);
  polyfillGlobal('Response', () => require(_dependencyMap[3]).Response);
  polyfillGlobal('WebSocket', () => require(_dependencyMap[4]).default);
  polyfillGlobal('Blob', () => require(_dependencyMap[5]).default);
  polyfillGlobal('File', () => require(_dependencyMap[6]).default);
  polyfillGlobal('FileReader', () => require(_dependencyMap[7]).default);
  polyfillGlobal('URL', () => require(_dependencyMap[8]).URL);
  polyfillGlobal('URLSearchParams', () => require(_dependencyMap[8]).URLSearchParams);
  polyfillGlobal('AbortController', () => require(_dependencyMap[9]).AbortController);
  polyfillGlobal('AbortSignal', () => require(_dependencyMap[9]).AbortSignal);
},209,[6,210,229,234,236,221,247,248,253,255]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var useBuiltInEventTarget = global.RN$useBuiltInEventTarget?.();
  var _default = exports.default = useBuiltInEventTarget ? require(_dependencyMap[0]).default : require(_dependencyMap[1]).default;
},210,[211,232]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _get2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _Event = _interopRequireDefault(require(_dependencyMap[7]));
  var _EventHandlerAttributes = require(_dependencyMap[8]);
  var _EventTarget3 = _interopRequireDefault(require(_dependencyMap[9]));
  var _EventTargetInternals = require(_dependencyMap[10]);
  var _ProgressEvent = _interopRequireDefault(require(_dependencyMap[11]));
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var BlobManager = require(_dependencyMap[12]).default;
  var GlobalPerformanceLogger = require(_dependencyMap[13]).default;
  var RCTNetworking = require(_dependencyMap[14]).default;
  var base64 = require(_dependencyMap[15]);
  var invariant = require(_dependencyMap[16]);
  var DEBUG_NETWORK_SEND_DELAY = false;
  var LABEL_FOR_MISSING_URL_FOR_PROFILING = 'Unknown URL';
  if (BlobManager.isAvailable) {
    BlobManager.addNetworkingHandler();
  }
  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;
  var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof global.ArrayBuffer === 'function',
    blob: typeof global.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
  };
  var XMLHttpRequestEventTarget = /*#__PURE__*/function (_EventTarget) {
    function XMLHttpRequestEventTarget() {
      (0, _classCallCheck2.default)(this, XMLHttpRequestEventTarget);
      return _callSuper(this, XMLHttpRequestEventTarget, arguments);
    }
    (0, _inherits2.default)(XMLHttpRequestEventTarget, _EventTarget);
    return (0, _createClass2.default)(XMLHttpRequestEventTarget, [{
      key: "onload",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'load');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'load', listener);
      }
    }, {
      key: "onloadstart",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'loadstart');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'loadstart', listener);
      }
    }, {
      key: "onprogress",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'progress');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'progress', listener);
      }
    }, {
      key: "ontimeout",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'timeout');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'timeout', listener);
      }
    }, {
      key: "onerror",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'error');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'error', listener);
      }
    }, {
      key: "onabort",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'abort');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'abort', listener);
      }
    }, {
      key: "onloadend",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'loadend');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'loadend', listener);
      }
    }]);
  }(_EventTarget3.default);
  var XMLHttpRequest = /*#__PURE__*/function (_EventTarget2) {
    function XMLHttpRequest() {
      var _this;
      (0, _classCallCheck2.default)(this, XMLHttpRequest);
      _this = _callSuper(this, XMLHttpRequest);
      _this.UNSENT = UNSENT;
      _this.OPENED = OPENED;
      _this.HEADERS_RECEIVED = HEADERS_RECEIVED;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this.readyState = UNSENT;
      _this.status = 0;
      _this.timeout = 0;
      _this.withCredentials = true;
      _this.upload = new XMLHttpRequestEventTarget();
      _this._aborted = false;
      _this._hasError = false;
      _this._method = null;
      _this._perfKey = null;
      _this._response = '';
      _this._url = null;
      _this._timedOut = false;
      _this._trackingName = null;
      _this._incrementalEvents = false;
      _this._startTime = null;
      _this._performanceLogger = GlobalPerformanceLogger;
      _this._reset();
      return _this;
    }
    (0, _inherits2.default)(XMLHttpRequest, _EventTarget2);
    return (0, _createClass2.default)(XMLHttpRequest, [{
      key: "_reset",
      value: function _reset() {
        this.readyState = this.UNSENT;
        this.responseHeaders = undefined;
        this.status = 0;
        delete this.responseURL;
        this._requestId = null;
        this._cachedResponse = undefined;
        this._hasError = false;
        this._headers = {};
        this._response = '';
        this._responseType = '';
        this._sent = false;
        this._lowerCaseResponseHeaders = {};
        this._clearSubscriptions();
        this._timedOut = false;
      }
    }, {
      key: "responseType",
      get: function () {
        return this._responseType;
      },
      set: function (responseType) {
        if (this._sent) {
          throw new Error("Failed to set the 'responseType' property on 'XMLHttpRequest': The response type cannot be set after the request has been sent.");
        }
        if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
          console.warn(`The provided value '${responseType}' is not a valid 'responseType'.`);
          return;
        }
        invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', `The provided value '${responseType}' is unsupported in this environment.`);
        if (responseType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
        }
        this._responseType = responseType;
      }
    }, {
      key: "responseText",
      get: function () {
        if (this._responseType !== '' && this._responseType !== 'text') {
          throw new Error("The 'responseText' property is only available if 'responseType' " + `is set to '' or 'text', but it is '${this._responseType}'.`);
        }
        if (this.readyState < LOADING) {
          return '';
        }
        return this._response;
      }
    }, {
      key: "response",
      get: function () {
        var responseType = this.responseType;
        if (responseType === '' || responseType === 'text') {
          return this.readyState < LOADING || this._hasError ? '' : this._response;
        }
        if (this.readyState !== DONE) {
          return null;
        }
        if (this._cachedResponse !== undefined) {
          return this._cachedResponse;
        }
        switch (responseType) {
          case 'document':
            this._cachedResponse = null;
            break;
          case 'arraybuffer':
            this._cachedResponse = base64.toByteArray(this._response).buffer;
            break;
          case 'blob':
            if (typeof this._response === 'object' && this._response) {
              this._cachedResponse = BlobManager.createFromOptions(this._response);
            } else if (this._response === '') {
              this._cachedResponse = BlobManager.createFromParts([]);
            } else {
              throw new Error('Invalid response for blob - expecting object, was ' + `${typeof this._response}: ${this._response.trim()}`);
            }
            break;
          case 'json':
            try {
              this._cachedResponse = JSON.parse(this._response);
            } catch (_) {
              this._cachedResponse = null;
            }
            break;
          default:
            this._cachedResponse = null;
        }
        return this._cachedResponse;
      }
    }, {
      key: "__didCreateRequest",
      value: function __didCreateRequest(requestId) {
        this._requestId = requestId;
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
      }
    }, {
      key: "__didUploadProgress",
      value: function __didUploadProgress(requestId, progress, total) {
        if (requestId === this._requestId) {
          (0, _EventTargetInternals.dispatchTrustedEvent)(this.upload, new _ProgressEvent.default('progress', {
            lengthComputable: true,
            loaded: progress,
            total
          }));
        }
      }
    }, {
      key: "__didReceiveResponse",
      value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
        if (requestId === this._requestId) {
          this._perfKey != null && this._performanceLogger.stopTimespan(this._perfKey);
          this.status = status;
          this.setResponseHeaders(responseHeaders);
          this.setReadyState(this.HEADERS_RECEIVED);
          if (responseURL || responseURL === '') {
            this.responseURL = responseURL;
          } else {
            delete this.responseURL;
          }
          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
        }
      }
    }, {
      key: "__didReceiveData",
      value: function __didReceiveData(requestId, response) {
        if (requestId !== this._requestId) {
          return;
        }
        this._response = response;
        this._cachedResponse = undefined;
        this.setReadyState(this.LOADING);
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
      }
    }, {
      key: "__didReceiveIncrementalData",
      value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
        if (requestId !== this._requestId) {
          return;
        }
        if (!this._response) {
          this._response = responseText;
        } else {
          this._response += responseText;
        }
        if (XMLHttpRequest._profiling) {
          performance.mark('Track:XMLHttpRequest:Incremental Data: ' + this._getMeasureURL());
        }
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
        this.setReadyState(this.LOADING);
        this.__didReceiveDataProgress(requestId, progress, total);
      }
    }, {
      key: "__didReceiveDataProgress",
      value: function __didReceiveDataProgress(requestId, loaded, total) {
        if (requestId !== this._requestId) {
          return;
        }
        (0, _EventTargetInternals.dispatchTrustedEvent)(this, new _ProgressEvent.default('progress', {
          lengthComputable: total >= 0,
          loaded,
          total
        }));
      }
    }, {
      key: "__didCompleteResponse",
      value: function __didCompleteResponse(requestId, error, timeOutError) {
        if (requestId === this._requestId) {
          if (error) {
            if (this._responseType === '' || this._responseType === 'text') {
              this._response = error;
            }
            this._hasError = true;
            if (timeOutError) {
              this._timedOut = true;
            }
          }
          this._clearSubscriptions();
          this._requestId = null;
          this.setReadyState(this.DONE);
          if (XMLHttpRequest._profiling && this._startTime != null) {
            var start = this._startTime;
            performance.measure('Track:XMLHttpRequest:' + this._getMeasureURL(), {
              start,
              end: performance.now()
            });
          }
          if (error) {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
          } else {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
          }
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        (this._subscriptions || []).forEach(sub => {
          if (sub) {
            sub.remove();
          }
        });
        this._subscriptions = [];
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        if (!this.responseHeaders) {
          return null;
        }
        var responseHeaders = this.responseHeaders;
        var unsortedHeaders = new Map();
        for (var rawHeaderName of Object.keys(responseHeaders)) {
          var headerValue = responseHeaders[rawHeaderName];
          var lowerHeaderName = rawHeaderName.toLowerCase();
          var header = unsortedHeaders.get(lowerHeaderName);
          if (header) {
            header.headerValue += ', ' + headerValue;
            unsortedHeaders.set(lowerHeaderName, header);
          } else {
            unsortedHeaders.set(lowerHeaderName, {
              lowerHeaderName,
              upperHeaderName: rawHeaderName.toUpperCase(),
              headerValue
            });
          }
        }
        var sortedHeaders = [...unsortedHeaders.values()].sort((a, b) => {
          if (a.upperHeaderName < b.upperHeaderName) {
            return -1;
          }
          if (a.upperHeaderName > b.upperHeaderName) {
            return 1;
          }
          return 0;
        });
        return sortedHeaders.map(header => {
          return header.lowerHeaderName + ': ' + header.headerValue;
        }).join('\r\n') + '\r\n';
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(header) {
        var value = this._lowerCaseResponseHeaders[header.toLowerCase()];
        return value !== undefined ? value : null;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(header, value) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }
        this._headers[header.toLowerCase()] = String(value);
      }
    }, {
      key: "setTrackingName",
      value: function setTrackingName(trackingName) {
        this._trackingName = trackingName;
        return this;
      }
    }, {
      key: "setPerformanceLogger",
      value: function setPerformanceLogger(performanceLogger) {
        this._performanceLogger = performanceLogger;
        return this;
      }
    }, {
      key: "open",
      value: function open(method, url, async) {
        if (this.readyState !== this.UNSENT) {
          throw new Error('Cannot open, already sending');
        }
        if (async !== undefined && !async) {
          throw new Error('Synchronous http requests are not supported');
        }
        if (!url) {
          throw new Error('Cannot load an empty url');
        }
        this._method = method.toUpperCase();
        this._url = url;
        this._aborted = false;
        this.setReadyState(this.OPENED);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }
        if (this._sent) {
          throw new Error('Request has already been sent');
        }
        this._sent = true;
        var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;
        this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', args => this.__didUploadProgress(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', args => this.__didReceiveResponse(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', args => this.__didReceiveData(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', args => this.__didReceiveIncrementalData(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', args => this.__didReceiveDataProgress(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', args => this.__didCompleteResponse(...args)));
        var nativeResponseType = 'text';
        if (this._responseType === 'arraybuffer') {
          nativeResponseType = 'base64';
        }
        if (this._responseType === 'blob') {
          nativeResponseType = 'blob';
        }
        var doSend = () => {
          var friendlyName = this._trackingName ?? this._url;
          this._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);
          this._performanceLogger.startTimespan(this._perfKey);
          this._startTime = performance.now();
          invariant(this._method, 'XMLHttpRequest method needs to be defined (%s).', friendlyName);
          invariant(this._url, 'XMLHttpRequest URL needs to be defined (%s).', friendlyName);
          RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this), this.withCredentials);
        };
        {
          doSend();
        }
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;
        if (this._requestId) {
          RCTNetworking.abortRequest(this._requestId);
        }
        if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
          this._reset();
          this.setReadyState(this.DONE);
        }
        this._reset();
      }
    }, {
      key: "setResponseHeaders",
      value: function setResponseHeaders(responseHeaders) {
        this.responseHeaders = responseHeaders || null;
        var headers = responseHeaders || {};
        this._lowerCaseResponseHeaders = Object.keys(headers).reduce((lcaseHeaders, headerName) => {
          lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
          return lcaseHeaders;
        }, {});
      }
    }, {
      key: "setReadyState",
      value: function setReadyState(newState) {
        this.readyState = newState;
        (0, _EventTargetInternals.dispatchTrustedEvent)(this, new _Event.default('readystatechange'));
        if (newState === this.DONE) {
          if (this._aborted) {
            (0, _EventTargetInternals.dispatchTrustedEvent)(this, new _Event.default('abort'));
          } else if (this._hasError) {
            if (this._timedOut) {
              (0, _EventTargetInternals.dispatchTrustedEvent)(this, new _Event.default('timeout'));
            } else {
              (0, _EventTargetInternals.dispatchTrustedEvent)(this, new _Event.default('error'));
            }
          } else {
            (0, _EventTargetInternals.dispatchTrustedEvent)(this, new _Event.default('load'));
          }
          (0, _EventTargetInternals.dispatchTrustedEvent)(this, new _Event.default('loadend'));
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener) {
        if (type === 'readystatechange' || type === 'progress') {
          this._incrementalEvents = true;
        }
        _superPropGet(XMLHttpRequest, "addEventListener", this, 3)([type, listener]);
      }
    }, {
      key: "_getMeasureURL",
      value: function _getMeasureURL() {
        return this._trackingName ?? this._url ?? LABEL_FOR_MISSING_URL_FOR_PROFILING;
      }
    }, {
      key: "onabort",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'abort');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'abort', listener);
      }
    }, {
      key: "onerror",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'error');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'error', listener);
      }
    }, {
      key: "onload",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'load');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'load', listener);
      }
    }, {
      key: "onloadstart",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'loadstart');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'loadstart', listener);
      }
    }, {
      key: "onprogress",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'progress');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'progress', listener);
      }
    }, {
      key: "ontimeout",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'timeout');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'timeout', listener);
      }
    }, {
      key: "onloadend",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'loadend');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'loadend', listener);
      }
    }, {
      key: "onreadystatechange",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'readystatechange');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'readystatechange', listener);
      }
    }], [{
      key: "__setInterceptor_DO_NOT_USE",
      value: function __setInterceptor_DO_NOT_USE(interceptor) {
        XMLHttpRequest._interceptor = interceptor;
      }
    }, {
      key: "enableProfiling",
      value: function enableProfiling(_enableProfiling) {
        XMLHttpRequest._profiling = _enableProfiling;
      }
    }]);
  }(_EventTarget3.default);
  XMLHttpRequest.UNSENT = UNSENT;
  XMLHttpRequest.OPENED = OPENED;
  XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
  XMLHttpRequest.LOADING = LOADING;
  XMLHttpRequest.DONE = DONE;
  XMLHttpRequest._interceptor = null;
  XMLHttpRequest._profiling = false;
  var _default = exports.default = XMLHttpRequest;
},211,[1,67,10,11,64,66,69,212,214,215,216,217,218,223,226,24,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _EventInternals = require(_dependencyMap[3]);
  var Event = exports.default = /*#__PURE__*/function () {
    function Event(type, options) {
      (0, _classCallCheck2.default)(this, Event);
      this._defaultPrevented = false;
      this._timeStamp = performance.now();
      this[_EventInternals.COMPOSED_PATH_KEY] = [];
      this[_EventInternals.CURRENT_TARGET_KEY] = null;
      this[_EventInternals.EVENT_PHASE_KEY] = Event.NONE;
      this[_EventInternals.IN_PASSIVE_LISTENER_FLAG_KEY] = false;
      this[_EventInternals.IS_TRUSTED_KEY] = false;
      this[_EventInternals.STOP_IMMEDIATE_PROPAGATION_FLAG_KEY] = false;
      this[_EventInternals.STOP_PROPAGATION_FLAG_KEY] = false;
      this[_EventInternals.TARGET_KEY] = null;
      if (arguments.length < 1) {
        throw new TypeError("Failed to construct 'Event': 1 argument required, but only 0 present.");
      }
      var typeOfOptions = typeof options;
      if (options != null && typeOfOptions !== 'object' && typeOfOptions !== 'function') {
        throw new TypeError("Failed to construct 'Event': The provided value is not of type 'EventInit'.");
      }
      this._type = String(type);
      this._bubbles = Boolean(options?.bubbles);
      this._cancelable = Boolean(options?.cancelable);
      this._composed = Boolean(options?.composed);
    }
    return (0, _createClass2.default)(Event, [{
      key: "bubbles",
      get: function () {
        return this._bubbles;
      }
    }, {
      key: "cancelable",
      get: function () {
        return this._cancelable;
      }
    }, {
      key: "composed",
      get: function () {
        return this._composed;
      }
    }, {
      key: "currentTarget",
      get: function () {
        return (0, _EventInternals.getCurrentTarget)(this);
      }
    }, {
      key: "defaultPrevented",
      get: function () {
        return this._defaultPrevented;
      }
    }, {
      key: "eventPhase",
      get: function () {
        return (0, _EventInternals.getEventPhase)(this);
      }
    }, {
      key: "isTrusted",
      get: function () {
        return (0, _EventInternals.getIsTrusted)(this);
      }
    }, {
      key: "target",
      get: function () {
        return (0, _EventInternals.getTarget)(this);
      }
    }, {
      key: "timeStamp",
      get: function () {
        return this._timeStamp;
      }
    }, {
      key: "type",
      get: function () {
        return this._type;
      }
    }, {
      key: "composedPath",
      value: function composedPath() {
        return (0, _EventInternals.getComposedPath)(this).slice();
      }
    }, {
      key: "preventDefault",
      value: function preventDefault() {
        if (!this._cancelable) {
          return;
        }
        if ((0, _EventInternals.getInPassiveListenerFlag)(this)) {
          console.error(new Error('Unable to preventDefault inside passive event listener invocation.'));
          return;
        }
        this._defaultPrevented = true;
      }
    }, {
      key: "stopImmediatePropagation",
      value: function stopImmediatePropagation() {
        (0, _EventInternals.setStopPropagationFlag)(this, true);
        (0, _EventInternals.setStopImmediatePropagationFlag)(this, true);
      }
    }, {
      key: "stopPropagation",
      value: function stopPropagation() {
        (0, _EventInternals.setStopPropagationFlag)(this, true);
      }
    }]);
  }();
  Object.defineProperty(Event, 'NONE', {
    enumerable: true,
    value: 0
  });
  Object.defineProperty(Event.prototype, 'NONE', {
    enumerable: true,
    value: 0
  });
  Object.defineProperty(Event, 'CAPTURING_PHASE', {
    enumerable: true,
    value: 1
  });
  Object.defineProperty(Event.prototype, 'CAPTURING_PHASE', {
    enumerable: true,
    value: 1
  });
  Object.defineProperty(Event, 'AT_TARGET', {
    enumerable: true,
    value: 2
  });
  Object.defineProperty(Event.prototype, 'AT_TARGET', {
    enumerable: true,
    value: 2
  });
  Object.defineProperty(Event, 'BUBBLING_PHASE', {
    enumerable: true,
    value: 3
  });
  Object.defineProperty(Event.prototype, 'BUBBLING_PHASE', {
    enumerable: true,
    value: 3
  });
},212,[1,10,11,213]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TARGET_KEY = exports.STOP_PROPAGATION_FLAG_KEY = exports.STOP_IMMEDIATE_PROPAGATION_FLAG_KEY = exports.IS_TRUSTED_KEY = exports.IN_PASSIVE_LISTENER_FLAG_KEY = exports.EVENT_PHASE_KEY = exports.CURRENT_TARGET_KEY = exports.COMPOSED_PATH_KEY = undefined;
  exports.getComposedPath = getComposedPath;
  exports.getCurrentTarget = getCurrentTarget;
  exports.getEventPhase = getEventPhase;
  exports.getInPassiveListenerFlag = getInPassiveListenerFlag;
  exports.getIsTrusted = getIsTrusted;
  exports.getStopImmediatePropagationFlag = getStopImmediatePropagationFlag;
  exports.getStopPropagationFlag = getStopPropagationFlag;
  exports.getTarget = getTarget;
  exports.setComposedPath = setComposedPath;
  exports.setCurrentTarget = setCurrentTarget;
  exports.setEventPhase = setEventPhase;
  exports.setInPassiveListenerFlag = setInPassiveListenerFlag;
  exports.setIsTrusted = setIsTrusted;
  exports.setStopImmediatePropagationFlag = setStopImmediatePropagationFlag;
  exports.setStopPropagationFlag = setStopPropagationFlag;
  exports.setTarget = setTarget;
  var COMPOSED_PATH_KEY = exports.COMPOSED_PATH_KEY = Symbol('composedPath');
  var CURRENT_TARGET_KEY = exports.CURRENT_TARGET_KEY = Symbol('currentTarget');
  var EVENT_PHASE_KEY = exports.EVENT_PHASE_KEY = Symbol('eventPhase');
  var IN_PASSIVE_LISTENER_FLAG_KEY = exports.IN_PASSIVE_LISTENER_FLAG_KEY = Symbol('inPassiveListenerFlag');
  var IS_TRUSTED_KEY = exports.IS_TRUSTED_KEY = Symbol('isTrusted');
  var STOP_IMMEDIATE_PROPAGATION_FLAG_KEY = exports.STOP_IMMEDIATE_PROPAGATION_FLAG_KEY = Symbol('stopPropagationFlag');
  var STOP_PROPAGATION_FLAG_KEY = exports.STOP_PROPAGATION_FLAG_KEY = Symbol('stopPropagationFlag');
  var TARGET_KEY = exports.TARGET_KEY = Symbol('target');
  function getCurrentTarget(event) {
    return event[CURRENT_TARGET_KEY];
  }
  function setCurrentTarget(event, currentTarget) {
    event[CURRENT_TARGET_KEY] = currentTarget;
  }
  function getComposedPath(event) {
    return event[COMPOSED_PATH_KEY];
  }
  function setComposedPath(event, composedPath) {
    event[COMPOSED_PATH_KEY] = composedPath;
  }
  function getEventPhase(event) {
    return event[EVENT_PHASE_KEY];
  }
  function setEventPhase(event, eventPhase) {
    event[EVENT_PHASE_KEY] = eventPhase;
  }
  function getInPassiveListenerFlag(event) {
    return event[IN_PASSIVE_LISTENER_FLAG_KEY];
  }
  function setInPassiveListenerFlag(event, value) {
    event[IN_PASSIVE_LISTENER_FLAG_KEY] = value;
  }
  function getIsTrusted(event) {
    return event[IS_TRUSTED_KEY];
  }
  function setIsTrusted(event, isTrusted) {
    event[IS_TRUSTED_KEY] = isTrusted;
  }
  function getStopImmediatePropagationFlag(event) {
    return event[STOP_IMMEDIATE_PROPAGATION_FLAG_KEY];
  }
  function setStopImmediatePropagationFlag(event, value) {
    event[STOP_IMMEDIATE_PROPAGATION_FLAG_KEY] = value;
  }
  function getStopPropagationFlag(event) {
    return event[STOP_PROPAGATION_FLAG_KEY];
  }
  function setStopPropagationFlag(event, value) {
    event[STOP_PROPAGATION_FLAG_KEY] = value;
  }
  function getTarget(event) {
    return event[TARGET_KEY];
  }
  function setTarget(event, target) {
    event[TARGET_KEY] = target;
  }
},213,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getEventHandlerAttribute = getEventHandlerAttribute;
  exports.setEventHandlerAttribute = setEventHandlerAttribute;
  var EVENT_HANDLER_CONTENT_ATTRIBUTE_MAP_KEY = Symbol('eventHandlerAttributeMap');
  function getEventHandlerAttributeMap(target) {
    return target[EVENT_HANDLER_CONTENT_ATTRIBUTE_MAP_KEY];
  }
  function setEventHandlerAttributeMap(target, map) {
    target[EVENT_HANDLER_CONTENT_ATTRIBUTE_MAP_KEY] = map;
  }
  function getEventHandlerAttribute(target, type) {
    var listener = getEventHandlerAttributeMap(target)?.get(type);
    return listener != null ? listener.handleEvent : null;
  }
  function setEventHandlerAttribute(target, type, callback) {
    var map = getEventHandlerAttributeMap(target);
    if (map != null) {
      var currentListener = map.get(type);
      if (currentListener) {
        target.removeEventListener(type, currentListener);
        map.delete(type);
      }
    }
    if (callback != null && (typeof callback === 'function' || typeof callback === 'object')) {
      var listener = {
        handleEvent: callback
      };
      try {
        target.addEventListener(type, listener);
        if (map == null) {
          map = new Map();
          setEventHandlerAttributeMap(target, map);
        }
        map.set(type, listener);
      } catch (e) {}
    }
    if (map != null && map.size === 0) {
      setEventHandlerAttributeMap(target, null);
    }
  }
},214,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _Event = _interopRequireDefault(require(_dependencyMap[3]));
  var _EventInternals = require(_dependencyMap[4]);
  var _EventTargetInternals = require(_dependencyMap[5]);
  var EventTarget = exports.default = /*#__PURE__*/function () {
    function EventTarget() {
      (0, _classCallCheck2.default)(this, EventTarget);
    }
    return (0, _createClass2.default)(EventTarget, [{
      key: "addEventListener",
      value: function addEventListener(type, callback) {
        var optionsOrUseCapture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        if (arguments.length < 2) {
          throw new TypeError(`Failed to execute 'addEventListener' on 'EventTarget': 2 arguments required, but only ${arguments.length} present.`);
        }
        if (callback == null) {
          return;
        }
        validateCallback(callback, 'addEventListener');
        var processedType = String(type);
        var capture;
        var passive;
        var once;
        var signal;
        if (optionsOrUseCapture != null && (typeof optionsOrUseCapture === 'object' || typeof optionsOrUseCapture === 'function')) {
          capture = Boolean(optionsOrUseCapture.capture);
          passive = optionsOrUseCapture.passive == null ? getDefaultPassiveValue(processedType, this) : Boolean(optionsOrUseCapture.passive);
          once = Boolean(optionsOrUseCapture.once);
          signal = optionsOrUseCapture.signal;
          if (signal !== undefined && !(signal instanceof AbortSignal)) {
            throw new TypeError("Failed to execute 'addEventListener' on 'EventTarget': Failed to read the 'signal' property from 'AddEventListenerOptions': Failed to convert value to 'AbortSignal'.");
          }
        } else {
          capture = Boolean(optionsOrUseCapture);
          passive = false;
          once = false;
          signal = null;
        }
        if (signal?.aborted) {
          return;
        }
        var listenersByType = getListenersForPhase(this, capture);
        var listeners = listenersByType?.get(processedType);
        if (listeners == null) {
          if (listenersByType == null) {
            listenersByType = new Map();
            setListenersMap(this, capture, listenersByType);
          }
          listeners = new Map();
          listenersByType.set(processedType, listeners);
        } else if (listeners.has(callback)) {
          return;
        }
        var listener = {
          callback,
          passive,
          once,
          removed: false
        };
        listeners.set(callback, listener);
        var nonNullListeners = listeners;
        if (signal != null) {
          signal.addEventListener('abort', () => {
            listener.removed = true;
            if (nonNullListeners.get(callback) === listener) {
              nonNullListeners.delete(callback);
            }
          }, {
            once: true
          });
        }
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, callback) {
        var optionsOrUseCapture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        if (arguments.length < 2) {
          throw new TypeError(`Failed to execute 'removeEventListener' on 'EventTarget': 2 arguments required, but only ${arguments.length} present.`);
        }
        if (callback == null) {
          return;
        }
        validateCallback(callback, 'removeEventListener');
        var processedType = String(type);
        var capture = typeof optionsOrUseCapture === 'boolean' ? optionsOrUseCapture : Boolean(optionsOrUseCapture.capture);
        var listenersByType = getListenersForPhase(this, capture);
        var listeners = listenersByType?.get(processedType);
        if (listeners == null) {
          return;
        }
        var listener = listeners.get(callback);
        if (listener != null) {
          listener.removed = true;
          listeners.delete(callback);
        }
      }
    }, {
      key: "dispatchEvent",
      value: function dispatchEvent(event) {
        if (!(event instanceof _Event.default)) {
          throw new TypeError("Failed to execute 'dispatchEvent' on 'EventTarget': parameter 1 is not of type 'Event'.");
        }
        if (getEventDispatchFlag(event)) {
          throw new Error("Failed to execute 'dispatchEvent' on 'EventTarget': The event is already being dispatched.");
        }
        (0, _EventInternals.setIsTrusted)(event, false);
        dispatch(this, event);
        return !event.defaultPrevented;
      }
    }, {
      key: _EventTargetInternals.EVENT_TARGET_GET_THE_PARENT_KEY,
      value: function () {
        return null;
      }
    }, {
      key: _EventTargetInternals.INTERNAL_DISPATCH_METHOD_KEY,
      value: function (event) {
        dispatch(this, event);
      }
    }]);
  }();
  function validateCallback(callback, methodName) {
    if (typeof callback !== 'function' && typeof callback !== 'object') {
      throw new TypeError(`Failed to execute '${methodName}' on 'EventTarget': parameter 2 is not of type 'Object'.`);
    }
  }
  function getDefaultPassiveValue(type, eventTarget) {
    return false;
  }
  function dispatch(eventTarget, event) {
    setEventDispatchFlag(event, true);
    var eventPath = getEventPath(eventTarget, event);
    (0, _EventInternals.setComposedPath)(event, eventPath);
    (0, _EventInternals.setTarget)(event, eventTarget);
    for (var i = eventPath.length - 1; i >= 0; i--) {
      if ((0, _EventInternals.getStopPropagationFlag)(event)) {
        break;
      }
      var target = eventPath[i];
      (0, _EventInternals.setEventPhase)(event, target === eventTarget ? _Event.default.AT_TARGET : _Event.default.CAPTURING_PHASE);
      invoke(target, event, _Event.default.CAPTURING_PHASE);
    }
    for (var _target of eventPath) {
      if ((0, _EventInternals.getStopPropagationFlag)(event)) {
        break;
      }
      if (!event.bubbles && _target !== eventTarget) {
        break;
      }
      (0, _EventInternals.setEventPhase)(event, _target === eventTarget ? _Event.default.AT_TARGET : _Event.default.BUBBLING_PHASE);
      invoke(_target, event, _Event.default.BUBBLING_PHASE);
    }
    (0, _EventInternals.setEventPhase)(event, _Event.default.NONE);
    (0, _EventInternals.setCurrentTarget)(event, null);
    (0, _EventInternals.setComposedPath)(event, []);
    setEventDispatchFlag(event, false);
    (0, _EventInternals.setStopImmediatePropagationFlag)(event, false);
    (0, _EventInternals.setStopPropagationFlag)(event, false);
  }
  function getEventPath(eventTarget, event) {
    var path = [];
    var target = eventTarget;
    while (target != null) {
      path.push(target);
      target = target[_EventTargetInternals.EVENT_TARGET_GET_THE_PARENT_KEY]();
    }
    return path;
  }
  function invoke(eventTarget, event, eventPhase) {
    var listenersByType = getListenersForPhase(eventTarget, eventPhase === _Event.default.CAPTURING_PHASE);
    (0, _EventInternals.setCurrentTarget)(event, eventTarget);
    var maybeListeners = listenersByType?.get(event.type);
    if (maybeListeners == null) {
      return;
    }
    var listeners = Array.from(maybeListeners.values());
    (0, _EventInternals.setCurrentTarget)(event, eventTarget);
    for (var listener of listeners) {
      if (listener.removed) {
        continue;
      }
      if (listener.once) {
        eventTarget.removeEventListener(event.type, listener.callback, eventPhase === _Event.default.CAPTURING_PHASE);
      }
      if (listener.passive) {
        (0, _EventInternals.setInPassiveListenerFlag)(event, true);
      }
      var currentEvent = global.event;
      global.event = event;
      var callback = listener.callback;
      try {
        if (typeof callback === 'function') {
          callback.call(eventTarget, event);
        } else if (typeof callback.handleEvent === 'function') {
          callback.handleEvent(event);
        }
      } catch (error) {
        console.error(error);
      }
      if (listener.passive) {
        (0, _EventInternals.setInPassiveListenerFlag)(event, false);
      }
      global.event = currentEvent;
      if ((0, _EventInternals.getStopImmediatePropagationFlag)(event)) {
        break;
      }
    }
  }
  var CAPTURING_LISTENERS_KEY = Symbol('capturingListeners');
  var BUBBLING_LISTENERS_KEY = Symbol('bubblingListeners');
  function getListenersForPhase(eventTarget, isCapture) {
    return isCapture ? eventTarget[CAPTURING_LISTENERS_KEY] : eventTarget[BUBBLING_LISTENERS_KEY];
  }
  function setListenersMap(eventTarget, isCapture, listenersMap) {
    if (isCapture) {
      eventTarget[CAPTURING_LISTENERS_KEY] = listenersMap;
    } else {
      eventTarget[BUBBLING_LISTENERS_KEY] = listenersMap;
    }
  }
  var EVENT_DISPATCH_FLAG = Symbol('Event.dispatch');
  function getEventDispatchFlag(event) {
    return event[EVENT_DISPATCH_FLAG];
  }
  function setEventDispatchFlag(event, value) {
    event[EVENT_DISPATCH_FLAG] = value;
  }
},215,[1,10,11,212,213,216]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.INTERNAL_DISPATCH_METHOD_KEY = exports.EVENT_TARGET_GET_THE_PARENT_KEY = undefined;
  exports.dispatchTrustedEvent = dispatchTrustedEvent;
  var _EventInternals = require(_dependencyMap[0]);
  var EVENT_TARGET_GET_THE_PARENT_KEY = exports.EVENT_TARGET_GET_THE_PARENT_KEY = Symbol('EventTarget[get the parent]');
  var INTERNAL_DISPATCH_METHOD_KEY = exports.INTERNAL_DISPATCH_METHOD_KEY = Symbol('EventTarget[dispatch]');
  function dispatchTrustedEvent(eventTarget, event) {
    (0, _EventInternals.setIsTrusted)(event, true);
    return eventTarget[INTERNAL_DISPATCH_METHOD_KEY](event);
  }
},216,[213]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _Event2 = _interopRequireDefault(require(_dependencyMap[6]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var ProgressEvent = exports.default = /*#__PURE__*/function (_Event) {
    function ProgressEvent(type, options) {
      var _this;
      (0, _classCallCheck2.default)(this, ProgressEvent);
      _this = _callSuper(this, ProgressEvent, [type, options]);
      _this._lengthComputable = Boolean(options?.lengthComputable);
      _this._loaded = Number(options?.loaded) || 0;
      _this._total = Number(options?.total) || 0;
      return _this;
    }
    (0, _inherits2.default)(ProgressEvent, _Event);
    return (0, _createClass2.default)(ProgressEvent, [{
      key: "lengthComputable",
      get: function () {
        return this._lengthComputable;
      }
    }, {
      key: "loaded",
      get: function () {
        return this._loaded;
      }
    }, {
      key: "total",
      get: function () {
        return this._total;
      }
    }]);
  }(_Event2.default);
},217,[1,10,11,64,66,69,212]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeBlobModule = _interopRequireDefault(require(_dependencyMap[3]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[4]));
  var Blob = require(_dependencyMap[5]).default;
  var BlobRegistry = require(_dependencyMap[6]);
  function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
      var r = Math.random() * 16 | 0,
        v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }
  function createBlobCollector(blobId) {
    if (global.__blobCollectorProvider == null) {
      return null;
    } else {
      return global.__blobCollectorProvider(blobId);
    }
  }
  var BlobManager = /*#__PURE__*/function () {
    function BlobManager() {
      (0, _classCallCheck2.default)(this, BlobManager);
    }
    return (0, _createClass2.default)(BlobManager, null, [{
      key: "createFromParts",
      value: function createFromParts(parts, options) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        var blobId = uuidv4();
        var items = parts.map(part => {
          if (part instanceof ArrayBuffer || ArrayBuffer.isView(part)) {
            throw new Error("Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported");
          }
          if (part instanceof Blob) {
            return {
              data: part.data,
              type: 'blob'
            };
          } else {
            return {
              data: String(part),
              type: 'string'
            };
          }
        });
        var size = items.reduce((acc, curr) => {
          if (curr.type === 'string') {
            return acc + global.unescape(encodeURI(curr.data)).length;
          } else {
            return acc + curr.data.size;
          }
        }, 0);
        _NativeBlobModule.default.createFromParts(items, blobId);
        return BlobManager.createFromOptions({
          blobId,
          offset: 0,
          size,
          type: options ? options.type : '',
          lastModified: options ? options.lastModified : Date.now()
        });
      }
    }, {
      key: "createFromOptions",
      value: function createFromOptions(options) {
        BlobRegistry.register(options.blobId);
        return Object.assign(Object.create(Blob.prototype), {
          data: options.__collector == null ? {
            ...options,
            __collector: createBlobCollector(options.blobId)
          } : options
        });
      }
    }, {
      key: "release",
      value: function release(blobId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        BlobRegistry.unregister(blobId);
        if (BlobRegistry.has(blobId)) {
          return;
        }
        _NativeBlobModule.default.release(blobId);
      }
    }, {
      key: "addNetworkingHandler",
      value: function addNetworkingHandler() {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.addNetworkingHandler();
      }
    }, {
      key: "addWebSocketHandler",
      value: function addWebSocketHandler(socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.addWebSocketHandler(socketId);
      }
    }, {
      key: "removeWebSocketHandler",
      value: function removeWebSocketHandler(socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.removeWebSocketHandler(socketId);
      }
    }, {
      key: "sendOverSocket",
      value: function sendOverSocket(blob, socketId) {
        (0, _invariant.default)(_NativeBlobModule.default, 'NativeBlobModule is available.');
        _NativeBlobModule.default.sendOverSocket(blob.data, socketId);
      }
    }]);
  }();
  BlobManager.isAvailable = !!_NativeBlobModule.default;
  var _default = exports.default = BlobManager;
},218,[1,10,11,219,42,221,222]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeBlobModule = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeBlobModule).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeBlobModule[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeBlobModule[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeBlobModule.default;
},219,[220]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var NativeModule = TurboModuleRegistry.get('BlobModule');
  var constants = null;
  var NativeBlobModule = null;
  if (NativeModule != null) {
    NativeBlobModule = {
      getConstants() {
        if (constants == null) {
          constants = NativeModule.getConstants();
        }
        return constants;
      },
      addNetworkingHandler() {
        NativeModule.addNetworkingHandler();
      },
      addWebSocketHandler(id) {
        NativeModule.addWebSocketHandler(id);
      },
      removeWebSocketHandler(id) {
        NativeModule.removeWebSocketHandler(id);
      },
      sendOverSocket(blob, socketID) {
        NativeModule.sendOverSocket(blob, socketID);
      },
      createFromParts(parts, withId) {
        NativeModule.createFromParts(parts, withId);
      },
      release(blobId) {
        NativeModule.release(blobId);
      }
    };
  }
  var _default = exports.default = NativeBlobModule;
},220,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var Blob = /*#__PURE__*/function () {
    function Blob() {
      var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments.length > 1 ? arguments[1] : undefined;
      (0, _classCallCheck2.default)(this, Blob);
      var BlobManager = require(_dependencyMap[3]).default;
      this.data = BlobManager.createFromParts(parts, options).data;
    }
    return (0, _createClass2.default)(Blob, [{
      key: "data",
      get: function () {
        if (!this._data) {
          throw new Error('Blob has been closed and is no longer available');
        }
        return this._data;
      },
      set: function (data) {
        this._data = data;
      }
    }, {
      key: "slice",
      value: function slice(start, end) {
        var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
        var BlobManager = require(_dependencyMap[3]).default;
        var _this$data = this.data,
          offset = _this$data.offset,
          size = _this$data.size;
        if (typeof start === 'number') {
          if (start > size) {
            start = size;
          }
          offset += start;
          size -= start;
          if (typeof end === 'number') {
            if (end < 0) {
              end = this.size + end;
            }
            if (end > this.size) {
              end = this.size;
            }
            size = end - start;
          }
        }
        return BlobManager.createFromOptions({
          blobId: this.data.blobId,
          offset,
          size,
          type: contentType,
          __collector: this.data.__collector
        });
      }
    }, {
      key: "close",
      value: function close() {
        var BlobManager = require(_dependencyMap[3]).default;
        BlobManager.release(this.data.blobId);
        this.data = null;
      }
    }, {
      key: "size",
      get: function () {
        return this.data.size;
      }
    }, {
      key: "type",
      get: function () {
        return this.data.type || '';
      }
    }]);
  }();
  var _default = exports.default = Blob;
},221,[1,10,11,218]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.unregister = exports.register = exports.has = undefined;
  var registry = new Map();
  var register = id => {
    var used = registry.get(id);
    if (used != null) {
      registry.set(id, used + 1);
    } else {
      registry.set(id, 1);
    }
  };
  exports.register = register;
  var unregister = id => {
    var used = registry.get(id);
    if (used != null) {
      if (used <= 1) {
        registry.delete(id);
      } else {
        registry.set(id, used - 1);
      }
    }
  };
  exports.unregister = unregister;
  var has = id => {
    return registry.get(id) || false;
  };
  exports.has = has;
},222,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _createPerformanceLogger = _interopRequireDefault(require(_dependencyMap[1]));
  var GlobalPerformanceLogger = (0, _createPerformanceLogger.default)();
  var _default = exports.default = GlobalPerformanceLogger;
},223,[1,224]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createPerformanceLogger;
  exports.getCurrentTimestamp = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _infoLog = _interopRequireDefault(require(_dependencyMap[3]));
  var PRINT_TO_CONSOLE = false;
  var getCurrentTimestamp = exports.getCurrentTimestamp = global.nativeQPLTimestamp ?? (() => global.performance.now());
  var PerformanceLogger = /*#__PURE__*/function () {
    function PerformanceLogger() {
      (0, _classCallCheck2.default)(this, PerformanceLogger);
      this._timespans = {};
      this._extras = {};
      this._points = {};
      this._pointExtras = {};
      this._closed = false;
    }
    return (0, _createClass2.default)(PerformanceLogger, [{
      key: "addTimespan",
      value: function addTimespan(key, startTime, endTime, startExtras, endExtras) {
        if (this._closed) {
          return;
        }
        if (this._timespans[key]) {
          return;
        }
        this._timespans[key] = {
          startTime,
          endTime,
          totalTime: endTime - (startTime || 0),
          startExtras,
          endExtras
        };
      }
    }, {
      key: "append",
      value: function append(performanceLogger) {
        this._timespans = {
          ...performanceLogger.getTimespans(),
          ...this._timespans
        };
        this._extras = {
          ...performanceLogger.getExtras(),
          ...this._extras
        };
        this._points = {
          ...performanceLogger.getPoints(),
          ...this._points
        };
        this._pointExtras = {
          ...performanceLogger.getPointExtras(),
          ...this._pointExtras
        };
      }
    }, {
      key: "clear",
      value: function clear() {
        this._timespans = {};
        this._extras = {};
        this._points = {};
      }
    }, {
      key: "clearCompleted",
      value: function clearCompleted() {
        for (var _key in this._timespans) {
          if (this._timespans[_key]?.totalTime != null) {
            delete this._timespans[_key];
          }
        }
        this._extras = {};
        this._points = {};
      }
    }, {
      key: "close",
      value: function close() {
        this._closed = true;
      }
    }, {
      key: "currentTimestamp",
      value: function currentTimestamp() {
        return getCurrentTimestamp();
      }
    }, {
      key: "getExtras",
      value: function getExtras() {
        return this._extras;
      }
    }, {
      key: "getPoints",
      value: function getPoints() {
        return this._points;
      }
    }, {
      key: "getPointExtras",
      value: function getPointExtras() {
        return this._pointExtras;
      }
    }, {
      key: "getTimespans",
      value: function getTimespans() {
        return this._timespans;
      }
    }, {
      key: "hasTimespan",
      value: function hasTimespan(key) {
        return !!this._timespans[key];
      }
    }, {
      key: "isClosed",
      value: function isClosed() {
        return this._closed;
      }
    }, {
      key: "logEverything",
      value: function logEverything() {}
    }, {
      key: "markPoint",
      value: function markPoint(key) {
        var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
        var extras = arguments.length > 2 ? arguments[2] : undefined;
        if (this._closed) {
          return;
        }
        if (this._points[key] != null) {
          return;
        }
        this._points[key] = timestamp;
        if (extras) {
          this._pointExtras[key] = extras;
        }
      }
    }, {
      key: "removeExtra",
      value: function removeExtra(key) {
        var value = this._extras[key];
        delete this._extras[key];
        return value;
      }
    }, {
      key: "setExtra",
      value: function setExtra(key, value) {
        if (this._closed) {
          return;
        }
        if (this._extras.hasOwnProperty(key)) {
          return;
        }
        this._extras[key] = value;
      }
    }, {
      key: "startTimespan",
      value: function startTimespan(key) {
        var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
        var extras = arguments.length > 2 ? arguments[2] : undefined;
        if (this._closed) {
          return;
        }
        if (this._timespans[key]) {
          return;
        }
        this._timespans[key] = {
          startTime: timestamp,
          startExtras: extras
        };
      }
    }, {
      key: "stopTimespan",
      value: function stopTimespan(key) {
        var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();
        var extras = arguments.length > 2 ? arguments[2] : undefined;
        if (this._closed) {
          return;
        }
        var timespan = this._timespans[key];
        if (!timespan || timespan.startTime == null) {
          return;
        }
        if (timespan.endTime != null) {
          return;
        }
        timespan.endExtras = extras;
        timespan.endTime = timestamp;
        timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
      }
    }]);
  }();
  function createPerformanceLogger() {
    return new PerformanceLogger();
  }
},224,[1,10,11,225]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  function infoLog() {
    return console.log(...arguments);
  }
  var _default = exports.default = infoLog;
},225,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var _convertRequestBody = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeNetworkingIOS = _interopRequireDefault(require(_dependencyMap[3]));
  var RCTNetworking = {
    addListener(eventType, listener, context) {
      return _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
    },
    sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
      var body = (0, _convertRequestBody.default)(data);
      _NativeNetworkingIOS.default.sendRequest({
        method,
        url,
        data: {
          ...body,
          trackingName
        },
        headers,
        responseType,
        incrementalUpdates,
        timeout,
        withCredentials
      }, callback);
    },
    abortRequest(requestId) {
      _NativeNetworkingIOS.default.abortRequest(requestId);
    },
    clearCookies(callback) {
      _NativeNetworkingIOS.default.clearCookies(callback);
    }
  };
  var _default = exports.default = RCTNetworking;
},226,[1,63,227,230]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var Blob = require(_dependencyMap[0]).default;
  var binaryToBase64 = require(_dependencyMap[1]).default;
  var FormData = require(_dependencyMap[2]).default;
  function convertRequestBody(body) {
    if (typeof body === 'string') {
      return {
        string: body
      };
    }
    if (body instanceof Blob) {
      return {
        blob: body.data
      };
    }
    if (body instanceof FormData) {
      return {
        formData: body.getParts()
      };
    }
    if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
      return {
        base64: binaryToBase64(body)
      };
    }
    return body;
  }
  var _default = exports.default = convertRequestBody;
},227,[221,228,229]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var base64 = require(_dependencyMap[0]);
  function binaryToBase64(data) {
    if (data instanceof ArrayBuffer) {
      data = new Uint8Array(data);
    }
    if (data instanceof Uint8Array) {
      return base64.fromByteArray(data);
    }
    if (!ArrayBuffer.isView(data)) {
      throw new Error('data must be ArrayBuffer or typed array');
    }
    var _ref = data,
      buffer = _ref.buffer,
      byteOffset = _ref.byteOffset,
      byteLength = _ref.byteLength;
    return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
  }
  var _default = exports.default = binaryToBase64;
},228,[24]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  function encodeFilename(filename) {
    return encodeURIComponent(filename.replace(/\//g, '_'));
  }
  var FormData = /*#__PURE__*/function () {
    function FormData() {
      (0, _classCallCheck2.default)(this, FormData);
      this._parts = [];
    }
    return (0, _createClass2.default)(FormData, [{
      key: "append",
      value: function append(key, value) {
        this._parts.push([key, value]);
      }
    }, {
      key: "getAll",
      value: function getAll(key) {
        return this._parts.filter(_ref => {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 1),
            name = _ref2[0];
          return name === key;
        }).map(_ref3 => {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
            value = _ref4[1];
          return value;
        });
      }
    }, {
      key: "getParts",
      value: function getParts() {
        return this._parts.map(_ref5 => {
          var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
            name = _ref6[0],
            value = _ref6[1];
          var contentDisposition = 'form-data; name="' + name + '"';
          var headers = {
            'content-disposition': contentDisposition
          };
          if (typeof value === 'object' && !Array.isArray(value) && value) {
            if (typeof value.name === 'string') {
              headers['content-disposition'] += `; filename="${encodeFilename(value.name)}"`;
            }
            if (typeof value.type === 'string') {
              headers['content-type'] = value.type;
            }
            return {
              ...value,
              headers,
              fieldName: name
            };
          }
          return {
            string: String(value),
            headers,
            fieldName: name
          };
        });
      }
    }]);
  }();
  var _default = exports.default = FormData;
},229,[1,29,10,11]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeNetworkingIOS = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeNetworkingIOS).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeNetworkingIOS[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeNetworkingIOS[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeNetworkingIOS.default;
},230,[231]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('Networking');
},231,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _get2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _eventTargetShim = _interopRequireDefault(require(_dependencyMap[7]));
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var BlobManager = require(_dependencyMap[8]).default;
  var GlobalPerformanceLogger = require(_dependencyMap[9]).default;
  var RCTNetworking = require(_dependencyMap[10]).default;
  var base64 = require(_dependencyMap[11]);
  var invariant = require(_dependencyMap[12]);
  var DEBUG_NETWORK_SEND_DELAY = false;
  var LABEL_FOR_MISSING_URL_FOR_PROFILING = 'Unknown URL';
  if (BlobManager.isAvailable) {
    BlobManager.addNetworkingHandler();
  }
  var UNSENT = 0;
  var OPENED = 1;
  var HEADERS_RECEIVED = 2;
  var LOADING = 3;
  var DONE = 4;
  var SUPPORTED_RESPONSE_TYPES = {
    arraybuffer: typeof global.ArrayBuffer === 'function',
    blob: typeof global.Blob === 'function',
    document: false,
    json: true,
    text: true,
    '': true
  };
  var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];
  var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');
  var XMLHttpRequestEventTarget = /*#__PURE__*/function (_ref) {
    function XMLHttpRequestEventTarget() {
      (0, _classCallCheck2.default)(this, XMLHttpRequestEventTarget);
      return _callSuper(this, XMLHttpRequestEventTarget, arguments);
    }
    (0, _inherits2.default)(XMLHttpRequestEventTarget, _ref);
    return (0, _createClass2.default)(XMLHttpRequestEventTarget);
  }((0, _eventTargetShim.default)(...REQUEST_EVENTS));
  var XMLHttpRequest = /*#__PURE__*/function (_ref2) {
    function XMLHttpRequest() {
      var _this;
      (0, _classCallCheck2.default)(this, XMLHttpRequest);
      _this = _callSuper(this, XMLHttpRequest);
      _this.UNSENT = UNSENT;
      _this.OPENED = OPENED;
      _this.HEADERS_RECEIVED = HEADERS_RECEIVED;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this.readyState = UNSENT;
      _this.status = 0;
      _this.timeout = 0;
      _this.withCredentials = true;
      _this.upload = new XMLHttpRequestEventTarget();
      _this._aborted = false;
      _this._hasError = false;
      _this._method = null;
      _this._perfKey = null;
      _this._response = '';
      _this._url = null;
      _this._timedOut = false;
      _this._trackingName = null;
      _this._incrementalEvents = false;
      _this._startTime = null;
      _this._performanceLogger = GlobalPerformanceLogger;
      _this._reset();
      return _this;
    }
    (0, _inherits2.default)(XMLHttpRequest, _ref2);
    return (0, _createClass2.default)(XMLHttpRequest, [{
      key: "_reset",
      value: function _reset() {
        this.readyState = this.UNSENT;
        this.responseHeaders = undefined;
        this.status = 0;
        delete this.responseURL;
        this._requestId = null;
        this._cachedResponse = undefined;
        this._hasError = false;
        this._headers = {};
        this._response = '';
        this._responseType = '';
        this._sent = false;
        this._lowerCaseResponseHeaders = {};
        this._clearSubscriptions();
        this._timedOut = false;
      }
    }, {
      key: "responseType",
      get: function () {
        return this._responseType;
      },
      set: function (responseType) {
        if (this._sent) {
          throw new Error("Failed to set the 'responseType' property on 'XMLHttpRequest': The response type cannot be set after the request has been sent.");
        }
        if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
          console.warn(`The provided value '${responseType}' is not a valid 'responseType'.`);
          return;
        }
        invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', `The provided value '${responseType}' is unsupported in this environment.`);
        if (responseType === 'blob') {
          invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');
        }
        this._responseType = responseType;
      }
    }, {
      key: "responseText",
      get: function () {
        if (this._responseType !== '' && this._responseType !== 'text') {
          throw new Error("The 'responseText' property is only available if 'responseType' " + `is set to '' or 'text', but it is '${this._responseType}'.`);
        }
        if (this.readyState < LOADING) {
          return '';
        }
        return this._response;
      }
    }, {
      key: "response",
      get: function () {
        var responseType = this.responseType;
        if (responseType === '' || responseType === 'text') {
          return this.readyState < LOADING || this._hasError ? '' : this._response;
        }
        if (this.readyState !== DONE) {
          return null;
        }
        if (this._cachedResponse !== undefined) {
          return this._cachedResponse;
        }
        switch (responseType) {
          case 'document':
            this._cachedResponse = null;
            break;
          case 'arraybuffer':
            this._cachedResponse = base64.toByteArray(this._response).buffer;
            break;
          case 'blob':
            if (typeof this._response === 'object' && this._response) {
              this._cachedResponse = BlobManager.createFromOptions(this._response);
            } else if (this._response === '') {
              this._cachedResponse = BlobManager.createFromParts([]);
            } else {
              throw new Error('Invalid response for blob - expecting object, was ' + `${typeof this._response}: ${this._response.trim()}`);
            }
            break;
          case 'json':
            try {
              this._cachedResponse = JSON.parse(this._response);
            } catch (_) {
              this._cachedResponse = null;
            }
            break;
          default:
            this._cachedResponse = null;
        }
        return this._cachedResponse;
      }
    }, {
      key: "__didCreateRequest",
      value: function __didCreateRequest(requestId) {
        this._requestId = requestId;
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
      }
    }, {
      key: "__didUploadProgress",
      value: function __didUploadProgress(requestId, progress, total) {
        if (requestId === this._requestId) {
          this.upload.dispatchEvent({
            type: 'progress',
            lengthComputable: true,
            loaded: progress,
            total
          });
        }
      }
    }, {
      key: "__didReceiveResponse",
      value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
        if (requestId === this._requestId) {
          this._perfKey != null && this._performanceLogger.stopTimespan(this._perfKey);
          this.status = status;
          this.setResponseHeaders(responseHeaders);
          this.setReadyState(this.HEADERS_RECEIVED);
          if (responseURL || responseURL === '') {
            this.responseURL = responseURL;
          } else {
            delete this.responseURL;
          }
          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
        }
      }
    }, {
      key: "__didReceiveData",
      value: function __didReceiveData(requestId, response) {
        if (requestId !== this._requestId) {
          return;
        }
        this._response = response;
        this._cachedResponse = undefined;
        this.setReadyState(this.LOADING);
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
      }
    }, {
      key: "__didReceiveIncrementalData",
      value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
        if (requestId !== this._requestId) {
          return;
        }
        if (!this._response) {
          this._response = responseText;
        } else {
          this._response += responseText;
        }
        if (XMLHttpRequest._profiling) {
          performance.mark('Track:XMLHttpRequest:Incremental Data: ' + this._getMeasureURL());
        }
        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);
        this.setReadyState(this.LOADING);
        this.__didReceiveDataProgress(requestId, progress, total);
      }
    }, {
      key: "__didReceiveDataProgress",
      value: function __didReceiveDataProgress(requestId, loaded, total) {
        if (requestId !== this._requestId) {
          return;
        }
        this.dispatchEvent({
          type: 'progress',
          lengthComputable: total >= 0,
          loaded,
          total
        });
      }
    }, {
      key: "__didCompleteResponse",
      value: function __didCompleteResponse(requestId, error, timeOutError) {
        if (requestId === this._requestId) {
          if (error) {
            if (this._responseType === '' || this._responseType === 'text') {
              this._response = error;
            }
            this._hasError = true;
            if (timeOutError) {
              this._timedOut = true;
            }
          }
          this._clearSubscriptions();
          this._requestId = null;
          this.setReadyState(this.DONE);
          if (XMLHttpRequest._profiling && this._startTime != null) {
            var start = this._startTime;
            performance.measure('Track:XMLHttpRequest:' + this._getMeasureURL(), {
              start,
              end: performance.now()
            });
          }
          if (error) {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
          } else {
            XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
          }
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        (this._subscriptions || []).forEach(sub => {
          if (sub) {
            sub.remove();
          }
        });
        this._subscriptions = [];
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        if (!this.responseHeaders) {
          return null;
        }
        var responseHeaders = this.responseHeaders;
        var unsortedHeaders = new Map();
        for (var rawHeaderName of Object.keys(responseHeaders)) {
          var headerValue = responseHeaders[rawHeaderName];
          var lowerHeaderName = rawHeaderName.toLowerCase();
          var header = unsortedHeaders.get(lowerHeaderName);
          if (header) {
            header.headerValue += ', ' + headerValue;
            unsortedHeaders.set(lowerHeaderName, header);
          } else {
            unsortedHeaders.set(lowerHeaderName, {
              lowerHeaderName,
              upperHeaderName: rawHeaderName.toUpperCase(),
              headerValue
            });
          }
        }
        var sortedHeaders = [...unsortedHeaders.values()].sort((a, b) => {
          if (a.upperHeaderName < b.upperHeaderName) {
            return -1;
          }
          if (a.upperHeaderName > b.upperHeaderName) {
            return 1;
          }
          return 0;
        });
        return sortedHeaders.map(header => {
          return header.lowerHeaderName + ': ' + header.headerValue;
        }).join('\r\n') + '\r\n';
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(header) {
        var value = this._lowerCaseResponseHeaders[header.toLowerCase()];
        return value !== undefined ? value : null;
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(header, value) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }
        this._headers[header.toLowerCase()] = String(value);
      }
    }, {
      key: "setTrackingName",
      value: function setTrackingName(trackingName) {
        this._trackingName = trackingName;
        return this;
      }
    }, {
      key: "setPerformanceLogger",
      value: function setPerformanceLogger(performanceLogger) {
        this._performanceLogger = performanceLogger;
        return this;
      }
    }, {
      key: "open",
      value: function open(method, url, async) {
        if (this.readyState !== this.UNSENT) {
          throw new Error('Cannot open, already sending');
        }
        if (async !== undefined && !async) {
          throw new Error('Synchronous http requests are not supported');
        }
        if (!url) {
          throw new Error('Cannot load an empty url');
        }
        this._method = method.toUpperCase();
        this._url = url;
        this._aborted = false;
        this.setReadyState(this.OPENED);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState !== this.OPENED) {
          throw new Error('Request has not been opened');
        }
        if (this._sent) {
          throw new Error('Request has already been sent');
        }
        this._sent = true;
        var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;
        this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', args => this.__didUploadProgress(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', args => this.__didReceiveResponse(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', args => this.__didReceiveData(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', args => this.__didReceiveIncrementalData(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', args => this.__didReceiveDataProgress(...args)));
        this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', args => this.__didCompleteResponse(...args)));
        var nativeResponseType = 'text';
        if (this._responseType === 'arraybuffer') {
          nativeResponseType = 'base64';
        }
        if (this._responseType === 'blob') {
          nativeResponseType = 'blob';
        }
        var doSend = () => {
          var friendlyName = this._trackingName ?? this._url;
          this._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);
          this._performanceLogger.startTimespan(this._perfKey);
          this._startTime = performance.now();
          invariant(this._method, 'XMLHttpRequest method needs to be defined (%s).', friendlyName);
          invariant(this._url, 'XMLHttpRequest URL needs to be defined (%s).', friendlyName);
          RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this), this.withCredentials);
        };
        {
          doSend();
        }
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;
        if (this._requestId) {
          RCTNetworking.abortRequest(this._requestId);
        }
        if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
          this._reset();
          this.setReadyState(this.DONE);
        }
        this._reset();
      }
    }, {
      key: "setResponseHeaders",
      value: function setResponseHeaders(responseHeaders) {
        this.responseHeaders = responseHeaders || null;
        var headers = responseHeaders || {};
        this._lowerCaseResponseHeaders = Object.keys(headers).reduce((lcaseHeaders, headerName) => {
          lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
          return lcaseHeaders;
        }, {});
      }
    }, {
      key: "setReadyState",
      value: function setReadyState(newState) {
        this.readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });
        if (newState === this.DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._hasError) {
            if (this._timedOut) {
              this.dispatchEvent({
                type: 'timeout'
              });
            } else {
              this.dispatchEvent({
                type: 'error'
              });
            }
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }
          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, listener) {
        if (type === 'readystatechange' || type === 'progress') {
          this._incrementalEvents = true;
        }
        _superPropGet(XMLHttpRequest, "addEventListener", this, 3)([type, listener]);
      }
    }, {
      key: "_getMeasureURL",
      value: function _getMeasureURL() {
        return this._trackingName ?? this._url ?? LABEL_FOR_MISSING_URL_FOR_PROFILING;
      }
    }], [{
      key: "__setInterceptor_DO_NOT_USE",
      value: function __setInterceptor_DO_NOT_USE(interceptor) {
        XMLHttpRequest._interceptor = interceptor;
      }
    }, {
      key: "enableProfiling",
      value: function enableProfiling(_enableProfiling) {
        XMLHttpRequest._profiling = _enableProfiling;
      }
    }]);
  }((0, _eventTargetShim.default)(...XHR_EVENTS));
  XMLHttpRequest.UNSENT = UNSENT;
  XMLHttpRequest.OPENED = OPENED;
  XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
  XMLHttpRequest.LOADING = LOADING;
  XMLHttpRequest.DONE = DONE;
  XMLHttpRequest._interceptor = null;
  XMLHttpRequest._profiling = false;
  var _default = exports.default = XMLHttpRequest;
},232,[1,67,11,10,64,66,69,233,218,223,226,24,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.EventTarget = EventTarget;
  exports.default = undefined;
  exports.defineEventAttribute = defineEventAttribute;
  /**
   * @author Toru Nagashima <https://github.com/mysticatea>
   * @copyright 2015 Toru Nagashima. All rights reserved.
   * See LICENSE file in root directory for full license.
   */
  /**
   * @typedef {object} PrivateData
   * @property {EventTarget} eventTarget The event target.
   * @property {{type:string}} event The original event object.
   * @property {number} eventPhase The current event phase.
   * @property {EventTarget|null} currentTarget The current event target.
   * @property {boolean} canceled The flag to prevent default.
   * @property {boolean} stopped The flag to stop propagation.
   * @property {boolean} immediateStopped The flag to stop propagation immediately.
   * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.
   * @property {number} timeStamp The unix time.
   * @private
   */

  /**
   * Private data for event wrappers.
   * @type {WeakMap<Event, PrivateData>}
   * @private
   */
  var privateData = new WeakMap();

  /**
   * Cache for wrapper classes.
   * @type {WeakMap<Object, Function>}
   * @private
   */
  var wrappers = new WeakMap();

  /**
   * Get private data.
   * @param {Event} event The event object to get private data.
   * @returns {PrivateData} The private data of the event.
   * @private
   */
  function pd(event) {
    var retv = privateData.get(event);
    console.assert(retv != null, "'this' is expected an Event object, but got", event);
    return retv;
  }

  /**
   * https://dom.spec.whatwg.org/#set-the-canceled-flag
   * @param data {PrivateData} private data.
   */
  function setCancelFlag(data) {
    if (data.passiveListener != null) {
      if (typeof console !== "undefined" && typeof console.error === "function") {
        console.error("Unable to preventDefault inside passive event listener invocation.", data.passiveListener);
      }
      return;
    }
    if (!data.event.cancelable) {
      return;
    }
    data.canceled = true;
    if (typeof data.event.preventDefault === "function") {
      data.event.preventDefault();
    }
  }

  /**
   * @see https://dom.spec.whatwg.org/#interface-event
   * @private
   */
  /**
   * The event wrapper.
   * @constructor
   * @param {EventTarget} eventTarget The event target of this dispatching.
   * @param {Event|{type:string}} event The original event to wrap.
   */
  function Event(eventTarget, event) {
    privateData.set(this, {
      eventTarget,
      event,
      eventPhase: 2,
      currentTarget: eventTarget,
      canceled: false,
      stopped: false,
      immediateStopped: false,
      passiveListener: null,
      timeStamp: event.timeStamp || Date.now()
    });

    // https://heycam.github.io/webidl/#Unforgeable
    Object.defineProperty(this, "isTrusted", {
      value: false,
      enumerable: true
    });

    // Define accessors
    var keys = Object.keys(event);
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      if (!(key in this)) {
        Object.defineProperty(this, key, defineRedirectDescriptor(key));
      }
    }
  }

  // Should be enumerable, but class methods are not enumerable.
  Event.prototype = {
    /**
     * The type of this event.
     * @type {string}
     */
    get type() {
      return pd(this).event.type;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */
    get target() {
      return pd(this).eventTarget;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     */
    get currentTarget() {
      return pd(this).currentTarget;
    },
    /**
     * @returns {EventTarget[]} The composed path of this event.
     */
    composedPath() {
      var currentTarget = pd(this).currentTarget;
      if (currentTarget == null) {
        return [];
      }
      return [currentTarget];
    },
    /**
     * Constant of NONE.
     * @type {number}
     */
    get NONE() {
      return 0;
    },
    /**
     * Constant of CAPTURING_PHASE.
     * @type {number}
     */
    get CAPTURING_PHASE() {
      return 1;
    },
    /**
     * Constant of AT_TARGET.
     * @type {number}
     */
    get AT_TARGET() {
      return 2;
    },
    /**
     * Constant of BUBBLING_PHASE.
     * @type {number}
     */
    get BUBBLING_PHASE() {
      return 3;
    },
    /**
     * The target of this event.
     * @type {number}
     */
    get eventPhase() {
      return pd(this).eventPhase;
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */
    stopPropagation() {
      var data = pd(this);
      data.stopped = true;
      if (typeof data.event.stopPropagation === "function") {
        data.event.stopPropagation();
      }
    },
    /**
     * Stop event bubbling.
     * @returns {void}
     */
    stopImmediatePropagation() {
      var data = pd(this);
      data.stopped = true;
      data.immediateStopped = true;
      if (typeof data.event.stopImmediatePropagation === "function") {
        data.event.stopImmediatePropagation();
      }
    },
    /**
     * The flag to be bubbling.
     * @type {boolean}
     */
    get bubbles() {
      return Boolean(pd(this).event.bubbles);
    },
    /**
     * The flag to be cancelable.
     * @type {boolean}
     */
    get cancelable() {
      return Boolean(pd(this).event.cancelable);
    },
    /**
     * Cancel this event.
     * @returns {void}
     */
    preventDefault() {
      setCancelFlag(pd(this));
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     */
    get defaultPrevented() {
      return pd(this).canceled;
    },
    /**
     * The flag to be composed.
     * @type {boolean}
     */
    get composed() {
      return Boolean(pd(this).event.composed);
    },
    /**
     * The unix time of this event.
     * @type {number}
     */
    get timeStamp() {
      return pd(this).timeStamp;
    },
    /**
     * The target of this event.
     * @type {EventTarget}
     * @deprecated
     */
    get srcElement() {
      return pd(this).eventTarget;
    },
    /**
     * The flag to stop event bubbling.
     * @type {boolean}
     * @deprecated
     */
    get cancelBubble() {
      return pd(this).stopped;
    },
    set cancelBubble(value) {
      if (!value) {
        return;
      }
      var data = pd(this);
      data.stopped = true;
      if (typeof data.event.cancelBubble === "boolean") {
        data.event.cancelBubble = true;
      }
    },
    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     * @deprecated
     */
    get returnValue() {
      return !pd(this).canceled;
    },
    set returnValue(value) {
      if (!value) {
        setCancelFlag(pd(this));
      }
    },
    /**
     * Initialize this event object. But do nothing under event dispatching.
     * @param {string} type The event type.
     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
     * @param {boolean} [cancelable=false] The flag to be possible to cancel.
     * @deprecated
     */
    initEvent() {
      // Do nothing.
    }
  };

  // `constructor` is not enumerable.
  Object.defineProperty(Event.prototype, "constructor", {
    value: Event,
    configurable: true,
    writable: true
  });

  // Ensure `event instanceof window.Event` is `true`.
  if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
    Object.setPrototypeOf(Event.prototype, window.Event.prototype);

    // Make association for wrappers.
    wrappers.set(window.Event.prototype, Event);
  }

  /**
   * Get the property descriptor to redirect a given property.
   * @param {string} key Property name to define property descriptor.
   * @returns {PropertyDescriptor} The property descriptor to redirect the property.
   * @private
   */
  function defineRedirectDescriptor(key) {
    return {
      get() {
        return pd(this).event[key];
      },
      set(value) {
        pd(this).event[key] = value;
      },
      configurable: true,
      enumerable: true
    };
  }

  /**
   * Get the property descriptor to call a given method property.
   * @param {string} key Property name to define property descriptor.
   * @returns {PropertyDescriptor} The property descriptor to call the method property.
   * @private
   */
  function defineCallDescriptor(key) {
    return {
      value() {
        var event = pd(this).event;
        return event[key].apply(event, arguments);
      },
      configurable: true,
      enumerable: true
    };
  }

  /**
   * Define new wrapper class.
   * @param {Function} BaseEvent The base wrapper class.
   * @param {Object} proto The prototype of the original event.
   * @returns {Function} The defined wrapper class.
   * @private
   */
  function defineWrapper(BaseEvent, proto) {
    var keys = Object.keys(proto);
    if (keys.length === 0) {
      return BaseEvent;
    }

    /** CustomEvent */
    function CustomEvent(eventTarget, event) {
      BaseEvent.call(this, eventTarget, event);
    }
    CustomEvent.prototype = Object.create(BaseEvent.prototype, {
      constructor: {
        value: CustomEvent,
        configurable: true,
        writable: true
      }
    });

    // Define accessors.
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      if (!(key in BaseEvent.prototype)) {
        var descriptor = Object.getOwnPropertyDescriptor(proto, key);
        var isFunc = typeof descriptor.value === "function";
        Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));
      }
    }
    return CustomEvent;
  }

  /**
   * Get the wrapper class of a given prototype.
   * @param {Object} proto The prototype of the original event to get its wrapper.
   * @returns {Function} The wrapper class.
   * @private
   */
  function getWrapper(proto) {
    if (proto == null || proto === Object.prototype) {
      return Event;
    }
    var wrapper = wrappers.get(proto);
    if (wrapper == null) {
      wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
      wrappers.set(proto, wrapper);
    }
    return wrapper;
  }

  /**
   * Wrap a given event to management a dispatching.
   * @param {EventTarget} eventTarget The event target of this dispatching.
   * @param {Object} event The event to wrap.
   * @returns {Event} The wrapper instance.
   * @private
   */
  function wrapEvent(eventTarget, event) {
    var Wrapper = getWrapper(Object.getPrototypeOf(event));
    return new Wrapper(eventTarget, event);
  }

  /**
   * Get the immediateStopped flag of a given event.
   * @param {Event} event The event to get.
   * @returns {boolean} The flag to stop propagation immediately.
   * @private
   */
  function isStopped(event) {
    return pd(event).immediateStopped;
  }

  /**
   * Set the current event phase of a given event.
   * @param {Event} event The event to set current target.
   * @param {number} eventPhase New event phase.
   * @returns {void}
   * @private
   */
  function setEventPhase(event, eventPhase) {
    pd(event).eventPhase = eventPhase;
  }

  /**
   * Set the current target of a given event.
   * @param {Event} event The event to set current target.
   * @param {EventTarget|null} currentTarget New current target.
   * @returns {void}
   * @private
   */
  function setCurrentTarget(event, currentTarget) {
    pd(event).currentTarget = currentTarget;
  }

  /**
   * Set a passive listener of a given event.
   * @param {Event} event The event to set current target.
   * @param {Function|null} passiveListener New passive listener.
   * @returns {void}
   * @private
   */
  function setPassiveListener(event, passiveListener) {
    pd(event).passiveListener = passiveListener;
  }

  /**
   * @typedef {object} ListenerNode
   * @property {Function} listener
   * @property {1|2|3} listenerType
   * @property {boolean} passive
   * @property {boolean} once
   * @property {ListenerNode|null} next
   * @private
   */

  /**
   * @type {WeakMap<object, Map<string, ListenerNode>>}
   * @private
   */
  var listenersMap = new WeakMap();

  // Listener types
  var CAPTURE = 1;
  var BUBBLE = 2;
  var ATTRIBUTE = 3;

  /**
   * Check whether a given value is an object or not.
   * @param {any} x The value to check.
   * @returns {boolean} `true` if the value is an object.
   */
  function isObject(x) {
    return x !== null && typeof x === "object"; //eslint-disable-line no-restricted-syntax
  }

  /**
   * Get listeners.
   * @param {EventTarget} eventTarget The event target to get.
   * @returns {Map<string, ListenerNode>} The listeners.
   * @private
   */
  function getListeners(eventTarget) {
    var listeners = listenersMap.get(eventTarget);
    if (listeners == null) {
      throw new TypeError("'this' is expected an EventTarget object, but got another value.");
    }
    return listeners;
  }

  /**
   * Get the property descriptor for the event attribute of a given event.
   * @param {string} eventName The event name to get property descriptor.
   * @returns {PropertyDescriptor} The property descriptor.
   * @private
   */
  function defineEventAttributeDescriptor(eventName) {
    return {
      get() {
        var listeners = getListeners(this);
        var node = listeners.get(eventName);
        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            return node.listener;
          }
          node = node.next;
        }
        return null;
      },
      set(listener) {
        if (typeof listener !== "function" && !isObject(listener)) {
          listener = null; // eslint-disable-line no-param-reassign
        }
        var listeners = getListeners(this);

        // Traverse to the tail while removing old value.
        var prev = null;
        var node = listeners.get(eventName);
        while (node != null) {
          if (node.listenerType === ATTRIBUTE) {
            // Remove old value.
            if (prev !== null) {
              prev.next = node.next;
            } else if (node.next !== null) {
              listeners.set(eventName, node.next);
            } else {
              listeners.delete(eventName);
            }
          } else {
            prev = node;
          }
          node = node.next;
        }

        // Add new value.
        if (listener !== null) {
          var newNode = {
            listener,
            listenerType: ATTRIBUTE,
            passive: false,
            once: false,
            next: null
          };
          if (prev === null) {
            listeners.set(eventName, newNode);
          } else {
            prev.next = newNode;
          }
        }
      },
      configurable: true,
      enumerable: true
    };
  }

  /**
   * Define an event attribute (e.g. `eventTarget.onclick`).
   * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.
   * @param {string} eventName The event name to define.
   * @returns {void}
   */
  function defineEventAttribute(eventTargetPrototype, eventName) {
    Object.defineProperty(eventTargetPrototype, `on${eventName}`, defineEventAttributeDescriptor(eventName));
  }

  /**
   * Define a custom EventTarget with event attributes.
   * @param {string[]} eventNames Event names for event attributes.
   * @returns {EventTarget} The custom EventTarget.
   * @private
   */
  function defineCustomEventTarget(eventNames) {
    /** CustomEventTarget */
    function CustomEventTarget() {
      EventTarget.call(this);
    }
    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
      constructor: {
        value: CustomEventTarget,
        configurable: true,
        writable: true
      }
    });
    for (var i = 0; i < eventNames.length; ++i) {
      defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
    }
    return CustomEventTarget;
  }

  /**
   * EventTarget.
   *
   * - This is constructor if no arguments.
   * - This is a function which returns a CustomEventTarget constructor if there are arguments.
   *
   * For example:
   *
   *     class A extends EventTarget {}
   *     class B extends EventTarget("message") {}
   *     class C extends EventTarget("message", "error") {}
   *     class D extends EventTarget(["message", "error"]) {}
   */
  function EventTarget() {
    /*eslint-disable consistent-return */
    if (this instanceof EventTarget) {
      listenersMap.set(this, new Map());
      return;
    }
    if (arguments.length === 1 && Array.isArray(arguments[0])) {
      return defineCustomEventTarget(arguments[0]);
    }
    if (arguments.length > 0) {
      var types = new Array(arguments.length);
      for (var i = 0; i < arguments.length; ++i) {
        types[i] = arguments[i];
      }
      return defineCustomEventTarget(types);
    }
    throw new TypeError("Cannot call a class as a function");
    /*eslint-enable consistent-return */
  }

  // Should be enumerable, but class methods are not enumerable.
  EventTarget.prototype = {
    /**
     * Add a given listener to this event target.
     * @param {string} eventName The event name to add.
     * @param {Function} listener The listener to add.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */
    addEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }
      if (typeof listener !== "function" && !isObject(listener)) {
        throw new TypeError("'listener' should be a function or an object.");
      }
      var listeners = getListeners(this);
      var optionsIsObj = isObject(options);
      var capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var newNode = {
        listener,
        listenerType,
        passive: optionsIsObj && Boolean(options.passive),
        once: optionsIsObj && Boolean(options.once),
        next: null
      };

      // Set it as the first node if the first node is null.
      var node = listeners.get(eventName);
      if (node === undefined) {
        listeners.set(eventName, newNode);
        return;
      }

      // Traverse to the tail while checking duplication..
      var prev = null;
      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          // Should ignore duplication.
          return;
        }
        prev = node;
        node = node.next;
      }

      // Add it.
      prev.next = newNode;
    },
    /**
     * Remove a given listener from this event target.
     * @param {string} eventName The event name to remove.
     * @param {Function} listener The listener to remove.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */
    removeEventListener(eventName, listener, options) {
      if (listener == null) {
        return;
      }
      var listeners = getListeners(this);
      var capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
      var listenerType = capture ? CAPTURE : BUBBLE;
      var prev = null;
      var node = listeners.get(eventName);
      while (node != null) {
        if (node.listener === listener && node.listenerType === listenerType) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }
          return;
        }
        prev = node;
        node = node.next;
      }
    },
    /**
     * Dispatch a given event.
     * @param {Event|{type:string}} event The event to dispatch.
     * @returns {boolean} `false` if canceled.
     */
    dispatchEvent(event) {
      if (event == null || typeof event.type !== "string") {
        throw new TypeError('"event.type" should be a string.');
      }

      // If listeners aren't registered, terminate.
      var listeners = getListeners(this);
      var eventName = event.type;
      var node = listeners.get(eventName);
      if (node == null) {
        return true;
      }

      // Since we cannot rewrite several properties, so wrap object.
      var wrappedEvent = wrapEvent(this, event);

      // This doesn't process capturing phase and bubbling phase.
      // This isn't participating in a tree.
      var prev = null;
      while (node != null) {
        // Remove this listener if it's once
        if (node.once) {
          if (prev !== null) {
            prev.next = node.next;
          } else if (node.next !== null) {
            listeners.set(eventName, node.next);
          } else {
            listeners.delete(eventName);
          }
        } else {
          prev = node;
        }

        // Call this listener
        setPassiveListener(wrappedEvent, node.passive ? node.listener : null);
        if (typeof node.listener === "function") {
          try {
            node.listener.call(this, wrappedEvent);
          } catch (err) {
            if (typeof console !== "undefined" && typeof console.error === "function") {
              console.error(err);
            }
          }
        } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
          node.listener.handleEvent(wrappedEvent);
        }

        // Break if `event.stopImmediatePropagation` was called.
        if (isStopped(wrappedEvent)) {
          break;
        }
        node = node.next;
      }
      setPassiveListener(wrappedEvent, null);
      setEventPhase(wrappedEvent, 0);
      setCurrentTarget(wrappedEvent, null);
      return !wrappedEvent.defaultPrevented;
    }
  };

  // `constructor` is not enumerable.
  Object.defineProperty(EventTarget.prototype, "constructor", {
    value: EventTarget,
    configurable: true,
    writable: true
  });

  // Ensure `eventTarget instanceof window.EventTarget` is `true`.
  if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
  }
  var _default = exports.default = EventTarget;
},233,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.fetch = exports.Response = exports.Request = exports.Headers = undefined;
  require(_dependencyMap[0]);
  var fetch = exports.fetch = global.fetch;
  var Headers = exports.Headers = global.Headers;
  var Request = exports.Request = global.Request;
  var Response = exports.Response = global.Response;
},234,[235]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.WHATWGFetch = {});
  })(this, function (exports) {
    'use strict';

    /* eslint-disable no-prototype-builtins */
    var g = typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self ||
    // eslint-disable-next-line no-undef
    typeof global !== 'undefined' && global || {};
    var support = {
      searchParams: 'URLSearchParams' in g,
      iterable: 'Symbol' in g && 'iterator' in Symbol,
      blob: 'FileReader' in g && 'Blob' in g && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in g,
      arrayBuffer: 'ArrayBuffer' in g
    };
    function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    }
    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];
      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }
    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }
      if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
        throw new TypeError('Invalid character in header field name: "' + name + '"');
      }
      return name.toLowerCase();
    }
    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }
      return value;
    }

    // Build a destructive iterator for the value list
    function iteratorFor(items) {
      var iterator = {
        next: function () {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };
      if (support.iterable) {
        iterator[Symbol.iterator] = function () {
          return iterator;
        };
      }
      return iterator;
    }
    function Headers(headers) {
      this.map = {};
      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function (header) {
          if (header.length != 2) {
            throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length);
          }
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }
    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };
    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };
    Headers.prototype.get = function (name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null;
    };
    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };
    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };
    Headers.prototype.forEach = function (callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };
    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };
    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };
    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };
    if (support.iterable) {
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }
    function consumed(body) {
      if (body._noBody) return;
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }
      body.bodyUsed = true;
    }
    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };
        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }
    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }
    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
      var encoding = match ? match[1] : 'utf-8';
      reader.readAsText(blob, encoding);
      return promise;
    }
    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);
      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }
      return chars.join('');
    }
    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }
    function Body() {
      this.bodyUsed = false;
      this._initBody = function (body) {
        /*
          fetch-mock wraps the Response object in an ES6 Proxy to
          provide useful test harness features such as flush. However, on
          ES5 browsers without fetch or Proxy support pollyfills must be used;
          the proxy-pollyfill is unable to proxy an attribute unless it exists
          on the object before the Proxy is created. This change ensures
          Response.bodyUsed exists on the instance, while maintaining the
          semantic of setting Request.bodyUsed in the constructor before
          _initBody is called.
        */
        // eslint-disable-next-line no-self-assign
        this.bodyUsed = this.bodyUsed;
        this._bodyInit = body;
        if (!body) {
          this._noBody = true;
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          // IE 10-11 can't handle a DataView body.
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          this._bodyText = body = Object.prototype.toString.call(body);
        }
        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };
      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);
          if (rejected) {
            return rejected;
          }
          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };
      }
      this.arrayBuffer = function () {
        if (this._bodyArrayBuffer) {
          var isConsumed = consumed(this);
          if (isConsumed) {
            return isConsumed;
          } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
            return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
          } else {
            return Promise.resolve(this._bodyArrayBuffer);
          }
        } else if (support.blob) {
          return this.blob().then(readBlobAsArrayBuffer);
        } else {
          throw new Error('could not read as ArrayBuffer');
        }
      };
      this.text = function () {
        var rejected = consumed(this);
        if (rejected) {
          return rejected;
        }
        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };
      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }
      this.json = function () {
        return this.text().then(JSON.parse);
      };
      return this;
    }

    // HTTP methods whose capitalization should be normalized
    var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];
    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }
    function Request(input, options) {
      if (!(this instanceof Request)) {
        throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
      }
      options = options || {};
      var body = options.body;
      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }
        this.url = input.url;
        this.credentials = input.credentials;
        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }
        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;
        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }
      this.credentials = options.credentials || this.credentials || 'same-origin';
      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }
      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.signal = options.signal || this.signal || function () {
        if ('AbortController' in g) {
          var ctrl = new AbortController();
          return ctrl.signal;
        }
      }();
      this.referrer = null;
      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }
      this._initBody(body);
      if (this.method === 'GET' || this.method === 'HEAD') {
        if (options.cache === 'no-store' || options.cache === 'no-cache') {
          // Search for a '_' parameter in the query string
          var reParamSearch = /([?&])_=[^&]*/;
          if (reParamSearch.test(this.url)) {
            // If it already exists then set the value with the current time
            this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
          } else {
            // Otherwise add a new '_' parameter to the end with the current time
            var reQueryString = /\?/;
            this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
          }
        }
      }
    }
    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };
    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }
    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
      // https://tools.ietf.org/html/rfc7230#section-3.2
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
      // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
      // https://github.com/github/fetch/issues/748
      // https://github.com/zloirock/core-js/issues/751
      preProcessedHeaders.split('\r').map(function (header) {
        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
      }).forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(':').trim();
          try {
            headers.append(key, value);
          } catch (error) {
            console.warn('Response ' + error.message);
          }
        }
      });
      return headers;
    }
    Body.call(Request.prototype);
    function Response(bodyInit, options) {
      if (!(this instanceof Response)) {
        throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
      }
      if (!options) {
        options = {};
      }
      this.type = 'default';
      this.status = options.status === undefined ? 200 : options.status;
      if (this.status < 200 || this.status > 599) {
        throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
      }
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
      this.headers = new Headers(options.headers);
      this.url = options.url || '';
      this._initBody(bodyInit);
    }
    Body.call(Response.prototype);
    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };
    Response.error = function () {
      var response = new Response(null, {
        status: 200,
        statusText: ''
      });
      response.ok = false;
      response.status = 0;
      response.type = 'error';
      return response;
    };
    var redirectStatuses = [301, 302, 303, 307, 308];
    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }
      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };
    exports.DOMException = g.DOMException;
    try {
      new exports.DOMException();
    } catch (err) {
      exports.DOMException = function (message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
      };
      exports.DOMException.prototype = Object.create(Error.prototype);
      exports.DOMException.prototype.constructor = exports.DOMException;
    }
    function fetch(input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);
        if (request.signal && request.signal.aborted) {
          return reject(new exports.DOMException('Aborted', 'AbortError'));
        }
        var xhr = new XMLHttpRequest();
        function abortXhr() {
          xhr.abort();
        }
        xhr.onload = function () {
          var options = {
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          // This check if specifically for when a user fetches a file locally from the file system
          // Only if the status is out of a normal range
          if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {
            options.status = 200;
          } else {
            options.status = xhr.status;
          }
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          setTimeout(function () {
            resolve(new Response(body, options));
          }, 0);
        };
        xhr.onerror = function () {
          setTimeout(function () {
            reject(new TypeError('Network request failed'));
          }, 0);
        };
        xhr.ontimeout = function () {
          setTimeout(function () {
            reject(new TypeError('Network request timed out'));
          }, 0);
        };
        xhr.onabort = function () {
          setTimeout(function () {
            reject(new exports.DOMException('Aborted', 'AbortError'));
          }, 0);
        };
        function fixUrl(url) {
          try {
            return url === '' && g.location.href ? g.location.href : url;
          } catch (e) {
            return url;
          }
        }
        xhr.open(request.method, fixUrl(request.url), true);
        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false;
        }
        if ('responseType' in xhr) {
          if (support.blob) {
            xhr.responseType = 'blob';
          } else if (support.arrayBuffer) {
            xhr.responseType = 'arraybuffer';
          }
        }
        if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || g.Headers && init.headers instanceof g.Headers)) {
          var names = [];
          Object.getOwnPropertyNames(init.headers).forEach(function (name) {
            names.push(normalizeName(name));
            xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
          });
          request.headers.forEach(function (value, name) {
            if (names.indexOf(name) === -1) {
              xhr.setRequestHeader(name, value);
            }
          });
        } else {
          request.headers.forEach(function (value, name) {
            xhr.setRequestHeader(name, value);
          });
        }
        if (request.signal) {
          request.signal.addEventListener('abort', abortXhr);
          xhr.onreadystatechange = function () {
            // DONE (success or failure)
            if (xhr.readyState === 4) {
              request.signal.removeEventListener('abort', abortXhr);
            }
          };
        }
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    }
    fetch.polyfill = true;
    if (!g.fetch) {
      g.fetch = fetch;
      g.Headers = Headers;
      g.Request = Request;
      g.Response = Response;
    }
    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.fetch = fetch;
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
  });
},235,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var useBuiltInEventTarget = global.RN$useBuiltInEventTarget?.();
  var _default = exports.default = useBuiltInEventTarget ? require(_dependencyMap[0]).default : require(_dependencyMap[1]).default;
},236,[237,245]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _Event = _interopRequireDefault(require(_dependencyMap[7]));
  var _EventHandlerAttributes = require(_dependencyMap[8]);
  var _EventTarget2 = _interopRequireDefault(require(_dependencyMap[9]));
  var _MessageEvent = _interopRequireDefault(require(_dependencyMap[10]));
  var _CloseEvent = _interopRequireDefault(require(_dependencyMap[11]));
  var _Blob = _interopRequireDefault(require(_dependencyMap[12]));
  var _BlobManager = _interopRequireDefault(require(_dependencyMap[13]));
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[14]));
  var _binaryToBase = _interopRequireDefault(require(_dependencyMap[15]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[16]));
  var _NativeWebSocketModule = _interopRequireDefault(require(_dependencyMap[17]));
  var _base64Js = _interopRequireDefault(require(_dependencyMap[18]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[19]));
  var _excluded = ["headers"];
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSING = 2;
  var CLOSED = 3;
  var CLOSE_NORMAL = 1000;
  var CLOSE_ABNORMAL = 1006;
  var nextWebSocketId = 0;
  var WebSocket = /*#__PURE__*/function (_EventTarget) {
    function WebSocket(url, protocols, options) {
      var _this;
      (0, _classCallCheck2.default)(this, WebSocket);
      _this = _callSuper(this, WebSocket);
      _this.CONNECTING = CONNECTING;
      _this.OPEN = OPEN;
      _this.CLOSING = CLOSING;
      _this.CLOSED = CLOSED;
      _this.readyState = CONNECTING;
      _this.url = url;
      if (typeof protocols === 'string') {
        protocols = [protocols];
      }
      var _ref = options || {},
        _ref$headers = _ref.headers,
        headers = _ref$headers === undefined ? {} : _ref$headers,
        unrecognized = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      if (unrecognized && typeof unrecognized.origin === 'string') {
        console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
        headers.origin = unrecognized.origin;
        delete unrecognized.origin;
      }
      if (Object.keys(unrecognized).length > 0) {
        console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
      }
      if (!Array.isArray(protocols)) {
        protocols = null;
      }
      _this._eventEmitter = new _NativeEventEmitter.default(_NativeWebSocketModule.default);
      _this._socketId = nextWebSocketId++;
      _this._registerEvents();
      _NativeWebSocketModule.default.connect(url, protocols, {
        headers
      }, _this._socketId);
      return _this;
    }
    (0, _inherits2.default)(WebSocket, _EventTarget);
    return (0, _createClass2.default)(WebSocket, [{
      key: "binaryType",
      get: function () {
        return this._binaryType;
      },
      set: function (binaryType) {
        if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
          throw new Error("binaryType must be either 'blob' or 'arraybuffer'");
        }
        if (this._binaryType === 'blob' || binaryType === 'blob') {
          (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
          if (binaryType === 'blob') {
            _BlobManager.default.addWebSocketHandler(this._socketId);
          } else {
            _BlobManager.default.removeWebSocketHandler(this._socketId);
          }
        }
        this._binaryType = binaryType;
      }
    }, {
      key: "close",
      value: function close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
          return;
        }
        this.readyState = this.CLOSING;
        this._close(code, reason);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }
        if (data instanceof _Blob.default) {
          (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
          _BlobManager.default.sendOverSocket(data, this._socketId);
          return;
        }
        if (typeof data === 'string') {
          _NativeWebSocketModule.default.send(data, this._socketId);
          return;
        }
        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
          _NativeWebSocketModule.default.sendBinary((0, _binaryToBase.default)(data), this._socketId);
          return;
        }
        throw new Error('Unsupported data type');
      }
    }, {
      key: "ping",
      value: function ping() {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }
        _NativeWebSocketModule.default.ping(this._socketId);
      }
    }, {
      key: "_close",
      value: function _close(code, reason) {
        var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
        var closeReason = typeof reason === 'string' ? reason : '';
        _NativeWebSocketModule.default.close(statusCode, closeReason, this._socketId);
        if (_BlobManager.default.isAvailable && this._binaryType === 'blob') {
          _BlobManager.default.removeWebSocketHandler(this._socketId);
        }
      }
    }, {
      key: "_unregisterEvents",
      value: function _unregisterEvents() {
        this._subscriptions.forEach(e => e.remove());
        this._subscriptions = [];
      }
    }, {
      key: "_registerEvents",
      value: function _registerEvents() {
        this._subscriptions = [this._eventEmitter.addListener('websocketMessage', ev => {
          if (ev.id !== this._socketId) {
            return;
          }
          var data = ev.data;
          switch (ev.type) {
            case 'binary':
              data = _base64Js.default.toByteArray(ev.data).buffer;
              break;
            case 'blob':
              data = _BlobManager.default.createFromOptions(ev.data);
              break;
          }
          this.dispatchEvent(new _MessageEvent.default('message', {
            data
          }));
        }), this._eventEmitter.addListener('websocketOpen', ev => {
          if (ev.id !== this._socketId) {
            return;
          }
          this.readyState = this.OPEN;
          this.protocol = ev.protocol;
          this.dispatchEvent(new _Event.default('open'));
        }), this._eventEmitter.addListener('websocketClosed', ev => {
          if (ev.id !== this._socketId) {
            return;
          }
          this.readyState = this.CLOSED;
          this.dispatchEvent(new _CloseEvent.default('close', {
            code: ev.code,
            reason: ev.reason
          }));
          this._unregisterEvents();
          this.close();
        }), this._eventEmitter.addListener('websocketFailed', ev => {
          if (ev.id !== this._socketId) {
            return;
          }
          this.readyState = this.CLOSED;
          this.dispatchEvent(new _Event.default('error'));
          this.dispatchEvent(new _CloseEvent.default('close', {
            code: CLOSE_ABNORMAL,
            reason: ev.message
          }));
          this._unregisterEvents();
          this.close();
        })];
      }
    }, {
      key: "onclose",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'close');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'close', listener);
      }
    }, {
      key: "onerror",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'error');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'error', listener);
      }
    }, {
      key: "onmessage",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'message');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'message', listener);
      }
    }, {
      key: "onopen",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'open');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'open', listener);
      }
    }]);
  }(_EventTarget2.default);
  WebSocket.CONNECTING = CONNECTING;
  WebSocket.OPEN = OPEN;
  WebSocket.CLOSING = CLOSING;
  WebSocket.CLOSED = CLOSED;
  var _default = exports.default = WebSocket;
},237,[1,238,10,11,64,66,69,212,214,215,240,241,221,218,242,228,87,243,24,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var objectWithoutPropertiesLoose = require(_dependencyMap[0]);
  function _objectWithoutProperties(e, t) {
    if (null == e) return {};
    var o,
      r,
      i = objectWithoutPropertiesLoose(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  module.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports["default"] = module.exports;
},238,[239]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function _objectWithoutPropertiesLoose(r, e) {
    if (null == r) return {};
    var t = {};
    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r[n];
    }
    return t;
  }
  module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
},239,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _Event2 = _interopRequireDefault(require(_dependencyMap[6]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var MessageEvent = exports.default = /*#__PURE__*/function (_Event) {
    function MessageEvent(type, options) {
      var _this;
      (0, _classCallCheck2.default)(this, MessageEvent);
      _this = _callSuper(this, MessageEvent, [type, options]);
      _this._data = options?.data;
      _this._origin = String(options?.origin ?? '');
      _this._lastEventId = String(options?.lastEventId ?? '');
      return _this;
    }
    (0, _inherits2.default)(MessageEvent, _Event);
    return (0, _createClass2.default)(MessageEvent, [{
      key: "data",
      get: function () {
        return this._data;
      }
    }, {
      key: "origin",
      get: function () {
        return this._origin;
      }
    }, {
      key: "lastEventId",
      get: function () {
        return this._lastEventId;
      }
    }]);
  }(_Event2.default);
},240,[1,10,11,64,66,69,212]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _Event2 = _interopRequireDefault(require(_dependencyMap[6]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var CloseEvent = exports.default = /*#__PURE__*/function (_Event) {
    function CloseEvent(type, options) {
      var _this;
      (0, _classCallCheck2.default)(this, CloseEvent);
      _this = _callSuper(this, CloseEvent, [type, options]);
      _this._wasClean = Boolean(options?.wasClean);
      _this._code = Number(options?.code) || 0;
      _this._reason = options?.reason != null ? String(options.reason) : '';
      return _this;
    }
    (0, _inherits2.default)(CloseEvent, _Event);
    return (0, _createClass2.default)(CloseEvent, [{
      key: "wasClean",
      get: function () {
        return this._wasClean;
      }
    }, {
      key: "code",
      get: function () {
        return this._code;
      }
    }, {
      key: "reason",
      get: function () {
        return this._reason;
      }
    }]);
  }(_Event2.default);
},241,[1,10,11,64,66,69,212]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[4]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[5]));
  var NativeEventEmitter = exports.default = /*#__PURE__*/function () {
    function NativeEventEmitter(nativeModule) {
      (0, _classCallCheck2.default)(this, NativeEventEmitter);
      {
        (0, _invariant.default)(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');
      }
      var hasAddListener = !!nativeModule && typeof nativeModule.addListener === 'function';
      var hasRemoveListeners = !!nativeModule && typeof nativeModule.removeListeners === 'function';
      if (nativeModule && hasAddListener && hasRemoveListeners) {
        this._nativeModule = nativeModule;
      } else if (nativeModule != null) {
        if (!hasAddListener) {
          console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.');
        }
        if (!hasRemoveListeners) {
          console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.');
        }
      }
    }
    return (0, _createClass2.default)(NativeEventEmitter, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        this._nativeModule?.addListener(eventType);
        var subscription = _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
        return {
          remove: () => {
            if (subscription != null) {
              this._nativeModule?.removeListeners(1);
              subscription.remove();
              subscription = null;
            }
          }
        };
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        _RCTDeviceEventEmitter.default.emit(eventType, ...args);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        (0, _invariant.default)(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');
        this._nativeModule?.removeListeners(this.listenerCount(eventType));
        _RCTDeviceEventEmitter.default.removeAllListeners(eventType);
      }
    }, {
      key: "listenerCount",
      value: function listenerCount(eventType) {
        return _RCTDeviceEventEmitter.default.listenerCount(eventType);
      }
    }]);
  }();
},242,[1,10,11,87,63,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeWebSocketModule = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeWebSocketModule).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeWebSocketModule[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeWebSocketModule[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeWebSocketModule.default;
},243,[244]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('WebSocketModule');
},244,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _Blob = _interopRequireDefault(require(_dependencyMap[7]));
  var _BlobManager = _interopRequireDefault(require(_dependencyMap[8]));
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[9]));
  var _binaryToBase = _interopRequireDefault(require(_dependencyMap[10]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[11]));
  var _NativeWebSocketModule = _interopRequireDefault(require(_dependencyMap[12]));
  var _WebSocketEvent = _interopRequireDefault(require(_dependencyMap[13]));
  var _base64Js = _interopRequireDefault(require(_dependencyMap[14]));
  var _eventTargetShim = _interopRequireDefault(require(_dependencyMap[15]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[16]));
  var _excluded = ["headers"];
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var CONNECTING = 0;
  var OPEN = 1;
  var CLOSING = 2;
  var CLOSED = 3;
  var CLOSE_NORMAL = 1000;
  var CLOSE_ABNORMAL = 1006;
  var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];
  var nextWebSocketId = 0;
  var WebSocket = /*#__PURE__*/function (_ref) {
    function WebSocket(url, protocols, options) {
      var _this;
      (0, _classCallCheck2.default)(this, WebSocket);
      _this = _callSuper(this, WebSocket);
      _this.CONNECTING = CONNECTING;
      _this.OPEN = OPEN;
      _this.CLOSING = CLOSING;
      _this.CLOSED = CLOSED;
      _this.readyState = CONNECTING;
      _this.url = url;
      if (typeof protocols === 'string') {
        protocols = [protocols];
      }
      var _ref2 = options || {},
        _ref2$headers = _ref2.headers,
        headers = _ref2$headers === undefined ? {} : _ref2$headers,
        unrecognized = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
      if (unrecognized && typeof unrecognized.origin === 'string') {
        console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');
        headers.origin = unrecognized.origin;
        delete unrecognized.origin;
      }
      if (Object.keys(unrecognized).length > 0) {
        console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');
      }
      if (!Array.isArray(protocols)) {
        protocols = null;
      }
      _this._eventEmitter = new _NativeEventEmitter.default(_NativeWebSocketModule.default);
      _this._socketId = nextWebSocketId++;
      _this._registerEvents();
      _NativeWebSocketModule.default.connect(url, protocols, {
        headers
      }, _this._socketId);
      return _this;
    }
    (0, _inherits2.default)(WebSocket, _ref);
    return (0, _createClass2.default)(WebSocket, [{
      key: "binaryType",
      get: function () {
        return this._binaryType;
      },
      set: function (binaryType) {
        if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
          throw new Error("binaryType must be either 'blob' or 'arraybuffer'");
        }
        if (this._binaryType === 'blob' || binaryType === 'blob') {
          (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
          if (binaryType === 'blob') {
            _BlobManager.default.addWebSocketHandler(this._socketId);
          } else {
            _BlobManager.default.removeWebSocketHandler(this._socketId);
          }
        }
        this._binaryType = binaryType;
      }
    }, {
      key: "close",
      value: function close(code, reason) {
        if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
          return;
        }
        this.readyState = this.CLOSING;
        this._close(code, reason);
      }
    }, {
      key: "send",
      value: function send(data) {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }
        if (data instanceof _Blob.default) {
          (0, _invariant.default)(_BlobManager.default.isAvailable, 'Native module BlobModule is required for blob support');
          _BlobManager.default.sendOverSocket(data, this._socketId);
          return;
        }
        if (typeof data === 'string') {
          _NativeWebSocketModule.default.send(data, this._socketId);
          return;
        }
        if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
          _NativeWebSocketModule.default.sendBinary((0, _binaryToBase.default)(data), this._socketId);
          return;
        }
        throw new Error('Unsupported data type');
      }
    }, {
      key: "ping",
      value: function ping() {
        if (this.readyState === this.CONNECTING) {
          throw new Error('INVALID_STATE_ERR');
        }
        _NativeWebSocketModule.default.ping(this._socketId);
      }
    }, {
      key: "_close",
      value: function _close(code, reason) {
        var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
        var closeReason = typeof reason === 'string' ? reason : '';
        _NativeWebSocketModule.default.close(statusCode, closeReason, this._socketId);
        if (_BlobManager.default.isAvailable && this._binaryType === 'blob') {
          _BlobManager.default.removeWebSocketHandler(this._socketId);
        }
      }
    }, {
      key: "_unregisterEvents",
      value: function _unregisterEvents() {
        this._subscriptions.forEach(e => e.remove());
        this._subscriptions = [];
      }
    }, {
      key: "_registerEvents",
      value: function _registerEvents() {
        this._subscriptions = [this._eventEmitter.addListener('websocketMessage', ev => {
          if (ev.id !== this._socketId) {
            return;
          }
          var data = ev.data;
          switch (ev.type) {
            case 'binary':
              data = _base64Js.default.toByteArray(ev.data).buffer;
              break;
            case 'blob':
              data = _BlobManager.default.createFromOptions(ev.data);
              break;
          }
          this.dispatchEvent(new _WebSocketEvent.default('message', {
            data
          }));
        }), this._eventEmitter.addListener('websocketOpen', ev => {
          if (ev.id !== this._socketId) {
            return;
          }
          this.readyState = this.OPEN;
          this.protocol = ev.protocol;
          this.dispatchEvent(new _WebSocketEvent.default('open'));
        }), this._eventEmitter.addListener('websocketClosed', ev => {
          if (ev.id !== this._socketId) {
            return;
          }
          this.readyState = this.CLOSED;
          this.dispatchEvent(new _WebSocketEvent.default('close', {
            code: ev.code,
            reason: ev.reason
          }));
          this._unregisterEvents();
          this.close();
        }), this._eventEmitter.addListener('websocketFailed', ev => {
          if (ev.id !== this._socketId) {
            return;
          }
          this.readyState = this.CLOSED;
          this.dispatchEvent(new _WebSocketEvent.default('error', {
            message: ev.message
          }));
          this.dispatchEvent(new _WebSocketEvent.default('close', {
            code: CLOSE_ABNORMAL,
            reason: ev.message
          }));
          this._unregisterEvents();
          this.close();
        })];
      }
    }]);
  }((0, _eventTargetShim.default)(...WEBSOCKET_EVENTS));
  WebSocket.CONNECTING = CONNECTING;
  WebSocket.OPEN = OPEN;
  WebSocket.CLOSING = CLOSING;
  WebSocket.CLOSED = CLOSED;
  var _default = exports.default = WebSocket;
},245,[1,238,10,11,64,66,69,221,218,242,228,87,243,246,24,233,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var WebSocketEvent = /*#__PURE__*/(0, _createClass2.default)(function WebSocketEvent(type, eventInitDict) {
    (0, _classCallCheck2.default)(this, WebSocketEvent);
    this.type = type.toString();
    Object.assign(this, eventInitDict);
  });
  var _default = exports.default = WebSocketEvent;
},246,[1,11,10]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _Blob2 = _interopRequireDefault(require(_dependencyMap[6]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var invariant = require(_dependencyMap[7]);
  var File = /*#__PURE__*/function (_Blob) {
    function File(parts, name, options) {
      var _this;
      (0, _classCallCheck2.default)(this, File);
      invariant(parts != null && name != null, 'Failed to construct `File`: Must pass both `parts` and `name` arguments.');
      _this = _callSuper(this, File, [parts, options]);
      _this.data.name = name;
      return _this;
    }
    (0, _inherits2.default)(File, _Blob);
    return (0, _createClass2.default)(File, [{
      key: "name",
      get: function () {
        invariant(this.data.name != null, 'Files must have a name set.');
        return this.data.name;
      }
    }, {
      key: "lastModified",
      get: function () {
        return this.data.lastModified || 0;
      }
    }]);
  }(_Blob2.default);
  var _default = exports.default = File;
},247,[1,10,11,64,66,69,221,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var useBuiltInEventTarget = global.RN$useBuiltInEventTarget?.();
  var _default = exports.default = useBuiltInEventTarget ? require(_dependencyMap[0]).default : require(_dependencyMap[1]).default;
},248,[249,252]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _Event = _interopRequireDefault(require(_dependencyMap[6]));
  var _EventHandlerAttributes = require(_dependencyMap[7]);
  var _EventTarget2 = _interopRequireDefault(require(_dependencyMap[8]));
  var _NativeFileReaderModule = _interopRequireDefault(require(_dependencyMap[9]));
  var _base64Js = require(_dependencyMap[10]);
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var EMPTY = 0;
  var LOADING = 1;
  var DONE = 2;
  var FileReader = /*#__PURE__*/function (_EventTarget) {
    function FileReader() {
      var _this;
      (0, _classCallCheck2.default)(this, FileReader);
      _this = _callSuper(this, FileReader);
      _this.EMPTY = EMPTY;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this._aborted = false;
      _this._reset();
      return _this;
    }
    (0, _inherits2.default)(FileReader, _EventTarget);
    return (0, _createClass2.default)(FileReader, [{
      key: "_reset",
      value: function _reset() {
        this._readyState = EMPTY;
        this._error = null;
        this._result = null;
      }
    }, {
      key: "_setReadyState",
      value: function _setReadyState(newState) {
        this._readyState = newState;
        this.dispatchEvent(new _Event.default('readystatechange'));
        if (newState === DONE) {
          if (this._aborted) {
            this.dispatchEvent(new _Event.default('abort'));
          } else if (this._error) {
            this.dispatchEvent(new _Event.default('error'));
          } else {
            this.dispatchEvent(new _Event.default('load'));
          }
          this.dispatchEvent(new _Event.default('loadend'));
        }
      }
    }, {
      key: "readAsArrayBuffer",
      value: function readAsArrayBuffer(blob) {
        this._aborted = false;
        if (blob == null) {
          throw new TypeError("Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsDataURL(blob.data).then(text => {
          if (this._aborted) {
            return;
          }
          var base64 = text.split(',')[1];
          var typedArray = (0, _base64Js.toByteArray)(base64);
          this._result = typedArray.buffer;
          this._setReadyState(DONE);
        }, error => {
          if (this._aborted) {
            return;
          }
          this._error = error;
          this._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsDataURL",
      value: function readAsDataURL(blob) {
        this._aborted = false;
        if (blob == null) {
          throw new TypeError("Failed to execute 'readAsDataURL' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsDataURL(blob.data).then(text => {
          if (this._aborted) {
            return;
          }
          this._result = text;
          this._setReadyState(DONE);
        }, error => {
          if (this._aborted) {
            return;
          }
          this._error = error;
          this._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsText",
      value: function readAsText(blob) {
        var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UTF-8';
        this._aborted = false;
        if (blob == null) {
          throw new TypeError("Failed to execute 'readAsText' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsText(blob.data, encoding).then(text => {
          if (this._aborted) {
            return;
          }
          this._result = text;
          this._setReadyState(DONE);
        }, error => {
          if (this._aborted) {
            return;
          }
          this._error = error;
          this._setReadyState(DONE);
        });
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;
        if (this._readyState !== EMPTY && this._readyState !== DONE) {
          this._reset();
          this._setReadyState(DONE);
        }
        this._reset();
      }
    }, {
      key: "readyState",
      get: function () {
        return this._readyState;
      }
    }, {
      key: "error",
      get: function () {
        return this._error;
      }
    }, {
      key: "result",
      get: function () {
        return this._result;
      }
    }, {
      key: "onabort",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'abort');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'abort', listener);
      }
    }, {
      key: "onerror",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'error');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'error', listener);
      }
    }, {
      key: "onload",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'load');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'load', listener);
      }
    }, {
      key: "onloadstart",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'loadstart');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'loadstart', listener);
      }
    }, {
      key: "onloadend",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'loadend');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'loadend', listener);
      }
    }, {
      key: "onprogress",
      get: function () {
        return (0, _EventHandlerAttributes.getEventHandlerAttribute)(this, 'progress');
      },
      set: function (listener) {
        (0, _EventHandlerAttributes.setEventHandlerAttribute)(this, 'progress', listener);
      }
    }]);
  }(_EventTarget2.default);
  FileReader.EMPTY = EMPTY;
  FileReader.LOADING = LOADING;
  FileReader.DONE = DONE;
  var _default = exports.default = FileReader;
},249,[1,10,11,64,66,69,212,214,215,250,24]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeFileReaderModule = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeFileReaderModule).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeFileReaderModule[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeFileReaderModule[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeFileReaderModule.default;
},250,[251]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('FileReaderModule');
},251,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _NativeFileReaderModule = _interopRequireDefault(require(_dependencyMap[6]));
  var _base64Js = require(_dependencyMap[7]);
  var _eventTargetShim = _interopRequireDefault(require(_dependencyMap[8]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var READER_EVENTS = ['abort', 'error', 'load', 'loadstart', 'loadend', 'progress'];
  var EMPTY = 0;
  var LOADING = 1;
  var DONE = 2;
  var FileReader = /*#__PURE__*/function (_ref) {
    function FileReader() {
      var _this;
      (0, _classCallCheck2.default)(this, FileReader);
      _this = _callSuper(this, FileReader);
      _this.EMPTY = EMPTY;
      _this.LOADING = LOADING;
      _this.DONE = DONE;
      _this._aborted = false;
      _this._reset();
      return _this;
    }
    (0, _inherits2.default)(FileReader, _ref);
    return (0, _createClass2.default)(FileReader, [{
      key: "_reset",
      value: function _reset() {
        this._readyState = EMPTY;
        this._error = null;
        this._result = null;
      }
    }, {
      key: "_setReadyState",
      value: function _setReadyState(newState) {
        this._readyState = newState;
        this.dispatchEvent({
          type: 'readystatechange'
        });
        if (newState === DONE) {
          if (this._aborted) {
            this.dispatchEvent({
              type: 'abort'
            });
          } else if (this._error) {
            this.dispatchEvent({
              type: 'error'
            });
          } else {
            this.dispatchEvent({
              type: 'load'
            });
          }
          this.dispatchEvent({
            type: 'loadend'
          });
        }
      }
    }, {
      key: "readAsArrayBuffer",
      value: function readAsArrayBuffer(blob) {
        this._aborted = false;
        if (blob == null) {
          throw new TypeError("Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsDataURL(blob.data).then(text => {
          if (this._aborted) {
            return;
          }
          var base64 = text.split(',')[1];
          var typedArray = (0, _base64Js.toByteArray)(base64);
          this._result = typedArray.buffer;
          this._setReadyState(DONE);
        }, error => {
          if (this._aborted) {
            return;
          }
          this._error = error;
          this._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsDataURL",
      value: function readAsDataURL(blob) {
        this._aborted = false;
        if (blob == null) {
          throw new TypeError("Failed to execute 'readAsDataURL' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsDataURL(blob.data).then(text => {
          if (this._aborted) {
            return;
          }
          this._result = text;
          this._setReadyState(DONE);
        }, error => {
          if (this._aborted) {
            return;
          }
          this._error = error;
          this._setReadyState(DONE);
        });
      }
    }, {
      key: "readAsText",
      value: function readAsText(blob) {
        var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UTF-8';
        this._aborted = false;
        if (blob == null) {
          throw new TypeError("Failed to execute 'readAsText' on 'FileReader': parameter 1 is not of type 'Blob'");
        }
        _NativeFileReaderModule.default.readAsText(blob.data, encoding).then(text => {
          if (this._aborted) {
            return;
          }
          this._result = text;
          this._setReadyState(DONE);
        }, error => {
          if (this._aborted) {
            return;
          }
          this._error = error;
          this._setReadyState(DONE);
        });
      }
    }, {
      key: "abort",
      value: function abort() {
        this._aborted = true;
        if (this._readyState !== EMPTY && this._readyState !== DONE) {
          this._reset();
          this._setReadyState(DONE);
        }
        this._reset();
      }
    }, {
      key: "readyState",
      get: function () {
        return this._readyState;
      }
    }, {
      key: "error",
      get: function () {
        return this._error;
      }
    }, {
      key: "result",
      get: function () {
        return this._result;
      }
    }]);
  }((0, _eventTargetShim.default)(...READER_EVENTS));
  FileReader.EMPTY = EMPTY;
  FileReader.LOADING = LOADING;
  FileReader.DONE = DONE;
  var _default = exports.default = FileReader;
},252,[1,10,11,64,66,69,250,24,233]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.URL = undefined;
  Object.defineProperty(exports, "URLSearchParams", {
    enumerable: true,
    get: function () {
      return _URLSearchParams.URLSearchParams;
    }
  });
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeBlobModule = _interopRequireDefault(require(_dependencyMap[3]));
  var _URLSearchParams = require(_dependencyMap[4]);
  var BLOB_URL_PREFIX = null;
  if (_NativeBlobModule.default && typeof _NativeBlobModule.default.getConstants().BLOB_URI_SCHEME === 'string') {
    var constants = _NativeBlobModule.default.getConstants();
    BLOB_URL_PREFIX = constants.BLOB_URI_SCHEME + ':';
    if (typeof constants.BLOB_URI_HOST === 'string') {
      BLOB_URL_PREFIX += `//${constants.BLOB_URI_HOST}/`;
    }
  }
  function validateBaseUrl(url) {
    return /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)*(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/.test(url);
  }
  var URL = exports.URL = /*#__PURE__*/function () {
    function URL(url, base) {
      (0, _classCallCheck2.default)(this, URL);
      this._searchParamsInstance = null;
      var baseUrl = null;
      if (!base || validateBaseUrl(url)) {
        this._url = url;
        if (this._url.includes('#')) {
          var split = this._url.split('#');
          var beforeHash = split[0];
          var website = beforeHash.split('://')[1];
          if (!website.includes('/')) {
            this._url = split.join('/#');
          }
        }
        if (!this._url.endsWith('/') && !(this._url.includes('?') || this._url.includes('#'))) {
          this._url += '/';
        }
      } else {
        if (typeof base === 'string') {
          baseUrl = base;
          if (!validateBaseUrl(baseUrl)) {
            throw new TypeError(`Invalid base URL: ${baseUrl}`);
          }
        } else {
          baseUrl = base.toString();
        }
        if (baseUrl.endsWith('/')) {
          baseUrl = baseUrl.slice(0, baseUrl.length - 1);
        }
        if (!url.startsWith('/')) {
          url = `/${url}`;
        }
        if (baseUrl.endsWith(url)) {
          url = '';
        }
        this._url = `${baseUrl}${url}`;
      }
    }
    return (0, _createClass2.default)(URL, [{
      key: "hash",
      get: function () {
        throw new Error('URL.hash is not implemented');
      }
    }, {
      key: "host",
      get: function () {
        throw new Error('URL.host is not implemented');
      }
    }, {
      key: "hostname",
      get: function () {
        throw new Error('URL.hostname is not implemented');
      }
    }, {
      key: "href",
      get: function () {
        return this.toString();
      }
    }, {
      key: "origin",
      get: function () {
        throw new Error('URL.origin is not implemented');
      }
    }, {
      key: "password",
      get: function () {
        throw new Error('URL.password is not implemented');
      }
    }, {
      key: "pathname",
      get: function () {
        throw new Error('URL.pathname not implemented');
      }
    }, {
      key: "port",
      get: function () {
        throw new Error('URL.port is not implemented');
      }
    }, {
      key: "protocol",
      get: function () {
        throw new Error('URL.protocol is not implemented');
      }
    }, {
      key: "search",
      get: function () {
        throw new Error('URL.search is not implemented');
      }
    }, {
      key: "searchParams",
      get: function () {
        if (this._searchParamsInstance == null) {
          this._searchParamsInstance = new URLSearchParams();
        }
        return this._searchParamsInstance;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.toString();
      }
    }, {
      key: "toString",
      value: function toString() {
        if (this._searchParamsInstance === null) {
          return this._url;
        }
        var instanceString = this._searchParamsInstance.toString();
        var separator = this._url.indexOf('?') > -1 ? '&' : '?';
        return this._url + separator + instanceString;
      }
    }, {
      key: "username",
      get: function () {
        throw new Error('URL.username is not implemented');
      }
    }], [{
      key: "createObjectURL",
      value: function createObjectURL(blob) {
        if (BLOB_URL_PREFIX === null) {
          throw new Error('Cannot create URL for blob!');
        }
        return `${BLOB_URL_PREFIX}${blob.data.blobId}?offset=${blob.data.offset}&size=${blob.size}`;
      }
    }, {
      key: "revokeObjectURL",
      value: function revokeObjectURL(url) {}
    }]);
  }();
},253,[1,10,11,219,254]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.URLSearchParams = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var URLSearchParams = exports.URLSearchParams = /*#__PURE__*/function () {
    function URLSearchParams(params) {
      (0, _classCallCheck2.default)(this, URLSearchParams);
      this._searchParams = [];
      if (typeof params === 'object') {
        Object.keys(params).forEach(key => this.append(key, params[key]));
      }
    }
    return (0, _createClass2.default)(URLSearchParams, [{
      key: "append",
      value: function append(key, value) {
        this._searchParams.push([key, value]);
      }
    }, {
      key: "delete",
      value: function _delete(name) {
        throw new Error('URLSearchParams.delete is not implemented');
      }
    }, {
      key: "get",
      value: function get(name) {
        throw new Error('URLSearchParams.get is not implemented');
      }
    }, {
      key: "getAll",
      value: function getAll(name) {
        throw new Error('URLSearchParams.getAll is not implemented');
      }
    }, {
      key: "has",
      value: function has(name) {
        throw new Error('URLSearchParams.has is not implemented');
      }
    }, {
      key: "set",
      value: function set(name, value) {
        throw new Error('URLSearchParams.set is not implemented');
      }
    }, {
      key: "sort",
      value: function sort() {
        throw new Error('URLSearchParams.sort is not implemented');
      }
    }, {
      key: Symbol.iterator,
      value: function () {
        return this._searchParams[Symbol.iterator]();
      }
    }, {
      key: "toString",
      value: function toString() {
        if (this._searchParams.length === 0) {
          return '';
        }
        var last = this._searchParams.length - 1;
        return this._searchParams.reduce((acc, curr, index) => {
          return acc + encodeURIComponent(curr[0]) + '=' + encodeURIComponent(curr[1]) + (index === last ? '' : '&');
        }, '');
      }
    }]);
  }();
},254,[1,10,11]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.AbortSignal = exports.AbortController = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _eventTargetShim = require(_dependencyMap[6]);
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); } /**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * See LICENSE file in root directory for full license.
 */
  /**
   * The signal class.
   * @see https://dom.spec.whatwg.org/#abortsignal
   */
  var AbortSignal = exports.AbortSignal = /*#__PURE__*/function (_EventTarget) {
    /**
     * AbortSignal cannot be constructed directly.
     */
    function AbortSignal() {
      var _this;
      (0, _classCallCheck2.default)(this, AbortSignal);
      _this = _callSuper(this, AbortSignal);
      throw new TypeError("AbortSignal cannot be constructed directly");
      return _this;
    }
    /**
     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
     */
    (0, _inherits2.default)(AbortSignal, _EventTarget);
    return (0, _createClass2.default)(AbortSignal, [{
      key: "aborted",
      get: function () {
        var aborted = abortedFlags.get(this);
        if (typeof aborted !== "boolean") {
          throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? "null" : typeof this}`);
        }
        return aborted;
      }
    }]);
  }(_eventTargetShim.EventTarget);
  (0, _eventTargetShim.defineEventAttribute)(AbortSignal.prototype, "abort");
  /**
   * Create an AbortSignal object.
   */
  function createAbortSignal() {
    var signal = Object.create(AbortSignal.prototype);
    _eventTargetShim.EventTarget.call(signal);
    abortedFlags.set(signal, false);
    return signal;
  }
  /**
   * Abort a given signal.
   */
  function abortSignal(signal) {
    if (abortedFlags.get(signal) !== false) {
      return;
    }
    abortedFlags.set(signal, true);
    signal.dispatchEvent({
      type: "abort"
    });
  }
  /**
   * Aborted flag for each instances.
   */
  var abortedFlags = new WeakMap();
  // Properties should be enumerable.
  Object.defineProperties(AbortSignal.prototype, {
    aborted: {
      enumerable: true
    }
  });
  // `toString()` should return `"[object AbortSignal]"`
  if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
      configurable: true,
      value: "AbortSignal"
    });
  }

  /**
   * The AbortController.
   * @see https://dom.spec.whatwg.org/#abortcontroller
   */
  var AbortController = exports.AbortController = /*#__PURE__*/function () {
    /**
     * Initialize this controller.
     */
    function AbortController() {
      (0, _classCallCheck2.default)(this, AbortController);
      signals.set(this, createAbortSignal());
    }
    /**
     * Returns the `AbortSignal` object associated with this object.
     */
    return (0, _createClass2.default)(AbortController, [{
      key: "signal",
      get: function () {
        return getSignal(this);
      }
      /**
       * Abort and signal to any observers that the associated activity is to be aborted.
       */
    }, {
      key: "abort",
      value: function abort() {
        abortSignal(getSignal(this));
      }
    }]);
  }();
  /**
   * Associated signals.
   */
  var signals = new WeakMap();
  /**
   * Get the associated signal of a given controller.
   */
  function getSignal(controller) {
    var signal = signals.get(controller);
    if (signal == null) {
      throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? "null" : typeof controller}`);
    }
    return signal;
  }
  // Properties should be enumerable.
  Object.defineProperties(AbortController.prototype, {
    signal: {
      enumerable: true
    },
    abort: {
      enumerable: true
    }
  });
  if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {
      configurable: true,
      value: "AbortController"
    });
  }
  var _default = exports.default = AbortController;
},255,[1,10,11,64,66,69,233]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (!global.alert) {
    global.alert = function (text) {
      require(_dependencyMap[0]).default.alert('Alert', '' + text);
    };
  }
},256,[257]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var _RCTAlertManager = _interopRequireDefault(require(_dependencyMap[4]));
  var Alert = /*#__PURE__*/function () {
    function Alert() {
      (0, _classCallCheck2.default)(this, Alert);
    }
    return (0, _createClass2.default)(Alert, null, [{
      key: "alert",
      value: function alert(title, message, buttons, options) {
        {
          Alert.prompt(title, message, buttons, 'default', undefined, undefined, options);
        }
      }
    }, {
      key: "prompt",
      value: function prompt(title, message, callbackOrButtons) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
        var defaultValue = arguments.length > 4 ? arguments[4] : undefined;
        var keyboardType = arguments.length > 5 ? arguments[5] : undefined;
        var options = arguments.length > 6 ? arguments[6] : undefined;
        {
          var callbacks = [];
          var buttons = [];
          var cancelButtonKey;
          var destructiveButtonKey;
          var preferredButtonKey;
          if (typeof callbackOrButtons === 'function') {
            callbacks = [callbackOrButtons];
          } else if (Array.isArray(callbackOrButtons)) {
            callbackOrButtons.forEach((btn, index) => {
              callbacks[index] = btn.onPress;
              if (btn.style === 'cancel') {
                cancelButtonKey = String(index);
              } else if (btn.style === 'destructive') {
                destructiveButtonKey = String(index);
              }
              if (btn.isPreferred) {
                preferredButtonKey = String(index);
              }
              if (btn.text || index < (callbackOrButtons || []).length - 1) {
                var btnDef = {};
                btnDef[index] = btn.text || '';
                buttons.push(btnDef);
              }
            });
          }
          _RCTAlertManager.default.alertWithArgs({
            title: title || '',
            message: message || undefined,
            buttons,
            type: type || undefined,
            defaultValue,
            cancelButtonKey,
            destructiveButtonKey,
            preferredButtonKey,
            keyboardType,
            userInterfaceStyle: options?.userInterfaceStyle || undefined
          }, (id, value) => {
            var cb = callbacks[id];
            cb && cb(value);
          });
        }
      }
    }]);
  }();
  var _default = exports.default = Alert;
},257,[1,10,11,87,258]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeAlertManager = _interopRequireDefault(require(_dependencyMap[1]));
  var _default = exports.default = {
    alertWithArgs(args, callback) {
      if (_NativeAlertManager.default == null) {
        return;
      }
      _NativeAlertManager.default.alertWithArgs(args, callback);
    }
  };
},258,[1,259]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeAlertManager = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeAlertManager).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeAlertManager[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeAlertManager[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeAlertManager.default;
},259,[260]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('AlertManager');
},260,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _require = require(_dependencyMap[0]),
    polyfillObjectProperty = _require.polyfillObjectProperty;
  var navigator = global.navigator;
  if (navigator === undefined) {
    global.navigator = {
      product: 'ReactNative'
    };
  } else {
    polyfillObjectProperty(navigator, 'product', () => 'ReactNative');
  }
},261,[6]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  var _registerCallableModule = _interopRequireDefault(require(_dependencyMap[1]));
  (0, _registerCallableModule.default)('Systrace', () => require(_dependencyMap[2]));
  if (!(global.RN$Bridgeless === true)) {
    (0, _registerCallableModule.default)('JSTimers', () => require(_dependencyMap[3]).default);
  }
  (0, _registerCallableModule.default)('RCTLog', () => require(_dependencyMap[4]).default);
  (0, _registerCallableModule.default)('RCTDeviceEventEmitter', () => require(_dependencyMap[5]).default);
  (0, _registerCallableModule.default)('RCTNativeAppEventEmitter', () => require(_dependencyMap[6]).default);
  (0, _registerCallableModule.default)('GlobalPerformanceLogger', () => require(_dependencyMap[7]).default);
  {
    (0, _registerCallableModule.default)('HMRClient', () => require(_dependencyMap[8]).default);
  }
},262,[1,61,46,201,263,63,264,223,265]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var invariant = require(_dependencyMap[0]);
  var levelsMap = {
    log: 'log',
    info: 'info',
    warn: 'warn',
    error: 'error',
    fatal: 'error'
  };
  var warningHandler = null;
  var RCTLog = {
    logIfNoNativeHook(level) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (typeof global.nativeLoggingHook === 'undefined') {
        RCTLog.logToConsole(level, ...args);
      } else {
        if (warningHandler && level === 'warn') {
          warningHandler(...args);
        }
      }
    },
    logToConsole(level) {
      var logFn = levelsMap[level];
      invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      console[logFn](...args);
    },
    setWarningHandler(handler) {
      warningHandler = handler;
    }
  };
  var _default = exports.default = RCTLog;
},263,[42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var RCTNativeAppEventEmitter = _RCTDeviceEventEmitter.default;
  var _default = exports.default = RCTNativeAppEventEmitter;
},264,[1,63]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var HMRClientProdShim = {
    setup() {},
    enable() {
      console.error("Fast Refresh is disabled in JavaScript bundles built in production mode. Did you forget to run Metro?");
    },
    disable() {},
    registerBundle() {},
    log() {}
  };
  var _default = exports.default = HMRClientProdShim;
},265,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function __fetchSegment(segmentId, options, callback) {
    var SegmentFetcher = require(_dependencyMap[0]).default;
    SegmentFetcher.fetchSegment(segmentId, options, errorObject => {
      if (errorObject) {
        var error = new Error(errorObject.message);
        error.code = errorObject.code;
        callback(error);
        return;
      }
      callback(null);
    });
  }
  global.__fetchSegment = __fetchSegment;
},266,[267]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeSegmentFetcher = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeSegmentFetcher).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeSegmentFetcher[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeSegmentFetcher[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeSegmentFetcher.default;
},267,[268]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('SegmentFetcher');
},268,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _BugReporting = _interopRequireDefault(require(_dependencyMap[1]));
  var _registerCallableModule = _interopRequireDefault(require(_dependencyMap[2]));
  var _createPerformanceLogger = _interopRequireDefault(require(_dependencyMap[3]));
  var _infoLog = _interopRequireDefault(require(_dependencyMap[4]));
  var _SceneTracker = _interopRequireDefault(require(_dependencyMap[5]));
  var _DisplayMode = require(_dependencyMap[6]);
  var _HeadlessJsTaskError = _interopRequireDefault(require(_dependencyMap[7]));
  var _NativeHeadlessJsTaskSupport = _interopRequireDefault(require(_dependencyMap[8]));
  var _renderApplication = _interopRequireDefault(require(_dependencyMap[9]));
  var _RendererProxy = require(_dependencyMap[10]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[11]));
  var runnables = {};
  var runCount = 1;
  var sections = {};
  var taskProviders = new Map();
  var taskCancelProviders = new Map();
  var componentProviderInstrumentationHook = component => component();
  var wrapperComponentProvider;
  var rootViewStyleProvider;
  var AppRegistry = {
    setWrapperComponentProvider(provider) {
      wrapperComponentProvider = provider;
    },
    setRootViewStyleProvider(provider) {
      rootViewStyleProvider = provider;
    },
    registerConfig(config) {
      config.forEach(appConfig => {
        if (appConfig.run) {
          AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
        } else {
          (0, _invariant.default)(appConfig.component != null, "AppRegistry.registerConfig(...): Every config is expected to set either `run` or `component`, but `%s` has neither.", appConfig.appKey);
          AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
        }
      });
    },
    registerComponent(appKey, componentProvider, section) {
      var scopedPerformanceLogger = (0, _createPerformanceLogger.default)();
      runnables[appKey] = (appParameters, displayMode) => {
        (0, _renderApplication.default)(componentProviderInstrumentationHook(componentProvider, scopedPerformanceLogger), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters), rootViewStyleProvider && rootViewStyleProvider(appParameters), appParameters.fabric, scopedPerformanceLogger, appKey === 'LogBox', appKey, displayMode);
      };
      if (section) {
        sections[appKey] = runnables[appKey];
      }
      return appKey;
    },
    registerRunnable(appKey, run) {
      runnables[appKey] = run;
      return appKey;
    },
    registerSection(appKey, component) {
      AppRegistry.registerComponent(appKey, component, true);
    },
    getAppKeys() {
      return Object.keys(runnables);
    },
    getSectionKeys() {
      return Object.keys(sections);
    },
    getSections() {
      return {
        ...sections
      };
    },
    getRunnable(appKey) {
      return runnables[appKey];
    },
    getRegistry() {
      return {
        sections: AppRegistry.getSectionKeys(),
        runnables: {
          ...runnables
        }
      };
    },
    setComponentProviderInstrumentationHook(hook) {
      componentProviderInstrumentationHook = hook;
    },
    runApplication(appKey, appParameters, displayMode) {
      if (appKey !== 'LogBox') {
        var logParams = '';
        var msg = `Running "${appKey}"${logParams}`;
        (0, _infoLog.default)(msg);
        _BugReporting.default.addSource('AppRegistry.runApplication' + runCount++, () => msg);
      }
      (0, _invariant.default)(runnables[appKey], `"${appKey}" has not been registered. This can happen if:\n` + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
      _SceneTracker.default.setActiveScene({
        name: appKey
      });
      runnables[appKey](appParameters, (0, _DisplayMode.coerceDisplayMode)(displayMode));
    },
    setSurfaceProps(appKey, appParameters, displayMode) {
      if (appKey !== 'LogBox') {
        var msg = 'Updating props for Surface "' + appKey + '" with ' + JSON.stringify(appParameters);
        (0, _infoLog.default)(msg);
        _BugReporting.default.addSource('AppRegistry.setSurfaceProps' + runCount++, () => msg);
      }
      (0, _invariant.default)(runnables[appKey], `"${appKey}" has not been registered. This can happen if:\n` + '* Metro (the local dev server) is run from the wrong folder. ' + 'Check if Metro is running, stop it and restart it in the current project.\n' + "* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.");
      runnables[appKey](appParameters, (0, _DisplayMode.coerceDisplayMode)(displayMode));
    },
    unmountApplicationComponentAtRootTag(rootTag) {
      (0, _RendererProxy.unmountComponentAtNodeAndRemoveContainer)(rootTag);
    },
    registerHeadlessTask(taskKey, taskProvider) {
      this.registerCancellableHeadlessTask(taskKey, taskProvider, () => () => {});
    },
    registerCancellableHeadlessTask(taskKey, taskProvider, taskCancelProvider) {
      if (taskProviders.has(taskKey)) {
        console.warn(`registerHeadlessTask or registerCancellableHeadlessTask called multiple times for same key '${taskKey}'`);
      }
      taskProviders.set(taskKey, taskProvider);
      taskCancelProviders.set(taskKey, taskCancelProvider);
    },
    startHeadlessTask(taskId, taskKey, data) {
      var taskProvider = taskProviders.get(taskKey);
      if (!taskProvider) {
        console.warn(`No task registered for key ${taskKey}`);
        if (_NativeHeadlessJsTaskSupport.default) {
          _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
        }
        return;
      }
      taskProvider()(data).then(() => {
        if (_NativeHeadlessJsTaskSupport.default) {
          _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
        }
      }).catch(reason => {
        console.error(reason);
        if (_NativeHeadlessJsTaskSupport.default && reason instanceof _HeadlessJsTaskError.default) {
          _NativeHeadlessJsTaskSupport.default.notifyTaskRetry(taskId).then(retryPosted => {
            if (!retryPosted) {
              _NativeHeadlessJsTaskSupport.default.notifyTaskFinished(taskId);
            }
          });
        }
      });
    },
    cancelHeadlessTask(taskId, taskKey) {
      var taskCancelProvider = taskCancelProviders.get(taskKey);
      if (!taskCancelProvider) {
        throw new Error(`No task canceller registered for key '${taskKey}'`);
      }
      taskCancelProvider()();
    }
  };
  AppRegistry.registerComponent('LogBox', () => {
    {
      return function NoOp() {
        return null;
      };
    }
  });
  global.RN$AppRegistry = AppRegistry;
  global.RN$SurfaceRegistry = {
    renderSurface: AppRegistry.runApplication,
    setSurfaceProps: AppRegistry.setSurfaceProps
  };
  (0, _registerCallableModule.default)('AppRegistry', AppRegistry);
  var _default = exports.default = AppRegistry;
},269,[1,270,61,224,225,276,277,278,279,281,74,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativeRedBox = _interopRequireDefault(require(_dependencyMap[5]));
  var _NativeBugReporting = _interopRequireDefault(require(_dependencyMap[6]));
  function defaultExtras() {
    BugReporting.addFileSource('react_hierarchy.txt', () => require(_dependencyMap[7]).default());
  }
  var BugReporting = /*#__PURE__*/function () {
    function BugReporting() {
      (0, _classCallCheck2.default)(this, BugReporting);
    }
    return (0, _createClass2.default)(BugReporting, null, [{
      key: "_maybeInit",
      value: function _maybeInit() {
        if (!BugReporting._subscription) {
          BugReporting._subscription = _RCTDeviceEventEmitter.default.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
          defaultExtras();
        }
        if (!BugReporting._redboxSubscription) {
          BugReporting._redboxSubscription = _RCTDeviceEventEmitter.default.addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);
        }
      }
    }, {
      key: "addSource",
      value: function addSource(key, callback) {
        return this._addSource(key, callback, BugReporting._extraSources);
      }
    }, {
      key: "addFileSource",
      value: function addFileSource(key, callback) {
        return this._addSource(key, callback, BugReporting._fileSources);
      }
    }, {
      key: "_addSource",
      value: function _addSource(key, callback, source) {
        BugReporting._maybeInit();
        if (source.has(key)) {
          console.warn(`BugReporting.add* called multiple times for same key '${key}'`);
        }
        source.set(key, callback);
        return {
          remove: () => {
            source.delete(key);
          }
        };
      }
    }, {
      key: "collectExtraData",
      value: function collectExtraData() {
        var extraData = {};
        for (var _ref of BugReporting._extraSources) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
          var _key = _ref2[0];
          var callback = _ref2[1];
          extraData[_key] = callback();
        }
        var fileData = {};
        for (var _ref3 of BugReporting._fileSources) {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
          var _key2 = _ref4[0];
          var _callback = _ref4[1];
          fileData[_key2] = _callback();
        }
        if (_NativeBugReporting.default != null && _NativeBugReporting.default.setExtraData != null) {
          _NativeBugReporting.default.setExtraData(extraData, fileData);
        }
        if (_NativeRedBox.default != null && _NativeRedBox.default.setExtraData != null) {
          _NativeRedBox.default.setExtraData(extraData, 'From BugReporting.js');
        }
        return {
          extras: extraData,
          files: fileData
        };
      }
    }]);
  }();
  BugReporting._extraSources = new Map();
  BugReporting._fileSources = new Map();
  BugReporting._subscription = null;
  BugReporting._redboxSubscription = null;
  var _default = exports.default = BugReporting;
},270,[1,29,10,11,63,271,273,275]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeRedBox = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeRedBox).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeRedBox[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeRedBox[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeRedBox.default;
},271,[272]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('RedBox');
},272,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeBugReporting = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeBugReporting).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeBugReporting[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeBugReporting[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeBugReporting.default;
},273,[274]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('BugReporting');
},274,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  function dumpReactTree() {
    try {
      return getReactTree();
    } catch (e) {
      return 'Failed to dump react tree: ' + e;
    }
  }
  function getReactTree() {
    return "React tree dumps have been temporarily disabled while React is upgraded to Fiber.";
  }
  var _default = exports.default = dumpReactTree;
},275,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _listeners = [];
  var _activeScene = {
    name: 'default'
  };
  var SceneTracker = {
    setActiveScene(scene) {
      _activeScene = scene;
      _listeners.forEach(listener => listener(_activeScene));
    },
    getActiveScene() {
      return _activeScene;
    },
    addActiveSceneChangedListener(callback) {
      _listeners.push(callback);
      return {
        remove: () => {
          _listeners = _listeners.filter(listener => callback !== listener);
        }
      };
    }
  };
  var _default = exports.default = SceneTracker;
},276,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.coerceDisplayMode = coerceDisplayMode;
  exports.default = undefined;
  var DisplayMode = Object.freeze({
    VISIBLE: 1,
    SUSPENDED: 2,
    HIDDEN: 3
  });
  function coerceDisplayMode(value) {
    switch (value) {
      case DisplayMode.SUSPENDED:
        return DisplayMode.SUSPENDED;
      case DisplayMode.HIDDEN:
        return DisplayMode.HIDDEN;
      default:
        return DisplayMode.VISIBLE;
    }
  }
  var _default = exports.default = DisplayMode;
},277,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _wrapNativeSuper2 = _interopRequireDefault(require(_dependencyMap[6]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var HeadlessJsTaskError = exports.default = /*#__PURE__*/function (_Error) {
    function HeadlessJsTaskError() {
      (0, _classCallCheck2.default)(this, HeadlessJsTaskError);
      return _callSuper(this, HeadlessJsTaskError, arguments);
    }
    (0, _inherits2.default)(HeadlessJsTaskError, _Error);
    return (0, _createClass2.default)(HeadlessJsTaskError);
  }(/*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
},278,[1,11,10,64,66,69,78]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeHeadlessJsTaskSupport = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeHeadlessJsTaskSupport).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeHeadlessJsTaskSupport[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeHeadlessJsTaskSupport[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeHeadlessJsTaskSupport.default;
},279,[280]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('HeadlessJsTaskSupport');
},280,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = renderApplication;
  var _GlobalPerformanceLogger = _interopRequireDefault(require(_dependencyMap[1]));
  var _PerformanceLoggerContext = _interopRequireDefault(require(_dependencyMap[2]));
  var _AppContainer = _interopRequireDefault(require(_dependencyMap[3]));
  var _DisplayMode = _interopRequireDefault(require(_dependencyMap[4]));
  var _getCachedComponentWithDebugName = _interopRequireDefault(require(_dependencyMap[5]));
  var Renderer = _interopRequireWildcard(require(_dependencyMap[6]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[7]));
  var React = _interopRequireWildcard(require(_dependencyMap[8]));
  require(_dependencyMap[9]);
  var _jsxRuntime = require(_dependencyMap[10]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, rootViewStyle, fabric, scopedPerformanceLogger, isLogBox, debugName, displayMode, useOffscreen) {
    (0, _invariant.default)(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
    var performanceLogger = scopedPerformanceLogger ?? _GlobalPerformanceLogger.default;
    var renderable = /*#__PURE__*/(0, _jsxRuntime.jsx)(_PerformanceLoggerContext.default.Provider, {
      value: performanceLogger,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_AppContainer.default, {
        rootTag: rootTag,
        fabric: fabric,
        WrapperComponent: WrapperComponent,
        rootViewStyle: rootViewStyle,
        initialProps: initialProps ?? Object.freeze({}),
        internal_excludeLogBox: isLogBox,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(RootComponent, {
          ...initialProps,
          rootTag: rootTag
        })
      })
    });
    if (useOffscreen && displayMode != null) {
      var Activity = React.unstable_Activity;
      renderable = /*#__PURE__*/(0, _jsxRuntime.jsx)(Activity, {
        mode: displayMode === _DisplayMode.default.VISIBLE ? 'visible' : 'hidden',
        children: renderable
      });
    }
    var useConcurrentRoot = Boolean(fabric);
    performanceLogger.startTimespan('renderApplication_React_render');
    performanceLogger.setExtra('usedReactConcurrentRoot', useConcurrentRoot ? '1' : '0');
    performanceLogger.setExtra('usedReactFabric', fabric ? '1' : '0');
    performanceLogger.setExtra('usedReactProfiler', Renderer.isProfilingRenderer());
    Renderer.renderElement({
      element: renderable,
      rootTag,
      useFabric: Boolean(fabric),
      useConcurrentRoot
    });
    performanceLogger.stopTimespan('renderApplication_React_render');
  }
},281,[1,223,282,283,277,293,74,42,140,294,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.usePerformanceLogger = usePerformanceLogger;
  var _GlobalPerformanceLogger = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = _interopRequireWildcard(require(_dependencyMap[2]));
  var React = _react;
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var PerformanceLoggerContext = /*#__PURE__*/React.createContext(_GlobalPerformanceLogger.default);
  function usePerformanceLogger() {
    return (0, _react.useContext)(PerformanceLoggerContext);
  }
  var _default = exports.default = PerformanceLoggerContext;
},282,[1,223,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var AppContainer = require(_dependencyMap[1]).default;
  var _default = exports.default = AppContainer;
},283,[140,284]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _View = _interopRequireDefault(require(_dependencyMap[1]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[2]));
  var _RootTag = require(_dependencyMap[3]);
  var React = _interopRequireWildcard(require(_dependencyMap[4]));
  var _jsxRuntime = require(_dependencyMap[5]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var AppContainer = _ref => {
    var children = _ref.children,
      fabric = _ref.fabric,
      initialProps = _ref.initialProps,
      rootTag = _ref.rootTag,
      WrapperComponent = _ref.WrapperComponent,
      rootViewStyle = _ref.rootViewStyle;
    var innerView = children;
    if (WrapperComponent != null) {
      innerView = /*#__PURE__*/(0, _jsxRuntime.jsx)(WrapperComponent, {
        initialProps: initialProps,
        fabric: fabric === true,
        children: innerView
      });
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_RootTag.RootTagContext.Provider, {
      value: (0, _RootTag.createRootTag)(rootTag),
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
        style: rootViewStyle || styles.root,
        pointerEvents: "box-none",
        children: innerView
      })
    });
  };
  var styles = _StyleSheet.default.create({
    root: {
      flex: 1
    }
  });
  var _default = exports.default = AppContainer;
},284,[1,285,290,292,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _TextAncestor = _interopRequireDefault(require(_dependencyMap[2]));
  var _ViewNativeComponent = _interopRequireDefault(require(_dependencyMap[3]));
  var React = _interopRequireWildcard(require(_dependencyMap[4]));
  var _jsxRuntime = require(_dependencyMap[5]);
  var _excluded = ["accessibilityElementsHidden", "accessibilityLabel", "accessibilityLabelledBy", "accessibilityLiveRegion", "accessibilityState", "accessibilityValue", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-hidden", "aria-label", "aria-labelledby", "aria-live", "aria-selected", "aria-valuemax", "aria-valuemin", "aria-valuenow", "aria-valuetext", "focusable", "id", "importantForAccessibility", "nativeID", "tabIndex"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var View = /*#__PURE__*/React.forwardRef((_ref, forwardedRef) => {
    var accessibilityElementsHidden = _ref.accessibilityElementsHidden,
      accessibilityLabel = _ref.accessibilityLabel,
      accessibilityLabelledBy = _ref.accessibilityLabelledBy,
      accessibilityLiveRegion = _ref.accessibilityLiveRegion,
      accessibilityState = _ref.accessibilityState,
      accessibilityValue = _ref.accessibilityValue,
      ariaBusy = _ref['aria-busy'],
      ariaChecked = _ref['aria-checked'],
      ariaDisabled = _ref['aria-disabled'],
      ariaExpanded = _ref['aria-expanded'],
      ariaHidden = _ref['aria-hidden'],
      ariaLabel = _ref['aria-label'],
      ariaLabelledBy = _ref['aria-labelledby'],
      ariaLive = _ref['aria-live'],
      ariaSelected = _ref['aria-selected'],
      ariaValueMax = _ref['aria-valuemax'],
      ariaValueMin = _ref['aria-valuemin'],
      ariaValueNow = _ref['aria-valuenow'],
      ariaValueText = _ref['aria-valuetext'],
      focusable = _ref.focusable,
      id = _ref.id,
      importantForAccessibility = _ref.importantForAccessibility,
      nativeID = _ref.nativeID,
      tabIndex = _ref.tabIndex,
      otherProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var hasTextAncestor = React.useContext(_TextAncestor.default);
    var _accessibilityLabelledBy = ariaLabelledBy?.split(/\s*,\s*/g) ?? accessibilityLabelledBy;
    var _accessibilityState;
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
      _accessibilityState = {
        busy: ariaBusy ?? accessibilityState?.busy,
        checked: ariaChecked ?? accessibilityState?.checked,
        disabled: ariaDisabled ?? accessibilityState?.disabled,
        expanded: ariaExpanded ?? accessibilityState?.expanded,
        selected: ariaSelected ?? accessibilityState?.selected
      };
    }
    var _accessibilityValue;
    if (accessibilityValue != null || ariaValueMax != null || ariaValueMin != null || ariaValueNow != null || ariaValueText != null) {
      _accessibilityValue = {
        max: ariaValueMax ?? accessibilityValue?.max,
        min: ariaValueMin ?? accessibilityValue?.min,
        now: ariaValueNow ?? accessibilityValue?.now,
        text: ariaValueText ?? accessibilityValue?.text
      };
    }
    var actualView = /*#__PURE__*/(0, _jsxRuntime.jsx)(_ViewNativeComponent.default, {
      ...otherProps,
      accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive ?? accessibilityLiveRegion,
      accessibilityLabel: ariaLabel ?? accessibilityLabel,
      focusable: tabIndex !== undefined ? !tabIndex : focusable,
      accessibilityState: _accessibilityState,
      accessibilityElementsHidden: ariaHidden ?? accessibilityElementsHidden,
      accessibilityLabelledBy: _accessibilityLabelledBy,
      accessibilityValue: _accessibilityValue,
      importantForAccessibility: ariaHidden === true ? 'no-hide-descendants' : importantForAccessibility,
      nativeID: id ?? nativeID,
      ref: forwardedRef
    });
    if (hasTextAncestor) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
        value: false,
        children: actualView
      });
    }
    return actualView;
  });
  View.displayName = 'View';
  var _default = exports.default = View;
},285,[1,238,286,287,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = require(_dependencyMap[0]);
  var TextAncestorContext = React.createContext(false);
  var _default = exports.default = TextAncestorContext;
},286,[140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[2]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var ViewNativeComponent = NativeComponentRegistry.get('RCTView', () => ({
    uiViewClassName: 'RCTView'
  }));
  var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['hotspotUpdate', 'setPressed']
  });
  var _default = exports.default = ViewNativeComponent;
},287,[1,96,142]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = require(_dependencyMap[0]);
  }
},288,[289]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * react-jsx-runtime.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  "use strict";

  var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
    REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
  function jsxProd(type, config, maybeKey) {
    var key = null;
    undefined !== maybeKey && (key = "" + maybeKey);
    undefined !== config.key && (key = "" + config.key);
    if ("key" in config) {
      maybeKey = {};
      for (var propName in config) "key" !== propName && (maybeKey[propName] = config[propName]);
    } else maybeKey = config;
    config = maybeKey.ref;
    return {
      $$typeof: REACT_ELEMENT_TYPE,
      type: type,
      key: key,
      ref: undefined !== config ? config : null,
      props: maybeKey
    };
  }
  exports.Fragment = REACT_FRAGMENT_TYPE;
  exports.jsx = jsxProd;
  exports.jsxs = jsxProd;
},289,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _composeStyles = _interopRequireDefault(require(_dependencyMap[1]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[2]));
  var ReactNativeStyleAttributes = require(_dependencyMap[3]).default;
  var PixelRatio = require(_dependencyMap[4]).default;
  var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);
  if (hairlineWidth === 0) {
    hairlineWidth = 1 / PixelRatio.get();
  }
  var absoluteFill = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
  };
  var _default = exports.default = {
    hairlineWidth,
    absoluteFill: absoluteFill,
    absoluteFillObject: absoluteFill,
    compose: _composeStyles.default,
    flatten: _flattenStyle.default,
    setStyleAttributePreprocessor(property, process) {
      var value;
      if (ReactNativeStyleAttributes[property] === true) {
        value = {
          process
        };
      } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
        value = {
          ...ReactNativeStyleAttributes[property],
          process
        };
      } else {
        console.error(`${property} is not a valid style attribute`);
        return;
      }
      ReactNativeStyleAttributes[property] = value;
    },
    create(obj) {
      return obj;
    }
  };
},290,[1,291,146,103,116]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = composeStyles;
  function composeStyles(style1, style2) {
    if (style1 == null) {
      return style2;
    }
    if (style2 == null) {
      return style1;
    }
    return [style1, style2];
  }
},291,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RootTagContext = undefined;
  exports.createRootTag = createRootTag;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var RootTagContext = exports.RootTagContext = /*#__PURE__*/React.createContext(0);
  function createRootTag(rootTag) {
    return rootTag;
  }
},292,[140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getCachedComponentWithDisplayName;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var cache = new Map();
  function getCachedComponentWithDisplayName(displayName) {
    var ComponentWithDisplayName = cache.get(displayName);
    if (!ComponentWithDisplayName) {
      ComponentWithDisplayName = _ref => {
        var children = _ref.children;
        return children;
      };
      ComponentWithDisplayName.displayName = displayName;
      cache.set(displayName, ComponentWithDisplayName);
    }
    return ComponentWithDisplayName;
  }
},293,[140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  function emptyFunction() {}
  var BackHandler = {
    exitApp: emptyFunction,
    addEventListener(_eventName, _handler) {
      return {
        remove: emptyFunction
      };
    }
  };
  var _default = exports.default = BackHandler;
},294,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = require(_dependencyMap[0]);
  }
},295,[296]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * @license React
   * scheduler.native.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  "use strict";

  function push(heap, node) {
    var index = heap.length;
    heap.push(node);
    a: for (; 0 < index;) {
      var parentIndex = index - 1 >>> 1,
        parent = heap[parentIndex];
      if (0 < compare(parent, node)) heap[parentIndex] = node, heap[index] = parent, index = parentIndex;else break a;
    }
  }
  function peek(heap) {
    return 0 === heap.length ? null : heap[0];
  }
  function pop(heap) {
    if (0 === heap.length) return null;
    var first = heap[0],
      last = heap.pop();
    if (last !== first) {
      heap[0] = last;
      a: for (var index = 0, length = heap.length, halfLength = length >>> 1; index < halfLength;) {
        var leftIndex = 2 * (index + 1) - 1,
          left = heap[leftIndex],
          rightIndex = leftIndex + 1,
          right = heap[rightIndex];
        if (0 > compare(left, last)) rightIndex < length && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);else if (rightIndex < length && 0 > compare(right, last)) heap[index] = right, heap[rightIndex] = last, index = rightIndex;else break a;
      }
    }
    return first;
  }
  function compare(a, b) {
    var diff = a.sortIndex - b.sortIndex;
    return 0 !== diff ? diff : a.id - b.id;
  }
  var getCurrentTime;
  if ("object" === typeof performance && "function" === typeof performance.now) {
    var localPerformance = performance;
    getCurrentTime = function () {
      return localPerformance.now();
    };
  } else {
    var localDate = Date,
      initialTime = localDate.now();
    getCurrentTime = function () {
      return localDate.now() - initialTime;
    };
  }
  var taskQueue = [],
    timerQueue = [],
    taskIdCounter = 1,
    currentTask = null,
    currentPriorityLevel = 3,
    isPerformingWork = false,
    isHostCallbackScheduled = false,
    isHostTimeoutScheduled = false,
    localSetTimeout = "function" === typeof setTimeout ? setTimeout : null,
    localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null,
    localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null;
  function advanceTimers(currentTime) {
    for (var timer = peek(timerQueue); null !== timer;) {
      if (null === timer.callback) pop(timerQueue);else if (timer.startTime <= currentTime) pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);else break;
      timer = peek(timerQueue);
    }
  }
  function handleTimeout(currentTime) {
    isHostTimeoutScheduled = false;
    advanceTimers(currentTime);
    if (!isHostCallbackScheduled) if (null !== peek(taskQueue)) isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline());else {
      var firstTimer = peek(timerQueue);
      null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }
  }
  function unstable_scheduleCallback$1(priorityLevel, callback, options) {
    var currentTime = getCurrentTime();
    "object" === typeof options && null !== options ? (options = options.delay, options = "number" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;
    switch (priorityLevel) {
      case 1:
        var timeout = -1;
        break;
      case 2:
        timeout = 250;
        break;
      case 5:
        timeout = 1073741823;
        break;
      case 4:
        timeout = 1e4;
        break;
      default:
        timeout = 5e3;
    }
    timeout = options + timeout;
    priorityLevel = {
      id: taskIdCounter++,
      callback: callback,
      priorityLevel: priorityLevel,
      startTime: options,
      expirationTime: timeout,
      sortIndex: -1
    };
    options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek(taskQueue) && priorityLevel === peek(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = true, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline())));
    return priorityLevel;
  }
  function unstable_cancelCallback$1(task) {
    task.callback = null;
  }
  function unstable_getCurrentPriorityLevel$1() {
    return currentPriorityLevel;
  }
  var isMessageLoopRunning = false,
    taskTimeoutID = -1,
    startTime = -1;
  function shouldYieldToHost() {
    return 5 > getCurrentTime() - startTime ? false : true;
  }
  function requestPaint() {}
  function performWorkUntilDeadline() {
    if (isMessageLoopRunning) {
      var currentTime = getCurrentTime();
      startTime = currentTime;
      var hasMoreWork = true;
      try {
        a: {
          isHostCallbackScheduled = false;
          isHostTimeoutScheduled && (isHostTimeoutScheduled = false, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            b: {
              advanceTimers(currentTime);
              for (currentTask = peek(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost());) {
                var callback = currentTask.callback;
                if ("function" === typeof callback) {
                  currentTask.callback = null;
                  currentPriorityLevel = currentTask.priorityLevel;
                  var continuationCallback = callback(currentTask.expirationTime <= currentTime);
                  currentTime = getCurrentTime();
                  if ("function" === typeof continuationCallback) {
                    currentTask.callback = continuationCallback;
                    advanceTimers(currentTime);
                    hasMoreWork = true;
                    break b;
                  }
                  currentTask === peek(taskQueue) && pop(taskQueue);
                  advanceTimers(currentTime);
                } else pop(taskQueue);
                currentTask = peek(taskQueue);
              }
              if (null !== currentTask) hasMoreWork = true;else {
                var firstTimer = peek(timerQueue);
                null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                hasMoreWork = false;
              }
            }
            break a;
          } finally {
            currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = false;
          }
          hasMoreWork = undefined;
        }
      } finally {
        hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = false;
      }
    }
  }
  var schedulePerformWorkUntilDeadline;
  if ("function" === typeof localSetImmediate) schedulePerformWorkUntilDeadline = function () {
    localSetImmediate(performWorkUntilDeadline);
  };else if ("undefined" !== typeof MessageChannel) {
    var channel = new MessageChannel(),
      port = channel.port2;
    channel.port1.onmessage = performWorkUntilDeadline;
    schedulePerformWorkUntilDeadline = function () {
      port.postMessage(null);
    };
  } else schedulePerformWorkUntilDeadline = function () {
    localSetTimeout(performWorkUntilDeadline, 0);
  };
  function requestHostTimeout(callback, ms) {
    taskTimeoutID = localSetTimeout(function () {
      callback(getCurrentTime());
    }, ms);
  }
  var unstable_UserBlockingPriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_UserBlockingPriority : 2,
    unstable_NormalPriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_NormalPriority : 3,
    unstable_LowPriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_LowPriority : 4,
    unstable_ImmediatePriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_ImmediatePriority : 1,
    unstable_scheduleCallback = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_scheduleCallback : unstable_scheduleCallback$1,
    unstable_cancelCallback = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_cancelCallback : unstable_cancelCallback$1,
    unstable_getCurrentPriorityLevel = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_getCurrentPriorityLevel : unstable_getCurrentPriorityLevel$1,
    unstable_shouldYield = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_shouldYield : shouldYieldToHost,
    unstable_requestPaint = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_requestPaint : requestPaint,
    unstable_now = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_now : getCurrentTime;
  function throwNotImplemented() {
    throw Error("Not implemented.");
  }
  exports.unstable_IdlePriority = "undefined" !== typeof nativeRuntimeScheduler ? nativeRuntimeScheduler.unstable_IdlePriority : 5;
  exports.unstable_ImmediatePriority = unstable_ImmediatePriority;
  exports.unstable_LowPriority = unstable_LowPriority;
  exports.unstable_NormalPriority = unstable_NormalPriority;
  exports.unstable_Profiling = null;
  exports.unstable_UserBlockingPriority = unstable_UserBlockingPriority;
  exports.unstable_cancelCallback = unstable_cancelCallback;
  exports.unstable_continueExecution = throwNotImplemented;
  exports.unstable_forceFrameRate = throwNotImplemented;
  exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
  exports.unstable_getFirstCallbackNode = throwNotImplemented;
  exports.unstable_next = throwNotImplemented;
  exports.unstable_now = unstable_now;
  exports.unstable_pauseExecution = throwNotImplemented;
  exports.unstable_requestPaint = unstable_requestPaint;
  exports.unstable_runWithPriority = throwNotImplemented;
  exports.unstable_scheduleCallback = unstable_scheduleCallback;
  exports.unstable_shouldYield = unstable_shouldYield;
  exports.unstable_wrapCallback = throwNotImplemented;
},296,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ReactNative;
  {
    ReactNative = require(_dependencyMap[0]);
  }
  var _default = exports.default = ReactNative;
},297,[298]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /**
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @nolint
   * @preventMunge
   * @generated SignedSource<<f7a2299fd4eb6daeaa2b3967a6e4b69c>>
   *
   * This file was sync'd from the facebook/react repository.
   */

  "use strict";

  require(_dependencyMap[0]);
  var ReactNativePrivateInterface = require(_dependencyMap[1]),
    React = require(_dependencyMap[2]),
    Scheduler = require(_dependencyMap[3]),
    isArrayImpl = Array.isArray,
    ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
    REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"),
    REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
    REACT_PORTAL_TYPE = Symbol.for("react.portal"),
    REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
    REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
    REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
    REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
    REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
    REACT_CONTEXT_TYPE = Symbol.for("react.context"),
    REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
    REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
    REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
    REACT_MEMO_TYPE = Symbol.for("react.memo"),
    REACT_LAZY_TYPE = Symbol.for("react.lazy");
  Symbol.for("react.scope");
  Symbol.for("react.debug_trace_mode");
  var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
  Symbol.for("react.legacy_hidden");
  Symbol.for("react.tracing_marker");
  var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel"),
    MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
  function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
    maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
    return "function" === typeof maybeIterable ? maybeIterable : null;
  }
  var assign = Object.assign,
    prefix,
    suffix;
  function describeBuiltInComponentFrame(name) {
    if (undefined === prefix) try {
      throw Error();
    } catch (x) {
      var match = x.stack.trim().match(/\n( *(at )?)/);
      prefix = match && match[1] || "";
      suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
    }
    return "\n" + prefix + name + suffix;
  }
  var reentry = false;
  function describeNativeComponentFrame(fn, construct) {
    if (!fn || reentry) return "";
    reentry = true;
    var previousPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = undefined;
    try {
      var RunInRootFrame = {
        DetermineComponentFrameRoot: function () {
          try {
            if (construct) {
              var Fake = function () {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function () {
                  throw Error();
                }
              });
              if ("object" === typeof Reflect && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  var control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x$0) {
                  control = x$0;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x$1) {
                control = x$1;
              }
              (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function () {});
            }
          } catch (sample) {
            if (sample && control && "string" === typeof sample.stack) return [sample.stack, control.stack];
          }
          return [null, null];
        }
      };
      RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
      var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
      namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", {
        value: "DetermineComponentFrameRoot"
      });
      var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),
        sampleStack = _RunInRootFrame$Deter[0],
        controlStack = _RunInRootFrame$Deter[1];
      if (sampleStack && controlStack) {
        var sampleLines = sampleStack.split("\n"),
          controlLines = controlStack.split("\n");
        for (namePropDescriptor = RunInRootFrame = 0; RunInRootFrame < sampleLines.length && !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot");) RunInRootFrame++;
        for (; namePropDescriptor < controlLines.length && !controlLines[namePropDescriptor].includes("DetermineComponentFrameRoot");) namePropDescriptor++;
        if (RunInRootFrame === sampleLines.length || namePropDescriptor === controlLines.length) for (RunInRootFrame = sampleLines.length - 1, namePropDescriptor = controlLines.length - 1; 1 <= RunInRootFrame && 0 <= namePropDescriptor && sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor];) namePropDescriptor--;
        for (; 1 <= RunInRootFrame && 0 <= namePropDescriptor; RunInRootFrame--, namePropDescriptor--) if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
          if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
            do if (RunInRootFrame--, namePropDescriptor--, 0 > namePropDescriptor || sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
              var frame = "\n" + sampleLines[RunInRootFrame].replace(" at new ", " at ");
              fn.displayName && frame.includes("<anonymous>") && (frame = frame.replace("<anonymous>", fn.displayName));
              return frame;
            } while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
          }
          break;
        }
      }
    } finally {
      reentry = false, Error.prepareStackTrace = previousPrepareStackTrace;
    }
    return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(previousPrepareStackTrace) : "";
  }
  function describeFiber(fiber) {
    switch (fiber.tag) {
      case 26:
      case 27:
      case 5:
        return describeBuiltInComponentFrame(fiber.type);
      case 16:
        return describeBuiltInComponentFrame("Lazy");
      case 13:
        return describeBuiltInComponentFrame("Suspense");
      case 19:
        return describeBuiltInComponentFrame("SuspenseList");
      case 0:
      case 15:
        return fiber = describeNativeComponentFrame(fiber.type, false), fiber;
      case 11:
        return fiber = describeNativeComponentFrame(fiber.type.render, false), fiber;
      case 1:
        return fiber = describeNativeComponentFrame(fiber.type, true), fiber;
      default:
        return "";
    }
  }
  function getStackByFiberInDevAndProd(workInProgress) {
    try {
      var info = "";
      do info += describeFiber(workInProgress), workInProgress = workInProgress.return; while (workInProgress);
      return info;
    } catch (x) {
      return "\nError generating stack: " + x.message + "\n" + x.stack;
    }
  }
  var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
  function getComponentNameFromType(type) {
    if (null == type) return null;
    if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
    if ("string" === typeof type) return type;
    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return "Fragment";
      case REACT_PORTAL_TYPE:
        return "Portal";
      case REACT_PROFILER_TYPE:
        return "Profiler";
      case REACT_STRICT_MODE_TYPE:
        return "StrictMode";
      case REACT_SUSPENSE_TYPE:
        return "Suspense";
      case REACT_SUSPENSE_LIST_TYPE:
        return "SuspenseList";
    }
    if ("object" === typeof type) switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return (type.displayName || "Context") + ".Provider";
      case REACT_CONSUMER_TYPE:
        return (type._context.displayName || "Context") + ".Consumer";
      case REACT_FORWARD_REF_TYPE:
        var innerType = type.render;
        type = type.displayName;
        type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
        return type;
      case REACT_MEMO_TYPE:
        return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
      case REACT_LAZY_TYPE:
        innerType = type._payload;
        type = type._init;
        try {
          return getComponentNameFromType(type(innerType));
        } catch (x) {}
    }
    return null;
  }
  var hasError = false,
    caughtError = null,
    getFiberCurrentPropsFromNode$1 = null,
    getInstanceFromNode = null,
    getNodeFromInstance = null;
  function executeDispatch(event, listener, inst) {
    event.currentTarget = getNodeFromInstance(inst);
    try {
      listener(event);
    } catch (error) {
      hasError || (hasError = true, caughtError = error);
    }
    event.currentTarget = null;
  }
  function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
      dispatchInstance = event._dispatchInstances;
    if (isArrayImpl(dispatchListener)) throw Error("Invalid `event`.");
    event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
    dispatchListener = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return dispatchListener;
  }
  function functionThatReturnsTrue() {
    return true;
  }
  function functionThatReturnsFalse() {
    return false;
  }
  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
    this._dispatchInstances = this._dispatchListeners = null;
    dispatchConfig = this.constructor.Interface;
    for (var propName in dispatchConfig) dispatchConfig.hasOwnProperty(propName) && ((targetInst = dispatchConfig[propName]) ? this[propName] = targetInst(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName]);
    this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }
  assign(SyntheticEvent.prototype, {
    preventDefault: function () {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function () {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function () {
      this.isPersistent = functionThatReturnsTrue;
    },
    isPersistent: functionThatReturnsFalse,
    destructor: function () {
      var Interface = this.constructor.Interface,
        propName;
      for (propName in Interface) this[propName] = null;
      this.nativeEvent = this._targetInst = this.dispatchConfig = null;
      this.isPropagationStopped = this.isDefaultPrevented = functionThatReturnsFalse;
      this._dispatchInstances = this._dispatchListeners = null;
    }
  });
  SyntheticEvent.Interface = {
    type: null,
    target: null,
    currentTarget: function () {
      return null;
    },
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function (event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };
  SyntheticEvent.extend = function (Interface) {
    function E() {}
    function Class() {
      return Super.apply(this, arguments);
    }
    var Super = this;
    E.prototype = Super.prototype;
    var prototype = new E();
    assign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
    Class.Interface = assign({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
    return Class;
  };
  addEventPoolingTo(SyntheticEvent);
  function createOrGetPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    if (this.eventPool.length) {
      var instance = this.eventPool.pop();
      this.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }
    return new this(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }
  function releasePooledEvent(event) {
    if (!(event instanceof this)) throw Error("Trying to release an event instance into a pool of a different type.");
    event.destructor();
    10 > this.eventPool.length && this.eventPool.push(event);
  }
  function addEventPoolingTo(EventConstructor) {
    EventConstructor.getPooled = createOrGetPooledEvent;
    EventConstructor.eventPool = [];
    EventConstructor.release = releasePooledEvent;
  }
  var ResponderSyntheticEvent = SyntheticEvent.extend({
    touchHistory: function () {
      return null;
    }
  });
  function isStartish(topLevelType) {
    return "topTouchStart" === topLevelType;
  }
  function isMoveish(topLevelType) {
    return "topTouchMove" === topLevelType;
  }
  var startDependencies = ["topTouchStart"],
    moveDependencies = ["topTouchMove"],
    endDependencies = ["topTouchCancel", "topTouchEnd"],
    touchBank = [],
    touchHistory = {
      touchBank: touchBank,
      numberActiveTouches: 0,
      indexOfSingleActiveTouch: -1,
      mostRecentTimeStamp: 0
    };
  function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
  }
  function getTouchIdentifier(_ref) {
    _ref = _ref.identifier;
    if (null == _ref) throw Error("Touch object is missing identifier.");
    return _ref;
  }
  function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
      touchRecord = touchBank[identifier];
    touchRecord ? (touchRecord.touchActive = true, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch)) : (touchRecord = {
      touchActive: true,
      startPageX: touch.pageX,
      startPageY: touch.pageY,
      startTimeStamp: timestampForTouch(touch),
      currentPageX: touch.pageX,
      currentPageY: touch.pageY,
      currentTimeStamp: timestampForTouch(touch),
      previousPageX: touch.pageX,
      previousPageY: touch.pageY,
      previousTimeStamp: timestampForTouch(touch)
    }, touchBank[identifier] = touchRecord);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  }
  function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = true, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }
  function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord && (touchRecord.touchActive = false, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch));
  }
  var instrumentationCallback,
    ResponderTouchHistoryStore = {
      instrument: function (callback) {
        instrumentationCallback = callback;
      },
      recordTouchTrack: function (topLevelType, nativeEvent) {
        null != instrumentationCallback && instrumentationCallback(topLevelType, nativeEvent);
        if (isMoveish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches) for (topLevelType = 0; topLevelType < touchBank.length; topLevelType++) if (nativeEvent = touchBank[topLevelType], null != nativeEvent && nativeEvent.touchActive) {
          touchHistory.indexOfSingleActiveTouch = topLevelType;
          break;
        }
      },
      touchHistory: touchHistory
    };
  function accumulate(current, next) {
    if (null == next) throw Error("Accumulated items must not be null or undefined.");
    return null == current ? next : isArrayImpl(current) ? current.concat(next) : isArrayImpl(next) ? [current].concat(next) : [current, next];
  }
  function accumulateInto(current, next) {
    if (null == next) throw Error("Accumulated items must not be null or undefined.");
    if (null == current) return next;
    if (isArrayImpl(current)) {
      if (isArrayImpl(next)) return current.push.apply(current, next), current;
      current.push(next);
      return current;
    }
    return isArrayImpl(next) ? [current].concat(next) : [current, next];
  }
  function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
  }
  var responderInst = null,
    trackedTouchCount = 0;
  function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst;
    if (null !== ResponderEventPlugin.GlobalResponderHandler) ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }
  var eventTypes = {
    startShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onStartShouldSetResponder",
        captured: "onStartShouldSetResponderCapture"
      },
      dependencies: startDependencies
    },
    scrollShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onScrollShouldSetResponder",
        captured: "onScrollShouldSetResponderCapture"
      },
      dependencies: ["topScroll"]
    },
    selectionChangeShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onSelectionChangeShouldSetResponder",
        captured: "onSelectionChangeShouldSetResponderCapture"
      },
      dependencies: ["topSelectionChange"]
    },
    moveShouldSetResponder: {
      phasedRegistrationNames: {
        bubbled: "onMoveShouldSetResponder",
        captured: "onMoveShouldSetResponderCapture"
      },
      dependencies: moveDependencies
    },
    responderStart: {
      registrationName: "onResponderStart",
      dependencies: startDependencies
    },
    responderMove: {
      registrationName: "onResponderMove",
      dependencies: moveDependencies
    },
    responderEnd: {
      registrationName: "onResponderEnd",
      dependencies: endDependencies
    },
    responderRelease: {
      registrationName: "onResponderRelease",
      dependencies: endDependencies
    },
    responderTerminationRequest: {
      registrationName: "onResponderTerminationRequest",
      dependencies: []
    },
    responderGrant: {
      registrationName: "onResponderGrant",
      dependencies: []
    },
    responderReject: {
      registrationName: "onResponderReject",
      dependencies: []
    },
    responderTerminate: {
      registrationName: "onResponderTerminate",
      dependencies: []
    }
  };
  function getParent$1(inst) {
    do inst = inst.return; while (inst && 5 !== inst.tag);
    return inst ? inst : null;
  }
  function traverseTwoPhase$1(inst, fn, arg) {
    for (var path = []; inst;) path.push(inst), inst = getParent$1(inst);
    for (inst = path.length; 0 < inst--;) fn(path[inst], "captured", arg);
    for (inst = 0; inst < path.length; inst++) fn(path[inst], "bubbled", arg);
  }
  function getListener$1(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode$1(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
  }
  function accumulateDirectionalDispatches$1(inst, phase, event) {
    if (phase = getListener$1(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
  function accumulateDirectDispatchesSingle$1(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;
      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener$1(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }
  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      targetInst = targetInst ? getParent$1(targetInst) : null;
      traverseTwoPhase$1(targetInst, accumulateDirectionalDispatches$1, event);
    }
  }
  function accumulateTwoPhaseDispatchesSingle$1(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase$1(event._targetInst, accumulateDirectionalDispatches$1, event);
  }
  var ResponderEventPlugin = {
      _getResponder: function () {
        return responderInst;
      },
      eventTypes: eventTypes,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish(topLevelType)) trackedTouchCount += 1;else if ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType) if (0 <= trackedTouchCount) --trackedTouchCount;else return null;
        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
        if (targetInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || 0 < trackedTouchCount && "topSelectionChange" === topLevelType || isStartish(topLevelType) || isMoveish(topLevelType))) {
          var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
          if (responderInst) b: {
            var JSCompiler_temp = responderInst;
            for (var depthA = 0, tempA = JSCompiler_temp; tempA; tempA = getParent$1(tempA)) depthA++;
            tempA = 0;
            for (var tempB = targetInst; tempB; tempB = getParent$1(tempB)) tempA++;
            for (; 0 < depthA - tempA;) JSCompiler_temp = getParent$1(JSCompiler_temp), depthA--;
            for (; 0 < tempA - depthA;) targetInst = getParent$1(targetInst), tempA--;
            for (; depthA--;) {
              if (JSCompiler_temp === targetInst || JSCompiler_temp === targetInst.alternate) break b;
              JSCompiler_temp = getParent$1(JSCompiler_temp);
              targetInst = getParent$1(targetInst);
            }
            JSCompiler_temp = null;
          } else JSCompiler_temp = targetInst;
          targetInst = JSCompiler_temp;
          JSCompiler_temp = targetInst === responderInst;
          shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, targetInst, nativeEvent, nativeEventTarget);
          shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory;
          JSCompiler_temp ? forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingleSkipTarget) : forEachAccumulated(shouldSetEventType, accumulateTwoPhaseDispatchesSingle$1);
          b: {
            JSCompiler_temp = shouldSetEventType._dispatchListeners;
            targetInst = shouldSetEventType._dispatchInstances;
            if (isArrayImpl(JSCompiler_temp)) for (depthA = 0; depthA < JSCompiler_temp.length && !shouldSetEventType.isPropagationStopped(); depthA++) {
              if (JSCompiler_temp[depthA](shouldSetEventType, targetInst[depthA])) {
                JSCompiler_temp = targetInst[depthA];
                break b;
              }
            } else if (JSCompiler_temp && JSCompiler_temp(shouldSetEventType, targetInst)) {
              JSCompiler_temp = targetInst;
              break b;
            }
            JSCompiler_temp = null;
          }
          shouldSetEventType._dispatchInstances = null;
          shouldSetEventType._dispatchListeners = null;
          shouldSetEventType.isPersistent() || shouldSetEventType.constructor.release(shouldSetEventType);
          if (JSCompiler_temp && JSCompiler_temp !== responderInst) {
            if (shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), targetInst = true === executeDirectDispatch(shouldSetEventType), responderInst) {
              if (depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget), depthA.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(depthA, accumulateDirectDispatchesSingle$1), tempA = !depthA._dispatchListeners || executeDirectDispatch(depthA), depthA.isPersistent() || depthA.constructor.release(depthA), tempA) {
                depthA = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
                depthA.touchHistory = ResponderTouchHistoryStore.touchHistory;
                forEachAccumulated(depthA, accumulateDirectDispatchesSingle$1);
                var JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, [shouldSetEventType, depthA]);
                changeResponder(JSCompiler_temp, targetInst);
              } else shouldSetEventType = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, JSCompiler_temp, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
            } else JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType), changeResponder(JSCompiler_temp, targetInst);
          } else JSCompiler_temp$jscomp$0 = null;
        } else JSCompiler_temp$jscomp$0 = null;
        shouldSetEventType = responderInst && isStartish(topLevelType);
        JSCompiler_temp = responderInst && isMoveish(topLevelType);
        targetInst = responderInst && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType);
        if (shouldSetEventType = shouldSetEventType ? eventTypes.responderStart : JSCompiler_temp ? eventTypes.responderMove : targetInst ? eventTypes.responderEnd : null) shouldSetEventType = ResponderSyntheticEvent.getPooled(shouldSetEventType, responderInst, nativeEvent, nativeEventTarget), shouldSetEventType.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(shouldSetEventType, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, shouldSetEventType);
        shouldSetEventType = responderInst && "topTouchCancel" === topLevelType;
        if (topLevelType = responderInst && !shouldSetEventType && ("topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType)) a: {
          if ((topLevelType = nativeEvent.touches) && 0 !== topLevelType.length) for (JSCompiler_temp = 0; JSCompiler_temp < topLevelType.length; JSCompiler_temp++) if (targetInst = topLevelType[JSCompiler_temp].target, null !== targetInst && undefined !== targetInst && 0 !== targetInst) {
            depthA = getInstanceFromNode(targetInst);
            b: {
              for (targetInst = responderInst; depthA;) {
                if (targetInst === depthA || targetInst === depthA.alternate) {
                  targetInst = true;
                  break b;
                }
                depthA = getParent$1(depthA);
              }
              targetInst = false;
            }
            if (targetInst) {
              topLevelType = false;
              break a;
            }
          }
          topLevelType = true;
        }
        if (topLevelType = shouldSetEventType ? eventTypes.responderTerminate : topLevelType ? eventTypes.responderRelease : null) nativeEvent = ResponderSyntheticEvent.getPooled(topLevelType, responderInst, nativeEvent, nativeEventTarget), nativeEvent.touchHistory = ResponderTouchHistoryStore.touchHistory, forEachAccumulated(nativeEvent, accumulateDirectDispatchesSingle$1), JSCompiler_temp$jscomp$0 = accumulate(JSCompiler_temp$jscomp$0, nativeEvent), changeResponder(null);
        return JSCompiler_temp$jscomp$0;
      },
      GlobalResponderHandler: null,
      injection: {
        injectGlobalResponderHandler: function (GlobalResponderHandler) {
          ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        }
      }
    },
    eventPluginOrder = null,
    namesToPlugins = {};
  function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName],
        pluginIndex = eventPluginOrder.indexOf(pluginName);
      if (-1 >= pluginIndex) throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + (pluginName + "`."));
      if (!plugins[pluginIndex]) {
        if (!pluginModule.extractEvents) throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + (pluginName + "` does not."));
        plugins[pluginIndex] = pluginModule;
        pluginIndex = pluginModule.eventTypes;
        for (var eventName in pluginIndex) {
          var JSCompiler_inline_result = undefined;
          var dispatchConfig = pluginIndex[eventName];
          if (eventNameDispatchConfigs.hasOwnProperty(eventName)) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + (eventName + "`."));
          eventNameDispatchConfigs[eventName] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
          if (phasedRegistrationNames) {
            for (JSCompiler_inline_result in phasedRegistrationNames) phasedRegistrationNames.hasOwnProperty(JSCompiler_inline_result) && publishRegistrationName(phasedRegistrationNames[JSCompiler_inline_result], pluginModule);
            JSCompiler_inline_result = true;
          } else dispatchConfig.registrationName ? (publishRegistrationName(dispatchConfig.registrationName, pluginModule), JSCompiler_inline_result = true) : JSCompiler_inline_result = false;
          if (!JSCompiler_inline_result) throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
        }
      }
    }
  }
  function publishRegistrationName(registrationName, pluginModule) {
    if (registrationNameModules[registrationName]) throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + (registrationName + "`."));
    registrationNameModules[registrationName] = pluginModule;
  }
  var plugins = [],
    eventNameDispatchConfigs = {},
    registrationNameModules = {};
  function getListener(inst, registrationName) {
    inst = inst.stateNode;
    if (null === inst) return null;
    inst = getFiberCurrentPropsFromNode$1(inst);
    if (null === inst) return null;
    if ((inst = inst[registrationName]) && "function" !== typeof inst) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof inst + "` type.");
    return inst;
  }
  var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,
    customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
  function accumulateDirectionalDispatches(inst, phase, event) {
    if (phase = getListener(inst, event.dispatchConfig.phasedRegistrationNames[phase])) event._dispatchListeners = accumulateInto(event._dispatchListeners, phase), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
  function traverseTwoPhase(inst, fn, arg, skipBubbling) {
    for (var path = []; inst;) {
      path.push(inst);
      do inst = inst.return; while (inst && 5 !== inst.tag);
      inst = inst ? inst : null;
    }
    for (inst = path.length; 0 < inst--;) fn(path[inst], "captured", arg);
    if (skipBubbling) fn(path[0], "bubbled", arg);else for (inst = 0; inst < path.length; inst++) fn(path[inst], "bubbled", arg);
  }
  function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event, false);
  }
  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      var inst = event._targetInst;
      if (inst && event && event.dispatchConfig.registrationName) {
        var listener = getListener(inst, event.dispatchConfig.registrationName);
        listener && (event._dispatchListeners = accumulateInto(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto(event._dispatchInstances, inst));
      }
    }
  }
  if (eventPluginOrder) throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
  eventPluginOrder = Array.prototype.slice.call(["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"]);
  recomputePluginOrdering();
  var injectedNamesToPlugins$jscomp$inline_288 = {
      ResponderEventPlugin: ResponderEventPlugin,
      ReactNativeBridgeEventPlugin: {
        eventTypes: {},
        extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (null == targetInst) return null;
          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType];
          if (!bubbleDispatchConfig && !directDispatchConfig) throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
          topLevelType = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
          if (bubbleDispatchConfig) null != topLevelType && null != topLevelType.dispatchConfig.phasedRegistrationNames && topLevelType.dispatchConfig.phasedRegistrationNames.skipBubbling ? topLevelType && topLevelType.dispatchConfig.phasedRegistrationNames && traverseTwoPhase(topLevelType._targetInst, accumulateDirectionalDispatches, topLevelType, true) : forEachAccumulated(topLevelType, accumulateTwoPhaseDispatchesSingle);else if (directDispatchConfig) forEachAccumulated(topLevelType, accumulateDirectDispatchesSingle);else return null;
          return topLevelType;
        }
      }
    },
    isOrderingDirty$jscomp$inline_289 = false,
    pluginName$jscomp$inline_290;
  for (pluginName$jscomp$inline_290 in injectedNamesToPlugins$jscomp$inline_288) if (injectedNamesToPlugins$jscomp$inline_288.hasOwnProperty(pluginName$jscomp$inline_290)) {
    var pluginModule$jscomp$inline_291 = injectedNamesToPlugins$jscomp$inline_288[pluginName$jscomp$inline_290];
    if (!namesToPlugins.hasOwnProperty(pluginName$jscomp$inline_290) || namesToPlugins[pluginName$jscomp$inline_290] !== pluginModule$jscomp$inline_291) {
      if (namesToPlugins[pluginName$jscomp$inline_290]) throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + (pluginName$jscomp$inline_290 + "`."));
      namesToPlugins[pluginName$jscomp$inline_290] = pluginModule$jscomp$inline_291;
      isOrderingDirty$jscomp$inline_289 = true;
    }
  }
  isOrderingDirty$jscomp$inline_289 && recomputePluginOrdering();
  var instanceCache = new Map(),
    instanceProps = new Map();
  function getInstanceFromTag(tag) {
    return instanceCache.get(tag) || null;
  }
  function batchedUpdatesImpl(fn, bookkeeping) {
    return fn(bookkeeping);
  }
  var isInsideEventHandler = false;
  function batchedUpdates$1(fn, bookkeeping) {
    if (isInsideEventHandler) return fn(bookkeeping);
    isInsideEventHandler = true;
    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      isInsideEventHandler = false;
    }
  }
  var eventQueue = null;
  function executeDispatchesAndReleaseTopLevel(e) {
    if (e) {
      var dispatchListeners = e._dispatchListeners,
        dispatchInstances = e._dispatchInstances;
      if (isArrayImpl(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !e.isPropagationStopped(); i++) executeDispatch(e, dispatchListeners[i], dispatchInstances[i]);else dispatchListeners && executeDispatch(e, dispatchListeners, dispatchInstances);
      e._dispatchListeners = null;
      e._dispatchInstances = null;
      e.isPersistent() || e.constructor.release(e);
    }
  }
  var EMPTY_NATIVE_EVENT = {};
  function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
      inst = getInstanceFromTag(rootNodeID),
      target = null;
    null != inst && (target = inst.stateNode);
    batchedUpdates$1(function () {
      var JSCompiler_inline_result = target;
      for (var events = null, legacyPlugins = plugins, i = 0; i < legacyPlugins.length; i++) {
        var possiblePlugin = legacyPlugins[i];
        possiblePlugin && (possiblePlugin = possiblePlugin.extractEvents(topLevelType, inst, nativeEvent, JSCompiler_inline_result)) && (events = accumulateInto(events, possiblePlugin));
      }
      JSCompiler_inline_result = events;
      null !== JSCompiler_inline_result && (eventQueue = accumulateInto(eventQueue, JSCompiler_inline_result));
      JSCompiler_inline_result = eventQueue;
      eventQueue = null;
      if (JSCompiler_inline_result) {
        forEachAccumulated(JSCompiler_inline_result, executeDispatchesAndReleaseTopLevel);
        if (eventQueue) throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
        if (hasError) throw JSCompiler_inline_result = caughtError, hasError = false, caughtError = null, JSCompiler_inline_result;
      }
    });
  }
  ReactNativePrivateInterface.RCTEventEmitter.register({
    receiveEvent: function (rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function (eventTopLevelType, touches, changedIndices) {
      if ("topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType) {
        var JSCompiler_temp = [];
        for (var i = 0; i < changedIndices.length; i++) {
          var index$4 = changedIndices[i];
          JSCompiler_temp.push(touches[index$4]);
          touches[index$4] = null;
        }
        for (i = changedIndices = 0; i < touches.length; i++) index$4 = touches[i], null !== index$4 && (touches[changedIndices++] = index$4);
        touches.length = changedIndices;
      } else for (JSCompiler_temp = [], i = 0; i < changedIndices.length; i++) JSCompiler_temp.push(touches[changedIndices[i]]);
      for (changedIndices = 0; changedIndices < JSCompiler_temp.length; changedIndices++) {
        i = JSCompiler_temp[changedIndices];
        i.changedTouches = JSCompiler_temp;
        i.touches = touches;
        index$4 = null;
        var target = i.target;
        null === target || undefined === target || 1 > target || (index$4 = target);
        _receiveRootNodeIDEvent(index$4, eventTopLevelType, i);
      }
    }
  });
  getFiberCurrentPropsFromNode$1 = function (stateNode) {
    return instanceProps.get(stateNode._nativeTag) || null;
  };
  getInstanceFromNode = getInstanceFromTag;
  getNodeFromInstance = function (inst) {
    inst = inst.stateNode;
    var tag = inst._nativeTag;
    undefined === tag && null != inst.canonical && (tag = inst.canonical.nativeTag, inst = inst.canonical.publicInstance);
    if (!tag) throw Error("All native instances should have a tag.");
    return inst;
  };
  ResponderEventPlugin.injection.injectGlobalResponderHandler({
    onChange: function (from, to, blockNativeResponder) {
      null !== to ? ReactNativePrivateInterface.UIManager.setJSResponder(to.stateNode._nativeTag, blockNativeResponder) : ReactNativePrivateInterface.UIManager.clearJSResponder();
    }
  });
  function getNearestMountedFiber(fiber) {
    var node = fiber,
      nearestMounted = fiber;
    if (fiber.alternate) for (; node.return;) node = node.return;else {
      fiber = node;
      do node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return; while (fiber);
    }
    return 3 === node.tag ? nearestMounted : null;
  }
  function assertIsMounted(fiber) {
    if (getNearestMountedFiber(fiber) !== fiber) throw Error("Unable to find node on an unmounted component.");
  }
  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
      alternate = getNearestMountedFiber(fiber);
      if (null === alternate) throw Error("Unable to find node on an unmounted component.");
      return alternate !== fiber ? null : fiber;
    }
    for (var a = fiber, b = alternate;;) {
      var parentA = a.return;
      if (null === parentA) break;
      var parentB = parentA.alternate;
      if (null === parentB) {
        b = parentA.return;
        if (null !== b) {
          a = b;
          continue;
        }
        break;
      }
      if (parentA.child === parentB.child) {
        for (parentB = parentA.child; parentB;) {
          if (parentB === a) return assertIsMounted(parentA), fiber;
          if (parentB === b) return assertIsMounted(parentA), alternate;
          parentB = parentB.sibling;
        }
        throw Error("Unable to find node on an unmounted component.");
      }
      if (a.return !== b.return) a = parentA, b = parentB;else {
        for (var didFindChild = false, child$5 = parentA.child; child$5;) {
          if (child$5 === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }
          if (child$5 === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }
          child$5 = child$5.sibling;
        }
        if (!didFindChild) {
          for (child$5 = parentB.child; child$5;) {
            if (child$5 === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }
            if (child$5 === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }
            child$5 = child$5.sibling;
          }
          if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
        }
      }
      if (a.alternate !== b) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
    }
    if (3 !== a.tag) throw Error("Unable to find node on an unmounted component.");
    return a.stateNode.current === a ? fiber : alternate;
  }
  function findCurrentHostFiberImpl(node) {
    var tag = node.tag;
    if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
    for (node = node.child; null !== node;) {
      tag = findCurrentHostFiberImpl(node);
      if (null !== tag) return tag;
      node = node.sibling;
    }
    return null;
  }
  var emptyObject = {},
    removedKeys = null,
    removedKeyCount = 0,
    deepDifferOptions = {
      unsafelyIgnoreFunctions: true
    };
  function defaultDiffer(prevProp, nextProp) {
    return "object" !== typeof nextProp || null === nextProp ? true : ReactNativePrivateInterface.deepDiffer(prevProp, nextProp, deepDifferOptions);
  }
  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (isArrayImpl(node)) for (var i = node.length; i-- && 0 < removedKeyCount;) restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);else if (node && 0 < removedKeyCount) for (i in removedKeys) if (removedKeys[i]) {
      var nextProp = node[i];
      if (undefined !== nextProp) {
        var attributeConfig = validAttributes[i];
        if (attributeConfig) {
          "function" === typeof nextProp && (nextProp = true);
          "undefined" === typeof nextProp && (nextProp = null);
          if ("object" !== typeof attributeConfig) updatePayload[i] = nextProp;else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) nextProp = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[i] = nextProp;
          removedKeys[i] = false;
          removedKeyCount--;
        }
      }
    }
  }
  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    if (!updatePayload && prevProp === nextProp) return updatePayload;
    if (!prevProp || !nextProp) return nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload;
    if (!isArrayImpl(prevProp) && !isArrayImpl(nextProp)) return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
    if (isArrayImpl(prevProp) && isArrayImpl(nextProp)) {
      var minLength = prevProp.length < nextProp.length ? prevProp.length : nextProp.length,
        i;
      for (i = 0; i < minLength; i++) updatePayload = diffNestedProperty(updatePayload, prevProp[i], nextProp[i], validAttributes);
      for (; i < prevProp.length; i++) updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      for (; i < nextProp.length; i++) updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      return updatePayload;
    }
    return isArrayImpl(prevProp) ? diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes) : diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
  }
  function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!isArrayImpl(nextProp)) return diffProperties(updatePayload, emptyObject, nextProp, validAttributes);
    for (var i = 0; i < nextProp.length; i++) updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    return updatePayload;
  }
  function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!isArrayImpl(prevProp)) return diffProperties(updatePayload, prevProp, emptyObject, validAttributes);
    for (var i = 0; i < prevProp.length; i++) updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    return updatePayload;
  }
  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, propKey;
    for (propKey in nextProps) if (attributeConfig = validAttributes[propKey]) {
      var prevProp = prevProps[propKey];
      var nextProp = nextProps[propKey];
      "function" === typeof nextProp && (nextProp = true, "function" === typeof prevProp && (prevProp = true));
      "undefined" === typeof nextProp && (nextProp = null, "undefined" === typeof prevProp && (prevProp = null));
      removedKeys && (removedKeys[propKey] = false);
      if (updatePayload && undefined !== updatePayload[propKey]) {
        if ("object" !== typeof attributeConfig) updatePayload[propKey] = nextProp;else {
          if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, updatePayload[propKey] = attributeConfig;
        }
      } else if (prevProp !== nextProp) if ("object" !== typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process) {
        if (undefined === prevProp || ("function" === typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp))) attributeConfig = "function" === typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = attributeConfig;
      } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), 0 < removedKeyCount && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }
    for (var propKey$7 in prevProps) undefined === nextProps[propKey$7] && (!(attributeConfig = validAttributes[propKey$7]) || updatePayload && undefined !== updatePayload[propKey$7] || (prevProp = prevProps[propKey$7], undefined !== prevProp && ("object" !== typeof attributeConfig || "function" === typeof attributeConfig.diff || "function" === typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey$7] = null, removedKeys || (removedKeys = {}), removedKeys[propKey$7] || (removedKeys[propKey$7] = true, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig))));
    return updatePayload;
  }
  function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
    return function () {
      if (callback && ("boolean" !== typeof context.__isMounted || context.__isMounted)) return callback.apply(context, arguments);
    };
  }
  var ReactNativeFiberHostComponent = function () {
      function ReactNativeFiberHostComponent(tag, viewConfig) {
        this.viewConfig = this._internalFiberInstanceHandleDEV = undefined;
        this._nativeTag = tag;
        this._children = [];
        this.viewConfig = viewConfig;
      }
      var _proto = ReactNativeFiberHostComponent.prototype;
      _proto.blur = function () {
        ReactNativePrivateInterface.TextInputState.blurTextInput(this);
      };
      _proto.focus = function () {
        ReactNativePrivateInterface.TextInputState.focusTextInput(this);
      };
      _proto.measure = function (callback) {
        ReactNativePrivateInterface.UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
      };
      _proto.measureInWindow = function (callback) {
        ReactNativePrivateInterface.UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
      };
      _proto.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        if ("number" === typeof relativeToNativeNode) var relativeNode = relativeToNativeNode;else relativeToNativeNode._nativeTag && (relativeNode = relativeToNativeNode._nativeTag);
        null != relativeNode && ReactNativePrivateInterface.UIManager.measureLayout(this._nativeTag, relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
      };
      _proto.setNativeProps = function (nativeProps) {
        nativeProps = diffProperties(null, emptyObject, nativeProps, this.viewConfig.validAttributes);
        null != nativeProps && ReactNativePrivateInterface.UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, nativeProps);
      };
      return ReactNativeFiberHostComponent;
    }(),
    scheduleCallback$3 = Scheduler.unstable_scheduleCallback,
    cancelCallback$1 = Scheduler.unstable_cancelCallback,
    shouldYield = Scheduler.unstable_shouldYield,
    requestPaint = Scheduler.unstable_requestPaint,
    now = Scheduler.unstable_now,
    ImmediatePriority = Scheduler.unstable_ImmediatePriority,
    UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    NormalPriority$1 = Scheduler.unstable_NormalPriority,
    IdlePriority = Scheduler.unstable_IdlePriority,
    log$1 = Scheduler.log,
    unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue,
    rendererID = null,
    injectedHook = null;
  function onCommitRoot(root) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot) try {
      injectedHook.onCommitFiberRoot(rendererID, root, undefined, 128 === (root.current.flags & 128));
    } catch (err) {}
  }
  function setIsStrictModeForDevtools(newIsStrictMode) {
    "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
    if (injectedHook && "function" === typeof injectedHook.setStrictMode) try {
      injectedHook.setStrictMode(rendererID, newIsStrictMode);
    } catch (err) {}
  }
  var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
    log = Math.log,
    LN2 = Math.LN2;
  function clz32Fallback(x) {
    x >>>= 0;
    return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
  }
  var nextTransitionLane = 128,
    nextRetryLane = 4194304;
  function getHighestPriorityLanes(lanes) {
    var pendingSyncLanes = lanes & 42;
    if (0 !== pendingSyncLanes) return pendingSyncLanes;
    switch (lanes & -lanes) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
        return 64;
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return lanes & 4194176;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
        return lanes & 62914560;
      case 67108864:
        return 67108864;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 0;
      default:
        return lanes;
    }
  }
  function getNextLanes(root, wipLanes) {
    var pendingLanes = root.pendingLanes;
    if (0 === pendingLanes) return 0;
    var nextLanes = 0,
      suspendedLanes = root.suspendedLanes,
      pingedLanes = root.pingedLanes,
      warmLanes = root.warmLanes;
    root = 0 !== root.finishedLanes;
    var nonIdlePendingLanes = pendingLanes & 134217727;
    0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : root || (warmLanes = nonIdlePendingLanes & ~warmLanes, 0 !== warmLanes && (nextLanes = getHighestPriorityLanes(warmLanes))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : root || (warmLanes = pendingLanes & ~warmLanes, 0 !== warmLanes && (nextLanes = getHighestPriorityLanes(warmLanes))));
    return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, warmLanes = wipLanes & -wipLanes, suspendedLanes >= warmLanes || 32 === suspendedLanes && 0 !== (warmLanes & 4194176)) ? wipLanes : nextLanes;
  }
  function checkIfRootIsPrerendering(root, renderLanes) {
    return 0 === (root.pendingLanes & ~(root.suspendedLanes & ~root.pingedLanes) & renderLanes);
  }
  function computeExpirationTime(lane, currentTime) {
    switch (lane) {
      case 1:
      case 2:
      case 4:
      case 8:
        return currentTime + 250;
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return currentTime + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
        return -1;
      case 67108864:
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function claimNextTransitionLane() {
    var lane = nextTransitionLane;
    nextTransitionLane <<= 1;
    0 === (nextTransitionLane & 4194176) && (nextTransitionLane = 128);
    return lane;
  }
  function claimNextRetryLane() {
    var lane = nextRetryLane;
    nextRetryLane <<= 1;
    0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
    return lane;
  }
  function createLaneMap(initial) {
    for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
    return laneMap;
  }
  function markRootUpdated$1(root, updateLane) {
    root.pendingLanes |= updateLane;
    268435456 !== updateLane && (root.suspendedLanes = 0, root.pingedLanes = 0, root.warmLanes = 0);
  }
  function markRootFinished(root, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
    var previouslyPendingLanes = root.pendingLanes;
    root.pendingLanes = remainingLanes;
    root.suspendedLanes = 0;
    root.pingedLanes = 0;
    root.warmLanes = 0;
    root.expiredLanes &= remainingLanes;
    root.entangledLanes &= remainingLanes;
    root.errorRecoveryDisabledLanes &= remainingLanes;
    root.shellSuspendCounter = 0;
    var entanglements = root.entanglements,
      expirationTimes = root.expirationTimes,
      hiddenUpdates = root.hiddenUpdates;
    for (remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes;) {
      var index$12 = 31 - clz32(remainingLanes),
        lane = 1 << index$12;
      entanglements[index$12] = 0;
      expirationTimes[index$12] = -1;
      var hiddenUpdatesForLane = hiddenUpdates[index$12];
      if (null !== hiddenUpdatesForLane) for (hiddenUpdates[index$12] = null, index$12 = 0; index$12 < hiddenUpdatesForLane.length; index$12++) {
        var update = hiddenUpdatesForLane[index$12];
        null !== update && (update.lane &= -536870913);
      }
      remainingLanes &= ~lane;
    }
    0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
    0 !== suspendedRetryLanes && 0 === updatedLanes && (root.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
  }
  function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
    root.pendingLanes |= spawnedLane;
    root.suspendedLanes &= ~spawnedLane;
    var spawnedLaneIndex = 31 - clz32(spawnedLane);
    root.entangledLanes |= spawnedLane;
    root.entanglements[spawnedLaneIndex] = root.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 4194218;
  }
  function markRootEntangled(root, entangledLanes) {
    var rootEntangledLanes = root.entangledLanes |= entangledLanes;
    for (root = root.entanglements; rootEntangledLanes;) {
      var index$13 = 31 - clz32(rootEntangledLanes),
        lane = 1 << index$13;
      lane & entangledLanes | root[index$13] & entangledLanes && (root[index$13] |= entangledLanes);
      rootEntangledLanes &= ~lane;
    }
  }
  function lanesToEventPriority(lanes) {
    lanes &= -lanes;
    return 2 < lanes ? 8 < lanes ? 0 !== (lanes & 134217727) ? 32 : 268435456 : 8 : 2;
  }
  function getInspectorDataForInstance() {
    throw Error("getInspectorDataForInstance() is not available in production");
  }
  function shim$1() {
    throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
  }
  function shim() {
    throw Error("The current renderer does not support Resources. This error is likely caused by a bug in React. Please file an issue.");
  }
  var extraDevToolsConfig = {
      getInspectorDataForInstance: getInspectorDataForInstance,
      getInspectorDataForViewTag: function () {
        throw Error("getInspectorDataForViewTag() is not available in production");
      },
      getInspectorDataForViewAtPoint: function () {
        throw Error("getInspectorDataForViewAtPoint() is not available in production.");
      }
    },
    getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get,
    nextReactTag = 3;
  function allocateTag() {
    var tag = nextReactTag;
    1 === tag % 10 && (tag += 2);
    nextReactTag = tag + 2;
    return tag;
  }
  function recursivelyUncacheFiberNode(node) {
    if ("number" === typeof node) instanceCache.delete(node), instanceProps.delete(node);else {
      var tag = node._nativeTag;
      instanceCache.delete(tag);
      instanceProps.delete(tag);
      node._children.forEach(recursivelyUncacheFiberNode);
    }
  }
  function finalizeInitialChildren(parentInstance) {
    if (0 === parentInstance._children.length) return false;
    var nativeTags = parentInstance._children.map(function (child) {
      return "number" === typeof child ? child : child._nativeTag;
    });
    ReactNativePrivateInterface.UIManager.setChildren(parentInstance._nativeTag, nativeTags);
    return false;
  }
  function getPublicInstance(instance) {
    return null != instance.canonical && null != instance.canonical.publicInstance ? instance.canonical.publicInstance : instance;
  }
  var scheduleTimeout = setTimeout,
    cancelTimeout = clearTimeout,
    currentUpdatePriority = 0,
    HostTransitionContext = {
      $$typeof: REACT_CONTEXT_TYPE,
      Provider: null,
      Consumer: null,
      _currentValue: null,
      _currentValue2: null,
      _threadCount: 0
    },
    valueStack = [],
    index = -1;
  function createCursor(defaultValue) {
    return {
      current: defaultValue
    };
  }
  function pop(cursor) {
    0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
  }
  function push(cursor, value) {
    index++;
    valueStack[index] = cursor.current;
    cursor.current = value;
  }
  var emptyContextObject = {};
  function is(x, y) {
    return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
  }
  var objectIs = "function" === typeof Object.is ? Object.is : is,
    CapturedStacks = new WeakMap();
  function createCapturedValueAtFiber(value, source) {
    if ("object" === typeof value && null !== value) {
      var existing = CapturedStacks.get(value);
      if (undefined !== existing) return existing;
      source = {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
      };
      CapturedStacks.set(value, source);
      return source;
    }
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }
  var contextStackCursor = createCursor(null),
    contextFiberStackCursor = createCursor(null),
    rootInstanceStackCursor = createCursor(null),
    hostTransitionProviderCursor = createCursor(null);
  function pushHostContainer(fiber, nextRootInstance) {
    push(rootInstanceStackCursor, nextRootInstance);
    push(contextFiberStackCursor, fiber);
    push(contextStackCursor, null);
    pop(contextStackCursor);
    push(contextStackCursor, {
      isInAParentText: false
    });
  }
  function popHostContainer() {
    pop(contextStackCursor);
    pop(contextFiberStackCursor);
    pop(rootInstanceStackCursor);
  }
  function pushHostContext(fiber) {
    null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);
    var context = contextStackCursor.current;
    var JSCompiler_inline_result = fiber.type;
    JSCompiler_inline_result = "AndroidTextInput" === JSCompiler_inline_result || "RCTMultilineTextInputView" === JSCompiler_inline_result || "RCTSinglelineTextInputView" === JSCompiler_inline_result || "RCTText" === JSCompiler_inline_result || "RCTVirtualText" === JSCompiler_inline_result;
    JSCompiler_inline_result = context.isInAParentText !== JSCompiler_inline_result ? {
      isInAParentText: JSCompiler_inline_result
    } : context;
    context !== JSCompiler_inline_result && (push(contextFiberStackCursor, fiber), push(contextStackCursor, JSCompiler_inline_result));
  }
  function popHostContext(fiber) {
    contextFiberStackCursor.current === fiber && (pop(contextStackCursor), pop(contextFiberStackCursor));
    hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor), HostTransitionContext._currentValue = null);
  }
  var hydrationErrors = null,
    concurrentQueues = [],
    concurrentQueuesIndex = 0,
    concurrentlyUpdatedLanes = 0;
  function finishQueueingConcurrentUpdates() {
    for (var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i < endIndex;) {
      var fiber = concurrentQueues[i];
      concurrentQueues[i++] = null;
      var queue = concurrentQueues[i];
      concurrentQueues[i++] = null;
      var update = concurrentQueues[i];
      concurrentQueues[i++] = null;
      var lane = concurrentQueues[i];
      concurrentQueues[i++] = null;
      if (null !== queue && null !== update) {
        var pending = queue.pending;
        null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
        queue.pending = update;
      }
      0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
    }
  }
  function enqueueUpdate$1(fiber, queue, update, lane) {
    concurrentQueues[concurrentQueuesIndex++] = fiber;
    concurrentQueues[concurrentQueuesIndex++] = queue;
    concurrentQueues[concurrentQueuesIndex++] = update;
    concurrentQueues[concurrentQueuesIndex++] = lane;
    concurrentlyUpdatedLanes |= lane;
    fiber.lanes |= lane;
    fiber = fiber.alternate;
    null !== fiber && (fiber.lanes |= lane);
  }
  function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
    enqueueUpdate$1(fiber, queue, update, lane);
    return getRootForUpdatedFiber(fiber);
  }
  function enqueueConcurrentRenderForLane(fiber, lane) {
    enqueueUpdate$1(fiber, null, null, lane);
    return getRootForUpdatedFiber(fiber);
  }
  function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
    sourceFiber.lanes |= lane;
    var alternate = sourceFiber.alternate;
    null !== alternate && (alternate.lanes |= lane);
    for (var isHidden = false, parent = sourceFiber.return; null !== parent;) parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & 1 || (isHidden = true)), sourceFiber = parent, parent = parent.return;
    isHidden && null !== update && 3 === sourceFiber.tag && (parent = sourceFiber.stateNode, isHidden = 31 - clz32(lane), parent = parent.hiddenUpdates, sourceFiber = parent[isHidden], null === sourceFiber ? parent[isHidden] = [update] : sourceFiber.push(update), update.lane = lane | 536870912);
  }
  function getRootForUpdatedFiber(sourceFiber) {
    if (50 < nestedUpdateCount) throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
    for (var parent = sourceFiber.return; null !== parent;) sourceFiber = parent, parent = sourceFiber.return;
    return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;
  }
  var firstScheduledRoot = null,
    lastScheduledRoot = null,
    didScheduleMicrotask = false,
    mightHavePendingSyncWork = false,
    isFlushingWork = false,
    currentEventTransitionLane = 0;
  function ensureRootIsScheduled(root) {
    root !== lastScheduledRoot && null === root.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root : lastScheduledRoot = lastScheduledRoot.next = root);
    mightHavePendingSyncWork = true;
    didScheduleMicrotask || (didScheduleMicrotask = true, scheduleCallback$3(ImmediatePriority, processRootScheduleInMicrotask));
  }
  function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
    if (!isFlushingWork && mightHavePendingSyncWork) {
      isFlushingWork = true;
      do {
        var didPerformSomeWork = false;
        for (var root = firstScheduledRoot; null !== root;) {
          if (!onlyLegacy || 0 === root.tag) if (0 !== syncTransitionLanes) {
            var pendingLanes = root.pendingLanes;
            if (0 === pendingLanes) var JSCompiler_inline_result = 0;else {
              var suspendedLanes = root.suspendedLanes,
                pingedLanes = root.pingedLanes;
              JSCompiler_inline_result = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
              JSCompiler_inline_result &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
              JSCompiler_inline_result = JSCompiler_inline_result & 201326677 ? JSCompiler_inline_result & 201326677 | 1 : JSCompiler_inline_result ? JSCompiler_inline_result | 2 : 0;
            }
            0 !== JSCompiler_inline_result && (didPerformSomeWork = true, performSyncWorkOnRoot(root, JSCompiler_inline_result));
          } else JSCompiler_inline_result = workInProgressRootRenderLanes, JSCompiler_inline_result = getNextLanes(root, root === workInProgressRoot ? JSCompiler_inline_result : 0), 0 === (JSCompiler_inline_result & 3) || checkIfRootIsPrerendering(root, JSCompiler_inline_result) || (didPerformSomeWork = true, performSyncWorkOnRoot(root, JSCompiler_inline_result));
          root = root.next;
        }
      } while (didPerformSomeWork);
      isFlushingWork = false;
    }
  }
  function processRootScheduleInMicrotask() {
    mightHavePendingSyncWork = didScheduleMicrotask = false;
    0 !== currentEventTransitionLane && (currentEventTransitionLane = 0);
    for (var currentTime = now(), prev = null, root = firstScheduledRoot; null !== root;) {
      var next = root.next,
        nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
      0 === nextLanes ? (root.next = null, null === prev ? firstScheduledRoot = next : prev.next = next, null === next && (lastScheduledRoot = prev)) : (prev = root, 0 !== (nextLanes & 3) && (mightHavePendingSyncWork = true));
      root = next;
    }
    flushSyncWorkAcrossRoots_impl(0, false);
  }
  function scheduleTaskForRootDuringMicrotask(root, currentTime) {
    for (var suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, expirationTimes = root.expirationTimes, lanes = root.pendingLanes & -62914561; 0 < lanes;) {
      var index$10 = 31 - clz32(lanes),
        lane = 1 << index$10,
        expirationTime = expirationTimes[index$10];
      if (-1 === expirationTime) {
        if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes)) expirationTimes[index$10] = computeExpirationTime(lane, currentTime);
      } else expirationTime <= currentTime && (root.expiredLanes |= lane);
      lanes &= ~lane;
    }
    currentTime = workInProgressRoot;
    suspendedLanes = workInProgressRootRenderLanes;
    suspendedLanes = getNextLanes(root, root === currentTime ? suspendedLanes : 0);
    pingedLanes = root.callbackNode;
    if (0 === suspendedLanes || root === currentTime && 2 === workInProgressSuspendedReason || null !== root.cancelPendingCommit) return null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes), root.callbackNode = null, root.callbackPriority = 0;
    if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root, suspendedLanes)) {
      currentTime = suspendedLanes & -suspendedLanes;
      if (currentTime === root.callbackPriority) return currentTime;
      null !== pingedLanes && cancelCallback$1(pingedLanes);
      switch (lanesToEventPriority(suspendedLanes)) {
        case 2:
        case 8:
          suspendedLanes = UserBlockingPriority;
          break;
        case 32:
          suspendedLanes = NormalPriority$1;
          break;
        case 268435456:
          suspendedLanes = IdlePriority;
          break;
        default:
          suspendedLanes = NormalPriority$1;
      }
      pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
      suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
      root.callbackPriority = currentTime;
      root.callbackNode = suspendedLanes;
      return currentTime;
    }
    null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes);
    root.callbackPriority = 2;
    root.callbackNode = null;
    return 2;
  }
  function performWorkOnRootViaSchedulerTask(root, didTimeout) {
    var originalCallbackNode = root.callbackNode;
    if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode) return null;
    var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
    workInProgressRootRenderLanes$jscomp$0 = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0);
    if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
    performWorkOnRoot(root, workInProgressRootRenderLanes$jscomp$0, didTimeout);
    scheduleTaskForRootDuringMicrotask(root, now());
    return null != root.callbackNode && root.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root) : null;
  }
  function performSyncWorkOnRoot(root, lanes) {
    if (flushPassiveEffects()) return null;
    performWorkOnRoot(root, lanes, true);
  }
  function requestTransitionLane() {
    0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
    return currentEventTransitionLane;
  }
  var currentEntangledListeners = null,
    currentEntangledPendingCount = 0,
    currentEntangledLane = 0,
    currentEntangledActionThenable = null;
  function entangleAsyncAction(transition, thenable) {
    if (null === currentEntangledListeners) {
      var entangledListeners = currentEntangledListeners = [];
      currentEntangledPendingCount = 0;
      currentEntangledLane = requestTransitionLane();
      currentEntangledActionThenable = {
        status: "pending",
        value: undefined,
        then: function (resolve) {
          entangledListeners.push(resolve);
        }
      };
    }
    currentEntangledPendingCount++;
    thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
    return thenable;
  }
  function pingEngtangledActionScope() {
    if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
      null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
      var listeners = currentEntangledListeners;
      currentEntangledListeners = null;
      currentEntangledLane = 0;
      currentEntangledActionThenable = null;
      for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
    }
  }
  function chainThenableValue(thenable, result) {
    var listeners = [],
      thenableWithOverride = {
        status: "pending",
        value: null,
        reason: null,
        then: function (resolve) {
          listeners.push(resolve);
        }
      };
    thenable.then(function () {
      thenableWithOverride.status = "fulfilled";
      thenableWithOverride.value = result;
      for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
    }, function (error) {
      thenableWithOverride.status = "rejected";
      thenableWithOverride.reason = error;
      for (error = 0; error < listeners.length; error++) (0, listeners[error])(undefined);
    });
    return thenableWithOverride;
  }
  var hasForceUpdate = false;
  function initializeUpdateQueue(fiber) {
    fiber.updateQueue = {
      baseState: fiber.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: {
        pending: null,
        lanes: 0,
        hiddenCallbacks: null
      },
      callbacks: null
    };
  }
  function cloneUpdateQueue(current, workInProgress) {
    current = current.updateQueue;
    workInProgress.updateQueue === current && (workInProgress.updateQueue = {
      baseState: current.baseState,
      firstBaseUpdate: current.firstBaseUpdate,
      lastBaseUpdate: current.lastBaseUpdate,
      shared: current.shared,
      callbacks: null
    });
  }
  function createUpdate(lane) {
    return {
      lane: lane,
      tag: 0,
      payload: null,
      callback: null,
      next: null
    };
  }
  function enqueueUpdate(fiber, update, lane) {
    var updateQueue = fiber.updateQueue;
    if (null === updateQueue) return null;
    updateQueue = updateQueue.shared;
    if (0 !== (executionContext & 2)) {
      var pending = updateQueue.pending;
      null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
      updateQueue.pending = update;
      update = getRootForUpdatedFiber(fiber);
      markUpdateLaneFromFiberToRoot(fiber, null, lane);
      return update;
    }
    enqueueUpdate$1(fiber, updateQueue, update, lane);
    return getRootForUpdatedFiber(fiber);
  }
  function entangleTransitions(root, fiber, lane) {
    fiber = fiber.updateQueue;
    if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194176))) {
      var queueLanes = fiber.lanes;
      queueLanes &= root.pendingLanes;
      lane |= queueLanes;
      fiber.lanes = lane;
      markRootEntangled(root, lane);
    }
  }
  function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
    var queue = workInProgress.updateQueue,
      current = workInProgress.alternate;
    if (null !== current && (current = current.updateQueue, queue === current)) {
      var newFirst = null,
        newLast = null;
      queue = queue.firstBaseUpdate;
      if (null !== queue) {
        do {
          var clone = {
            lane: queue.lane,
            tag: queue.tag,
            payload: queue.payload,
            callback: null,
            next: null
          };
          null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
          queue = queue.next;
        } while (null !== queue);
        null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
      } else newFirst = newLast = capturedUpdate;
      queue = {
        baseState: current.baseState,
        firstBaseUpdate: newFirst,
        lastBaseUpdate: newLast,
        shared: current.shared,
        callbacks: current.callbacks
      };
      workInProgress.updateQueue = queue;
      return;
    }
    workInProgress = queue.lastBaseUpdate;
    null === workInProgress ? queue.firstBaseUpdate = capturedUpdate : workInProgress.next = capturedUpdate;
    queue.lastBaseUpdate = capturedUpdate;
  }
  var didReadFromEntangledAsyncAction = false;
  function suspendIfUpdateReadFromEntangledAsyncAction() {
    if (didReadFromEntangledAsyncAction) {
      var entangledActionThenable = currentEntangledActionThenable;
      if (null !== entangledActionThenable) throw entangledActionThenable;
    }
  }
  function processUpdateQueue(workInProgress$jscomp$0, props, instance$jscomp$0, renderLanes) {
    didReadFromEntangledAsyncAction = false;
    var queue = workInProgress$jscomp$0.updateQueue;
    hasForceUpdate = false;
    var firstBaseUpdate = queue.firstBaseUpdate,
      lastBaseUpdate = queue.lastBaseUpdate,
      pendingQueue = queue.shared.pending;
    if (null !== pendingQueue) {
      queue.shared.pending = null;
      var lastPendingUpdate = pendingQueue,
        firstPendingUpdate = lastPendingUpdate.next;
      lastPendingUpdate.next = null;
      null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
      lastBaseUpdate = lastPendingUpdate;
      var current = workInProgress$jscomp$0.alternate;
      null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
    }
    if (null !== firstBaseUpdate) {
      var newState = queue.baseState;
      lastBaseUpdate = 0;
      current = firstPendingUpdate = lastPendingUpdate = null;
      pendingQueue = firstBaseUpdate;
      do {
        var updateLane = pendingQueue.lane & -536870913,
          isHiddenUpdate = updateLane !== pendingQueue.lane;
        if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
          0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = true);
          null !== current && (current = current.next = {
            lane: 0,
            tag: pendingQueue.tag,
            payload: pendingQueue.payload,
            callback: null,
            next: null
          });
          a: {
            var workInProgress = workInProgress$jscomp$0,
              update = pendingQueue;
            updateLane = props;
            var instance = instance$jscomp$0;
            switch (update.tag) {
              case 1:
                workInProgress = update.payload;
                if ("function" === typeof workInProgress) {
                  newState = workInProgress.call(instance, newState, updateLane);
                  break a;
                }
                newState = workInProgress;
                break a;
              case 3:
                workInProgress.flags = workInProgress.flags & -65537 | 128;
              case 0:
                workInProgress = update.payload;
                updateLane = "function" === typeof workInProgress ? workInProgress.call(instance, newState, updateLane) : workInProgress;
                if (null === updateLane || undefined === updateLane) break a;
                newState = assign({}, newState, updateLane);
                break a;
              case 2:
                hasForceUpdate = true;
            }
          }
          updateLane = pendingQueue.callback;
          null !== updateLane && (workInProgress$jscomp$0.flags |= 64, isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [updateLane] : isHiddenUpdate.push(updateLane));
        } else isHiddenUpdate = {
          lane: updateLane,
          tag: pendingQueue.tag,
          payload: pendingQueue.payload,
          callback: pendingQueue.callback,
          next: null
        }, null === current ? (firstPendingUpdate = current = isHiddenUpdate, lastPendingUpdate = newState) : current = current.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
        pendingQueue = pendingQueue.next;
        if (null === pendingQueue) if (pendingQueue = queue.shared.pending, null === pendingQueue) break;else isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
      } while (1);
      null === current && (lastPendingUpdate = newState);
      queue.baseState = lastPendingUpdate;
      queue.firstBaseUpdate = firstPendingUpdate;
      queue.lastBaseUpdate = current;
      null === firstBaseUpdate && (queue.shared.lanes = 0);
      workInProgressRootSkippedLanes |= lastBaseUpdate;
      workInProgress$jscomp$0.lanes = lastBaseUpdate;
      workInProgress$jscomp$0.memoizedState = newState;
    }
  }
  function callCallback(callback, context) {
    if ("function" !== typeof callback) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
    callback.call(context);
  }
  function commitCallbacks(updateQueue, context) {
    var callbacks = updateQueue.callbacks;
    if (null !== callbacks) for (updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++) callCallback(callbacks[updateQueue], context);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) return true;
    if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return false;
    var keysA = Object.keys(objA),
      keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) return false;
    for (keysB = 0; keysB < keysA.length; keysB++) {
      var currentKey = keysA[keysB];
      if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return false;
    }
    return true;
  }
  var SuspenseException = Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`"),
    SuspenseyCommitException = Error("Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."),
    noopSuspenseyCommitThenable = {
      then: function () {}
    };
  function isThenableResolved(thenable) {
    thenable = thenable.status;
    return "fulfilled" === thenable || "rejected" === thenable;
  }
  function noop() {}
  function trackUsedThenable(thenableState, thenable, index) {
    index = thenableState[index];
    undefined === index ? thenableState.push(thenable) : index !== thenable && (thenable.then(noop, noop), thenable = index);
    switch (thenable.status) {
      case "fulfilled":
        return thenable.value;
      case "rejected":
        throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
      default:
        if ("string" === typeof thenable.status) thenable.then(noop, noop);else {
          thenableState = workInProgressRoot;
          if (null !== thenableState && 100 < thenableState.shellSuspendCounter) throw Error("async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
          thenableState = thenable;
          thenableState.status = "pending";
          thenableState.then(function (fulfilledValue) {
            if ("pending" === thenable.status) {
              var fulfilledThenable = thenable;
              fulfilledThenable.status = "fulfilled";
              fulfilledThenable.value = fulfilledValue;
            }
          }, function (error) {
            if ("pending" === thenable.status) {
              var rejectedThenable = thenable;
              rejectedThenable.status = "rejected";
              rejectedThenable.reason = error;
            }
          });
        }
        switch (thenable.status) {
          case "fulfilled":
            return thenable.value;
          case "rejected":
            throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
        }
        suspendedThenable = thenable;
        throw SuspenseException;
    }
  }
  var suspendedThenable = null;
  function getSuspendedThenable() {
    if (null === suspendedThenable) throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
    var thenable = suspendedThenable;
    suspendedThenable = null;
    return thenable;
  }
  function checkIfUseWrappedInAsyncCatch(rejectedReason) {
    if (rejectedReason === SuspenseException) throw Error("Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
  }
  var thenableState$1 = null,
    thenableIndexCounter$1 = 0;
  function unwrapThenable(thenable) {
    var index = thenableIndexCounter$1;
    thenableIndexCounter$1 += 1;
    null === thenableState$1 && (thenableState$1 = []);
    return trackUsedThenable(thenableState$1, thenable, index);
  }
  function coerceRef(workInProgress, element) {
    element = element.props.ref;
    workInProgress.ref = undefined !== element ? element : null;
  }
  function throwOnInvalidObjectType(returnFiber, newChild) {
    if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE) throw Error('A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.');
    returnFiber = Object.prototype.toString.call(newChild);
    throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead.");
  }
  function resolveLazy(lazyType) {
    var init = lazyType._init;
    return init(lazyType._payload);
  }
  function createChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (shouldTrackSideEffects) {
        var deletions = returnFiber.deletions;
        null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
      }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) return null;
      for (; null !== currentFirstChild;) deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      return null;
    }
    function mapRemainingChildren(currentFirstChild) {
      for (var existingChildren = new Map(); null !== currentFirstChild;) null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
      return existingChildren;
    }
    function useFiber(fiber, pendingProps) {
      fiber = createWorkInProgress(fiber, pendingProps);
      fiber.index = 0;
      fiber.sibling = null;
      return fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) return newFiber.flags |= 1048576, lastPlacedIndex;
      newIndex = newFiber.alternate;
      if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 33554434, lastPlacedIndex) : newIndex;
      newFiber.flags |= 33554434;
      return lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
      shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 33554434);
      return newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, lanes) {
      if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
      current = useFiber(current, textContent);
      current.return = returnFiber;
      return current;
    }
    function updateElement(returnFiber, current, element, lanes) {
      var elementType = element.type;
      if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
      if (null !== current && (current.elementType === elementType || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type)) return current = useFiber(current, element.props), coerceRef(current, element), current.return = returnFiber, current;
      current = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, lanes);
      coerceRef(current, element);
      current.return = returnFiber;
      return current;
    }
    function updatePortal(returnFiber, current, portal, lanes) {
      if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
      current = useFiber(current, portal.children || []);
      current.return = returnFiber;
      return current;
    }
    function updateFragment(returnFiber, current, fragment, lanes, key) {
      if (null === current || 7 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, lanes, key), current.return = returnFiber, current;
      current = useFiber(current, fragment);
      current.return = returnFiber;
      return current;
    }
    function createChild(returnFiber, newChild, lanes) {
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes;
          case REACT_PORTAL_TYPE:
            return newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
          case REACT_LAZY_TYPE:
            var init = newChild._init;
            newChild = init(newChild._payload);
            return createChild(returnFiber, newChild, lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return newChild = createFiberFromFragment(newChild, returnFiber.mode, lanes, null), newChild.return = returnFiber, newChild;
        if ("function" === typeof newChild.then) return createChild(returnFiber, unwrapThenable(newChild), lanes);
        if (newChild.$$typeof === REACT_CONTEXT_TYPE) return createChild(returnFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
      var key = null !== oldFiber ? oldFiber.key : null;
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
          case REACT_PORTAL_TYPE:
            return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
          case REACT_LAZY_TYPE:
            return key = newChild._init, newChild = key(newChild._payload), updateSlot(returnFiber, oldFiber, newChild, lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
        if ("function" === typeof newChild.then) return updateSlot(returnFiber, oldFiber, unwrapThenable(newChild), lanes);
        if (newChild.$$typeof === REACT_CONTEXT_TYPE) return updateSlot(returnFiber, oldFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
      if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
          case REACT_PORTAL_TYPE:
            return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
          case REACT_LAZY_TYPE:
            var init = newChild._init;
            newChild = init(newChild._payload);
            return updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes);
        }
        if (isArrayImpl(newChild) || getIteratorFn(newChild)) return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
        if ("function" === typeof newChild.then) return updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(newChild), lanes);
        if (newChild.$$typeof === REACT_CONTEXT_TYPE) return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconciliation(returnFiber, newChild), lanes);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return null;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }
        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
      if (null === oldFiber) {
        for (; newIdx < newChildren.length; newIdx++) oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
        return resultingFirstChild;
      }
      for (oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++) nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], lanes), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
      if (null == newChildren) throw Error("An iterable object provided no iterator.");
      for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
        oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
        if (null === newFiber) {
          null === oldFiber && (oldFiber = nextOldFiber);
          break;
        }
        shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
        null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
      if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
      if (null === oldFiber) {
        for (; !step.done; newIdx++, step = newChildren.next()) step = createChild(returnFiber, step.value, lanes), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
        return resultingFirstChild;
      }
      for (oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next()) step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
      shouldTrackSideEffects && oldFiber.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
      return resultingFirstChild;
    }
    function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
      "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
      if ("object" === typeof newChild && null !== newChild) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            a: {
              for (var key = newChild.key; null !== currentFirstChild;) {
                if (currentFirstChild.key === key) {
                  key = newChild.type;
                  if (key === REACT_FRAGMENT_TYPE) {
                    if (7 === currentFirstChild.tag) {
                      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                      lanes = useFiber(currentFirstChild, newChild.props.children);
                      lanes.return = returnFiber;
                      returnFiber = lanes;
                      break a;
                    }
                  } else if (currentFirstChild.elementType === key || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === currentFirstChild.type) {
                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                    lanes = useFiber(currentFirstChild, newChild.props);
                    coerceRef(lanes, newChild);
                    lanes.return = returnFiber;
                    returnFiber = lanes;
                    break a;
                  }
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                } else deleteChild(returnFiber, currentFirstChild);
                currentFirstChild = currentFirstChild.sibling;
              }
              newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(newChild.props.children, returnFiber.mode, lanes, newChild.key), lanes.return = returnFiber, returnFiber = lanes) : (lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = lanes);
            }
            return placeSingleChild(returnFiber);
          case REACT_PORTAL_TYPE:
            a: {
              for (key = newChild.key; null !== currentFirstChild;) {
                if (currentFirstChild.key === key) {
                  if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                    lanes = useFiber(currentFirstChild, newChild.children || []);
                    lanes.return = returnFiber;
                    returnFiber = lanes;
                    break a;
                  } else {
                    deleteRemainingChildren(returnFiber, currentFirstChild);
                    break;
                  }
                } else deleteChild(returnFiber, currentFirstChild);
                currentFirstChild = currentFirstChild.sibling;
              }
              lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
              lanes.return = returnFiber;
              returnFiber = lanes;
            }
            return placeSingleChild(returnFiber);
          case REACT_LAZY_TYPE:
            return key = newChild._init, newChild = key(newChild._payload), reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
        }
        if (isArrayImpl(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
        if (getIteratorFn(newChild)) {
          key = getIteratorFn(newChild);
          if ("function" !== typeof key) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          newChild = key.call(newChild);
          return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
        }
        if ("function" === typeof newChild.then) return reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(newChild), lanes);
        if (newChild.$$typeof === REACT_CONTEXT_TYPE) return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconciliation(returnFiber, newChild), lanes);
        throwOnInvalidObjectType(returnFiber, newChild);
      }
      return "string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild ? (newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), lanes = useFiber(currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(newChild, returnFiber.mode, lanes), lanes.return = returnFiber, returnFiber = lanes), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return function (returnFiber, currentFirstChild, newChild, lanes) {
      try {
        thenableIndexCounter$1 = 0;
        var firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
        thenableState$1 = null;
        return firstChildFiber;
      } catch (x) {
        if (x === SuspenseException || 0 === (returnFiber.mode & 1) && "object" === typeof x && null !== x && "function" === typeof x.then) throw x;
        var fiber = createFiberImplClass(29, x, null, returnFiber.mode);
        fiber.lanes = lanes;
        fiber.return = returnFiber;
        return fiber;
      } finally {}
    };
  }
  var reconcileChildFibers = createChildReconciler(true),
    mountChildFibers = createChildReconciler(false),
    currentTreeHiddenStackCursor = createCursor(null),
    prevEntangledRenderLanesCursor = createCursor(0);
  function pushHiddenContext(fiber, context) {
    fiber = entangledRenderLanes;
    push(prevEntangledRenderLanesCursor, fiber);
    push(currentTreeHiddenStackCursor, context);
    entangledRenderLanes = fiber | context.baseLanes;
  }
  function reuseHiddenContextOnStack() {
    push(prevEntangledRenderLanesCursor, entangledRenderLanes);
    push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
  }
  function popHiddenContext() {
    entangledRenderLanes = prevEntangledRenderLanesCursor.current;
    pop(currentTreeHiddenStackCursor);
    pop(prevEntangledRenderLanesCursor);
  }
  var suspenseHandlerStackCursor = createCursor(null),
    shellBoundary = null;
  function pushPrimaryTreeSuspenseHandler(handler) {
    var current = handler.alternate;
    push(suspenseStackCursor, suspenseStackCursor.current & 1);
    push(suspenseHandlerStackCursor, handler);
    null === shellBoundary && (null === current || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current.memoizedState && (shellBoundary = handler));
  }
  function pushOffscreenSuspenseHandler(fiber) {
    if (22 === fiber.tag) {
      if (push(suspenseStackCursor, suspenseStackCursor.current), push(suspenseHandlerStackCursor, fiber), null === shellBoundary) {
        var current = fiber.alternate;
        null !== current && null !== current.memoizedState && (shellBoundary = fiber);
      }
    } else reuseSuspenseHandlerOnStack(fiber);
  }
  function reuseSuspenseHandlerOnStack() {
    push(suspenseStackCursor, suspenseStackCursor.current);
    push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
  }
  function popSuspenseHandler(fiber) {
    pop(suspenseHandlerStackCursor);
    shellBoundary === fiber && (shellBoundary = null);
    pop(suspenseStackCursor);
  }
  var suspenseStackCursor = createCursor(0);
  function findFirstSuspended(row) {
    for (var node = row; null !== node;) {
      if (13 === node.tag) {
        var state = node.memoizedState;
        if (null !== state && (null === state.dehydrated || shim$1() || shim$1())) return node;
      } else if (19 === node.tag && undefined !== node.memoizedProps.revealOrder) {
        if (0 !== (node.flags & 128)) return node;
      } else if (null !== node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === row) break;
      for (; null === node.sibling;) {
        if (null === node.return || node.return === row) return null;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
    return null;
  }
  var renderLanes = 0,
    currentlyRenderingFiber$1 = null,
    currentHook = null,
    workInProgressHook = null,
    didScheduleRenderPhaseUpdate = false,
    didScheduleRenderPhaseUpdateDuringThisPass = false,
    shouldDoubleInvokeUserFnsInHooksDEV = false,
    thenableIndexCounter = 0,
    thenableState = null,
    globalClientIdCounter = 0;
  function throwInvalidHookError() {
    throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
  }
  function areHookInputsEqual(nextDeps, prevDeps) {
    if (null === prevDeps) return false;
    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) if (!objectIs(nextDeps[i], prevDeps[i])) return false;
    return true;
  }
  function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
    renderLanes = nextRenderLanes;
    currentlyRenderingFiber$1 = workInProgress;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.lanes = 0;
    ReactSharedInternals.H = null === current || null === current.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
    shouldDoubleInvokeUserFnsInHooksDEV = false;
    nextRenderLanes = Component(props, secondArg);
    shouldDoubleInvokeUserFnsInHooksDEV = false;
    didScheduleRenderPhaseUpdateDuringThisPass && (nextRenderLanes = renderWithHooksAgain(workInProgress, Component, props, secondArg));
    finishRenderingHooks(current);
    return nextRenderLanes;
  }
  function finishRenderingHooks(current) {
    ReactSharedInternals.H = ContextOnlyDispatcher;
    var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdate = false;
    thenableIndexCounter = 0;
    thenableState = null;
    if (didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
    null === current || didReceiveUpdate || (current = current.dependencies, null !== current && checkIfContextChanged(current) && (didReceiveUpdate = true));
  }
  function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
    currentlyRenderingFiber$1 = workInProgress;
    var numberOfReRenders = 0;
    do {
      didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
      thenableIndexCounter = 0;
      didScheduleRenderPhaseUpdateDuringThisPass = false;
      if (25 <= numberOfReRenders) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
      numberOfReRenders += 1;
      workInProgressHook = currentHook = null;
      if (null != workInProgress.updateQueue) {
        var children = workInProgress.updateQueue;
        children.lastEffect = null;
        children.events = null;
        children.stores = null;
        null != children.memoCache && (children.memoCache.index = 0);
      }
      ReactSharedInternals.H = HooksDispatcherOnRerender;
      children = Component(props, secondArg);
    } while (didScheduleRenderPhaseUpdateDuringThisPass);
    return children;
  }
  function TransitionAwareHostComponent() {
    var dispatcher = ReactSharedInternals.H,
      maybeThenable = dispatcher.useState()[0];
    maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
    dispatcher = dispatcher.useState()[0];
    (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber$1.flags |= 1024);
    return maybeThenable;
  }
  function bailoutHooks(current, workInProgress, lanes) {
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.flags &= -2053;
    current.lanes &= ~lanes;
  }
  function resetHooksOnUnwind(workInProgress) {
    if (didScheduleRenderPhaseUpdate) {
      for (workInProgress = workInProgress.memoizedState; null !== workInProgress;) {
        var queue = workInProgress.queue;
        null !== queue && (queue.pending = null);
        workInProgress = workInProgress.next;
      }
      didScheduleRenderPhaseUpdate = false;
    }
    renderLanes = 0;
    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
    didScheduleRenderPhaseUpdateDuringThisPass = false;
    thenableIndexCounter = 0;
    thenableState = null;
  }
  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };
    null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
    return workInProgressHook;
  }
  function updateWorkInProgressHook() {
    if (null === currentHook) {
      var nextCurrentHook = currentlyRenderingFiber$1.alternate;
      nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
    } else nextCurrentHook = currentHook.next;
    var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
    if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;else {
      if (null === nextCurrentHook) {
        if (null === currentlyRenderingFiber$1.alternate) throw Error("Update hook called on initial render. This is likely a bug in React. Please file an issue.");
        throw Error("Rendered more hooks than during the previous render.");
      }
      currentHook = nextCurrentHook;
      nextCurrentHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        baseQueue: currentHook.baseQueue,
        queue: currentHook.queue,
        next: null
      };
      null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
    }
    return workInProgressHook;
  }
  var createFunctionComponentUpdateQueue;
  createFunctionComponentUpdateQueue = function () {
    return {
      lastEffect: null,
      events: null,
      stores: null,
      memoCache: null
    };
  };
  function useThenable(thenable) {
    var index = thenableIndexCounter;
    thenableIndexCounter += 1;
    null === thenableState && (thenableState = []);
    thenable = trackUsedThenable(thenableState, thenable, index);
    index = currentlyRenderingFiber$1;
    null === (null === workInProgressHook ? index.memoizedState : workInProgressHook.next) && (index = index.alternate, ReactSharedInternals.H = null === index || null === index.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate);
    return thenable;
  }
  function use(usable) {
    if (null !== usable && "object" === typeof usable) {
      if ("function" === typeof usable.then) return useThenable(usable);
      if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
    }
    throw Error("An unsupported type was passed to use(): " + String(usable));
  }
  function useMemoCache(size) {
    var memoCache = null,
      updateQueue = currentlyRenderingFiber$1.updateQueue;
    null !== updateQueue && (memoCache = updateQueue.memoCache);
    if (null == memoCache) {
      var current = currentlyRenderingFiber$1.alternate;
      null !== current && (current = current.updateQueue, null !== current && (current = current.memoCache, null != current && (memoCache = {
        data: current.data.map(function (array) {
          return array.slice();
        }),
        index: 0
      })));
    }
    null == memoCache && (memoCache = {
      data: [],
      index: 0
    });
    null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = updateQueue);
    updateQueue.memoCache = memoCache;
    updateQueue = memoCache.data[memoCache.index];
    if (undefined === updateQueue) for (updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0; current < size; current++) updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
    memoCache.index++;
    return updateQueue;
  }
  function basicStateReducer(state, action) {
    return "function" === typeof action ? action(state) : action;
  }
  function updateReducer(reducer) {
    var hook = updateWorkInProgressHook();
    return updateReducerImpl(hook, currentHook, reducer);
  }
  function updateReducerImpl(hook, current, reducer) {
    var queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
    queue.lastRenderedReducer = reducer;
    var baseQueue = hook.baseQueue,
      pendingQueue = queue.pending;
    if (null !== pendingQueue) {
      if (null !== baseQueue) {
        var baseFirst = baseQueue.next;
        baseQueue.next = pendingQueue.next;
        pendingQueue.next = baseFirst;
      }
      current.baseQueue = baseQueue = pendingQueue;
      queue.pending = null;
    }
    pendingQueue = hook.baseState;
    if (null === baseQueue) hook.memoizedState = pendingQueue;else {
      current = baseQueue.next;
      var newBaseQueueFirst = baseFirst = null,
        newBaseQueueLast = null,
        update = current,
        didReadFromEntangledAsyncAction$47 = false;
      do {
        var updateLane = update.lane & -536870913;
        if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
          var revertLane = update.revertLane;
          if (0 === revertLane) null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
            lane: 0,
            revertLane: 0,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction$47 = true);else if ((renderLanes & revertLane) === revertLane) {
            update = update.next;
            revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction$47 = true);
            continue;
          } else updateLane = {
            lane: 0,
            revertLane: update.revertLane,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber$1.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
          updateLane = update.action;
          shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
          pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
        } else revertLane = {
          lane: updateLane,
          revertLane: update.revertLane,
          action: update.action,
          hasEagerState: update.hasEagerState,
          eagerState: update.eagerState,
          next: null
        }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber$1.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
        update = update.next;
      } while (null !== update && update !== current);
      null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
      if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = true, didReadFromEntangledAsyncAction$47 && (reducer = currentEntangledActionThenable, null !== reducer))) throw reducer;
      hook.memoizedState = pendingQueue;
      hook.baseState = baseFirst;
      hook.baseQueue = newBaseQueueLast;
      queue.lastRenderedState = pendingQueue;
    }
    null === baseQueue && (queue.lanes = 0);
    return [hook.memoizedState, queue.dispatch];
  }
  function rerenderReducer(reducer) {
    var hook = updateWorkInProgressHook(),
      queue = hook.queue;
    if (null === queue) throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
    queue.lastRenderedReducer = reducer;
    var dispatch = queue.dispatch,
      lastRenderPhaseUpdate = queue.pending,
      newState = hook.memoizedState;
    if (null !== lastRenderPhaseUpdate) {
      queue.pending = null;
      var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      do newState = reducer(newState, update.action), update = update.next; while (update !== lastRenderPhaseUpdate);
      objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
      hook.memoizedState = newState;
      null === hook.baseQueue && (hook.baseState = newState);
      queue.lastRenderedState = newState;
    }
    return [newState, dispatch];
  }
  function updateSyncExternalStore(subscribe, getSnapshot) {
    var fiber = currentlyRenderingFiber$1,
      hook = updateWorkInProgressHook();
    var nextSnapshot = getSnapshot();
    var snapshotChanged = !objectIs((currentHook || hook).memoizedState, nextSnapshot);
    snapshotChanged && (hook.memoizedState = nextSnapshot, didReceiveUpdate = true);
    hook = hook.queue;
    updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [subscribe]);
    if (hook.getSnapshot !== getSnapshot || snapshotChanged || null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1) {
      fiber.flags |= 2048;
      pushEffect(9, updateStoreInstance.bind(null, fiber, hook, nextSnapshot, getSnapshot), {
        destroy: undefined
      }, null);
      if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
      0 !== (renderLanes & 60) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
    }
    return nextSnapshot;
  }
  function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
    fiber.flags |= 16384;
    fiber = {
      getSnapshot: getSnapshot,
      value: renderedSnapshot
    };
    getSnapshot = currentlyRenderingFiber$1.updateQueue;
    null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
  }
  function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
    inst.value = nextSnapshot;
    inst.getSnapshot = getSnapshot;
    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
  }
  function subscribeToStore(fiber, inst, subscribe) {
    return subscribe(function () {
      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    });
  }
  function checkIfSnapshotChanged(inst) {
    var latestGetSnapshot = inst.getSnapshot;
    inst = inst.value;
    try {
      var nextValue = latestGetSnapshot();
      return !objectIs(inst, nextValue);
    } catch (error) {
      return true;
    }
  }
  function forceStoreRerender(fiber) {
    var root = enqueueConcurrentRenderForLane(fiber, 2);
    null !== root && scheduleUpdateOnFiber(root, fiber, 2);
  }
  function mountStateImpl(initialState) {
    var hook = mountWorkInProgressHook();
    if ("function" === typeof initialState) {
      var initialStateInitializer = initialState;
      initialState = initialStateInitializer();
      if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(true);
        try {
          initialStateInitializer();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
    }
    hook.memoizedState = hook.baseState = initialState;
    hook.queue = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: initialState
    };
    return hook;
  }
  function updateOptimisticImpl(hook, current, passthrough, reducer) {
    hook.baseState = passthrough;
    return updateReducerImpl(hook, currentHook, "function" === typeof reducer ? reducer : basicStateReducer);
  }
  function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
    if (isRenderPhaseUpdate(fiber)) throw Error("Cannot update form state while rendering.");
    fiber = actionQueue.action;
    if (null !== fiber) {
      var actionNode = {
        payload: payload,
        action: fiber,
        next: null,
        isTransition: true,
        status: "pending",
        value: null,
        reason: null,
        listeners: [],
        then: function (listener) {
          actionNode.listeners.push(listener);
        }
      };
      null !== ReactSharedInternals.T ? setPendingState(true) : actionNode.isTransition = false;
      setState(actionNode);
      setPendingState = actionQueue.pending;
      null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
    }
  }
  function runActionStateAction(actionQueue, node) {
    var action = node.action,
      payload = node.payload,
      prevState = actionQueue.state;
    if (node.isTransition) {
      var prevTransition = ReactSharedInternals.T,
        currentTransition = {};
      ReactSharedInternals.T = currentTransition;
      try {
        var returnValue = action(prevState, payload),
          onStartTransitionFinish = ReactSharedInternals.S;
        null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
        handleActionReturnValue(actionQueue, node, returnValue);
      } catch (error) {
        onActionError(actionQueue, node, error);
      } finally {
        ReactSharedInternals.T = prevTransition;
      }
    } else try {
      prevTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, prevTransition);
    } catch (error$51) {
      onActionError(actionQueue, node, error$51);
    }
  }
  function handleActionReturnValue(actionQueue, node, returnValue) {
    null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? returnValue.then(function (nextState) {
      onActionSuccess(actionQueue, node, nextState);
    }, function (error) {
      return onActionError(actionQueue, node, error);
    }) : onActionSuccess(actionQueue, node, returnValue);
  }
  function onActionSuccess(actionQueue, actionNode, nextState) {
    actionNode.status = "fulfilled";
    actionNode.value = nextState;
    notifyActionListeners(actionNode);
    actionQueue.state = nextState;
    actionNode = actionQueue.pending;
    null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
  }
  function onActionError(actionQueue, actionNode, error) {
    var last = actionQueue.pending;
    actionQueue.pending = null;
    if (null !== last) {
      last = last.next;
      do actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next; while (actionNode !== last);
    }
    actionQueue.action = null;
  }
  function notifyActionListeners(actionNode) {
    actionNode = actionNode.listeners;
    for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
  }
  function actionStateReducer(oldState, newState) {
    return newState;
  }
  function mountActionState(action, initialStateProp) {
    var stateHook = mountWorkInProgressHook();
    stateHook.memoizedState = stateHook.baseState = initialStateProp;
    var stateQueue = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: actionStateReducer,
      lastRenderedState: initialStateProp
    };
    stateHook.queue = stateQueue;
    stateHook = dispatchSetState.bind(null, currentlyRenderingFiber$1, stateQueue);
    stateQueue.dispatch = stateHook;
    stateQueue = mountStateImpl(false);
    var setPendingState = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, false, stateQueue.queue);
    stateQueue = mountWorkInProgressHook();
    var actionQueue = {
      state: initialStateProp,
      dispatch: null,
      action: action,
      pending: null
    };
    stateQueue.queue = actionQueue;
    stateHook = dispatchActionState.bind(null, currentlyRenderingFiber$1, actionQueue, setPendingState, stateHook);
    actionQueue.dispatch = stateHook;
    stateQueue.memoizedState = action;
    return [initialStateProp, stateHook, false];
  }
  function updateActionState(action) {
    var stateHook = updateWorkInProgressHook();
    return updateActionStateImpl(stateHook, currentHook, action);
  }
  function updateActionStateImpl(stateHook, currentStateHook, action) {
    currentStateHook = updateReducerImpl(stateHook, currentStateHook, actionStateReducer)[0];
    stateHook = updateReducer(basicStateReducer)[0];
    currentStateHook = "object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then ? useThenable(currentStateHook) : currentStateHook;
    var actionQueueHook = updateWorkInProgressHook(),
      actionQueue = actionQueueHook.queue,
      dispatch = actionQueue.dispatch;
    action !== actionQueueHook.memoizedState && (currentlyRenderingFiber$1.flags |= 2048, pushEffect(9, actionStateActionEffect.bind(null, actionQueue, action), {
      destroy: undefined
    }, null));
    return [currentStateHook, dispatch, stateHook];
  }
  function actionStateActionEffect(actionQueue, action) {
    actionQueue.action = action;
  }
  function rerenderActionState(action) {
    var stateHook = updateWorkInProgressHook(),
      currentStateHook = currentHook;
    if (null !== currentStateHook) return updateActionStateImpl(stateHook, currentStateHook, action);
    updateWorkInProgressHook();
    stateHook = stateHook.memoizedState;
    currentStateHook = updateWorkInProgressHook();
    var dispatch = currentStateHook.queue.dispatch;
    currentStateHook.memoizedState = action;
    return [stateHook, dispatch, false];
  }
  function pushEffect(tag, create, inst, deps) {
    tag = {
      tag: tag,
      create: create,
      inst: inst,
      deps: deps,
      next: null
    };
    create = currentlyRenderingFiber$1.updateQueue;
    null === create && (create = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = create);
    inst = create.lastEffect;
    null === inst ? create.lastEffect = tag.next = tag : (deps = inst.next, inst.next = tag, tag.next = deps, create.lastEffect = tag);
    return tag;
  }
  function updateRef() {
    return updateWorkInProgressHook().memoizedState;
  }
  function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = mountWorkInProgressHook();
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(1 | hookFlags, create, {
      destroy: undefined
    }, undefined === deps ? null : deps);
  }
  function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var inst = hook.memoizedState.inst;
    null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushEffect(hookFlags, create, inst, deps) : (currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(1 | hookFlags, create, inst, deps));
  }
  function mountEffect(create, deps) {
    mountEffectImpl(8390656, 8, create, deps);
  }
  function updateEffect(create, deps) {
    updateEffectImpl(2048, 8, create, deps);
  }
  function updateInsertionEffect(create, deps) {
    return updateEffectImpl(4, 2, create, deps);
  }
  function updateLayoutEffect(create, deps) {
    return updateEffectImpl(4, 4, create, deps);
  }
  function imperativeHandleEffect(create, ref) {
    if ("function" === typeof ref) {
      create = create();
      var refCleanup = ref(create);
      return function () {
        "function" === typeof refCleanup ? refCleanup() : ref(null);
      };
    }
    if (null !== ref && undefined !== ref) return create = create(), ref.current = create, function () {
      ref.current = null;
    };
  }
  function updateImperativeHandle(ref, create, deps) {
    deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
    updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
  }
  function mountDebugValue() {}
  function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    hook.memoizedState = [callback, deps];
    return callback;
  }
  function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    deps = undefined === deps ? null : deps;
    var prevState = hook.memoizedState;
    if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
    prevState = nextCreate();
    if (shouldDoubleInvokeUserFnsInHooksDEV) {
      setIsStrictModeForDevtools(true);
      try {
        nextCreate();
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }
    hook.memoizedState = [prevState, deps];
    return prevState;
  }
  function mountDeferredValueImpl(hook, value, initialValue) {
    if (undefined === initialValue || 0 !== (renderLanes & 1073741824)) return hook.memoizedState = value;
    hook.memoizedState = initialValue;
    hook = requestDeferredLane();
    currentlyRenderingFiber$1.lanes |= hook;
    workInProgressRootSkippedLanes |= hook;
    return initialValue;
  }
  function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
    if (objectIs(value, prevValue)) return value;
    if (null !== currentTreeHiddenStackCursor.current) return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = true), hook;
    if (0 === (renderLanes & 42)) return didReceiveUpdate = true, hook.memoizedState = value;
    hook = requestDeferredLane();
    currentlyRenderingFiber$1.lanes |= hook;
    workInProgressRootSkippedLanes |= hook;
    return prevValue;
  }
  function startTransition(fiber, queue, pendingState, finishedState, callback) {
    var previousPriority = currentUpdatePriority;
    currentUpdatePriority = 0 !== previousPriority && 8 > previousPriority ? previousPriority : 8;
    var prevTransition = ReactSharedInternals.T,
      currentTransition = {};
    ReactSharedInternals.T = currentTransition;
    dispatchOptimisticSetState(fiber, false, queue, pendingState);
    try {
      var returnValue = callback(),
        onStartTransitionFinish = ReactSharedInternals.S;
      null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
      if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
        var thenableForFinishedState = chainThenableValue(returnValue, finishedState);
        dispatchSetStateInternal(fiber, queue, thenableForFinishedState, requestUpdateLane(fiber));
      } else dispatchSetStateInternal(fiber, queue, finishedState, requestUpdateLane(fiber));
    } catch (error) {
      dispatchSetStateInternal(fiber, queue, {
        then: function () {},
        status: "rejected",
        reason: error
      }, requestUpdateLane(fiber));
    } finally {
      currentUpdatePriority = previousPriority, ReactSharedInternals.T = prevTransition;
    }
  }
  function useHostTransitionStatus() {
    return readContext(HostTransitionContext);
  }
  function updateId() {
    return updateWorkInProgressHook().memoizedState;
  }
  function updateRefresh() {
    return updateWorkInProgressHook().memoizedState;
  }
  function refreshCache(fiber) {
    for (var provider = fiber.return; null !== provider;) {
      switch (provider.tag) {
        case 24:
        case 3:
          var lane = requestUpdateLane(provider);
          fiber = createUpdate(lane);
          var root = enqueueUpdate(provider, fiber, lane);
          null !== root && (scheduleUpdateOnFiber(root, provider, lane), entangleTransitions(root, provider, lane));
          provider = {
            cache: createCache()
          };
          fiber.payload = provider;
          return;
      }
      provider = provider.return;
    }
  }
  function dispatchReducerAction(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    action = {
      lane: lane,
      revertLane: 0,
      action: action,
      hasEagerState: false,
      eagerState: null,
      next: null
    };
    isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, action) : (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), null !== action && (scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane)));
  }
  function dispatchSetState(fiber, queue, action) {
    var lane = requestUpdateLane(fiber);
    dispatchSetStateInternal(fiber, queue, action, lane);
  }
  function dispatchSetStateInternal(fiber, queue, action, lane) {
    var update = {
      lane: lane,
      revertLane: 0,
      action: action,
      hasEagerState: false,
      eagerState: null,
      next: null
    };
    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);else {
      var alternate = fiber.alternate;
      if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) try {
        var currentState = queue.lastRenderedState,
          eagerState = alternate(currentState, action);
        update.hasEagerState = true;
        update.eagerState = eagerState;
        if (objectIs(eagerState, currentState)) return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), false;
      } catch (error) {} finally {}
      action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
      if (null !== action) return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), true;
    }
    return false;
  }
  function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
    action = {
      lane: 2,
      revertLane: requestTransitionLane(),
      action: action,
      hasEagerState: false,
      eagerState: null,
      next: null
    };
    if (isRenderPhaseUpdate(fiber)) {
      if (throwIfDuringRender) throw Error("Cannot update optimistic state while rendering.");
    } else throwIfDuringRender = enqueueConcurrentHookUpdate(fiber, queue, action, 2), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
  }
  function isRenderPhaseUpdate(fiber) {
    var alternate = fiber.alternate;
    return fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1;
  }
  function enqueueRenderPhaseUpdate(queue, update) {
    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
    var pending = queue.pending;
    null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
    queue.pending = update;
  }
  function entangleTransitionUpdate(root, queue, lane) {
    if (0 !== (lane & 4194176)) {
      var queueLanes = queue.lanes;
      queueLanes &= root.pendingLanes;
      lane |= queueLanes;
      queue.lanes = lane;
      markRootEntangled(root, lane);
    }
  }
  var ContextOnlyDispatcher = {
    readContext: readContext,
    use: use,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useInsertionEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useDeferredValue: throwInvalidHookError,
    useTransition: throwInvalidHookError,
    useSyncExternalStore: throwInvalidHookError,
    useId: throwInvalidHookError
  };
  ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
  ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
  ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
  ContextOnlyDispatcher.useFormState = throwInvalidHookError;
  ContextOnlyDispatcher.useActionState = throwInvalidHookError;
  ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
  var HooksDispatcherOnMount = {
    readContext: readContext,
    use: use,
    useCallback: function (callback, deps) {
      mountWorkInProgressHook().memoizedState = [callback, undefined === deps ? null : deps];
      return callback;
    },
    useContext: readContext,
    useEffect: mountEffect,
    useImperativeHandle: function (ref, create, deps) {
      deps = null !== deps && undefined !== deps ? deps.concat([ref]) : null;
      mountEffectImpl(4194308, 4, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function (create, deps) {
      return mountEffectImpl(4194308, 4, create, deps);
    },
    useInsertionEffect: function (create, deps) {
      mountEffectImpl(4, 2, create, deps);
    },
    useMemo: function (nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = undefined === deps ? null : deps;
      var nextValue = nextCreate();
      if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(true);
        try {
          nextCreate();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
      hook.memoizedState = [nextValue, deps];
      return nextValue;
    },
    useReducer: function (reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      if (undefined !== init) {
        var initialState = init(initialArg);
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          setIsStrictModeForDevtools(true);
          try {
            init(initialArg);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
      } else initialState = initialArg;
      hook.memoizedState = hook.baseState = initialState;
      reducer = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      hook.queue = reducer;
      reducer = reducer.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, reducer);
      return [hook.memoizedState, reducer];
    },
    useRef: function (initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = {
        current: initialValue
      };
      return hook.memoizedState = initialValue;
    },
    useState: function (initialState) {
      initialState = mountStateImpl(initialState);
      var queue = initialState.queue,
        dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
      queue.dispatch = dispatch;
      return [initialState.memoizedState, dispatch];
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function (value, initialValue) {
      var hook = mountWorkInProgressHook();
      return mountDeferredValueImpl(hook, value, initialValue);
    },
    useTransition: function () {
      var stateHook = mountStateImpl(false);
      stateHook = startTransition.bind(null, currentlyRenderingFiber$1, stateHook.queue, true, false);
      mountWorkInProgressHook().memoizedState = stateHook;
      return [false, stateHook];
    },
    useSyncExternalStore: function (subscribe, getSnapshot) {
      var fiber = currentlyRenderingFiber$1,
        hook = mountWorkInProgressHook();
      var nextSnapshot = getSnapshot();
      if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
      0 !== (workInProgressRootRenderLanes & 60) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
      hook.memoizedState = nextSnapshot;
      var inst = {
        value: nextSnapshot,
        getSnapshot: getSnapshot
      };
      hook.queue = inst;
      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
      fiber.flags |= 2048;
      pushEffect(9, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), {
        destroy: undefined
      }, null);
      return nextSnapshot;
    },
    useId: function () {
      var hook = mountWorkInProgressHook(),
        identifierPrefix = workInProgressRoot.identifierPrefix,
        globalClientId = globalClientIdCounter++;
      identifierPrefix = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
      return hook.memoizedState = identifierPrefix;
    },
    useCacheRefresh: function () {
      return mountWorkInProgressHook().memoizedState = refreshCache.bind(null, currentlyRenderingFiber$1);
    }
  };
  HooksDispatcherOnMount.useMemoCache = useMemoCache;
  HooksDispatcherOnMount.useHostTransitionStatus = useHostTransitionStatus;
  HooksDispatcherOnMount.useFormState = mountActionState;
  HooksDispatcherOnMount.useActionState = mountActionState;
  HooksDispatcherOnMount.useOptimistic = function (passthrough) {
    var hook = mountWorkInProgressHook();
    hook.memoizedState = hook.baseState = passthrough;
    var queue = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: null,
      lastRenderedState: null
    };
    hook.queue = queue;
    hook = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, true, queue);
    queue.dispatch = hook;
    return [passthrough, hook];
  };
  var HooksDispatcherOnUpdate = {
    readContext: readContext,
    use: use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: updateReducer,
    useRef: updateRef,
    useState: function () {
      return updateReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function (value, initialValue) {
      var hook = updateWorkInProgressHook();
      return updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    },
    useTransition: function () {
      var booleanOrThenable = updateReducer(basicStateReducer)[0],
        start = updateWorkInProgressHook().memoizedState;
      return ["boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable), start];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId
  };
  HooksDispatcherOnUpdate.useCacheRefresh = updateRefresh;
  HooksDispatcherOnUpdate.useMemoCache = useMemoCache;
  HooksDispatcherOnUpdate.useHostTransitionStatus = useHostTransitionStatus;
  HooksDispatcherOnUpdate.useFormState = updateActionState;
  HooksDispatcherOnUpdate.useActionState = updateActionState;
  HooksDispatcherOnUpdate.useOptimistic = function (passthrough, reducer) {
    var hook = updateWorkInProgressHook();
    return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
  };
  var HooksDispatcherOnRerender = {
    readContext: readContext,
    use: use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: rerenderReducer,
    useRef: updateRef,
    useState: function () {
      return rerenderReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function (value, initialValue) {
      var hook = updateWorkInProgressHook();
      return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    },
    useTransition: function () {
      var booleanOrThenable = rerenderReducer(basicStateReducer)[0],
        start = updateWorkInProgressHook().memoizedState;
      return ["boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable), start];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId
  };
  HooksDispatcherOnRerender.useCacheRefresh = updateRefresh;
  HooksDispatcherOnRerender.useMemoCache = useMemoCache;
  HooksDispatcherOnRerender.useHostTransitionStatus = useHostTransitionStatus;
  HooksDispatcherOnRerender.useFormState = rerenderActionState;
  HooksDispatcherOnRerender.useActionState = rerenderActionState;
  HooksDispatcherOnRerender.useOptimistic = function (passthrough, reducer) {
    var hook = updateWorkInProgressHook();
    if (null !== currentHook) return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
    hook.baseState = passthrough;
    return [passthrough, hook.queue.dispatch];
  };
  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    ctor = workInProgress.memoizedState;
    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
    getDerivedStateFromProps = null === getDerivedStateFromProps || undefined === getDerivedStateFromProps ? ctor : assign({}, ctor, getDerivedStateFromProps);
    workInProgress.memoizedState = getDerivedStateFromProps;
    0 === workInProgress.lanes && (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
  }
  var classComponentUpdater = {
    isMounted: function (component) {
      return (component = component._reactInternals) ? getNearestMountedFiber(component) === component : false;
    },
    enqueueSetState: function (inst, payload, callback) {
      inst = inst._reactInternals;
      var lane = requestUpdateLane(inst),
        update = createUpdate(lane);
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueReplaceState: function (inst, payload, callback) {
      inst = inst._reactInternals;
      var lane = requestUpdateLane(inst),
        update = createUpdate(lane);
      update.tag = 1;
      update.payload = payload;
      undefined !== callback && null !== callback && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueForceUpdate: function (inst, callback) {
      inst = inst._reactInternals;
      var lane = requestUpdateLane(inst),
        update = createUpdate(lane);
      update.tag = 2;
      undefined !== callback && null !== callback && (update.callback = callback);
      callback = enqueueUpdate(inst, update, lane);
      null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
    }
  };
  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    workInProgress = workInProgress.stateNode;
    return "function" === typeof workInProgress.shouldComponentUpdate ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
  }
  function constructClassInstance(workInProgress, ctor, props) {
    var context = emptyContextObject,
      contextType = ctor.contextType;
    "object" === typeof contextType && null !== contextType && (context = readContext(contextType));
    ctor = new ctor(props, context);
    workInProgress.memoizedState = null !== ctor.state && undefined !== ctor.state ? ctor.state : null;
    ctor.updater = classComponentUpdater;
    workInProgress.stateNode = ctor;
    ctor._reactInternals = workInProgress;
    return ctor;
  }
  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    workInProgress = instance.state;
    "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
    "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
  function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = {};
    initializeUpdateQueue(workInProgress);
    var contextType = ctor.contextType;
    instance.context = "object" === typeof contextType && null !== contextType ? readContext(contextType) : emptyContextObject;
    instance.state = workInProgress.memoizedState;
    contextType = ctor.getDerivedStateFromProps;
    "function" === typeof contextType && (applyDerivedStateFromProps(workInProgress, ctor, contextType, newProps), instance.state = workInProgress.memoizedState);
    "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && classComponentUpdater.enqueueReplaceState(instance, instance.state, null), processUpdateQueue(workInProgress, newProps, instance, renderLanes), suspendIfUpdateReadFromEntangledAsyncAction(), instance.state = workInProgress.memoizedState);
    "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308);
  }
  function resolveClassComponentProps(Component, baseProps) {
    var newProps = baseProps;
    if ("ref" in baseProps) {
      newProps = {};
      for (var propName in baseProps) "ref" !== propName && (newProps[propName] = baseProps[propName]);
    }
    if (Component = Component.defaultProps) {
      newProps === baseProps && (newProps = assign({}, newProps));
      for (var propName$53 in Component) undefined === newProps[propName$53] && (newProps[propName$53] = Component[propName$53]);
    }
    return newProps;
  }
  var reportGlobalError = "function" === typeof reportError ? reportError : function (error) {
    if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
      var event = new window.ErrorEvent("error", {
        bubbles: true,
        cancelable: true,
        message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
        error: error
      });
      if (!window.dispatchEvent(event)) return;
    } else if ("object" === typeof process && "function" === typeof process.emit) {
      process.emit("uncaughtException", error);
      return;
    }
    console.error(error);
  };
  function defaultOnRecoverableError(error) {
    reportGlobalError(error);
  }
  function logUncaughtError(root, errorInfo) {
    try {
      var onUncaughtError = root.onUncaughtError;
      onUncaughtError(errorInfo.value, {
        componentStack: errorInfo.stack
      });
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }
  function logCaughtError(root, boundary, errorInfo) {
    try {
      var onCaughtError = root.onCaughtError;
      onCaughtError(errorInfo.value, {
        componentStack: errorInfo.stack,
        errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
      });
    } catch (e) {
      setTimeout(function () {
        throw e;
      });
    }
  }
  function createRootErrorUpdate(root, errorInfo, lane) {
    lane = createUpdate(lane);
    lane.tag = 3;
    lane.payload = {
      element: null
    };
    lane.callback = function () {
      logUncaughtError(root, errorInfo);
    };
    return lane;
  }
  function createClassErrorUpdate(lane) {
    lane = createUpdate(lane);
    lane.tag = 3;
    return lane;
  }
  function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
    if ("function" === typeof getDerivedStateFromError) {
      var error = errorInfo.value;
      update.payload = function () {
        return getDerivedStateFromError(error);
      };
      update.callback = function () {
        logCaughtError(root, fiber, errorInfo);
      };
    }
    var inst = fiber.stateNode;
    null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function () {
      logCaughtError(root, fiber, errorInfo);
      "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
      var stack = errorInfo.stack;
      this.componentDidCatch(errorInfo.value, {
        componentStack: null !== stack ? stack : ""
      });
    });
  }
  function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
    sourceFiber.flags |= 32768;
    if (null !== value && "object" === typeof value && "function" === typeof value.then) {
      var currentSourceFiber = sourceFiber.alternate;
      null !== currentSourceFiber && propagateParentContextChanges(currentSourceFiber, sourceFiber, rootRenderLanes, true);
      currentSourceFiber = sourceFiber.tag;
      0 !== (sourceFiber.mode & 1) || 0 !== currentSourceFiber && 11 !== currentSourceFiber && 15 !== currentSourceFiber || ((currentSourceFiber = sourceFiber.alternate) ? (sourceFiber.updateQueue = currentSourceFiber.updateQueue, sourceFiber.memoizedState = currentSourceFiber.memoizedState, sourceFiber.lanes = currentSourceFiber.lanes) : (sourceFiber.updateQueue = null, sourceFiber.memoizedState = null));
      currentSourceFiber = suspenseHandlerStackCursor.current;
      if (null !== currentSourceFiber) {
        switch (currentSourceFiber.tag) {
          case 13:
            return sourceFiber.mode & 1 && (null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === currentSourceFiber.alternate && 0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 3)), currentSourceFiber.flags &= -257, 0 === (currentSourceFiber.mode & 1) ? currentSourceFiber === returnFiber ? currentSourceFiber.flags |= 65536 : (currentSourceFiber.flags |= 128, sourceFiber.flags |= 131072, sourceFiber.flags &= -52805, 1 === sourceFiber.tag ? null === sourceFiber.alternate ? sourceFiber.tag = 17 : (returnFiber = createUpdate(2), returnFiber.tag = 2, enqueueUpdate(sourceFiber, returnFiber, 2)) : 0 === sourceFiber.tag && null === sourceFiber.alternate && (sourceFiber.tag = 28), sourceFiber.lanes |= 2) : (currentSourceFiber.flags |= 65536, currentSourceFiber.lanes = rootRenderLanes), value === noopSuspenseyCommitThenable ? currentSourceFiber.flags |= 16384 : (returnFiber = currentSourceFiber.updateQueue, null === returnFiber ? currentSourceFiber.updateQueue = new Set([value]) : returnFiber.add(value), currentSourceFiber.mode & 1 && attachPingListener(root, value, rootRenderLanes)), false;
          case 22:
            if (currentSourceFiber.mode & 1) return currentSourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? currentSourceFiber.flags |= 16384 : (returnFiber = currentSourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
              transitions: null,
              markerInstances: null,
              retryQueue: new Set([value])
            }, currentSourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = new Set([value]) : sourceFiber.add(value)), attachPingListener(root, value, rootRenderLanes)), false;
        }
        throw Error("Unexpected Suspense handler tag (" + currentSourceFiber.tag + "). This is a bug in React.");
      }
      if (1 === root.tag) return attachPingListener(root, value, rootRenderLanes), renderDidSuspendDelayIfPossible(), false;
      value = Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
    }
    currentSourceFiber = createCapturedValueAtFiber(Error("There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.", {
      cause: value
    }), sourceFiber);
    null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [currentSourceFiber] : workInProgressRootConcurrentErrors.push(currentSourceFiber);
    4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
    if (null === returnFiber) return true;
    value = createCapturedValueAtFiber(value, sourceFiber);
    do {
      switch (returnFiber.tag) {
        case 3:
          return returnFiber.flags |= 65536, root = rootRenderLanes & -rootRenderLanes, returnFiber.lanes |= root, root = createRootErrorUpdate(returnFiber.stateNode, value, root), enqueueCapturedUpdate(returnFiber, root), false;
        case 1:
          if (sourceFiber = returnFiber.type, currentSourceFiber = returnFiber.stateNode, 0 === (returnFiber.flags & 128) && ("function" === typeof sourceFiber.getDerivedStateFromError || null !== currentSourceFiber && "function" === typeof currentSourceFiber.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(currentSourceFiber)))) return returnFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, returnFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(rootRenderLanes, root, returnFiber, value), enqueueCapturedUpdate(returnFiber, rootRenderLanes), false;
      }
      returnFiber = returnFiber.return;
    } while (null !== returnFiber);
    return false;
  }
  var SelectiveHydrationException = Error("This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."),
    didReceiveUpdate = false;
  function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
    workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderLanes) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
  }
  function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
    Component = Component.render;
    var ref = workInProgress.ref;
    if ("ref" in nextProps) {
      var propsWithoutRef = {};
      for (var key in nextProps) "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
    } else propsWithoutRef = nextProps;
    prepareToReadContext(workInProgress);
    nextProps = renderWithHooks(current, workInProgress, Component, propsWithoutRef, ref, renderLanes);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
  }
  function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null === current) {
      var type = Component.type;
      if ("function" === typeof type && !shouldConstruct(type) && undefined === type.defaultProps && null === Component.compare) return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current, workInProgress, type, nextProps, renderLanes);
      current = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
      current.ref = workInProgress.ref;
      current.return = workInProgress;
      return workInProgress.child = current;
    }
    type = current.child;
    if (!checkScheduledUpdateOrContext(current, renderLanes)) {
      var prevProps = type.memoizedProps;
      Component = Component.compare;
      Component = null !== Component ? Component : shallowEqual;
      if (Component(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    workInProgress.flags |= 1;
    current = createWorkInProgress(type, nextProps);
    current.ref = workInProgress.ref;
    current.return = workInProgress;
    return workInProgress.child = current;
  }
  function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
    if (null !== current) {
      var prevProps = current.memoizedProps;
      if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref) if (didReceiveUpdate = false, workInProgress.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current, renderLanes)) 0 !== (current.flags & 131072) && (didReceiveUpdate = true);else return workInProgress.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
  }
  function updateOffscreenComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      nextChildren = nextProps.children,
      nextIsDetached = 0 !== (workInProgress.stateNode._pendingVisibility & 2),
      prevState = null !== current ? current.memoizedState : null;
    markRef(current, workInProgress);
    if ("hidden" === nextProps.mode || nextIsDetached) {
      if (0 !== (workInProgress.flags & 128)) {
        nextProps = null !== prevState ? prevState.baseLanes | renderLanes : renderLanes;
        if (null !== current) {
          nextChildren = workInProgress.child = current.child;
          for (nextIsDetached = 0; null !== nextChildren;) nextIsDetached = nextIsDetached | nextChildren.lanes | nextChildren.childLanes, nextChildren = nextChildren.sibling;
          workInProgress.childLanes = nextIsDetached & ~nextProps;
        } else workInProgress.childLanes = 0, workInProgress.child = null;
        return deferHiddenOffscreenComponent(current, workInProgress, nextProps, renderLanes);
      }
      if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = {
        baseLanes: 0,
        cachePool: null
      }, null !== current && pushTransition(workInProgress, null), reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress);else if (0 !== (renderLanes & 536870912)) workInProgress.memoizedState = {
        baseLanes: 0,
        cachePool: null
      }, null !== current && pushTransition(workInProgress, null !== prevState ? prevState.cachePool : null), null !== prevState ? pushHiddenContext(workInProgress, prevState) : reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress);else return workInProgress.lanes = workInProgress.childLanes = 536870912, deferHiddenOffscreenComponent(current, workInProgress, null !== prevState ? prevState.baseLanes | renderLanes : renderLanes, renderLanes);
    } else null !== prevState ? (pushTransition(workInProgress, prevState.cachePool), pushHiddenContext(workInProgress, prevState), reuseSuspenseHandlerOnStack(workInProgress), workInProgress.memoizedState = null) : (null !== current && pushTransition(workInProgress, null), reuseHiddenContextOnStack(), reuseSuspenseHandlerOnStack(workInProgress));
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
  }
  function deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes, renderLanes) {
    var JSCompiler_inline_result = peekCacheFromPool();
    JSCompiler_inline_result = null === JSCompiler_inline_result ? null : {
      parent: CacheContext._currentValue,
      pool: JSCompiler_inline_result
    };
    workInProgress.memoizedState = {
      baseLanes: nextBaseLanes,
      cachePool: JSCompiler_inline_result
    };
    null !== current && pushTransition(workInProgress, null);
    reuseHiddenContextOnStack();
    pushOffscreenSuspenseHandler(workInProgress);
    null !== current && propagateParentContextChanges(current, workInProgress, renderLanes, true);
    return null;
  }
  function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (null === ref) null !== current && null !== current.ref && (workInProgress.flags |= 2097664);else {
      if ("function" !== typeof ref && "object" !== typeof ref) throw Error("Expected ref to be a function, an object returned by React.createRef(), or undefined/null.");
      if (null === current || current.ref !== ref) workInProgress.flags |= 2097664;
    }
  }
  function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
    prepareToReadContext(workInProgress);
    Component = renderWithHooks(current, workInProgress, Component, nextProps, undefined, renderLanes);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, Component, renderLanes);
    return workInProgress.child;
  }
  function replayFunctionComponent(current, workInProgress, nextProps, Component, secondArg, renderLanes) {
    prepareToReadContext(workInProgress);
    workInProgress.updateQueue = null;
    nextProps = renderWithHooksAgain(workInProgress, Component, nextProps, secondArg);
    finishRenderingHooks(current);
    if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    workInProgress.flags |= 1;
    reconcileChildren(current, workInProgress, nextProps, renderLanes);
    return workInProgress.child;
  }
  function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
    prepareToReadContext(workInProgress);
    if (null === workInProgress.stateNode) resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), constructClassInstance(workInProgress, Component, nextProps), mountClassInstance(workInProgress, Component, nextProps, renderLanes), nextProps = true;else if (null === current) {
      var instance = workInProgress.stateNode,
        unresolvedOldProps = workInProgress.memoizedProps,
        oldProps = resolveClassComponentProps(Component, unresolvedOldProps);
      instance.props = oldProps;
      var oldContext = instance.context,
        contextType = Component.contextType,
        nextContext = emptyContextObject;
      "object" === typeof contextType && null !== contextType && (nextContext = readContext(contextType));
      var getDerivedStateFromProps = Component.getDerivedStateFromProps;
      contextType = "function" === typeof getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate;
      unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
      contextType || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (unresolvedOldProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress, instance, nextProps, nextContext);
      hasForceUpdate = false;
      var oldState = workInProgress.memoizedState;
      instance.state = oldState;
      processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
      suspendIfUpdateReadFromEntangledAsyncAction();
      oldContext = workInProgress.memoizedState;
      unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, nextContext)) ? (contextType || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || ("function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount()), "function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308)) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), instance.props = nextProps, instance.state = oldContext, instance.context = nextContext, nextProps = oldProps) : ("function" === typeof instance.componentDidMount && (workInProgress.flags |= 4194308), nextProps = false);
    } else {
      instance = workInProgress.stateNode;
      cloneUpdateQueue(current, workInProgress);
      nextContext = workInProgress.memoizedProps;
      contextType = resolveClassComponentProps(Component, nextContext);
      instance.props = contextType;
      getDerivedStateFromProps = workInProgress.pendingProps;
      oldState = instance.context;
      oldContext = Component.contextType;
      oldProps = emptyContextObject;
      "object" === typeof oldContext && null !== oldContext && (oldProps = readContext(oldContext));
      unresolvedOldProps = Component.getDerivedStateFromProps;
      (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof instance.getSnapshotBeforeUpdate) || "function" !== typeof instance.UNSAFE_componentWillReceiveProps && "function" !== typeof instance.componentWillReceiveProps || (nextContext !== getDerivedStateFromProps || oldState !== oldProps) && callComponentWillReceiveProps(workInProgress, instance, nextProps, oldProps);
      hasForceUpdate = false;
      oldState = workInProgress.memoizedState;
      instance.state = oldState;
      processUpdateQueue(workInProgress, nextProps, instance, renderLanes);
      suspendIfUpdateReadFromEntangledAsyncAction();
      var newState = workInProgress.memoizedState;
      nextContext !== getDerivedStateFromProps || oldState !== newState || hasForceUpdate || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(workInProgress, Component, unresolvedOldProps, nextProps), newState = workInProgress.memoizedState), (contextType = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, contextType, nextProps, oldState, newState, oldProps) || null !== current && null !== current.dependencies && checkIfContextChanged(current.dependencies)) ? (oldContext || "function" !== typeof instance.UNSAFE_componentWillUpdate && "function" !== typeof instance.componentWillUpdate || ("function" === typeof instance.componentWillUpdate && instance.componentWillUpdate(nextProps, newState, oldProps), "function" === typeof instance.UNSAFE_componentWillUpdate && instance.UNSAFE_componentWillUpdate(nextProps, newState, oldProps)), "function" === typeof instance.componentDidUpdate && (workInProgress.flags |= 4), "function" === typeof instance.getSnapshotBeforeUpdate && (workInProgress.flags |= 1024)) : ("function" !== typeof instance.componentDidUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = newState), instance.props = nextProps, instance.state = newState, instance.context = oldProps, nextProps = contextType) : ("function" !== typeof instance.componentDidUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof instance.getSnapshotBeforeUpdate || nextContext === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), nextProps = false);
    }
    return finishClassComponent(current, workInProgress, Component, nextProps, false, renderLanes);
  }
  function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
    markRef(current, workInProgress);
    hasContext = 0 !== (workInProgress.flags & 128);
    if (!shouldUpdate && !hasContext) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    shouldUpdate = workInProgress.stateNode;
    Component = hasContext && "function" !== typeof Component.getDerivedStateFromError ? null : shouldUpdate.render();
    workInProgress.flags |= 1;
    null !== current && hasContext ? (workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes), workInProgress.child = reconcileChildFibers(workInProgress, null, Component, renderLanes)) : reconcileChildren(current, workInProgress, Component, renderLanes);
    workInProgress.memoizedState = shouldUpdate.state;
    return workInProgress.child;
  }
  var SUSPENDED_MARKER = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0
  };
  function mountSuspenseOffscreenState(renderLanes) {
    return {
      baseLanes: renderLanes,
      cachePool: getSuspendedCache()
    };
  }
  function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes) {
    current = null !== current ? current.childLanes & ~renderLanes : 0;
    primaryTreeDidDefer && (current |= workInProgressDeferredLane);
    return current;
  }
  function updateSuspenseComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      showFallback = false,
      didSuspend = 0 !== (workInProgress.flags & 128),
      JSCompiler_temp;
    (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current && null === current.memoizedState ? false : 0 !== (suspenseStackCursor.current & 2));
    JSCompiler_temp && (showFallback = true, workInProgress.flags &= -129);
    JSCompiler_temp = 0 !== (workInProgress.flags & 32);
    workInProgress.flags &= -33;
    if (null === current) {
      var nextPrimaryChildren = nextProps.children;
      nextProps = nextProps.fallback;
      if (showFallback) return reuseSuspenseHandlerOnStack(workInProgress), showFallback = workInProgress.mode, didSuspend = workInProgress.child, nextPrimaryChildren = {
        mode: "hidden",
        children: nextPrimaryChildren
      }, 0 === (showFallback & 1) && null !== didSuspend ? (didSuspend.childLanes = 0, didSuspend.pendingProps = nextPrimaryChildren) : didSuspend = createFiberFromOffscreen(nextPrimaryChildren, showFallback, 0, null), nextProps = createFiberFromFragment(nextProps, showFallback, renderLanes, null), didSuspend.return = workInProgress, nextProps.return = workInProgress, didSuspend.sibling = nextProps, workInProgress.child = didSuspend, nextPrimaryChildren = workInProgress.child, nextPrimaryChildren.memoizedState = mountSuspenseOffscreenState(renderLanes), nextPrimaryChildren.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, nextProps;
      pushPrimaryTreeSuspenseHandler(workInProgress);
      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
    }
    nextPrimaryChildren = current.memoizedState;
    if (null !== nextPrimaryChildren && null !== nextPrimaryChildren.dehydrated) {
      if (didSuspend) workInProgress.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags &= -257, workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes)) : null !== workInProgress.memoizedState ? (reuseSuspenseHandlerOnStack(workInProgress), workInProgress.child = current.child, workInProgress.flags |= 128, workInProgress = null) : (reuseSuspenseHandlerOnStack(workInProgress), nextPrimaryChildren = nextProps.fallback, showFallback = workInProgress.mode, nextProps = createFiberFromOffscreen({
        mode: "visible",
        children: nextProps.children
      }, showFallback, 0, null), nextPrimaryChildren = createFiberFromFragment(nextPrimaryChildren, showFallback, renderLanes, null), nextPrimaryChildren.flags |= 2, nextProps.return = workInProgress, nextPrimaryChildren.return = workInProgress, nextProps.sibling = nextPrimaryChildren, workInProgress.child = nextProps, 0 !== (workInProgress.mode & 1) && reconcileChildFibers(workInProgress, current.child, null, renderLanes), nextProps = workInProgress.child, nextProps.memoizedState = mountSuspenseOffscreenState(renderLanes), nextProps.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, workInProgress = nextPrimaryChildren);else if (pushPrimaryTreeSuspenseHandler(workInProgress), shim$1()) JSCompiler_temp = shim$1().digest, nextProps = Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."), nextProps.stack = "", nextProps.digest = JSCompiler_temp, JSCompiler_temp = {
        value: nextProps,
        source: null,
        stack: null
      }, null === hydrationErrors ? hydrationErrors = [JSCompiler_temp] : hydrationErrors.push(JSCompiler_temp), workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);else if (didReceiveUpdate || propagateParentContextChanges(current, workInProgress, renderLanes, false), JSCompiler_temp = 0 !== (renderLanes & current.childLanes), didReceiveUpdate || JSCompiler_temp) {
        JSCompiler_temp = workInProgressRoot;
        if (null !== JSCompiler_temp) {
          nextProps = renderLanes & -renderLanes;
          if (0 !== (nextProps & 42)) nextProps = 1;else switch (nextProps) {
            case 2:
              nextProps = 1;
              break;
            case 8:
              nextProps = 4;
              break;
            case 32:
              nextProps = 16;
              break;
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
              nextProps = 64;
              break;
            case 268435456:
              nextProps = 134217728;
              break;
            default:
              nextProps = 0;
          }
          nextProps = 0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes)) ? 0 : nextProps;
          if (0 !== nextProps && nextProps !== nextPrimaryChildren.retryLane) throw nextPrimaryChildren.retryLane = nextProps, enqueueConcurrentRenderForLane(current, nextProps), scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps), SelectiveHydrationException;
        }
        shim$1() || renderDidSuspendDelayIfPossible();
        workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);
      } else shim$1() ? (workInProgress.flags |= 128, workInProgress.child = current.child, retryDehydratedSuspenseBoundary.bind(null, current), shim$1(), workInProgress = null) : (workInProgress = mountSuspensePrimaryChildren(workInProgress, nextProps.children), workInProgress.flags |= 4096);
      return workInProgress;
    }
    if (showFallback) {
      reuseSuspenseHandlerOnStack(workInProgress);
      nextPrimaryChildren = nextProps.fallback;
      showFallback = workInProgress.mode;
      didSuspend = current.child;
      var currentFallbackChildFragment = didSuspend.sibling,
        primaryChildProps = {
          mode: "hidden",
          children: nextProps.children
        };
      0 === (showFallback & 1) && workInProgress.child !== didSuspend ? (nextProps = workInProgress.child, nextProps.childLanes = 0, nextProps.pendingProps = primaryChildProps, workInProgress.deletions = null) : (nextProps = createWorkInProgress(didSuspend, primaryChildProps), nextProps.subtreeFlags = didSuspend.subtreeFlags & 31457280);
      null !== currentFallbackChildFragment ? nextPrimaryChildren = createWorkInProgress(currentFallbackChildFragment, nextPrimaryChildren) : (nextPrimaryChildren = createFiberFromFragment(nextPrimaryChildren, showFallback, renderLanes, null), nextPrimaryChildren.flags |= 2);
      nextPrimaryChildren.return = workInProgress;
      nextProps.return = workInProgress;
      nextProps.sibling = nextPrimaryChildren;
      workInProgress.child = nextProps;
      nextProps = nextPrimaryChildren;
      nextPrimaryChildren = workInProgress.child;
      showFallback = current.child.memoizedState;
      null === showFallback ? showFallback = mountSuspenseOffscreenState(renderLanes) : (didSuspend = showFallback.cachePool, null !== didSuspend ? (currentFallbackChildFragment = CacheContext._currentValue, didSuspend = didSuspend.parent !== currentFallbackChildFragment ? {
        parent: currentFallbackChildFragment,
        pool: currentFallbackChildFragment
      } : didSuspend) : didSuspend = getSuspendedCache(), showFallback = {
        baseLanes: showFallback.baseLanes | renderLanes,
        cachePool: didSuspend
      });
      nextPrimaryChildren.memoizedState = showFallback;
      nextPrimaryChildren.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return nextProps;
    }
    pushPrimaryTreeSuspenseHandler(workInProgress);
    JSCompiler_temp = current.child;
    current = JSCompiler_temp.sibling;
    JSCompiler_temp = createWorkInProgress(JSCompiler_temp, {
      mode: "visible",
      children: nextProps.children
    });
    0 === (workInProgress.mode & 1) && (JSCompiler_temp.lanes = renderLanes);
    JSCompiler_temp.return = workInProgress;
    JSCompiler_temp.sibling = null;
    null !== current && (renderLanes = workInProgress.deletions, null === renderLanes ? (workInProgress.deletions = [current], workInProgress.flags |= 16) : renderLanes.push(current));
    workInProgress.child = JSCompiler_temp;
    workInProgress.memoizedState = null;
    return JSCompiler_temp;
  }
  function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
    primaryChildren = createFiberFromOffscreen({
      mode: "visible",
      children: primaryChildren
    }, workInProgress.mode, 0, null);
    primaryChildren.return = workInProgress;
    return workInProgress.child = primaryChildren;
  }
  function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes) {
    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
    current = mountSuspensePrimaryChildren(workInProgress, workInProgress.pendingProps.children);
    current.flags |= 2;
    workInProgress.memoizedState = null;
    return current;
  }
  function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
    fiber.lanes |= renderLanes;
    var alternate = fiber.alternate;
    null !== alternate && (alternate.lanes |= renderLanes);
    scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
  }
  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
    var renderState = workInProgress.memoizedState;
    null === renderState ? workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailMode: tailMode
    } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
  }
  function updateSuspenseListComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps,
      revealOrder = nextProps.revealOrder,
      tailMode = nextProps.tail;
    reconcileChildren(current, workInProgress, nextProps.children, renderLanes);
    nextProps = suspenseStackCursor.current;
    if (0 !== (nextProps & 2)) nextProps = nextProps & 1 | 2, workInProgress.flags |= 128;else {
      if (null !== current && 0 !== (current.flags & 128)) a: for (current = workInProgress.child; null !== current;) {
        if (13 === current.tag) null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);else if (19 === current.tag) scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);else if (null !== current.child) {
          current.child.return = current;
          current = current.child;
          continue;
        }
        if (current === workInProgress) break a;
        for (; null === current.sibling;) {
          if (null === current.return || current.return === workInProgress) break a;
          current = current.return;
        }
        current.sibling.return = current.return;
        current = current.sibling;
      }
      nextProps &= 1;
    }
    push(suspenseStackCursor, nextProps);
    if (0 === (workInProgress.mode & 1)) workInProgress.memoizedState = null;else switch (revealOrder) {
      case "forwards":
        renderLanes = workInProgress.child;
        for (revealOrder = null; null !== renderLanes;) current = renderLanes.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes), renderLanes = renderLanes.sibling;
        renderLanes = revealOrder;
        null === renderLanes ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderLanes.sibling, renderLanes.sibling = null);
        initSuspenseListRenderState(workInProgress, false, revealOrder, renderLanes, tailMode);
        break;
      case "backwards":
        renderLanes = null;
        revealOrder = workInProgress.child;
        for (workInProgress.child = null; null !== revealOrder;) {
          current = revealOrder.alternate;
          if (null !== current && null === findFirstSuspended(current)) {
            workInProgress.child = revealOrder;
            break;
          }
          current = revealOrder.sibling;
          revealOrder.sibling = renderLanes;
          renderLanes = revealOrder;
          revealOrder = current;
        }
        initSuspenseListRenderState(workInProgress, true, renderLanes, null, tailMode);
        break;
      case "together":
        initSuspenseListRenderState(workInProgress, false, null, null, undefined);
        break;
      default:
        workInProgress.memoizedState = null;
    }
    return workInProgress.child;
  }
  function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
    0 === (workInProgress.mode & 1) && null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.flags |= 2);
  }
  function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
    null !== current && (workInProgress.dependencies = current.dependencies);
    workInProgressRootSkippedLanes |= workInProgress.lanes;
    if (0 === (renderLanes & workInProgress.childLanes)) if (null !== current) {
      if (propagateParentContextChanges(current, workInProgress, renderLanes, false), 0 === (renderLanes & workInProgress.childLanes)) return null;
    } else return null;
    if (null !== current && workInProgress.child !== current.child) throw Error("Resuming work not yet implemented.");
    if (null !== workInProgress.child) {
      current = workInProgress.child;
      renderLanes = createWorkInProgress(current, current.pendingProps);
      workInProgress.child = renderLanes;
      for (renderLanes.return = workInProgress; null !== current.sibling;) current = current.sibling, renderLanes = renderLanes.sibling = createWorkInProgress(current, current.pendingProps), renderLanes.return = workInProgress;
      renderLanes.sibling = null;
    }
    return workInProgress.child;
  }
  function checkScheduledUpdateOrContext(current, renderLanes) {
    if (0 !== (current.lanes & renderLanes)) return true;
    current = current.dependencies;
    return null !== current && checkIfContextChanged(current) ? true : false;
  }
  function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
    switch (workInProgress.tag) {
      case 3:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
        break;
      case 27:
      case 5:
        pushHostContext(workInProgress);
        break;
      case 4:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        break;
      case 10:
        pushProvider(workInProgress, workInProgress.type, workInProgress.memoizedProps.value);
        break;
      case 13:
        var state = workInProgress.memoizedState;
        if (null !== state) {
          if (null !== state.dehydrated) return pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags |= 128, null;
          if (0 !== (renderLanes & workInProgress.child.childLanes)) return updateSuspenseComponent(current, workInProgress, renderLanes);
          pushPrimaryTreeSuspenseHandler(workInProgress);
          current = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          return null !== current ? current.sibling : null;
        }
        pushPrimaryTreeSuspenseHandler(workInProgress);
        break;
      case 19:
        var didSuspendBefore = 0 !== (current.flags & 128);
        state = 0 !== (renderLanes & workInProgress.childLanes);
        state || (propagateParentContextChanges(current, workInProgress, renderLanes, false), state = 0 !== (renderLanes & workInProgress.childLanes));
        if (didSuspendBefore) {
          if (state) return updateSuspenseListComponent(current, workInProgress, renderLanes);
          workInProgress.flags |= 128;
        }
        didSuspendBefore = workInProgress.memoizedState;
        null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
        push(suspenseStackCursor, suspenseStackCursor.current);
        if (state) break;else return null;
      case 22:
      case 23:
        return workInProgress.lanes = 0, updateOffscreenComponent(current, workInProgress, renderLanes);
      case 24:
        pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
    }
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }
  function beginWork(current, workInProgress, renderLanes) {
    if (null !== current) {
      if (current.memoizedProps !== workInProgress.pendingProps) didReceiveUpdate = true;else {
        if (!checkScheduledUpdateOrContext(current, renderLanes) && 0 === (workInProgress.flags & 128)) return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
        didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
      }
    } else didReceiveUpdate = false;
    workInProgress.lanes = 0;
    switch (workInProgress.tag) {
      case 16:
        var elementType = workInProgress.elementType;
        a: {
          resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
          current = workInProgress.pendingProps;
          var init = elementType._init;
          elementType = init(elementType._payload);
          workInProgress.type = elementType;
          if ("function" === typeof elementType) shouldConstruct(elementType) ? (current = resolveClassComponentProps(elementType, current), workInProgress.tag = 1, workInProgress = updateClassComponent(null, workInProgress, elementType, current, renderLanes)) : (workInProgress.tag = 0, workInProgress = updateFunctionComponent(null, workInProgress, elementType, current, renderLanes));else {
            if (undefined !== elementType && null !== elementType) if (init = elementType.$$typeof, init === REACT_FORWARD_REF_TYPE) {
              workInProgress.tag = 11;
              workInProgress = updateForwardRef(null, workInProgress, elementType, current, renderLanes);
              break a;
            } else if (init === REACT_MEMO_TYPE) {
              workInProgress.tag = 14;
              workInProgress = updateMemoComponent(null, workInProgress, elementType, current, renderLanes);
              break a;
            }
            workInProgress = getComponentNameFromType(elementType) || elementType;
            throw Error("Element type is invalid. Received a promise that resolves to: " + workInProgress + ". Lazy element type must resolve to a class or function.");
          }
        }
        return workInProgress;
      case 0:
        return updateFunctionComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      case 1:
        return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), updateClassComponent(current, workInProgress, elementType, init, renderLanes);
      case 3:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        if (null === current) throw Error("Should have a current fiber. This is a bug in React.");
        var nextProps = workInProgress.pendingProps;
        init = workInProgress.memoizedState;
        elementType = init.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
        nextProps = workInProgress.memoizedState;
        var nextCache = nextProps.cache;
        pushProvider(workInProgress, CacheContext, nextCache);
        nextCache !== init.cache && propagateContextChanges(workInProgress, [CacheContext], renderLanes, true);
        suspendIfUpdateReadFromEntangledAsyncAction();
        init = nextProps.element;
        init === elementType ? workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) : (reconcileChildren(current, workInProgress, init, renderLanes), workInProgress = workInProgress.child);
        return workInProgress;
      case 26:
      case 27:
      case 5:
        return pushHostContext(workInProgress), elementType = workInProgress.pendingProps.children, null !== workInProgress.memoizedState && (init = renderWithHooks(current, workInProgress, TransitionAwareHostComponent, null, null, renderLanes), HostTransitionContext._currentValue = init), markRef(current, workInProgress), reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
      case 6:
        return null;
      case 13:
        return updateSuspenseComponent(current, workInProgress, renderLanes);
      case 4:
        return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), elementType = workInProgress.pendingProps, null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, elementType, renderLanes) : reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
      case 11:
        return updateForwardRef(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      case 7:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderLanes), workInProgress.child;
      case 8:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
      case 12:
        return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
      case 10:
        return elementType = workInProgress.pendingProps, pushProvider(workInProgress, workInProgress.type, elementType.value), reconcileChildren(current, workInProgress, elementType.children, renderLanes), workInProgress.child;
      case 9:
        return init = workInProgress.type._context, elementType = workInProgress.pendingProps.children, prepareToReadContext(workInProgress), init = readContext(init), elementType = elementType(init), workInProgress.flags |= 1, reconcileChildren(current, workInProgress, elementType, renderLanes), workInProgress.child;
      case 14:
        return updateMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      case 15:
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
      case 17:
        return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 1, prepareToReadContext(workInProgress), constructClassInstance(workInProgress, elementType, init), mountClassInstance(workInProgress, elementType, init, renderLanes), finishClassComponent(null, workInProgress, elementType, true, false, renderLanes);
      case 28:
        return elementType = workInProgress.type, init = resolveClassComponentProps(elementType, workInProgress.pendingProps), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 0, updateFunctionComponent(null, workInProgress, elementType, init, renderLanes);
      case 19:
        return updateSuspenseListComponent(current, workInProgress, renderLanes);
      case 22:
        return updateOffscreenComponent(current, workInProgress, renderLanes);
      case 24:
        return prepareToReadContext(workInProgress), elementType = readContext(CacheContext), null === current ? (init = peekCacheFromPool(), null === init && (init = workInProgressRoot, nextProps = createCache(), init.pooledCache = nextProps, nextProps.refCount++, null !== nextProps && (init.pooledCacheLanes |= renderLanes), init = nextProps), workInProgress.memoizedState = {
          parent: elementType,
          cache: init
        }, initializeUpdateQueue(workInProgress), pushProvider(workInProgress, CacheContext, init)) : (0 !== (current.lanes & renderLanes) && (cloneUpdateQueue(current, workInProgress), processUpdateQueue(workInProgress, null, null, renderLanes), suspendIfUpdateReadFromEntangledAsyncAction()), init = current.memoizedState, nextProps = workInProgress.memoizedState, init.parent !== elementType ? (init = {
          parent: elementType,
          cache: elementType
        }, workInProgress.memoizedState = init, 0 === workInProgress.lanes && (workInProgress.memoizedState = workInProgress.updateQueue.baseState = init), pushProvider(workInProgress, CacheContext, elementType)) : (elementType = nextProps.cache, pushProvider(workInProgress, CacheContext, elementType), elementType !== init.cache && propagateContextChanges(workInProgress, [CacheContext], renderLanes, true))), reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
      case 29:
        throw workInProgress.pendingProps;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  }
  var valueCursor = createCursor(null),
    currentlyRenderingFiber = null,
    lastContextDependency = null;
  function pushProvider(providerFiber, context, nextValue) {
    push(valueCursor, context._currentValue);
    context._currentValue = nextValue;
  }
  function popProvider(context) {
    context._currentValue = valueCursor.current;
    pop(valueCursor);
  }
  function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
    for (; null !== parent;) {
      var alternate = parent.alternate;
      (parent.childLanes & renderLanes) !== renderLanes ? (parent.childLanes |= renderLanes, null !== alternate && (alternate.childLanes |= renderLanes)) : null !== alternate && (alternate.childLanes & renderLanes) !== renderLanes && (alternate.childLanes |= renderLanes);
      if (parent === propagationRoot) break;
      parent = parent.return;
    }
  }
  function propagateContextChanges(workInProgress, contexts, renderLanes, forcePropagateEntireTree) {
    var fiber = workInProgress.child;
    null !== fiber && (fiber.return = workInProgress);
    for (; null !== fiber;) {
      var list = fiber.dependencies;
      if (null !== list) {
        var nextFiber = fiber.child;
        list = list.firstContext;
        a: for (; null !== list;) {
          var dependency = list;
          list = fiber;
          for (var i = 0; i < contexts.length; i++) if (dependency.context === contexts[i]) {
            list.lanes |= renderLanes;
            dependency = list.alternate;
            null !== dependency && (dependency.lanes |= renderLanes);
            scheduleContextWorkOnParentPath(list.return, renderLanes, workInProgress);
            forcePropagateEntireTree || (nextFiber = null);
            break a;
          }
          list = dependency.next;
        }
      } else if (18 === fiber.tag) {
        nextFiber = fiber.return;
        if (null === nextFiber) throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
        nextFiber.lanes |= renderLanes;
        list = nextFiber.alternate;
        null !== list && (list.lanes |= renderLanes);
        scheduleContextWorkOnParentPath(nextFiber, renderLanes, workInProgress);
        nextFiber = null;
      } else nextFiber = fiber.child;
      if (null !== nextFiber) nextFiber.return = fiber;else for (nextFiber = fiber; null !== nextFiber;) {
        if (nextFiber === workInProgress) {
          nextFiber = null;
          break;
        }
        fiber = nextFiber.sibling;
        if (null !== fiber) {
          fiber.return = nextFiber.return;
          nextFiber = fiber;
          break;
        }
        nextFiber = nextFiber.return;
      }
      fiber = nextFiber;
    }
  }
  function propagateParentContextChanges(current, workInProgress, renderLanes, forcePropagateEntireTree) {
    current = null;
    for (var parent = workInProgress, isInsidePropagationBailout = false; null !== parent;) {
      if (!isInsidePropagationBailout) if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true;else if (0 !== (parent.flags & 262144)) break;
      if (10 === parent.tag) {
        var currentParent = parent.alternate;
        if (null === currentParent) throw Error("Should have a current fiber. This is a bug in React.");
        currentParent = currentParent.memoizedProps;
        if (null !== currentParent) {
          var context = parent.type;
          objectIs(parent.pendingProps.value, currentParent.value) || (null !== current ? current.push(context) : current = [context]);
        }
      } else if (parent === hostTransitionProviderCursor.current) {
        currentParent = parent.alternate;
        if (null === currentParent) throw Error("Should have a current fiber. This is a bug in React.");
        currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current ? current.push(HostTransitionContext) : current = [HostTransitionContext]);
      }
      parent = parent.return;
    }
    null !== current && propagateContextChanges(workInProgress, current, renderLanes, forcePropagateEntireTree);
    workInProgress.flags |= 262144;
  }
  function checkIfContextChanged(currentDependencies) {
    for (currentDependencies = currentDependencies.firstContext; null !== currentDependencies;) {
      if (!objectIs(currentDependencies.context._currentValue, currentDependencies.memoizedValue)) return true;
      currentDependencies = currentDependencies.next;
    }
    return false;
  }
  function prepareToReadContext(workInProgress) {
    currentlyRenderingFiber = workInProgress;
    lastContextDependency = null;
    workInProgress = workInProgress.dependencies;
    null !== workInProgress && (workInProgress.firstContext = null);
  }
  function readContext(context) {
    return readContextForConsumer(currentlyRenderingFiber, context);
  }
  function readContextDuringReconciliation(consumer, context) {
    null === currentlyRenderingFiber && prepareToReadContext(consumer);
    return readContextForConsumer(consumer, context);
  }
  function readContextForConsumer(consumer, context) {
    var value = context._currentValue;
    context = {
      context: context,
      memoizedValue: value,
      next: null
    };
    if (null === lastContextDependency) {
      if (null === consumer) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      lastContextDependency = context;
      consumer.dependencies = {
        lanes: 0,
        firstContext: context
      };
      consumer.flags |= 524288;
    } else lastContextDependency = lastContextDependency.next = context;
    return value;
  }
  var AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function () {
      var listeners = [],
        signal = this.signal = {
          aborted: false,
          addEventListener: function (type, listener) {
            listeners.push(listener);
          }
        };
      this.abort = function () {
        signal.aborted = true;
        listeners.forEach(function (listener) {
          return listener();
        });
      };
    },
    scheduleCallback$1 = Scheduler.unstable_scheduleCallback,
    NormalPriority = Scheduler.unstable_NormalPriority,
    CacheContext = {
      $$typeof: REACT_CONTEXT_TYPE,
      Consumer: null,
      Provider: null,
      _currentValue: null,
      _currentValue2: null,
      _threadCount: 0
    };
  function createCache() {
    return {
      controller: new AbortControllerLocal(),
      data: new Map(),
      refCount: 0
    };
  }
  function releaseCache(cache) {
    cache.refCount--;
    0 === cache.refCount && scheduleCallback$1(NormalPriority, function () {
      cache.controller.abort();
    });
  }
  var prevOnStartTransitionFinish = ReactSharedInternals.S;
  ReactSharedInternals.S = function (transition, returnValue) {
    "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
    null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
  };
  var resumedCache = createCursor(null);
  function peekCacheFromPool() {
    var cacheResumedFromPreviousRender = resumedCache.current;
    return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
  }
  function pushTransition(offscreenWorkInProgress, prevCachePool) {
    null === prevCachePool ? push(resumedCache, resumedCache.current) : push(resumedCache, prevCachePool.pool);
  }
  function getSuspendedCache() {
    var cacheFromPool = peekCacheFromPool();
    return null === cacheFromPool ? null : {
      parent: CacheContext._currentValue,
      pool: cacheFromPool
    };
  }
  function scheduleRetryEffect(workInProgress, retryQueue) {
    null !== retryQueue && (workInProgress.flags |= 4);
    workInProgress.flags & 16384 && (retryQueue = 22 !== workInProgress.tag ? claimNextRetryLane() : 536870912, workInProgress.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
  }
  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;
        for (var lastTailNode = null; null !== hasRenderedATailFallback;) null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
        break;
      case "collapsed":
        lastTailNode = renderState.tail;
        for (var lastTailNode$92 = null; null !== lastTailNode;) null !== lastTailNode.alternate && (lastTailNode$92 = lastTailNode), lastTailNode = lastTailNode.sibling;
        null === lastTailNode$92 ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$92.sibling = null;
    }
  }
  function bubbleProperties(completedWork) {
    var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child,
      newChildLanes = 0,
      subtreeFlags = 0;
    if (didBailout) for (var child$93 = completedWork.child; null !== child$93;) newChildLanes |= child$93.lanes | child$93.childLanes, subtreeFlags |= child$93.subtreeFlags & 31457280, subtreeFlags |= child$93.flags & 31457280, child$93.return = completedWork, child$93 = child$93.sibling;else for (child$93 = completedWork.child; null !== child$93;) newChildLanes |= child$93.lanes | child$93.childLanes, subtreeFlags |= child$93.subtreeFlags, subtreeFlags |= child$93.flags, child$93.return = completedWork, child$93 = child$93.sibling;
    completedWork.subtreeFlags |= subtreeFlags;
    completedWork.childLanes = newChildLanes;
    return didBailout;
  }
  function completeWork(current, workInProgress, renderLanes) {
    var newProps = workInProgress.pendingProps;
    switch (workInProgress.tag) {
      case 28:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return bubbleProperties(workInProgress), null;
      case 1:
        return bubbleProperties(workInProgress), null;
      case 3:
        return renderLanes = workInProgress.stateNode, newProps = null, null !== current && (newProps = current.memoizedState.cache), workInProgress.memoizedState.cache !== newProps && (workInProgress.flags |= 2048), popProvider(CacheContext), popHostContainer(), renderLanes.pendingContext && (renderLanes.context = renderLanes.pendingContext, renderLanes.pendingContext = null), null !== current && null !== current.child || null === current || current.memoizedState.isDehydrated && 0 === (workInProgress.flags & 256) || (workInProgress.flags |= 1024, null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null)), bubbleProperties(workInProgress), null;
      case 26:
      case 27:
      case 5:
        popHostContext(workInProgress);
        var type = workInProgress.type;
        if (null !== current && null != workInProgress.stateNode) current.memoizedProps !== newProps && (workInProgress.flags |= 4);else {
          if (!newProps) {
            if (null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            bubbleProperties(workInProgress);
            return null;
          }
          renderLanes = rootInstanceStackCursor.current;
          current = allocateTag();
          type = getViewConfigForType(type);
          var updatePayload = diffProperties(null, emptyObject, newProps, type.validAttributes);
          ReactNativePrivateInterface.UIManager.createView(current, type.uiViewClassName, renderLanes, updatePayload);
          renderLanes = new ReactNativeFiberHostComponent(current, type, workInProgress);
          instanceCache.set(current, workInProgress);
          instanceProps.set(current, newProps);
          a: for (current = workInProgress.child; null !== current;) {
            if (5 === current.tag || 6 === current.tag) renderLanes._children.push(current.stateNode);else if (4 !== current.tag && null !== current.child) {
              current.child.return = current;
              current = current.child;
              continue;
            }
            if (current === workInProgress) break a;
            for (; null === current.sibling;) {
              if (null === current.return || current.return === workInProgress) break a;
              current = current.return;
            }
            current.sibling.return = current.return;
            current = current.sibling;
          }
          workInProgress.stateNode = renderLanes;
          finalizeInitialChildren(renderLanes) && (workInProgress.flags |= 4);
        }
        bubbleProperties(workInProgress);
        workInProgress.flags &= -16777217;
        return null;
      case 6:
        if (current && null != workInProgress.stateNode) current.memoizedProps !== newProps && (workInProgress.flags |= 4);else {
          if ("string" !== typeof newProps && null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
          current = rootInstanceStackCursor.current;
          if (!contextStackCursor.current.isInAParentText) throw Error("Text strings must be rendered within a <Text> component.");
          renderLanes = allocateTag();
          ReactNativePrivateInterface.UIManager.createView(renderLanes, "RCTRawText", current, {
            text: newProps
          });
          instanceCache.set(renderLanes, workInProgress);
          workInProgress.stateNode = renderLanes;
        }
        bubbleProperties(workInProgress);
        return null;
      case 13:
        newProps = workInProgress.memoizedState;
        if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
          if (null !== newProps && null !== newProps.dehydrated) {
            if (null === current) {
              throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              throw Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
            }
            0 === (workInProgress.flags & 128) && (workInProgress.memoizedState = null);
            workInProgress.flags |= 4;
            bubbleProperties(workInProgress);
            type = false;
          } else null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null), type = true;
          if (!type) {
            if (workInProgress.flags & 256) return popSuspenseHandler(workInProgress), workInProgress;
            popSuspenseHandler(workInProgress);
            return null;
          }
        }
        popSuspenseHandler(workInProgress);
        if (0 !== (workInProgress.flags & 128)) return workInProgress.lanes = renderLanes, workInProgress;
        renderLanes = null !== newProps;
        current = null !== current && null !== current.memoizedState;
        renderLanes && (newProps = workInProgress.child, type = null, null !== newProps.alternate && null !== newProps.alternate.memoizedState && null !== newProps.alternate.memoizedState.cachePool && (type = newProps.alternate.memoizedState.cachePool.pool), updatePayload = null, null !== newProps.memoizedState && null !== newProps.memoizedState.cachePool && (updatePayload = newProps.memoizedState.cachePool.pool), updatePayload !== type && (newProps.flags |= 2048));
        renderLanes !== current && renderLanes && (workInProgress.child.flags |= 8192);
        scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
        bubbleProperties(workInProgress);
        return null;
      case 4:
        return popHostContainer(), bubbleProperties(workInProgress), null;
      case 10:
        return popProvider(workInProgress.type), bubbleProperties(workInProgress), null;
      case 17:
        return bubbleProperties(workInProgress), null;
      case 19:
        pop(suspenseStackCursor);
        type = workInProgress.memoizedState;
        if (null === type) return bubbleProperties(workInProgress), null;
        newProps = 0 !== (workInProgress.flags & 128);
        updatePayload = type.rendering;
        if (null === updatePayload) {
          if (newProps) cutOffTailIfNeeded(type, false);else {
            if (0 !== workInProgressRootExitStatus || null !== current && 0 !== (current.flags & 128)) for (current = workInProgress.child; null !== current;) {
              updatePayload = findFirstSuspended(current);
              if (null !== updatePayload) {
                workInProgress.flags |= 128;
                cutOffTailIfNeeded(type, false);
                current = updatePayload.updateQueue;
                workInProgress.updateQueue = current;
                scheduleRetryEffect(workInProgress, current);
                workInProgress.subtreeFlags = 0;
                current = renderLanes;
                for (renderLanes = workInProgress.child; null !== renderLanes;) resetWorkInProgress(renderLanes, current), renderLanes = renderLanes.sibling;
                push(suspenseStackCursor, suspenseStackCursor.current & 1 | 2);
                return workInProgress.child;
              }
              current = current.sibling;
            }
            null !== type.tail && now() > workInProgressRootRenderTargetTime && (workInProgress.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress.lanes = 4194304);
          }
        } else {
          if (!newProps) if (current = findFirstSuspended(updatePayload), null !== current) {
            if (workInProgress.flags |= 128, newProps = true, current = current.updateQueue, workInProgress.updateQueue = current, scheduleRetryEffect(workInProgress, current), cutOffTailIfNeeded(type, true), null === type.tail && "hidden" === type.tailMode && !updatePayload.alternate) return bubbleProperties(workInProgress), null;
          } else 2 * now() - type.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes && (workInProgress.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress.lanes = 4194304);
          type.isBackwards ? (updatePayload.sibling = workInProgress.child, workInProgress.child = updatePayload) : (current = type.last, null !== current ? current.sibling = updatePayload : workInProgress.child = updatePayload, type.last = updatePayload);
        }
        if (null !== type.tail) return workInProgress = type.tail, type.rendering = workInProgress, type.tail = workInProgress.sibling, type.renderingStartTime = now(), workInProgress.sibling = null, current = suspenseStackCursor.current, push(suspenseStackCursor, newProps ? current & 1 | 2 : current & 1), workInProgress;
        bubbleProperties(workInProgress);
        return null;
      case 22:
      case 23:
        return popSuspenseHandler(workInProgress), popHiddenContext(), newProps = null !== workInProgress.memoizedState, null !== current ? null !== current.memoizedState !== newProps && (workInProgress.flags |= 8192) : newProps && (workInProgress.flags |= 8192), newProps && 0 !== (workInProgress.mode & 1) ? 0 !== (renderLanes & 536870912) && 0 === (workInProgress.flags & 128) && (bubbleProperties(workInProgress), workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192)) : bubbleProperties(workInProgress), renderLanes = workInProgress.updateQueue, null !== renderLanes && scheduleRetryEffect(workInProgress, renderLanes.retryQueue), renderLanes = null, null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (renderLanes = current.memoizedState.cachePool.pool), newProps = null, null !== workInProgress.memoizedState && null !== workInProgress.memoizedState.cachePool && (newProps = workInProgress.memoizedState.cachePool.pool), newProps !== renderLanes && (workInProgress.flags |= 2048), null !== current && pop(resumedCache), null;
      case 24:
        return renderLanes = null, null !== current && (renderLanes = current.memoizedState.cache), workInProgress.memoizedState.cache !== renderLanes && (workInProgress.flags |= 2048), popProvider(CacheContext), bubbleProperties(workInProgress), null;
      case 25:
        return null;
      case 29:
        return null;
    }
    throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
  }
  function unwindWork(current, workInProgress) {
    switch (workInProgress.tag) {
      case 1:
        return current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 3:
        return popProvider(CacheContext), popHostContainer(), current = workInProgress.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 26:
      case 27:
      case 5:
        return popHostContext(workInProgress), null;
      case 13:
        popSuspenseHandler(workInProgress);
        current = workInProgress.memoizedState;
        if (null !== current && null !== current.dehydrated && null === workInProgress.alternate) throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
        current = workInProgress.flags;
        return current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 19:
        return pop(suspenseStackCursor), null;
      case 4:
        return popHostContainer(), null;
      case 10:
        return popProvider(workInProgress.type), null;
      case 22:
      case 23:
        return popSuspenseHandler(workInProgress), popHiddenContext(), null !== current && pop(resumedCache), current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
      case 24:
        return popProvider(CacheContext), null;
      case 25:
        return null;
      default:
        return null;
    }
  }
  function unwindInterruptedWork(current, interruptedWork) {
    switch (interruptedWork.tag) {
      case 3:
        popProvider(CacheContext);
        popHostContainer();
        break;
      case 26:
      case 27:
      case 5:
        popHostContext(interruptedWork);
        break;
      case 4:
        popHostContainer();
        break;
      case 13:
        popSuspenseHandler(interruptedWork);
        break;
      case 19:
        pop(suspenseStackCursor);
        break;
      case 10:
        popProvider(interruptedWork.type);
        break;
      case 22:
      case 23:
        popSuspenseHandler(interruptedWork);
        popHiddenContext();
        null !== current && pop(resumedCache);
        break;
      case 24:
        popProvider(CacheContext);
    }
  }
  function commitHookEffectListMount(flags, finishedWork) {
    try {
      var updateQueue = finishedWork.updateQueue,
        lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
      if (null !== lastEffect) {
        var firstEffect = lastEffect.next;
        updateQueue = firstEffect;
        do {
          if ((updateQueue.tag & flags) === flags) {
            lastEffect = undefined;
            var create$114 = updateQueue.create,
              inst = updateQueue.inst;
            lastEffect = create$114();
            inst.destroy = lastEffect;
          }
          updateQueue = updateQueue.next;
        } while (updateQueue !== firstEffect);
      }
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
  }
  function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor$jscomp$0) {
    try {
      var updateQueue = finishedWork.updateQueue,
        lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
      if (null !== lastEffect) {
        var firstEffect = lastEffect.next;
        updateQueue = firstEffect;
        do {
          if ((updateQueue.tag & flags) === flags) {
            var inst = updateQueue.inst,
              destroy = inst.destroy;
            if (undefined !== destroy) {
              inst.destroy = undefined;
              lastEffect = finishedWork;
              var nearestMountedAncestor = nearestMountedAncestor$jscomp$0;
              try {
                destroy();
              } catch (error) {
                captureCommitPhaseError(lastEffect, nearestMountedAncestor, error);
              }
            }
          }
          updateQueue = updateQueue.next;
        } while (updateQueue !== firstEffect);
      }
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
  }
  function commitClassCallbacks(finishedWork) {
    var updateQueue = finishedWork.updateQueue;
    if (null !== updateQueue) {
      var instance = finishedWork.stateNode;
      try {
        commitCallbacks(updateQueue, instance);
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
    }
  }
  function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
    instance.props = resolveClassComponentProps(current.type, current.memoizedProps);
    instance.state = current.memoizedState;
    try {
      instance.componentWillUnmount();
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
  }
  function safelyAttachRef(current, nearestMountedAncestor) {
    try {
      var ref = current.ref;
      if (null !== ref) {
        var instance = current.stateNode;
        switch (current.tag) {
          case 26:
          case 27:
          case 5:
            var instanceToUse = getPublicInstance(instance);
            break;
          default:
            instanceToUse = instance;
        }
        "function" === typeof ref ? current.refCleanup = ref(instanceToUse) : ref.current = instanceToUse;
      }
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    }
  }
  function safelyDetachRef(current, nearestMountedAncestor) {
    var ref = current.ref,
      refCleanup = current.refCleanup;
    if (null !== ref) if ("function" === typeof refCleanup) try {
      refCleanup();
    } catch (error) {
      captureCommitPhaseError(current, nearestMountedAncestor, error);
    } finally {
      current.refCleanup = null, current = current.alternate, null != current && (current.refCleanup = null);
    } else if ("function" === typeof ref) try {
      ref(null);
    } catch (error$116) {
      captureCommitPhaseError(current, nearestMountedAncestor, error$116);
    } else ref.current = null;
  }
  function isHostParent(fiber) {
    return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
  }
  function getHostSibling(fiber) {
    a: for (;;) {
      for (; null === fiber.sibling;) {
        if (null === fiber.return || isHostParent(fiber.return)) return null;
        fiber = fiber.return;
      }
      fiber.sibling.return = fiber.return;
      for (fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag;) {
        if (fiber.flags & 2) continue a;
        if (null === fiber.child || 4 === fiber.tag) continue a;else fiber.child.return = fiber, fiber = fiber.child;
      }
      if (!(fiber.flags & 2)) return fiber.stateNode;
    }
  }
  function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
    var tag = node.tag;
    if (5 === tag || 6 === tag) {
      if (node = node.stateNode, before) {
        if ("number" === typeof parent) throw Error("Container does not support insertBefore operation");
      } else ReactNativePrivateInterface.UIManager.setChildren(parent, ["number" === typeof node ? node : node._nativeTag]);
    } else if (4 !== tag && (node = node.child, null !== node)) for (insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling; null !== node;) insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
  }
  function insertOrAppendPlacementNode(node, before, parent) {
    var tag = node.tag;
    if (5 === tag || 6 === tag) {
      if (node = node.stateNode, before) {
        tag = parent._children;
        var index = tag.indexOf(node);
        0 <= index ? (tag.splice(index, 1), before = tag.indexOf(before), tag.splice(before, 0, node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [index], [before], [], [], [])) : (before = tag.indexOf(before), tag.splice(before, 0, node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [], [], ["number" === typeof node ? node : node._nativeTag], [before], []));
      } else before = "number" === typeof node ? node : node._nativeTag, tag = parent._children, index = tag.indexOf(node), 0 <= index ? (tag.splice(index, 1), tag.push(node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [index], [tag.length - 1], [], [], [])) : (tag.push(node), ReactNativePrivateInterface.UIManager.manageChildren(parent._nativeTag, [], [], [before], [tag.length - 1], []));
    } else if (4 !== tag && (node = node.child, null !== node)) for (insertOrAppendPlacementNode(node, before, parent), node = node.sibling; null !== node;) insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
  }
  var offscreenSubtreeIsHidden = false,
    offscreenSubtreeWasHidden = false,
    PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
    nextEffect = null,
    shouldFireAfterActiveInstanceBlur = false;
  function commitBeforeMutationEffects(root, firstChild) {
    for (nextEffect = firstChild; null !== nextEffect;) if (root = nextEffect, firstChild = root.child, 0 !== (root.subtreeFlags & 1028) && null !== firstChild) firstChild.return = root, nextEffect = firstChild;else for (; null !== nextEffect;) {
      root = nextEffect;
      var current = root.alternate;
      firstChild = root.flags;
      switch (root.tag) {
        case 0:
          break;
        case 11:
        case 15:
          break;
        case 1:
          if (0 !== (firstChild & 1024) && null !== current) {
            firstChild = undefined;
            var finishedWork = root,
              prevProps = current.memoizedProps;
            current = current.memoizedState;
            var instance = finishedWork.stateNode;
            try {
              var resolvedPrevProps = resolveClassComponentProps(finishedWork.type, prevProps, finishedWork.elementType === finishedWork.type);
              firstChild = instance.getSnapshotBeforeUpdate(resolvedPrevProps, current);
              instance.__reactInternalSnapshotBeforeUpdate = firstChild;
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          break;
        case 3:
          break;
        case 5:
        case 26:
        case 27:
        case 6:
        case 4:
        case 17:
          break;
        default:
          if (0 !== (firstChild & 1024)) throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
      }
      firstChild = root.sibling;
      if (null !== firstChild) {
        firstChild.return = root.return;
        nextEffect = firstChild;
        break;
      }
      nextEffect = root.return;
    }
    resolvedPrevProps = shouldFireAfterActiveInstanceBlur;
    shouldFireAfterActiveInstanceBlur = false;
    return resolvedPrevProps;
  }
  function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
    var flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        flags & 4 && commitHookEffectListMount(5, finishedWork);
        break;
      case 1:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        if (flags & 4) if (finishedRoot = finishedWork.stateNode, null === current) try {
          finishedRoot.componentDidMount();
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        } else {
          var prevProps = resolveClassComponentProps(finishedWork.type, current.memoizedProps);
          current = current.memoizedState;
          try {
            finishedRoot.componentDidUpdate(prevProps, current, finishedRoot.__reactInternalSnapshotBeforeUpdate);
          } catch (error$115) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$115);
          }
        }
        flags & 64 && commitClassCallbacks(finishedWork);
        flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
        break;
      case 3:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        if (flags & 64 && (flags = finishedWork.updateQueue, null !== flags)) {
          finishedRoot = null;
          if (null !== finishedWork.child) switch (finishedWork.child.tag) {
            case 27:
            case 5:
              finishedRoot = getPublicInstance(finishedWork.child.stateNode);
              break;
            case 1:
              finishedRoot = finishedWork.child.stateNode;
          }
          try {
            commitCallbacks(flags, finishedRoot);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        break;
      case 26:
      case 27:
      case 5:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
        break;
      case 12:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        break;
      case 13:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        break;
      case 22:
        if (0 !== (finishedWork.mode & 1)) {
          if (prevProps = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden, !prevProps) {
            current = null !== current && null !== current.memoizedState || offscreenSubtreeWasHidden;
            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,
              prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = prevProps;
            (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, 0 !== (finishedWork.subtreeFlags & 8772)) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          }
        } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        flags & 512 && ("manual" === finishedWork.memoizedProps.mode ? safelyAttachRef(finishedWork, finishedWork.return) : safelyDetachRef(finishedWork, finishedWork.return));
        break;
      default:
        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
    }
  }
  function detachFiberAfterEffects(fiber) {
    var alternate = fiber.alternate;
    null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
    fiber.child = null;
    fiber.deletions = null;
    fiber.sibling = null;
    fiber.stateNode = null;
    fiber.return = null;
    fiber.dependencies = null;
    fiber.memoizedProps = null;
    fiber.memoizedState = null;
    fiber.pendingProps = null;
    fiber.stateNode = null;
    fiber.updateQueue = null;
  }
  var hostParent = null,
    hostParentIsContainer = false;
  function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
    for (parent = parent.child; null !== parent;) commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
  }
  function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
    if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount) try {
      injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
    } catch (err) {}
    switch (deletedFiber.tag) {
      case 26:
      case 27:
      case 5:
        offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
      case 6:
        var prevHostParent = hostParent,
          prevHostParentIsContainer = hostParentIsContainer;
        hostParent = null;
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        hostParent = prevHostParent;
        hostParentIsContainer = prevHostParentIsContainer;
        if (null !== hostParent) if (hostParentIsContainer) try {
          finishedRoot = hostParent, recursivelyUncacheFiberNode(deletedFiber.stateNode), ReactNativePrivateInterface.UIManager.manageChildren(finishedRoot, [], [], [], [], [0]);
        } catch (error) {
          captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
        } else try {
          finishedRoot = hostParent;
          var child = deletedFiber.stateNode;
          recursivelyUncacheFiberNode(child);
          var children = finishedRoot._children,
            index = children.indexOf(child);
          children.splice(index, 1);
          ReactNativePrivateInterface.UIManager.manageChildren(finishedRoot._nativeTag, [], [], [], [], [index]);
        } catch (error) {
          captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
        }
        break;
      case 18:
        null !== hostParent && shim$1();
        break;
      case 4:
        child = hostParent;
        children = hostParentIsContainer;
        hostParent = deletedFiber.stateNode.containerInfo;
        hostParentIsContainer = true;
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        hostParent = child;
        hostParentIsContainer = children;
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        offscreenSubtreeWasHidden || commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
        offscreenSubtreeWasHidden || commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 1:
        offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), child = deletedFiber.stateNode, "function" === typeof child.componentWillUnmount && safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, child));
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 21:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      case 22:
        offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
        deletedFiber.mode & 1 ? (offscreenSubtreeWasHidden = (child = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), offscreenSubtreeWasHidden = child) : recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        break;
      default:
        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
    }
  }
  function getRetryCache(finishedWork) {
    switch (finishedWork.tag) {
      case 13:
      case 19:
        var retryCache = finishedWork.stateNode;
        null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
        return retryCache;
      case 22:
        return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
      default:
        throw Error("Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a bug in React.");
    }
  }
  function attachSuspenseRetryListeners(finishedWork, wakeables) {
    var retryCache = getRetryCache(finishedWork);
    wakeables.forEach(function (wakeable) {
      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
      retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry));
    });
  }
  function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
    var deletions = parentFiber.deletions;
    if (null !== deletions) for (var i = 0; i < deletions.length; i++) {
      var childToDelete = deletions[i],
        root = root$jscomp$0,
        returnFiber = parentFiber,
        parent = returnFiber;
      a: for (; null !== parent;) {
        switch (parent.tag) {
          case 27:
          case 5:
            hostParent = parent.stateNode;
            hostParentIsContainer = false;
            break a;
          case 3:
            hostParent = parent.stateNode.containerInfo;
            hostParentIsContainer = true;
            break a;
          case 4:
            hostParent = parent.stateNode.containerInfo;
            hostParentIsContainer = true;
            break a;
        }
        parent = parent.return;
      }
      if (null === hostParent) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      commitDeletionEffectsOnFiber(root, returnFiber, childToDelete);
      hostParent = null;
      hostParentIsContainer = false;
      root = childToDelete.alternate;
      null !== root && (root.return = null);
      childToDelete.return = null;
    }
    if (parentFiber.subtreeFlags & 13878) for (parentFiber = parentFiber.child; null !== parentFiber;) commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
  }
  function commitMutationEffectsOnFiber(finishedWork, root) {
    var current = finishedWork.alternate,
      flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 4 && (commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork), commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
        break;
      case 1:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
        if (flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags))) {
          var existingHiddenCallbacks = finishedWork.shared.hiddenCallbacks;
          finishedWork.shared.hiddenCallbacks = null === existingHiddenCallbacks ? flags : existingHiddenCallbacks.concat(flags);
        }
        break;
      case 26:
      case 27:
      case 5:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
        if (flags & 4 && null != finishedWork.stateNode) {
          flags = finishedWork.memoizedProps;
          existingHiddenCallbacks = null !== current ? current.memoizedProps : flags;
          try {
            var instance = finishedWork.stateNode,
              viewConfig = instance.viewConfig;
            instanceProps.set(instance._nativeTag, flags);
            var updatePayload = diffProperties(null, existingHiddenCallbacks, flags, viewConfig.validAttributes);
            null != updatePayload && ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        break;
      case 6:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        if (flags & 4) {
          if (null === finishedWork.stateNode) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
          flags = finishedWork.memoizedProps;
          existingHiddenCallbacks = finishedWork.stateNode;
          try {
            ReactNativePrivateInterface.UIManager.updateView(existingHiddenCallbacks, "RCTRawText", {
              text: flags
            });
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
        break;
      case 3:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 4:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 12:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        break;
      case 13:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        finishedWork.child.flags & 8192 && (existingHiddenCallbacks = null !== current && null !== current.memoizedState, null === finishedWork.memoizedState || existingHiddenCallbacks || (globalMostRecentFallbackTime = now()));
        flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
        break;
      case 22:
        flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
        instance = null !== finishedWork.memoizedState;
        viewConfig = null !== current && null !== current.memoizedState;
        if (finishedWork.mode & 1) {
          updatePayload = offscreenSubtreeIsHidden;
          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
          offscreenSubtreeIsHidden = updatePayload || instance;
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || viewConfig;
          recursivelyTraverseMutationEffects(root, finishedWork);
          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          offscreenSubtreeIsHidden = updatePayload;
        } else recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        root = finishedWork.stateNode;
        root._current = finishedWork;
        root._visibility &= -3;
        root._visibility |= root._pendingVisibility & 2;
        if (flags & 8192 && (root._visibility = instance ? root._visibility & -2 : root._visibility | 1, instance && (root = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden, null === current || viewConfig || root || 0 !== (finishedWork.mode & 1) && recursivelyTraverseDisappearLayoutEffects(finishedWork)), null === finishedWork.memoizedProps || "manual" !== finishedWork.memoizedProps.mode)) a: for (current = null, root = finishedWork;;) {
          if (5 === root.tag) {
            if (null === current) {
              viewConfig = current = root;
              try {
                if (existingHiddenCallbacks = viewConfig.stateNode, instance) {
                  updatePayload = existingHiddenCallbacks;
                  var viewConfig$jscomp$0 = updatePayload.viewConfig;
                  var updatePayload$jscomp$0 = diffProperties(null, emptyObject, {
                    style: {
                      display: "none"
                    }
                  }, viewConfig$jscomp$0.validAttributes);
                  ReactNativePrivateInterface.UIManager.updateView(updatePayload._nativeTag, viewConfig$jscomp$0.uiViewClassName, updatePayload$jscomp$0);
                } else {
                  var instance$jscomp$0 = viewConfig.stateNode,
                    props = viewConfig.memoizedProps,
                    viewConfig$jscomp$1 = instance$jscomp$0.viewConfig,
                    prevProps = assign({}, props, {
                      style: [props.style, {
                        display: "none"
                      }]
                    });
                  var updatePayload$jscomp$1 = diffProperties(null, prevProps, props, viewConfig$jscomp$1.validAttributes);
                  ReactNativePrivateInterface.UIManager.updateView(instance$jscomp$0._nativeTag, viewConfig$jscomp$1.uiViewClassName, updatePayload$jscomp$1);
                }
              } catch (error) {
                captureCommitPhaseError(viewConfig, viewConfig.return, error);
              }
            }
          } else if (6 === root.tag) {
            if (null === current) {
              viewConfig = root;
              try {
                throw Error("Not yet implemented.");
              } catch (error) {
                captureCommitPhaseError(viewConfig, viewConfig.return, error);
              }
            }
          } else if ((22 !== root.tag && 23 !== root.tag || null === root.memoizedState || root === finishedWork) && null !== root.child) {
            root.child.return = root;
            root = root.child;
            continue;
          }
          if (root === finishedWork) break a;
          for (; null === root.sibling;) {
            if (null === root.return || root.return === finishedWork) break a;
            current === root && (current = null);
            root = root.return;
          }
          current === root && (current = null);
          root.sibling.return = root.return;
          root = root.sibling;
        }
        flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (existingHiddenCallbacks = flags.retryQueue, null !== existingHiddenCallbacks && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, existingHiddenCallbacks))));
        break;
      case 19:
        recursivelyTraverseMutationEffects(root, finishedWork);
        commitReconciliationEffects(finishedWork);
        flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
        break;
      case 21:
        break;
      default:
        recursivelyTraverseMutationEffects(root, finishedWork), commitReconciliationEffects(finishedWork);
    }
  }
  function commitReconciliationEffects(finishedWork) {
    var flags = finishedWork.flags;
    if (flags & 2) {
      try {
        a: {
          for (var parent = finishedWork.return; null !== parent;) {
            if (isHostParent(parent)) {
              var JSCompiler_inline_result = parent;
              break a;
            }
            parent = parent.return;
          }
          throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        switch (JSCompiler_inline_result.tag) {
          case 27:
          case 5:
            var parent$jscomp$0 = JSCompiler_inline_result.stateNode;
            JSCompiler_inline_result.flags & 32 && (JSCompiler_inline_result.flags &= -33);
            var before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent$jscomp$0);
            break;
          case 3:
          case 4:
            var parent$117 = JSCompiler_inline_result.stateNode.containerInfo,
              before$118 = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before$118, parent$117);
            break;
          default:
            throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      } catch (error) {
        captureCommitPhaseError(finishedWork, finishedWork.return, error);
      }
      finishedWork.flags &= -3;
    }
    flags & 4096 && (finishedWork.flags &= -4097);
  }
  function recursivelyTraverseLayoutEffects(root, parentFiber) {
    if (parentFiber.subtreeFlags & 8772) for (parentFiber = parentFiber.child; null !== parentFiber;) commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
  }
  function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
    for (parentFiber = parentFiber.child; null !== parentFiber;) {
      var finishedWork = parentFiber;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 1:
          safelyDetachRef(finishedWork, finishedWork.return);
          var instance = finishedWork.stateNode;
          "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 26:
        case 27:
        case 5:
          safelyDetachRef(finishedWork, finishedWork.return);
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        case 22:
          safelyDetachRef(finishedWork, finishedWork.return);
          null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
          break;
        default:
          recursivelyTraverseDisappearLayoutEffects(finishedWork);
      }
      parentFiber = parentFiber.sibling;
    }
  }
  function recursivelyTraverseReappearLayoutEffects(finishedRoot$jscomp$0, parentFiber, includeWorkInProgressEffects) {
    includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
    for (parentFiber = parentFiber.child; null !== parentFiber;) {
      var finishedRoot = finishedRoot$jscomp$0,
        finishedWork = parentFiber,
        flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          commitHookEffectListMount(4, finishedWork);
          break;
        case 1:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          finishedRoot = finishedWork;
          var instance = finishedRoot.stateNode;
          if ("function" === typeof instance.componentDidMount) try {
            instance.componentDidMount();
          } catch (error) {
            captureCommitPhaseError(finishedRoot, finishedRoot.return, error);
          }
          finishedRoot = finishedWork;
          instance = finishedRoot.updateQueue;
          if (null !== instance) {
            var instance$jscomp$0 = finishedRoot.stateNode;
            try {
              var hiddenCallbacks = instance.shared.hiddenCallbacks;
              if (null !== hiddenCallbacks) for (instance.shared.hiddenCallbacks = null, instance = 0; instance < hiddenCallbacks.length; instance++) callCallback(hiddenCallbacks[instance], instance$jscomp$0);
            } catch (error) {
              captureCommitPhaseError(finishedRoot, finishedRoot.return, error);
            }
          }
          includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 26:
        case 27:
        case 5:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        case 12:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          break;
        case 13:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          break;
        case 22:
          null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
          safelyAttachRef(finishedWork, finishedWork.return);
          break;
        default:
          recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
      }
      parentFiber = parentFiber.sibling;
    }
  }
  function commitOffscreenPassiveMountEffects(current, finishedWork) {
    var previousCache = null;
    null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (previousCache = current.memoizedState.cachePool.pool);
    current = null;
    null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current = finishedWork.memoizedState.cachePool.pool);
    current !== previousCache && (null != current && current.refCount++, null != previousCache && releaseCache(previousCache));
  }
  function commitCachePassiveMountEffect(current, finishedWork) {
    current = null;
    null !== finishedWork.alternate && (current = finishedWork.alternate.memoizedState.cache);
    finishedWork = finishedWork.memoizedState.cache;
    finishedWork !== current && (finishedWork.refCount++, null != current && releaseCache(current));
  }
  function recursivelyTraversePassiveMountEffects(root, parentFiber, committedLanes, committedTransitions) {
    if (parentFiber.subtreeFlags & 10256) for (parentFiber = parentFiber.child; null !== parentFiber;) commitPassiveMountOnFiber(root, parentFiber, committedLanes, committedTransitions), parentFiber = parentFiber.sibling;
  }
  function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
    var flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
        flags & 2048 && commitHookEffectListMount(9, finishedWork);
        break;
      case 3:
        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
        flags & 2048 && (finishedRoot = null, null !== finishedWork.alternate && (finishedRoot = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== finishedRoot && (finishedWork.refCount++, null != finishedRoot && releaseCache(finishedRoot)));
        break;
      case 12:
        if (flags & 2048) {
          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
          finishedRoot = finishedWork.stateNode;
          try {
            var _finishedWork$memoize2 = finishedWork.memoizedProps,
              id = _finishedWork$memoize2.id,
              onPostCommit = _finishedWork$memoize2.onPostCommit;
            "function" === typeof onPostCommit && onPostCommit(id, null === finishedWork.alternate ? "mount" : "update", finishedRoot.passiveEffectDuration, -0);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        } else recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
        break;
      case 23:
        break;
      case 22:
        _finishedWork$memoize2 = finishedWork.stateNode;
        null !== finishedWork.memoizedState ? _finishedWork$memoize2._visibility & 4 ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : finishedWork.mode & 1 ? recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : (_finishedWork$memoize2._visibility |= 4, recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions)) : _finishedWork$memoize2._visibility & 4 ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : (_finishedWork$memoize2._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, 0 !== (finishedWork.subtreeFlags & 10256)));
        flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
        break;
      case 24:
        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
        flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
        break;
      default:
        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
    }
  }
  function recursivelyTraverseReconnectPassiveEffects(finishedRoot$jscomp$0, parentFiber, committedLanes$jscomp$0, committedTransitions$jscomp$0, includeWorkInProgressEffects) {
    includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
    for (parentFiber = parentFiber.child; null !== parentFiber;) {
      var finishedRoot = finishedRoot$jscomp$0,
        finishedWork = parentFiber,
        committedLanes = committedLanes$jscomp$0,
        committedTransitions = committedTransitions$jscomp$0,
        flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 0:
        case 11:
        case 15:
          recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
          commitHookEffectListMount(8, finishedWork);
          break;
        case 23:
          break;
        case 22:
          var instance = finishedWork.stateNode;
          null !== finishedWork.memoizedState ? instance._visibility & 4 ? recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) : finishedWork.mode & 1 ? recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : (instance._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects)) : (instance._visibility |= 4, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects));
          includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
          break;
        case 24:
          recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
          includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
          break;
        default:
          recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
      }
      parentFiber = parentFiber.sibling;
    }
  }
  function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
    if (parentFiber.subtreeFlags & 10256) for (parentFiber = parentFiber.child; null !== parentFiber;) {
      var finishedRoot = finishedRoot$jscomp$0,
        finishedWork = parentFiber,
        flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 22:
          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
          flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
          break;
        case 24:
          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
          flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
          break;
        default:
          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
      }
      parentFiber = parentFiber.sibling;
    }
  }
  var suspenseyCommitFlag = 8192;
  function recursivelyAccumulateSuspenseyCommit(parentFiber) {
    if (parentFiber.subtreeFlags & suspenseyCommitFlag) for (parentFiber = parentFiber.child; null !== parentFiber;) accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
  }
  function accumulateSuspenseyCommitOnFiber(fiber) {
    switch (fiber.tag) {
      case 26:
        recursivelyAccumulateSuspenseyCommit(fiber);
        fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && shim();
        break;
      case 5:
        recursivelyAccumulateSuspenseyCommit(fiber);
        break;
      case 3:
      case 4:
        recursivelyAccumulateSuspenseyCommit(fiber);
        break;
      case 22:
        if (null === fiber.memoizedState) {
          var current = fiber.alternate;
          null !== current && null !== current.memoizedState ? (current = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = current) : recursivelyAccumulateSuspenseyCommit(fiber);
        }
        break;
      default:
        recursivelyAccumulateSuspenseyCommit(fiber);
    }
  }
  function detachAlternateSiblings(parentFiber) {
    var previousFiber = parentFiber.alternate;
    if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
      previousFiber.child = null;
      do previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber; while (null !== parentFiber);
    }
  }
  function recursivelyTraversePassiveUnmountEffects(parentFiber) {
    var deletions = parentFiber.deletions;
    if (0 !== (parentFiber.flags & 16)) {
      if (null !== deletions) for (var i = 0; i < deletions.length; i++) {
        var childToDelete = deletions[i];
        nextEffect = childToDelete;
        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
      }
      detachAlternateSiblings(parentFiber);
    }
    if (parentFiber.subtreeFlags & 10256) for (parentFiber = parentFiber.child; null !== parentFiber;) commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
  }
  function commitPassiveUnmountOnFiber(finishedWork) {
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
        recursivelyTraversePassiveUnmountEffects(finishedWork);
        finishedWork.flags & 2048 && commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
        break;
      case 3:
        recursivelyTraversePassiveUnmountEffects(finishedWork);
        break;
      case 12:
        recursivelyTraversePassiveUnmountEffects(finishedWork);
        break;
      case 22:
        var instance = finishedWork.stateNode;
        null !== finishedWork.memoizedState && instance._visibility & 4 && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (instance._visibility &= -5, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
        break;
      default:
        recursivelyTraversePassiveUnmountEffects(finishedWork);
    }
  }
  function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
    var deletions = parentFiber.deletions;
    if (0 !== (parentFiber.flags & 16)) {
      if (null !== deletions) for (var i = 0; i < deletions.length; i++) {
        var childToDelete = deletions[i];
        nextEffect = childToDelete;
        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
      }
      detachAlternateSiblings(parentFiber);
    }
    for (parentFiber = parentFiber.child; null !== parentFiber;) {
      deletions = parentFiber;
      switch (deletions.tag) {
        case 0:
        case 11:
        case 15:
          commitHookEffectListUnmount(8, deletions, deletions.return);
          recursivelyTraverseDisconnectPassiveEffects(deletions);
          break;
        case 22:
          i = deletions.stateNode;
          i._visibility & 4 && (i._visibility &= -5, recursivelyTraverseDisconnectPassiveEffects(deletions));
          break;
        default:
          recursivelyTraverseDisconnectPassiveEffects(deletions);
      }
      parentFiber = parentFiber.sibling;
    }
  }
  function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
    for (; null !== nextEffect;) {
      var fiber = nextEffect;
      switch (fiber.tag) {
        case 0:
        case 11:
        case 15:
          commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
          break;
        case 23:
        case 22:
          if (null !== fiber.memoizedState && null !== fiber.memoizedState.cachePool) {
            var cache = fiber.memoizedState.cachePool.pool;
            null != cache && cache.refCount++;
          }
          break;
        case 24:
          releaseCache(fiber.memoizedState.cache);
      }
      cache = fiber.child;
      if (null !== cache) cache.return = fiber, nextEffect = cache;else a: for (fiber = deletedSubtreeRoot; null !== nextEffect;) {
        cache = nextEffect;
        var sibling = cache.sibling,
          returnFiber = cache.return;
        detachFiberAfterEffects(cache);
        if (cache === fiber) {
          nextEffect = null;
          break a;
        }
        if (null !== sibling) {
          sibling.return = returnFiber;
          nextEffect = sibling;
          break a;
        }
        nextEffect = returnFiber;
      }
    }
  }
  var DefaultAsyncDispatcher = {
      getCacheForType: function (resourceType) {
        var cache = readContext(CacheContext),
          cacheForType = cache.data.get(resourceType);
        undefined === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
        return cacheForType;
      }
    },
    PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map,
    executionContext = 0,
    workInProgressRoot = null,
    workInProgress = null,
    workInProgressRootRenderLanes = 0,
    workInProgressSuspendedReason = 0,
    workInProgressThrownValue = null,
    workInProgressRootDidSkipSuspendedSiblings = false,
    workInProgressRootIsPrerendering = false,
    workInProgressRootDidAttachPingListener = false,
    entangledRenderLanes = 0,
    workInProgressRootExitStatus = 0,
    workInProgressRootSkippedLanes = 0,
    workInProgressRootInterleavedUpdatedLanes = 0,
    workInProgressRootPingedLanes = 0,
    workInProgressDeferredLane = 0,
    workInProgressSuspendedRetryLanes = 0,
    workInProgressRootConcurrentErrors = null,
    workInProgressRootRecoverableErrors = null,
    workInProgressRootDidIncludeRecursiveRenderUpdate = false,
    globalMostRecentFallbackTime = 0,
    workInProgressRootRenderTargetTime = Infinity,
    workInProgressTransitions = null,
    legacyErrorBoundariesThatAlreadyFailed = null,
    rootDoesHavePassiveEffects = false,
    rootWithPendingPassiveEffects = null,
    pendingPassiveEffectsLanes = 0,
    pendingPassiveEffectsRemainingLanes = 0,
    pendingPassiveTransitions = null,
    nestedUpdateCount = 0,
    rootWithNestedUpdates = null;
  function requestUpdateLane(fiber) {
    if (0 === (fiber.mode & 1)) return 2;
    if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes) return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
    if (null !== ReactSharedInternals.T) return fiber = currentEntangledLane, 0 !== fiber ? fiber : requestTransitionLane();
    fiber = 0 !== currentUpdatePriority ? currentUpdatePriority : 32;
    return fiber;
  }
  function requestDeferredLane() {
    0 === workInProgressDeferredLane && (workInProgressDeferredLane = 0 !== (workInProgressRootRenderLanes & 536870912) ? 536870912 : claimNextTransitionLane());
    var suspenseHandler = suspenseHandlerStackCursor.current;
    null !== suspenseHandler && (suspenseHandler.flags |= 32);
    return workInProgressDeferredLane;
  }
  function scheduleUpdateOnFiber(root, fiber, lane) {
    if (root === workInProgressRoot && 2 === workInProgressSuspendedReason || null !== root.cancelPendingCommit) prepareFreshStack(root, 0), markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane, false);
    markRootUpdated$1(root, lane);
    if (0 === (executionContext & 2) || root !== workInProgressRoot) root === workInProgressRoot && (0 === (executionContext & 2) && (workInProgressRootInterleavedUpdatedLanes |= lane), 4 === workInProgressRootExitStatus && markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane, false)), ensureRootIsScheduled(root), 2 === lane && 0 === executionContext && 0 === (fiber.mode & 1) && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, true));
  }
  function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var shouldTimeSlice = !forceSync && 0 === (lanes & 60) && 0 === (lanes & root$jscomp$0.expiredLanes) || checkIfRootIsPrerendering(root$jscomp$0, lanes),
      exitStatus = shouldTimeSlice ? renderRootConcurrent(root$jscomp$0, lanes) : renderRootSync(root$jscomp$0, lanes, true),
      renderWasConcurrent = shouldTimeSlice;
    do {
      if (0 === exitStatus) {
        workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root$jscomp$0, lanes, 0, false);
        break;
      } else if (6 === exitStatus) markRootSuspended(root$jscomp$0, lanes, 0, !workInProgressRootDidSkipSuspendedSiblings);else {
        forceSync = root$jscomp$0.current.alternate;
        if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
          exitStatus = renderRootSync(root$jscomp$0, lanes, false);
          renderWasConcurrent = false;
          continue;
        }
        if (0 !== root$jscomp$0.tag && 2 === exitStatus) {
          renderWasConcurrent = lanes;
          if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent) var JSCompiler_inline_result = 0;else JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913, JSCompiler_inline_result = 0 !== JSCompiler_inline_result ? JSCompiler_inline_result : JSCompiler_inline_result & 536870912 ? 536870912 : 0;
          if (0 !== JSCompiler_inline_result) {
            lanes = JSCompiler_inline_result;
            a: {
              var root = root$jscomp$0;
              exitStatus = workInProgressRootConcurrentErrors;
              JSCompiler_inline_result = renderRootSync(root, JSCompiler_inline_result, false);
              if (2 !== JSCompiler_inline_result) {
                if (workInProgressRootDidAttachPingListener) {
                  root.errorRecoveryDisabledLanes |= renderWasConcurrent;
                  workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                  exitStatus = 4;
                  break a;
                }
                renderWasConcurrent = workInProgressRootRecoverableErrors;
                workInProgressRootRecoverableErrors = exitStatus;
                null !== renderWasConcurrent && queueRecoverableErrors(renderWasConcurrent);
              }
              exitStatus = JSCompiler_inline_result;
            }
            renderWasConcurrent = false;
            if (2 !== exitStatus) continue;
          }
        }
        if (1 === exitStatus) {
          prepareFreshStack(root$jscomp$0, 0);
          markRootSuspended(root$jscomp$0, lanes, 0, true);
          break;
        }
        a: {
          shouldTimeSlice = root$jscomp$0;
          renderWasConcurrent = exitStatus;
          switch (renderWasConcurrent) {
            case 0:
            case 1:
              throw Error("Root did not complete. This is a bug in React.");
            case 4:
              if ((lanes & 4194176) === lanes) {
                markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
                break a;
              }
              break;
            case 2:
              workInProgressRootRecoverableErrors = null;
              break;
            case 3:
            case 5:
              break;
            default:
              throw Error("Unknown root exit status.");
          }
          shouldTimeSlice.finishedWork = forceSync;
          shouldTimeSlice.finishedLanes = lanes;
          if ((lanes & 62914560) === lanes && 3 === renderWasConcurrent && (renderWasConcurrent = globalMostRecentFallbackTime + 300 - now(), 10 < renderWasConcurrent)) {
            markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
            if (0 !== getNextLanes(shouldTimeSlice, 0)) break a;
            shouldTimeSlice.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, 2, -0, 0), renderWasConcurrent);
            break a;
          }
          commitRootWhenReady(shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, 0, -0, 0);
        }
      }
      break;
    } while (1);
    ensureRootIsScheduled(root$jscomp$0);
  }
  function queueRecoverableErrors(errors) {
    null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
  }
  function commitRootWhenReady(root, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
    lanes = finishedWork.subtreeFlags;
    (lanes & 8192 || 16785408 === (lanes & 16785408)) && accumulateSuspenseyCommitOnFiber(finishedWork);
    finishedWork = ReactSharedInternals.T;
    lanes = currentUpdatePriority;
    try {
      currentUpdatePriority = 2, ReactSharedInternals.T = null, commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime);
    } finally {
      ReactSharedInternals.T = finishedWork, currentUpdatePriority = lanes;
    }
  }
  function isRenderConsistentWithExternalStores(finishedWork) {
    for (var node = finishedWork;;) {
      var tag = node.tag;
      if ((0 === tag || 11 === tag || 15 === tag) && node.flags & 16384 && (tag = node.updateQueue, null !== tag && (tag = tag.stores, null !== tag))) for (var i = 0; i < tag.length; i++) {
        var check = tag[i],
          getSnapshot = check.getSnapshot;
        check = check.value;
        try {
          if (!objectIs(getSnapshot(), check)) return false;
        } catch (error) {
          return false;
        }
      }
      tag = node.child;
      if (node.subtreeFlags & 16384 && null !== tag) tag.return = node, node = tag;else {
        if (node === finishedWork) break;
        for (; null === node.sibling;) {
          if (null === node.return || node.return === finishedWork) return true;
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    return true;
  }
  function markRootSuspended(root, suspendedLanes, spawnedLane, didAttemptEntireTree) {
    suspendedLanes &= ~workInProgressRootPingedLanes;
    suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
    root.suspendedLanes |= suspendedLanes;
    root.pingedLanes &= ~suspendedLanes;
    didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
    didAttemptEntireTree = root.expirationTimes;
    for (var lanes = suspendedLanes; 0 < lanes;) {
      var index$11 = 31 - clz32(lanes),
        lane = 1 << index$11;
      didAttemptEntireTree[index$11] = -1;
      lanes &= ~lane;
    }
    0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
  }
  function resetWorkInProgressStack() {
    if (null !== workInProgress) {
      if (0 === workInProgressSuspendedReason) var interruptedWork = workInProgress.return;else interruptedWork = workInProgress, lastContextDependency = currentlyRenderingFiber = null, resetHooksOnUnwind(interruptedWork), thenableState$1 = null, thenableIndexCounter$1 = 0, interruptedWork = workInProgress;
      for (; null !== interruptedWork;) unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
      workInProgress = null;
    }
  }
  function prepareFreshStack(root, lanes) {
    root.finishedWork = null;
    root.finishedLanes = 0;
    var timeoutHandle = root.timeoutHandle;
    -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
    timeoutHandle = root.cancelPendingCommit;
    null !== timeoutHandle && (root.cancelPendingCommit = null, timeoutHandle());
    resetWorkInProgressStack();
    workInProgressRoot = root;
    workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
    workInProgressRootRenderLanes = lanes;
    workInProgressSuspendedReason = 0;
    workInProgressThrownValue = null;
    workInProgressRootDidSkipSuspendedSiblings = false;
    workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
    workInProgressRootDidAttachPingListener = false;
    workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = workInProgressRootExitStatus = 0;
    workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
    workInProgressRootDidIncludeRecursiveRenderUpdate = false;
    0 !== (lanes & 8) && (lanes |= lanes & 32);
    var allEntangledLanes = root.entangledLanes;
    if (0 !== allEntangledLanes) for (root = root.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes;) {
      var index$9 = 31 - clz32(allEntangledLanes),
        lane = 1 << index$9;
      lanes |= root[index$9];
      allEntangledLanes &= ~lane;
    }
    entangledRenderLanes = lanes;
    finishQueueingConcurrentUpdates();
    return timeoutHandle;
  }
  function handleThrow(root, thrownValue) {
    currentlyRenderingFiber$1 = null;
    ReactSharedInternals.H = ContextOnlyDispatcher;
    thrownValue === SuspenseException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 3) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 4) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? 8 : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? 6 : 1;
    workInProgressThrownValue = thrownValue;
    null === workInProgress && (workInProgressRootExitStatus = 1, logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current)));
  }
  function pushDispatcher() {
    var prevDispatcher = ReactSharedInternals.H;
    ReactSharedInternals.H = ContextOnlyDispatcher;
    return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
  }
  function pushAsyncDispatcher() {
    var prevAsyncDispatcher = ReactSharedInternals.A;
    ReactSharedInternals.A = DefaultAsyncDispatcher;
    return prevAsyncDispatcher;
  }
  function renderDidSuspendDelayIfPossible() {
    workInProgressRootExitStatus = 4;
    workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194176) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = true);
    0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes, workInProgressDeferredLane, false);
  }
  function renderRootSync(root, lanes, shouldYieldForPrerendering) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher(),
      prevAsyncDispatcher = pushAsyncDispatcher();
    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) workInProgressTransitions = null, prepareFreshStack(root, lanes);
    lanes = false;
    var exitStatus = workInProgressRootExitStatus;
    a: do try {
      if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
        var unitOfWork = workInProgress,
          thrownValue = workInProgressThrownValue;
        switch (workInProgressSuspendedReason) {
          case 8:
            resetWorkInProgressStack();
            exitStatus = 6;
            break a;
          case 3:
          case 2:
          case 6:
            null === suspenseHandlerStackCursor.current && (lanes = true);
            var reason = workInProgressSuspendedReason;
            workInProgressSuspendedReason = 0;
            workInProgressThrownValue = null;
            throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
            if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
              exitStatus = 0;
              break a;
            }
            break;
          default:
            reason = workInProgressSuspendedReason, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
        }
      }
      workLoopSync();
      exitStatus = workInProgressRootExitStatus;
      break;
    } catch (thrownValue$133) {
      handleThrow(root, thrownValue$133);
    } while (1);
    lanes && root.shellSuspendCounter++;
    lastContextDependency = currentlyRenderingFiber = null;
    executionContext = prevExecutionContext;
    ReactSharedInternals.H = prevDispatcher;
    ReactSharedInternals.A = prevAsyncDispatcher;
    null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
    return exitStatus;
  }
  function workLoopSync() {
    for (; null !== workInProgress;) performUnitOfWork(workInProgress);
  }
  function renderRootConcurrent(root, lanes) {
    var prevExecutionContext = executionContext;
    executionContext |= 2;
    var prevDispatcher = pushDispatcher(),
      prevAsyncDispatcher = pushAsyncDispatcher();
    workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes ? (workInProgressTransitions = null, workInProgressRootRenderTargetTime = now() + 500, prepareFreshStack(root, lanes)) : workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
    a: do try {
      if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
        lanes = workInProgress;
        var thrownValue = workInProgressThrownValue;
        b: switch (workInProgressSuspendedReason) {
          case 1:
            workInProgressSuspendedReason = 0;
            workInProgressThrownValue = null;
            throwAndUnwindWorkLoop(root, lanes, thrownValue, 1);
            break;
          case 2:
            if (isThenableResolved(thrownValue)) {
              workInProgressSuspendedReason = 0;
              workInProgressThrownValue = null;
              replaySuspendedUnitOfWork(lanes);
              break;
            }
            lanes = function () {
              2 === workInProgressSuspendedReason && workInProgressRoot === root && (workInProgressSuspendedReason = 7);
              ensureRootIsScheduled(root);
            };
            thrownValue.then(lanes, lanes);
            break a;
          case 3:
            workInProgressSuspendedReason = 7;
            break a;
          case 4:
            workInProgressSuspendedReason = 5;
            break a;
          case 7:
            isThenableResolved(thrownValue) ? (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root, lanes, thrownValue, 7));
            break;
          case 5:
            var resource = null;
            switch (workInProgress.tag) {
              case 26:
                resource = workInProgress.memoizedState;
              case 5:
              case 27:
                var hostFiber = workInProgress;
                if (resource ? shim(resource) : 1) {
                  workInProgressSuspendedReason = 0;
                  workInProgressThrownValue = null;
                  var sibling = hostFiber.sibling;
                  if (null !== sibling) workInProgress = sibling;else {
                    var returnFiber = hostFiber.return;
                    null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                  }
                  break b;
                }
            }
            workInProgressSuspendedReason = 0;
            workInProgressThrownValue = null;
            throwAndUnwindWorkLoop(root, lanes, thrownValue, 5);
            break;
          case 6:
            workInProgressSuspendedReason = 0;
            workInProgressThrownValue = null;
            throwAndUnwindWorkLoop(root, lanes, thrownValue, 6);
            break;
          case 8:
            resetWorkInProgressStack();
            workInProgressRootExitStatus = 6;
            break a;
          default:
            throw Error("Unexpected SuspendedReason. This is a bug in React.");
        }
      }
      workLoopConcurrent();
      break;
    } catch (thrownValue$135) {
      handleThrow(root, thrownValue$135);
    } while (1);
    lastContextDependency = currentlyRenderingFiber = null;
    ReactSharedInternals.H = prevDispatcher;
    ReactSharedInternals.A = prevAsyncDispatcher;
    executionContext = prevExecutionContext;
    if (null !== workInProgress) return 0;
    workInProgressRoot = null;
    workInProgressRootRenderLanes = 0;
    finishQueueingConcurrentUpdates();
    return workInProgressRootExitStatus;
  }
  function workLoopConcurrent() {
    for (; null !== workInProgress && !shouldYield();) performUnitOfWork(workInProgress);
  }
  function performUnitOfWork(unitOfWork) {
    var next = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
  }
  function replaySuspendedUnitOfWork(unitOfWork) {
    var next = unitOfWork;
    var current = next.alternate;
    switch (next.tag) {
      case 15:
      case 0:
        next = replayFunctionComponent(current, next, next.pendingProps, next.type, undefined, workInProgressRootRenderLanes);
        break;
      case 11:
        next = replayFunctionComponent(current, next, next.pendingProps, next.type.render, next.ref, workInProgressRootRenderLanes);
        break;
      case 5:
        resetHooksOnUnwind(next);
      default:
        unwindInterruptedWork(current, next), next = workInProgress = resetWorkInProgress(next, entangledRenderLanes), next = beginWork(current, next, entangledRenderLanes);
    }
    unitOfWork.memoizedProps = unitOfWork.pendingProps;
    null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
  }
  function throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, suspendedReason) {
    lastContextDependency = currentlyRenderingFiber = null;
    resetHooksOnUnwind(unitOfWork);
    thenableState$1 = null;
    thenableIndexCounter$1 = 0;
    var returnFiber = unitOfWork.return;
    try {
      if (throwException(root, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes)) {
        workInProgressRootExitStatus = 1;
        logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
        workInProgress = null;
        return;
      }
    } catch (error) {
      if (null !== returnFiber) throw workInProgress = returnFiber, error;
      workInProgressRootExitStatus = 1;
      logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
      workInProgress = null;
      return;
    }
    if (unitOfWork.flags & 32768) {
      if (1 === suspendedReason) root = true;else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912)) root = false;else if (workInProgressRootDidSkipSuspendedSiblings = root = true, 2 === suspendedReason || 3 === suspendedReason || 6 === suspendedReason) suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
      unwindUnitOfWork(unitOfWork, root);
    } else completeUnitOfWork(unitOfWork);
  }
  function completeUnitOfWork(unitOfWork) {
    var completedWork = unitOfWork;
    do {
      if (0 !== (completedWork.flags & 32768)) {
        unwindUnitOfWork(completedWork, workInProgressRootDidSkipSuspendedSiblings);
        return;
      }
      unitOfWork = completedWork.return;
      var next = completeWork(completedWork.alternate, completedWork, entangledRenderLanes);
      if (null !== next) {
        workInProgress = next;
        return;
      }
      completedWork = completedWork.sibling;
      if (null !== completedWork) {
        workInProgress = completedWork;
        return;
      }
      workInProgress = completedWork = unitOfWork;
    } while (null !== completedWork);
    0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
  }
  function unwindUnitOfWork(unitOfWork, skipSiblings) {
    do {
      var next = unwindWork(unitOfWork.alternate, unitOfWork);
      if (null !== next) {
        next.flags &= 32767;
        workInProgress = next;
        return;
      }
      next = unitOfWork.return;
      null !== next && (next.flags |= 32768, next.subtreeFlags = 0, next.deletions = null);
      if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
        workInProgress = unitOfWork;
        return;
      }
      workInProgress = unitOfWork = next;
    } while (null !== unitOfWork);
    workInProgressRootExitStatus = 6;
    workInProgress = null;
  }
  function commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, renderPriorityLevel, spawnedLane, updatedLanes, suspendedRetryLanes) {
    do flushPassiveEffects(); while (null !== rootWithPendingPassiveEffects);
    if (0 !== (executionContext & 6)) throw Error("Should not already be working.");
    var finishedWork = root.finishedWork;
    didIncludeRenderPhaseUpdate = root.finishedLanes;
    if (null === finishedWork) return null;
    root.finishedWork = null;
    root.finishedLanes = 0;
    if (finishedWork === root.current) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
    root.callbackNode = null;
    root.callbackPriority = 0;
    root.cancelPendingCommit = null;
    var remainingLanes = finishedWork.lanes | finishedWork.childLanes;
    remainingLanes |= concurrentlyUpdatedLanes;
    markRootFinished(root, didIncludeRenderPhaseUpdate, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes);
    root === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
    0 === (finishedWork.subtreeFlags & 10256) && 0 === (finishedWork.flags & 10256) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = true, pendingPassiveEffectsRemainingLanes = remainingLanes, pendingPassiveTransitions = transitions, scheduleCallback(NormalPriority$1, function () {
      flushPassiveEffects(true);
      return null;
    }));
    transitions = 0 !== (finishedWork.flags & 15990);
    0 !== (finishedWork.subtreeFlags & 15990) || transitions ? (transitions = ReactSharedInternals.T, ReactSharedInternals.T = null, spawnedLane = currentUpdatePriority, currentUpdatePriority = 2, updatedLanes = executionContext, executionContext |= 4, commitBeforeMutationEffects(root, finishedWork), commitMutationEffectsOnFiber(finishedWork, root), root.current = finishedWork, commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork), requestPaint(), executionContext = updatedLanes, currentUpdatePriority = spawnedLane, ReactSharedInternals.T = transitions) : root.current = finishedWork;
    rootDoesHavePassiveEffects ? (rootDoesHavePassiveEffects = false, rootWithPendingPassiveEffects = root, pendingPassiveEffectsLanes = didIncludeRenderPhaseUpdate) : releaseRootPooledCache(root, remainingLanes);
    remainingLanes = root.pendingLanes;
    0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
    onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
    ensureRootIsScheduled(root);
    if (null !== recoverableErrors) for (renderPriorityLevel = root.onRecoverableError, finishedWork = 0; finishedWork < recoverableErrors.length; finishedWork++) remainingLanes = recoverableErrors[finishedWork], renderPriorityLevel(remainingLanes.value, {
      componentStack: remainingLanes.stack
    });
    0 !== (pendingPassiveEffectsLanes & 3) && 0 !== root.tag && flushPassiveEffects();
    remainingLanes = root.pendingLanes;
    0 !== (didIncludeRenderPhaseUpdate & 4194218) && 0 !== (remainingLanes & 42) ? root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root) : nestedUpdateCount = 0;
    flushSyncWorkAcrossRoots_impl(0, false);
    return null;
  }
  function releaseRootPooledCache(root, remainingLanes) {
    0 === (root.pooledCacheLanes &= remainingLanes) && (remainingLanes = root.pooledCache, null != remainingLanes && (root.pooledCache = null, releaseCache(remainingLanes)));
  }
  function flushPassiveEffects() {
    if (null !== rootWithPendingPassiveEffects) {
      var root = rootWithPendingPassiveEffects,
        remainingLanes = pendingPassiveEffectsRemainingLanes;
      pendingPassiveEffectsRemainingLanes = 0;
      var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),
        prevTransition = ReactSharedInternals.T,
        previousPriority = currentUpdatePriority;
      try {
        currentUpdatePriority = 32 > renderPriority ? 32 : renderPriority;
        ReactSharedInternals.T = null;
        if (null === rootWithPendingPassiveEffects) var JSCompiler_inline_result = false;else {
          renderPriority = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root$jscomp$0 = rootWithPendingPassiveEffects,
            lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = 0;
          if (0 !== (executionContext & 6)) throw Error("Cannot flush passive effects while already rendering.");
          var prevExecutionContext = executionContext;
          executionContext |= 4;
          commitPassiveUnmountOnFiber(root$jscomp$0.current);
          commitPassiveMountOnFiber(root$jscomp$0, root$jscomp$0.current, lanes, renderPriority);
          executionContext = prevExecutionContext;
          flushSyncWorkAcrossRoots_impl(0, false);
          if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot) try {
            injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
          } catch (err) {}
          JSCompiler_inline_result = true;
        }
        return JSCompiler_inline_result;
      } finally {
        currentUpdatePriority = previousPriority, ReactSharedInternals.T = prevTransition, releaseRootPooledCache(root, remainingLanes);
      }
    }
    return false;
  }
  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
    sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
    rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
    null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
  }
  function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
    if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);else for (; null !== nearestMountedAncestor;) {
      if (3 === nearestMountedAncestor.tag) {
        captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error);
        break;
      } else if (1 === nearestMountedAncestor.tag) {
        var instance = nearestMountedAncestor.stateNode;
        if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
          error = createClassErrorUpdate(2);
          instance = enqueueUpdate(nearestMountedAncestor, error, 2);
          null !== instance && (initializeClassErrorUpdate(error, instance, nearestMountedAncestor, sourceFiber), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
          break;
        }
      }
      nearestMountedAncestor = nearestMountedAncestor.return;
    }
  }
  function attachPingListener(root, wakeable, lanes) {
    var pingCache = root.pingCache;
    if (null === pingCache) {
      pingCache = root.pingCache = new PossiblyWeakMap();
      var threadIDs = new Set();
      pingCache.set(wakeable, threadIDs);
    } else threadIDs = pingCache.get(wakeable), undefined === threadIDs && (threadIDs = new Set(), pingCache.set(wakeable, threadIDs));
    threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = true, threadIDs.add(lanes), root = pingSuspendedRoot.bind(null, root, wakeable, lanes), wakeable.then(root, root));
  }
  function pingSuspendedRoot(root, wakeable, pingedLanes) {
    var pingCache = root.pingCache;
    null !== pingCache && pingCache.delete(wakeable);
    root.pingedLanes |= root.suspendedLanes & pingedLanes;
    root.warmLanes &= ~pingedLanes;
    workInProgressRoot === root && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (4 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && 300 > now() - globalMostRecentFallbackTime ? 0 === (executionContext & 2) && prepareFreshStack(root, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
    ensureRootIsScheduled(root);
  }
  function retryTimedOutBoundary(boundaryFiber, retryLane) {
    0 === retryLane && (retryLane = 0 === (boundaryFiber.mode & 1) ? 2 : claimNextRetryLane());
    boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
    null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
  }
  function retryDehydratedSuspenseBoundary(boundaryFiber) {
    var suspenseState = boundaryFiber.memoizedState,
      retryLane = 0;
    null !== suspenseState && (retryLane = suspenseState.retryLane);
    retryTimedOutBoundary(boundaryFiber, retryLane);
  }
  function resolveRetryWakeable(boundaryFiber, wakeable) {
    var retryLane = 0;
    switch (boundaryFiber.tag) {
      case 13:
        var retryCache = boundaryFiber.stateNode;
        var suspenseState = boundaryFiber.memoizedState;
        null !== suspenseState && (retryLane = suspenseState.retryLane);
        break;
      case 19:
        retryCache = boundaryFiber.stateNode;
        break;
      case 22:
        retryCache = boundaryFiber.stateNode._retryCache;
        break;
      default:
        throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
    }
    null !== retryCache && retryCache.delete(wakeable);
    retryTimedOutBoundary(boundaryFiber, retryLane);
  }
  function scheduleCallback(priorityLevel, callback) {
    return scheduleCallback$3(priorityLevel, callback);
  }
  function FiberNode(tag, pendingProps, key, mode) {
    this.tag = tag;
    this.key = key;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.refCleanup = this.ref = null;
    this.pendingProps = pendingProps;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = mode;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
  }
  function createFiberImplClass(tag, pendingProps, key, mode) {
    return new FiberNode(tag, pendingProps, key, mode);
  }
  function shouldConstruct(Component) {
    Component = Component.prototype;
    return !(!Component || !Component.isReactComponent);
  }
  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;
    null === workInProgress ? (workInProgress = createFiberImplClass(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.type = current.type, workInProgress.flags = 0, workInProgress.subtreeFlags = 0, workInProgress.deletions = null);
    workInProgress.flags = current.flags & 31457280;
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
    pendingProps = current.dependencies;
    workInProgress.dependencies = null === pendingProps ? null : {
      lanes: pendingProps.lanes,
      firstContext: pendingProps.firstContext
    };
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
    workInProgress.refCleanup = current.refCleanup;
    return workInProgress;
  }
  function resetWorkInProgress(workInProgress, renderLanes) {
    workInProgress.flags &= 31457282;
    var current = workInProgress.alternate;
    null === current ? (workInProgress.childLanes = 0, workInProgress.lanes = renderLanes, workInProgress.child = null, workInProgress.subtreeFlags = 0, workInProgress.memoizedProps = null, workInProgress.memoizedState = null, workInProgress.updateQueue = null, workInProgress.dependencies = null, workInProgress.stateNode = null) : (workInProgress.childLanes = current.childLanes, workInProgress.lanes = current.lanes, workInProgress.child = current.child, workInProgress.subtreeFlags = 0, workInProgress.deletions = null, workInProgress.memoizedProps = current.memoizedProps, workInProgress.memoizedState = current.memoizedState, workInProgress.updateQueue = current.updateQueue, workInProgress.type = current.type, renderLanes = current.dependencies, workInProgress.dependencies = null === renderLanes ? null : {
      lanes: renderLanes.lanes,
      firstContext: renderLanes.firstContext
    });
    return workInProgress;
  }
  function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
    var fiberTag = 0;
    owner = type;
    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);else if ("string" === typeof type) fiberTag = 5;else a: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, lanes, key);
      case REACT_STRICT_MODE_TYPE:
        fiberTag = 8;
        mode |= 8;
        0 !== (mode & 1) && (mode |= 16);
        break;
      case REACT_PROFILER_TYPE:
        return type = createFiberImplClass(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type;
      case REACT_SUSPENSE_TYPE:
        return type = createFiberImplClass(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
      case REACT_SUSPENSE_LIST_TYPE:
        return type = createFiberImplClass(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
      case REACT_OFFSCREEN_TYPE:
        return createFiberFromOffscreen(pendingProps, mode, lanes, key);
      default:
        if ("object" === typeof type && null !== type) switch (type.$$typeof) {
          case REACT_PROVIDER_TYPE:
          case REACT_CONTEXT_TYPE:
            fiberTag = 10;
            break a;
          case REACT_CONSUMER_TYPE:
            fiberTag = 9;
            break a;
          case REACT_FORWARD_REF_TYPE:
            fiberTag = 11;
            break a;
          case REACT_MEMO_TYPE:
            fiberTag = 14;
            break a;
          case REACT_LAZY_TYPE:
            fiberTag = 16;
            owner = null;
            break a;
        }
        fiberTag = 29;
        pendingProps = Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null === type ? "null" : typeof type) + "."));
        owner = null;
    }
    key = createFiberImplClass(fiberTag, pendingProps, key, mode);
    key.elementType = type;
    key.type = owner;
    key.lanes = lanes;
    return key;
  }
  function createFiberFromFragment(elements, mode, lanes, key) {
    elements = createFiberImplClass(7, elements, key, mode);
    elements.lanes = lanes;
    return elements;
  }
  function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
    pendingProps = createFiberImplClass(22, pendingProps, key, mode);
    pendingProps.elementType = REACT_OFFSCREEN_TYPE;
    pendingProps.lanes = lanes;
    var primaryChildInstance = {
      _visibility: 1,
      _pendingVisibility: 1,
      _pendingMarkers: null,
      _retryCache: null,
      _transitions: null,
      _current: null,
      detach: function () {
        var fiber = primaryChildInstance._current;
        if (null === fiber) throw Error("Calling Offscreen.detach before instance handle has been set.");
        if (0 === (primaryChildInstance._pendingVisibility & 2)) {
          var root = enqueueConcurrentRenderForLane(fiber, 2);
          null !== root && (primaryChildInstance._pendingVisibility |= 2, scheduleUpdateOnFiber(root, fiber, 2));
        }
      },
      attach: function () {
        var fiber = primaryChildInstance._current;
        if (null === fiber) throw Error("Calling Offscreen.detach before instance handle has been set.");
        if (0 !== (primaryChildInstance._pendingVisibility & 2)) {
          var root = enqueueConcurrentRenderForLane(fiber, 2);
          null !== root && (primaryChildInstance._pendingVisibility &= -3, scheduleUpdateOnFiber(root, fiber, 2));
        }
      }
    };
    pendingProps.stateNode = primaryChildInstance;
    return pendingProps;
  }
  function createFiberFromText(content, mode, lanes) {
    content = createFiberImplClass(6, content, null, mode);
    content.lanes = lanes;
    return content;
  }
  function createFiberFromPortal(portal, mode, lanes) {
    mode = createFiberImplClass(4, null !== portal.children ? portal.children : [], portal.key, mode);
    mode.lanes = lanes;
    mode.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      implementation: portal.implementation
    };
    return mode;
  }
  function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
    this.tag = tag;
    this.containerInfo = containerInfo;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
    this.callbackPriority = 0;
    this.expirationTimes = createLaneMap(-1);
    this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = createLaneMap(0);
    this.hiddenUpdates = createLaneMap(null);
    this.identifierPrefix = identifierPrefix;
    this.onUncaughtError = onUncaughtError;
    this.onCaughtError = onCaughtError;
    this.onRecoverableError = onRecoverableError;
    this.pooledCache = null;
    this.pooledCacheLanes = 0;
    this.formState = formState;
    this.incompleteTransitions = new Map();
  }
  function createPortal$1(children, containerInfo, implementation) {
    var key = 3 < arguments.length && undefined !== arguments[3] ? arguments[3] : null;
    return {
      $$typeof: REACT_PORTAL_TYPE,
      key: null == key ? null : "" + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }
  function findHostInstance(component) {
    var fiber = component._reactInternals;
    if (undefined === fiber) {
      if ("function" === typeof component.render) throw Error("Unable to find node on an unmounted component.");
      component = Object.keys(component).join(",");
      throw Error("Argument appears to not be a ReactComponent. Keys: " + component);
    }
    component = findCurrentFiberUsingSlowPath(fiber);
    component = null !== component ? findCurrentHostFiberImpl(component) : null;
    return null === component ? null : getPublicInstance(component.stateNode);
  }
  function updateContainer(element, container, parentComponent, callback) {
    parentComponent = container.current;
    var lane = requestUpdateLane(parentComponent);
    null === container.context ? container.context = emptyContextObject : container.pendingContext = emptyContextObject;
    container = createUpdate(lane);
    container.payload = {
      element: element
    };
    callback = undefined === callback ? null : callback;
    null !== callback && (container.callback = callback);
    element = enqueueUpdate(parentComponent, container, lane);
    null !== element && (scheduleUpdateOnFiber(element, parentComponent, lane), entangleTransitions(element, parentComponent, lane));
    return lane;
  }
  var isomorphicReactPackageVersion = React.version;
  if ("19.0.0" !== isomorphicReactPackageVersion) throw Error('Incompatible React versions: The "react" and "react-native-renderer" packages must have the exact same version. Instead got:\n  - react:                  ' + (isomorphicReactPackageVersion + "\n  - react-native-renderer:  19.0.0\nLearn more: https://react.dev/warnings/version-mismatch"));
  if ("function" !== typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog) throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");
  function nativeOnUncaughtError(error, errorInfo) {
    false !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
      errorBoundary: null,
      error: error,
      componentStack: null != errorInfo.componentStack ? errorInfo.componentStack : ""
    }) && reportGlobalError(error);
  }
  function nativeOnCaughtError(error, errorInfo) {
    false !== ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog({
      errorBoundary: errorInfo.errorBoundary,
      error: error,
      componentStack: null != errorInfo.componentStack ? errorInfo.componentStack : ""
    }) && console.error(error);
  }
  function unmountComponentAtNode(containerTag) {
    var root = roots.get(containerTag);
    root && updateContainer(null, root, null, function () {
      roots.delete(containerTag);
    });
  }
  batchedUpdatesImpl = function (fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= 1;
    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext, 0 === executionContext && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, true));
    }
  };
  var roots = new Map(),
    internals$jscomp$inline_1213 = {
      bundleType: 0,
      version: "19.0.0",
      rendererPackageName: "react-native-renderer",
      currentDispatcherRef: ReactSharedInternals,
      findFiberByHostInstance: getInstanceFromTag,
      reconcilerVersion: "19.0.0"
    };
  null !== extraDevToolsConfig && (internals$jscomp$inline_1213.rendererConfig = extraDevToolsConfig);
  if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var hook$jscomp$inline_1551 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!hook$jscomp$inline_1551.isDisabled && hook$jscomp$inline_1551.supportsFiber) try {
      rendererID = hook$jscomp$inline_1551.inject(internals$jscomp$inline_1213), injectedHook = hook$jscomp$inline_1551;
    } catch (err) {}
  }
  exports.createPortal = function (children, containerTag) {
    return createPortal$1(children, containerTag, null, 2 < arguments.length && undefined !== arguments[2] ? arguments[2] : null);
  };
  exports.dispatchCommand = function (handle, command, args) {
    var nativeTag = null != handle._nativeTag ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);
    null != nativeTag && (handle = ReactNativePrivateInterface.getNodeFromPublicInstance(handle), null != handle ? nativeFabricUIManager.dispatchCommand(handle, command, args) : ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(nativeTag, command, args));
  };
  exports.findHostInstance_DEPRECATED = function (componentOrHandle) {
    return null == componentOrHandle ? null : componentOrHandle.canonical && componentOrHandle.canonical.publicInstance ? componentOrHandle.canonical.publicInstance : componentOrHandle._nativeTag ? componentOrHandle : findHostInstance(componentOrHandle);
  };
  exports.findNodeHandle = function (componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" === typeof componentOrHandle) return componentOrHandle;
    if (componentOrHandle._nativeTag) return componentOrHandle._nativeTag;
    if (null != componentOrHandle.canonical && null != componentOrHandle.canonical.nativeTag) return componentOrHandle.canonical.nativeTag;
    var nativeTag = ReactNativePrivateInterface.getNativeTagFromPublicInstance(componentOrHandle);
    if (nativeTag) return nativeTag;
    componentOrHandle = findHostInstance(componentOrHandle);
    return null == componentOrHandle ? componentOrHandle : null != componentOrHandle._nativeTag ? componentOrHandle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(componentOrHandle);
  };
  exports.getInspectorDataForInstance = getInspectorDataForInstance;
  exports.isChildPublicInstance = function () {
    throw Error("isChildPublicInstance() is not available in production.");
  };
  exports.render = function (element, containerTag, callback, options) {
    var root = roots.get(containerTag);
    if (!root) {
      root = nativeOnUncaughtError;
      var onCaughtError = nativeOnCaughtError,
        onRecoverableError = defaultOnRecoverableError;
      options && undefined !== options.onUncaughtError && (root = options.onUncaughtError);
      options && undefined !== options.onCaughtError && (onCaughtError = options.onCaughtError);
      options && undefined !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError);
      options = new FiberRootNode(containerTag, 0, false, "", root, onCaughtError, onRecoverableError, null);
      root = createFiberImplClass(3, null, null, 0);
      options.current = root;
      root.stateNode = options;
      onCaughtError = createCache();
      onCaughtError.refCount++;
      options.pooledCache = onCaughtError;
      onCaughtError.refCount++;
      root.memoizedState = {
        element: null,
        isDehydrated: false,
        cache: onCaughtError
      };
      initializeUpdateQueue(root);
      root = options;
      roots.set(containerTag, root);
    }
    updateContainer(element, root, null, callback);
    a: if (element = root.current, element.child) switch (element.child.tag) {
      case 27:
      case 5:
        element = getPublicInstance(element.child.stateNode);
        break a;
      default:
        element = element.child.stateNode;
    } else element = null;
    return element;
  };
  exports.sendAccessibilityEvent = function (handle, eventType) {
    var nativeTag = null != handle._nativeTag ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);
    null != nativeTag && (handle = ReactNativePrivateInterface.getNodeFromPublicInstance(handle), null != handle ? nativeFabricUIManager.sendAccessibilityEvent(handle, eventType) : ReactNativePrivateInterface.legacySendAccessibilityEvent(nativeTag, eventType));
  };
  exports.unmountComponentAtNode = unmountComponentAtNode;
  exports.unmountComponentAtNodeAndRemoveContainer = function (containerTag) {
    unmountComponentAtNode(containerTag);
    ReactNativePrivateInterface.UIManager.removeRootView(containerTag);
  };
  exports.unstable_batchedUpdates = batchedUpdates$1;
},298,[175,91,140,295]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeAccessibilityInfo = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeAccessibilityInfo).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeAccessibilityInfo[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeAccessibilityInfo[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeAccessibilityInfo.default;
},299,[300]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('AccessibilityInfo');
},300,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var _View = _interopRequireDefault(require(_dependencyMap[4]));
  var React = _interopRequireWildcard(require(_dependencyMap[5]));
  var _jsxRuntime = require(_dependencyMap[6]);
  var _excluded = ["animating", "color", "hidesWhenStopped", "onLayout", "size", "style"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var PlatformActivityIndicator = require(_dependencyMap[7]).default;
  var GRAY = '#999999';
  var ActivityIndicator = (_ref, forwardedRef) => {
    var _ref$animating = _ref.animating,
      animating = _ref$animating === undefined ? true : _ref$animating,
      _ref$color = _ref.color,
      color = _ref$color === undefined ? GRAY : _ref$color,
      _ref$hidesWhenStopped = _ref.hidesWhenStopped,
      hidesWhenStopped = _ref$hidesWhenStopped === undefined ? true : _ref$hidesWhenStopped,
      onLayout = _ref.onLayout,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? 'small' : _ref$size,
      style = _ref.style,
      restProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var sizeStyle;
    var sizeProp;
    switch (size) {
      case 'small':
        sizeStyle = styles.sizeSmall;
        sizeProp = 'small';
        break;
      case 'large':
        sizeStyle = styles.sizeLarge;
        sizeProp = 'large';
        break;
      default:
        sizeStyle = {
          height: size,
          width: size
        };
        break;
    }
    var nativeProps = {
      animating,
      color,
      hidesWhenStopped,
      ...restProps,
      ref: forwardedRef,
      style: sizeStyle,
      size: sizeProp
    };
    var androidProps = {
      styleAttr: 'Normal',
      indeterminate: true
    };
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
      onLayout: onLayout,
      style: _StyleSheet.default.compose(styles.container, style),
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(PlatformActivityIndicator, {
        ...nativeProps
      })
    });
  };
  var ActivityIndicatorWithRef = /*#__PURE__*/React.forwardRef(ActivityIndicator);
  ActivityIndicatorWithRef.displayName = 'ActivityIndicator';
  var styles = _StyleSheet.default.create({
    container: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    sizeSmall: {
      width: 20,
      height: 20
    },
    sizeLarge: {
      width: 36,
      height: 36
    }
  });
  var _default = exports.default = ActivityIndicatorWithRef;
},301,[1,238,290,87,285,140,288,302]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _ActivityIndicatorViewNativeComponent = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_ActivityIndicatorViewNativeComponent).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _ActivityIndicatorViewNativeComponent[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _ActivityIndicatorViewNativeComponent[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _ActivityIndicatorViewNativeComponent.default;
},302,[303]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeComponentRegistry = require(_dependencyMap[2]);
  var nativeComponentName = 'RCTActivityIndicatorView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "RCTActivityIndicatorView",
    validAttributes: {
      hidesWhenStopped: true,
      animating: true,
      color: {
        process: require(_dependencyMap[3]).default
      },
      size: true
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
},303,[1,304,96,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _requireNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var _UIManager = _interopRequireDefault(require(_dependencyMap[2]));
  function codegenNativeComponent(componentName, options) {
    if (global.RN$Bridgeless === true && false) {
      console.warn(`Codegen didn't run for ${componentName}. This will be an error in the future. Make sure you are using @react-native/babel-preset when building your JavaScript code.`);
    }
    var componentNameInUse = options && options.paperComponentName != null ? options.paperComponentName : componentName;
    if (options != null && options.paperComponentNameDeprecated != null) {
      if (_UIManager.default.hasViewManagerConfig(componentName)) {
        componentNameInUse = componentName;
      } else if (options.paperComponentNameDeprecated != null && _UIManager.default.hasViewManagerConfig(options.paperComponentNameDeprecated)) {
        componentNameInUse = options.paperComponentNameDeprecated;
      } else {
        throw new Error(`Failed to find native component for either ${componentName} or ${options.paperComponentNameDeprecated ?? '(unknown)'}`);
      }
    }
    return (0, _requireNativeComponent.default)(componentNameInUse);
  }
  var _default = exports.default = codegenNativeComponent;
},304,[1,305,126]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var createReactNativeComponentClass = require(_dependencyMap[0]).default;
  var getNativeComponentAttributes = require(_dependencyMap[1]).default;
  var requireNativeComponent = uiViewClassName => createReactNativeComponentClass(uiViewClassName, () => getNativeComponentAttributes(uiViewClassName));
  var _default = exports.default = requireNativeComponent;
},305,[306,97]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ReactNativePrivateInterface = require(_dependencyMap[0]);
  var register = _ReactNativePrivateInterface.ReactNativeViewConfigRegistry.register;
  var createReactNativeComponentClass = function (name, callback) {
    return register(name, callback);
  };
  var _default = exports.default = createReactNativeComponentClass;
},306,[91]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[1]));
  var _Text = _interopRequireDefault(require(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var _TouchableNativeFeedback = _interopRequireDefault(require(_dependencyMap[4]));
  var _TouchableOpacity = _interopRequireDefault(require(_dependencyMap[5]));
  var _View = _interopRequireDefault(require(_dependencyMap[6]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[7]));
  var React = _interopRequireWildcard(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var Touchable = _TouchableOpacity.default;
  var Button = /*#__PURE__*/React.forwardRef((props, ref) => {
    var accessibilityLabel = props.accessibilityLabel,
      accessibilityState = props.accessibilityState,
      ariaBusy = props['aria-busy'],
      ariaChecked = props['aria-checked'],
      ariaDisabled = props['aria-disabled'],
      ariaExpanded = props['aria-expanded'],
      ariaLabel = props['aria-label'],
      ariaSelected = props['aria-selected'],
      importantForAccessibility = props.importantForAccessibility,
      color = props.color,
      onPress = props.onPress,
      touchSoundDisabled = props.touchSoundDisabled,
      title = props.title,
      hasTVPreferredFocus = props.hasTVPreferredFocus,
      nextFocusDown = props.nextFocusDown,
      nextFocusForward = props.nextFocusForward,
      nextFocusLeft = props.nextFocusLeft,
      nextFocusRight = props.nextFocusRight,
      nextFocusUp = props.nextFocusUp,
      testID = props.testID,
      accessible = props.accessible,
      accessibilityActions = props.accessibilityActions,
      accessibilityHint = props.accessibilityHint,
      accessibilityLanguage = props.accessibilityLanguage,
      onAccessibilityAction = props.onAccessibilityAction;
    var buttonStyles = [styles.button];
    var textStyles = [styles.text];
    if (color) {
      {
        textStyles.push({
          color: color
        });
      }
    }
    var _accessibilityState = {
      busy: ariaBusy ?? accessibilityState?.busy,
      checked: ariaChecked ?? accessibilityState?.checked,
      disabled: ariaDisabled ?? accessibilityState?.disabled,
      expanded: ariaExpanded ?? accessibilityState?.expanded,
      selected: ariaSelected ?? accessibilityState?.selected
    };
    var disabled = props.disabled != null ? props.disabled : _accessibilityState?.disabled;
    _accessibilityState = disabled !== _accessibilityState?.disabled ? {
      ..._accessibilityState,
      disabled
    } : _accessibilityState;
    if (disabled) {
      buttonStyles.push(styles.buttonDisabled);
      textStyles.push(styles.textDisabled);
    }
    (0, _invariant.default)(typeof title === 'string', 'The title prop of a Button must be a string');
    var formattedTitle = title;
    var _importantForAccessibility = importantForAccessibility === 'no' ? 'no-hide-descendants' : importantForAccessibility;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Touchable, {
      accessible: accessible,
      accessibilityActions: accessibilityActions,
      onAccessibilityAction: onAccessibilityAction,
      accessibilityLabel: ariaLabel || accessibilityLabel,
      accessibilityHint: accessibilityHint,
      accessibilityLanguage: accessibilityLanguage,
      accessibilityRole: "button",
      accessibilityState: _accessibilityState,
      importantForAccessibility: _importantForAccessibility,
      hasTVPreferredFocus: hasTVPreferredFocus,
      nextFocusDown: nextFocusDown,
      nextFocusForward: nextFocusForward,
      nextFocusLeft: nextFocusLeft,
      nextFocusRight: nextFocusRight,
      nextFocusUp: nextFocusUp,
      testID: testID,
      disabled: disabled,
      onPress: onPress,
      touchSoundDisabled: touchSoundDisabled,
      ref: ref,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
        style: buttonStyles,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Text.default, {
          style: textStyles,
          disabled: disabled,
          children: formattedTitle
        })
      })
    });
  });
  Button.displayName = 'Button';
  var styles = _StyleSheet.default.create({
    button: {},
    text: {
      textAlign: 'center',
      margin: 8,
      ...{
        color: '#007AFF',
        fontSize: 18
      }
    },
    buttonDisabled: {},
    textDisabled: {
      color: '#cdcdcd'
    }
  });
  var _default = exports.default = Button;
},307,[1,290,308,87,320,321,285,42,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var PressabilityDebug = _interopRequireWildcard(require(_dependencyMap[3]));
  var _usePressability = _interopRequireDefault(require(_dependencyMap[4]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[5]));
  var _processColor = _interopRequireDefault(require(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  var _TextAncestor = _interopRequireDefault(require(_dependencyMap[8]));
  var _TextNativeComponent = require(_dependencyMap[9]);
  var _react = _interopRequireWildcard(require(_dependencyMap[10]));
  var React = _react;
  var _jsxRuntime = require(_dependencyMap[11]);
  var _excluded = ["accessible", "accessibilityLabel", "accessibilityState", "allowFontScaling", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-label", "aria-selected", "children", "ellipsizeMode", "disabled", "id", "nativeID", "numberOfLines", "onLongPress", "onPress", "onPressIn", "onPressOut", "onResponderGrant", "onResponderMove", "onResponderRelease", "onResponderTerminate", "onResponderTerminationRequest", "onStartShouldSetResponder", "pressRetentionOffset", "selectable", "selectionColor", "suppressHighlighting", "style"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var Text = /*#__PURE__*/React.forwardRef((_ref, forwardedRef) => {
    var accessible = _ref.accessible,
      accessibilityLabel = _ref.accessibilityLabel,
      accessibilityState = _ref.accessibilityState,
      allowFontScaling = _ref.allowFontScaling,
      ariaBusy = _ref['aria-busy'],
      ariaChecked = _ref['aria-checked'],
      ariaDisabled = _ref['aria-disabled'],
      ariaExpanded = _ref['aria-expanded'],
      ariaLabel = _ref['aria-label'],
      ariaSelected = _ref['aria-selected'],
      children = _ref.children,
      ellipsizeMode = _ref.ellipsizeMode,
      disabled = _ref.disabled,
      id = _ref.id,
      nativeID = _ref.nativeID,
      numberOfLines = _ref.numberOfLines,
      onLongPress = _ref.onLongPress,
      onPress = _ref.onPress,
      onPressIn = _ref.onPressIn,
      onPressOut = _ref.onPressOut,
      onResponderGrant = _ref.onResponderGrant,
      onResponderMove = _ref.onResponderMove,
      onResponderRelease = _ref.onResponderRelease,
      onResponderTerminate = _ref.onResponderTerminate,
      onResponderTerminationRequest = _ref.onResponderTerminationRequest,
      onStartShouldSetResponder = _ref.onStartShouldSetResponder,
      pressRetentionOffset = _ref.pressRetentionOffset,
      selectable = _ref.selectable,
      selectionColor = _ref.selectionColor,
      suppressHighlighting = _ref.suppressHighlighting,
      style = _ref.style,
      restProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var _accessibilityLabel = ariaLabel ?? accessibilityLabel;
    var _accessibilityState = accessibilityState;
    if (ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
      if (_accessibilityState != null) {
        _accessibilityState = {
          busy: ariaBusy ?? _accessibilityState.busy,
          checked: ariaChecked ?? _accessibilityState.checked,
          disabled: ariaDisabled ?? _accessibilityState.disabled,
          expanded: ariaExpanded ?? _accessibilityState.expanded,
          selected: ariaSelected ?? _accessibilityState.selected
        };
      } else {
        _accessibilityState = {
          busy: ariaBusy,
          checked: ariaChecked,
          disabled: ariaDisabled,
          expanded: ariaExpanded,
          selected: ariaSelected
        };
      }
    }
    var _accessibilityStateDisabled = _accessibilityState?.disabled;
    var _disabled = disabled ?? _accessibilityStateDisabled;
    var isPressable = (onPress != null || onLongPress != null || onStartShouldSetResponder != null) && _disabled !== true;
    var _selectionColor = selectionColor != null ? (0, _processColor.default)(selectionColor) : undefined;
    var _style = style;
    var _numberOfLines = numberOfLines;
    if (_numberOfLines != null && !(_numberOfLines >= 0)) {
      _numberOfLines = 0;
    }
    var _selectable = selectable;
    var processedStyle = (0, _flattenStyle.default)(_style);
    if (processedStyle != null) {
      var overrides = null;
      if (typeof processedStyle.fontWeight === 'number') {
        overrides = overrides || {};
        overrides.fontWeight = processedStyle.fontWeight.toString();
      }
      if (processedStyle.userSelect != null) {
        _selectable = userSelectToSelectableMap[processedStyle.userSelect];
        overrides = overrides || {};
        overrides.userSelect = undefined;
      }
      if (processedStyle.verticalAlign != null) {
        overrides = overrides || {};
        overrides.textAlignVertical = verticalAlignToTextAlignVerticalMap[processedStyle.verticalAlign];
        overrides.verticalAlign = undefined;
      }
      if (overrides != null) {
        _style = [_style, overrides];
      }
    }
    var _nativeID = id ?? nativeID;
    var hasTextAncestor = (0, _react.useContext)(_TextAncestor.default);
    if (hasTextAncestor) {
      if (isPressable) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(NativePressableVirtualText, {
          ref: forwardedRef,
          textProps: {
            ...restProps,
            accessibilityLabel: _accessibilityLabel,
            accessibilityState: _accessibilityState,
            nativeID: _nativeID,
            numberOfLines: _numberOfLines,
            selectable: _selectable,
            selectionColor: _selectionColor,
            style: _style,
            disabled: disabled,
            children
          },
          textPressabilityProps: {
            onLongPress,
            onPress,
            onPressIn,
            onPressOut,
            onResponderGrant,
            onResponderMove,
            onResponderRelease,
            onResponderTerminate,
            onResponderTerminationRequest,
            onStartShouldSetResponder,
            pressRetentionOffset,
            suppressHighlighting
          }
        });
      }
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextNativeComponent.NativeVirtualText, {
        ...restProps,
        accessibilityLabel: _accessibilityLabel,
        accessibilityState: _accessibilityState,
        nativeID: _nativeID,
        numberOfLines: _numberOfLines,
        ref: forwardedRef,
        selectable: _selectable,
        selectionColor: _selectionColor,
        style: _style,
        disabled: disabled,
        children: children
      });
    }
    if (_disabled !== _accessibilityStateDisabled && (_disabled != null && _disabled !== false || _accessibilityStateDisabled != null && _accessibilityStateDisabled !== false)) {
      _accessibilityState = {
        ..._accessibilityState,
        disabled: _disabled
      };
    }
    var _accessible = accessible !== false;
    var nativeText = null;
    if (isPressable) {
      nativeText = /*#__PURE__*/(0, _jsxRuntime.jsx)(NativePressableText, {
        ref: forwardedRef,
        textProps: {
          ...restProps,
          accessibilityLabel: _accessibilityLabel,
          accessibilityState: _accessibilityState,
          accessible: _accessible,
          allowFontScaling: allowFontScaling !== false,
          disabled: _disabled,
          ellipsizeMode: ellipsizeMode ?? 'tail',
          nativeID: _nativeID,
          numberOfLines: _numberOfLines,
          selectable: _selectable,
          selectionColor: _selectionColor,
          style: _style,
          children
        },
        textPressabilityProps: {
          onLongPress,
          onPress,
          onPressIn,
          onPressOut,
          onResponderGrant,
          onResponderMove,
          onResponderRelease,
          onResponderTerminate,
          onResponderTerminationRequest,
          onStartShouldSetResponder,
          pressRetentionOffset,
          suppressHighlighting
        }
      });
    } else {
      nativeText = /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextNativeComponent.NativeText, {
        ...restProps,
        accessibilityLabel: _accessibilityLabel,
        accessibilityState: _accessibilityState,
        accessible: _accessible,
        allowFontScaling: allowFontScaling !== false,
        disabled: _disabled,
        ellipsizeMode: ellipsizeMode ?? 'tail',
        nativeID: _nativeID,
        numberOfLines: _numberOfLines,
        ref: forwardedRef,
        selectable: _selectable,
        selectionColor: _selectionColor,
        style: _style,
        children: children
      });
    }
    if (children == null) {
      return nativeText;
    }
    if (Array.isArray(children) && children.length <= 3) {
      var hasNonTextChild = false;
      for (var child of children) {
        if (child != null && typeof child === 'object') {
          hasNonTextChild = true;
          break;
        }
      }
      if (!hasNonTextChild) {
        return nativeText;
      }
    } else if (typeof children !== 'object') {
      return nativeText;
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
      value: true,
      children: nativeText
    });
  });
  Text.displayName = 'Text';
  function useTextPressability(_ref2) {
    var onLongPress = _ref2.onLongPress,
      onPress = _ref2.onPress,
      onPressIn = _ref2.onPressIn,
      onPressOut = _ref2.onPressOut,
      onResponderGrant = _ref2.onResponderGrant,
      onResponderMove = _ref2.onResponderMove,
      onResponderRelease = _ref2.onResponderRelease,
      onResponderTerminate = _ref2.onResponderTerminate,
      onResponderTerminationRequest = _ref2.onResponderTerminationRequest,
      onStartShouldSetResponder = _ref2.onStartShouldSetResponder,
      pressRetentionOffset = _ref2.pressRetentionOffset,
      suppressHighlighting = _ref2.suppressHighlighting;
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isHighlighted = _useState2[0],
      setHighlighted = _useState2[1];
    var config = (0, _react.useMemo)(() => {
      var _onPressIn = onPressIn;
      var _onPressOut = onPressOut;
      {
        _onPressIn = event => {
          setHighlighted(suppressHighlighting == null || !suppressHighlighting);
          onPressIn?.(event);
        };
        _onPressOut = event => {
          setHighlighted(false);
          onPressOut?.(event);
        };
      }
      return {
        disabled: false,
        pressRectOffset: pressRetentionOffset,
        onLongPress,
        onPress,
        onPressIn: _onPressIn,
        onPressOut: _onPressOut
      };
    }, [pressRetentionOffset, onLongPress, onPress, onPressIn, onPressOut, suppressHighlighting]);
    var eventHandlers = (0, _usePressability.default)(config);
    var eventHandlersForText = (0, _react.useMemo)(() => eventHandlers == null ? null : {
      onResponderGrant(event) {
        eventHandlers.onResponderGrant(event);
        if (onResponderGrant != null) {
          onResponderGrant(event);
        }
      },
      onResponderMove(event) {
        eventHandlers.onResponderMove(event);
        if (onResponderMove != null) {
          onResponderMove(event);
        }
      },
      onResponderRelease(event) {
        eventHandlers.onResponderRelease(event);
        if (onResponderRelease != null) {
          onResponderRelease(event);
        }
      },
      onResponderTerminate(event) {
        eventHandlers.onResponderTerminate(event);
        if (onResponderTerminate != null) {
          onResponderTerminate(event);
        }
      },
      onClick: eventHandlers.onClick,
      onResponderTerminationRequest: onResponderTerminationRequest != null ? onResponderTerminationRequest : eventHandlers.onResponderTerminationRequest,
      onStartShouldSetResponder: onStartShouldSetResponder != null ? onStartShouldSetResponder : eventHandlers.onStartShouldSetResponder
    }, [eventHandlers, onResponderGrant, onResponderMove, onResponderRelease, onResponderTerminate, onResponderTerminationRequest, onStartShouldSetResponder]);
    return (0, _react.useMemo)(() => [isHighlighted, eventHandlersForText], [isHighlighted, eventHandlersForText]);
  }
  var NativePressableVirtualText = /*#__PURE__*/React.forwardRef((_ref3, forwardedRef) => {
    var textProps = _ref3.textProps,
      textPressabilityProps = _ref3.textPressabilityProps;
    var _useTextPressability = useTextPressability(textPressabilityProps),
      _useTextPressability2 = (0, _slicedToArray2.default)(_useTextPressability, 2),
      isHighlighted = _useTextPressability2[0],
      eventHandlersForText = _useTextPressability2[1];
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextNativeComponent.NativeVirtualText, {
      ...textProps,
      ...eventHandlersForText,
      isHighlighted: isHighlighted,
      isPressable: true,
      ref: forwardedRef
    });
  });
  var NativePressableText = /*#__PURE__*/React.forwardRef((_ref4, forwardedRef) => {
    var textProps = _ref4.textProps,
      textPressabilityProps = _ref4.textPressabilityProps;
    var _useTextPressability3 = useTextPressability(textPressabilityProps),
      _useTextPressability4 = (0, _slicedToArray2.default)(_useTextPressability3, 2),
      isHighlighted = _useTextPressability4[0],
      eventHandlersForText = _useTextPressability4[1];
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextNativeComponent.NativeText, {
      ...textProps,
      ...eventHandlersForText,
      isHighlighted: isHighlighted,
      isPressable: true,
      ref: forwardedRef
    });
  });
  var userSelectToSelectableMap = {
    auto: true,
    text: true,
    none: false,
    contain: true,
    all: true
  };
  var verticalAlignToTextAlignVerticalMap = {
    auto: 'auto',
    top: 'top',
    bottom: 'bottom',
    middle: 'center'
  };
  var _default = exports.default = Text;
},308,[1,29,238,309,311,146,99,87,286,319,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PressabilityDebugView = PressabilityDebugView;
  exports.isEnabled = isEnabled;
  exports.setEnabled = setEnabled;
  var _View = _interopRequireDefault(require(_dependencyMap[1]));
  var _normalizeColor = _interopRequireDefault(require(_dependencyMap[2]));
  var _Rect = require(_dependencyMap[3]);
  var React = _interopRequireWildcard(require(_dependencyMap[4]));
  var _jsxRuntime = require(_dependencyMap[5]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function PressabilityDebugView(props) {
    return null;
  }
  var isDebugEnabled = false;
  function isEnabled() {
    return false;
  }
  function setEnabled(value) {}
},309,[1,285,100,310,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createSquare = createSquare;
  exports.normalizeRect = normalizeRect;
  function createSquare(size) {
    return {
      bottom: size,
      left: size,
      right: size,
      top: size
    };
  }
  function normalizeRect(rectOrSize) {
    return typeof rectOrSize === 'number' ? createSquare(rectOrSize) : rectOrSize;
  }
},310,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = usePressability;
  var _Pressability = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = require(_dependencyMap[2]);
  function usePressability(config) {
    var pressabilityRef = (0, _react.useRef)(null);
    if (config != null && pressabilityRef.current == null) {
      pressabilityRef.current = new _Pressability.default(config);
    }
    var pressability = pressabilityRef.current;
    (0, _react.useEffect)(() => {
      if (config != null && pressability != null) {
        pressability.configure(config);
      }
    }, [config, pressability]);
    (0, _react.useEffect)(() => {
      if (pressability != null) {
        return () => {
          pressability.reset();
        };
      }
    }, [pressability]);
    return pressability == null ? null : pressability.getEventHandlers();
  }
},311,[1,312,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _SoundManager = _interopRequireDefault(require(_dependencyMap[3]));
  var _ReactNativeFeatureFlags = _interopRequireDefault(require(_dependencyMap[4]));
  var _UIManager = _interopRequireDefault(require(_dependencyMap[5]));
  var _Rect = require(_dependencyMap[6]);
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  var _HoverState = require(_dependencyMap[8]);
  var _PressabilityPerformanceEventEmitter = _interopRequireDefault(require(_dependencyMap[9]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[10]));
  var Transitions = Object.freeze({
    NOT_RESPONDER: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
      RESPONDER_RELEASE: 'ERROR',
      RESPONDER_TERMINATED: 'ERROR',
      ENTER_PRESS_RECT: 'ERROR',
      LEAVE_PRESS_RECT: 'ERROR',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: 'RESPONDER_ACTIVE_PRESS_IN',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: 'RESPONDER_ACTIVE_PRESS_OUT',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
      LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: 'ERROR',
      RESPONDER_GRANT: 'ERROR',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
      LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
      LONG_PRESS_DETECTED: 'ERROR'
    },
    ERROR: {
      DELAY: 'NOT_RESPONDER',
      RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
      RESPONDER_RELEASE: 'NOT_RESPONDER',
      RESPONDER_TERMINATED: 'NOT_RESPONDER',
      ENTER_PRESS_RECT: 'NOT_RESPONDER',
      LEAVE_PRESS_RECT: 'NOT_RESPONDER',
      LONG_PRESS_DETECTED: 'NOT_RESPONDER'
    }
  });
  var isActiveSignal = signal => signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
  var isActivationSignal = signal => signal === 'RESPONDER_ACTIVE_PRESS_OUT' || signal === 'RESPONDER_ACTIVE_PRESS_IN';
  var isPressInSignal = signal => signal === 'RESPONDER_INACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
  var isTerminalSignal = signal => signal === 'RESPONDER_TERMINATED' || signal === 'RESPONDER_RELEASE';
  var DEFAULT_LONG_PRESS_DELAY_MS = 500;
  var DEFAULT_PRESS_RECT_OFFSETS = {
    bottom: 30,
    left: 20,
    right: 20,
    top: 20
  };
  var DEFAULT_MIN_PRESS_DURATION = 130;
  var DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE = 10;
  var longPressDeactivationDistance = DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE;
  var Pressability = exports.default = /*#__PURE__*/function () {
    function Pressability(config) {
      (0, _classCallCheck2.default)(this, Pressability);
      this._eventHandlers = null;
      this._hoverInDelayTimeout = null;
      this._hoverOutDelayTimeout = null;
      this._isHovered = false;
      this._longPressDelayTimeout = null;
      this._pressDelayTimeout = null;
      this._pressOutDelayTimeout = null;
      this._responderID = null;
      this._responderRegion = null;
      this._touchState = 'NOT_RESPONDER';
      this._measureCallback = (left, top, width, height, pageX, pageY) => {
        if (!left && !top && !width && !height && !pageX && !pageY) {
          return;
        }
        this._responderRegion = {
          bottom: pageY + height,
          left: pageX,
          right: pageX + width,
          top: pageY
        };
      };
      this.configure(config);
    }
    return (0, _createClass2.default)(Pressability, [{
      key: "configure",
      value: function configure(config) {
        this._config = config;
      }
    }, {
      key: "reset",
      value: function reset() {
        this._cancelHoverInDelayTimeout();
        this._cancelHoverOutDelayTimeout();
        this._cancelLongPressDelayTimeout();
        this._cancelPressDelayTimeout();
        this._cancelPressOutDelayTimeout();
        this._config = Object.freeze({});
      }
    }, {
      key: "getEventHandlers",
      value: function getEventHandlers() {
        if (this._eventHandlers == null) {
          this._eventHandlers = this._createEventHandlers();
        }
        return this._eventHandlers;
      }
    }, {
      key: "_createEventHandlers",
      value: function _createEventHandlers() {
        var focusEventHandlers = {
          onBlur: event => {
            var onBlur = this._config.onBlur;
            if (onBlur != null) {
              onBlur(event);
            }
          },
          onFocus: event => {
            var onFocus = this._config.onFocus;
            if (onFocus != null) {
              onFocus(event);
            }
          }
        };
        var responderEventHandlers = {
          onStartShouldSetResponder: () => {
            var disabled = this._config.disabled;
            return !disabled ?? true;
          },
          onResponderGrant: event => {
            event.persist();
            this._cancelPressOutDelayTimeout();
            this._responderID = event.currentTarget;
            this._touchState = 'NOT_RESPONDER';
            this._receiveSignal('RESPONDER_GRANT', event);
            var delayPressIn = normalizeDelay(this._config.delayPressIn);
            if (delayPressIn > 0) {
              this._pressDelayTimeout = setTimeout(() => {
                this._receiveSignal('DELAY', event);
              }, delayPressIn);
            } else {
              this._receiveSignal('DELAY', event);
            }
            var delayLongPress = normalizeDelay(this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS - delayPressIn);
            this._longPressDelayTimeout = setTimeout(() => {
              this._handleLongPress(event);
            }, delayLongPress + delayPressIn);
            return this._config.blockNativeResponder === true;
          },
          onResponderMove: event => {
            var onPressMove = this._config.onPressMove;
            if (onPressMove != null) {
              onPressMove(event);
            }
            var responderRegion = this._responderRegion;
            if (responderRegion == null) {
              return;
            }
            var touch = getTouchFromPressEvent(event);
            if (touch == null) {
              this._cancelLongPressDelayTimeout();
              this._receiveSignal('LEAVE_PRESS_RECT', event);
              return;
            }
            if (this._touchActivatePosition != null) {
              var deltaX = this._touchActivatePosition.pageX - touch.pageX;
              var deltaY = this._touchActivatePosition.pageY - touch.pageY;
              if (Math.hypot(deltaX, deltaY) > longPressDeactivationDistance) {
                this._cancelLongPressDelayTimeout();
              }
            }
            if (this._isTouchWithinResponderRegion(touch, responderRegion)) {
              this._receiveSignal('ENTER_PRESS_RECT', event);
            } else {
              this._cancelLongPressDelayTimeout();
              this._receiveSignal('LEAVE_PRESS_RECT', event);
            }
          },
          onResponderRelease: event => {
            this._receiveSignal('RESPONDER_RELEASE', event);
          },
          onResponderTerminate: event => {
            this._receiveSignal('RESPONDER_TERMINATED', event);
          },
          onResponderTerminationRequest: () => {
            var cancelable = this._config.cancelable;
            return cancelable ?? true;
          },
          onClick: event => {
            if (event?.nativeEvent?.hasOwnProperty?.('pointerType')) {
              return;
            }
            if (event?.currentTarget !== event?.target) {
              event?.stopPropagation();
              return;
            }
            var _this$_config = this._config,
              onPress = _this$_config.onPress,
              disabled = _this$_config.disabled;
            if (onPress != null && disabled !== true) {
              onPress(event);
            }
          }
        };
        if (_ReactNativeFeatureFlags.default.shouldPressibilityUseW3CPointerEventsForHover()) {
          var hoverPointerEvents = {
            onPointerEnter: undefined,
            onPointerLeave: undefined
          };
          var _this$_config2 = this._config,
            onHoverIn = _this$_config2.onHoverIn,
            onHoverOut = _this$_config2.onHoverOut;
          if (onHoverIn != null) {
            hoverPointerEvents.onPointerEnter = event => {
              this._isHovered = true;
              this._cancelHoverOutDelayTimeout();
              if (onHoverIn != null) {
                var delayHoverIn = normalizeDelay(this._config.delayHoverIn);
                if (delayHoverIn > 0) {
                  event.persist();
                  this._hoverInDelayTimeout = setTimeout(() => {
                    onHoverIn(convertPointerEventToMouseEvent(event));
                  }, delayHoverIn);
                } else {
                  onHoverIn(convertPointerEventToMouseEvent(event));
                }
              }
            };
          }
          if (onHoverOut != null) {
            hoverPointerEvents.onPointerLeave = event => {
              if (this._isHovered) {
                this._isHovered = false;
                this._cancelHoverInDelayTimeout();
                if (onHoverOut != null) {
                  var delayHoverOut = normalizeDelay(this._config.delayHoverOut);
                  if (delayHoverOut > 0) {
                    event.persist();
                    this._hoverOutDelayTimeout = setTimeout(() => {
                      onHoverOut(convertPointerEventToMouseEvent(event));
                    }, delayHoverOut);
                  } else {
                    onHoverOut(convertPointerEventToMouseEvent(event));
                  }
                }
              }
            };
          }
          return {
            ...focusEventHandlers,
            ...responderEventHandlers,
            ...hoverPointerEvents
          };
        } else {
          var mouseEventHandlers = null;
          return {
            ...focusEventHandlers,
            ...responderEventHandlers,
            ...mouseEventHandlers
          };
        }
      }
    }, {
      key: "_receiveSignal",
      value: function _receiveSignal(signal, event) {
        if (event.nativeEvent.timestamp != null) {
          _PressabilityPerformanceEventEmitter.default.emitEvent(() => {
            return {
              signal,
              nativeTimestamp: event.nativeEvent.timestamp
            };
          });
        }
        var prevState = this._touchState;
        var nextState = Transitions[prevState]?.[signal];
        if (this._responderID == null && signal === 'RESPONDER_RELEASE') {
          return;
        }
        (0, _invariant.default)(nextState != null && nextState !== 'ERROR', 'Pressability: Invalid signal `%s` for state `%s` on responder: %s', signal, prevState, typeof this._responderID === 'number' ? this._responderID : '<<host component>>');
        if (prevState !== nextState) {
          this._performTransitionSideEffects(prevState, nextState, signal, event);
          this._touchState = nextState;
        }
      }
    }, {
      key: "_performTransitionSideEffects",
      value: function _performTransitionSideEffects(prevState, nextState, signal, event) {
        if (isTerminalSignal(signal)) {
          this._touchActivatePosition = null;
          this._cancelLongPressDelayTimeout();
        }
        var isInitialTransition = prevState === 'NOT_RESPONDER' && nextState === 'RESPONDER_INACTIVE_PRESS_IN';
        var isActivationTransition = !isActivationSignal(prevState) && isActivationSignal(nextState);
        if (isInitialTransition || isActivationTransition) {
          this._measureResponderRegion();
        }
        if (isPressInSignal(prevState) && signal === 'LONG_PRESS_DETECTED') {
          var onLongPress = this._config.onLongPress;
          if (onLongPress != null) {
            onLongPress(event);
          }
        }
        var isPrevActive = isActiveSignal(prevState);
        var isNextActive = isActiveSignal(nextState);
        if (!isPrevActive && isNextActive) {
          this._activate(event);
        } else if (isPrevActive && !isNextActive) {
          this._deactivate(event);
        }
        if (isPressInSignal(prevState) && signal === 'RESPONDER_RELEASE') {
          if (!isNextActive && !isPrevActive) {
            this._activate(event);
            this._deactivate(event);
          }
          var _this$_config3 = this._config,
            _onLongPress = _this$_config3.onLongPress,
            onPress = _this$_config3.onPress,
            android_disableSound = _this$_config3.android_disableSound;
          if (onPress != null) {
            var isPressCanceledByLongPress = _onLongPress != null && prevState === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
            if (!isPressCanceledByLongPress) {
              onPress(event);
            }
          }
        }
        this._cancelPressDelayTimeout();
      }
    }, {
      key: "_activate",
      value: function _activate(event) {
        var onPressIn = this._config.onPressIn;
        var _getTouchFromPressEve = getTouchFromPressEvent(event),
          pageX = _getTouchFromPressEve.pageX,
          pageY = _getTouchFromPressEve.pageY;
        this._touchActivatePosition = {
          pageX,
          pageY
        };
        this._touchActivateTime = Date.now();
        if (onPressIn != null) {
          onPressIn(event);
        }
      }
    }, {
      key: "_deactivate",
      value: function _deactivate(event) {
        var onPressOut = this._config.onPressOut;
        if (onPressOut != null) {
          var minPressDuration = normalizeDelay(this._config.minPressDuration, 0, DEFAULT_MIN_PRESS_DURATION);
          var pressDuration = Date.now() - (this._touchActivateTime ?? 0);
          var delayPressOut = Math.max(minPressDuration - pressDuration, normalizeDelay(this._config.delayPressOut));
          if (delayPressOut > 0) {
            event.persist();
            this._pressOutDelayTimeout = setTimeout(() => {
              onPressOut(event);
            }, delayPressOut);
          } else {
            onPressOut(event);
          }
        }
        this._touchActivateTime = null;
      }
    }, {
      key: "_measureResponderRegion",
      value: function _measureResponderRegion() {
        if (this._responderID == null) {
          return;
        }
        if (typeof this._responderID === 'number') {
          _UIManager.default.measure(this._responderID, this._measureCallback);
        } else {
          this._responderID.measure(this._measureCallback);
        }
      }
    }, {
      key: "_isTouchWithinResponderRegion",
      value: function _isTouchWithinResponderRegion(touch, responderRegion) {
        var hitSlop = (0, _Rect.normalizeRect)(this._config.hitSlop);
        var pressRectOffset = (0, _Rect.normalizeRect)(this._config.pressRectOffset);
        var regionBottom = responderRegion.bottom;
        var regionLeft = responderRegion.left;
        var regionRight = responderRegion.right;
        var regionTop = responderRegion.top;
        if (hitSlop != null) {
          if (hitSlop.bottom != null) {
            regionBottom += hitSlop.bottom;
          }
          if (hitSlop.left != null) {
            regionLeft -= hitSlop.left;
          }
          if (hitSlop.right != null) {
            regionRight += hitSlop.right;
          }
          if (hitSlop.top != null) {
            regionTop -= hitSlop.top;
          }
        }
        regionBottom += pressRectOffset?.bottom ?? DEFAULT_PRESS_RECT_OFFSETS.bottom;
        regionLeft -= pressRectOffset?.left ?? DEFAULT_PRESS_RECT_OFFSETS.left;
        regionRight += pressRectOffset?.right ?? DEFAULT_PRESS_RECT_OFFSETS.right;
        regionTop -= pressRectOffset?.top ?? DEFAULT_PRESS_RECT_OFFSETS.top;
        return touch.pageX > regionLeft && touch.pageX < regionRight && touch.pageY > regionTop && touch.pageY < regionBottom;
      }
    }, {
      key: "_handleLongPress",
      value: function _handleLongPress(event) {
        if (this._touchState === 'RESPONDER_ACTIVE_PRESS_IN' || this._touchState === 'RESPONDER_ACTIVE_LONG_PRESS_IN') {
          this._receiveSignal('LONG_PRESS_DETECTED', event);
        }
      }
    }, {
      key: "_cancelHoverInDelayTimeout",
      value: function _cancelHoverInDelayTimeout() {
        if (this._hoverInDelayTimeout != null) {
          clearTimeout(this._hoverInDelayTimeout);
          this._hoverInDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelHoverOutDelayTimeout",
      value: function _cancelHoverOutDelayTimeout() {
        if (this._hoverOutDelayTimeout != null) {
          clearTimeout(this._hoverOutDelayTimeout);
          this._hoverOutDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelLongPressDelayTimeout",
      value: function _cancelLongPressDelayTimeout() {
        if (this._longPressDelayTimeout != null) {
          clearTimeout(this._longPressDelayTimeout);
          this._longPressDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelPressDelayTimeout",
      value: function _cancelPressDelayTimeout() {
        if (this._pressDelayTimeout != null) {
          clearTimeout(this._pressDelayTimeout);
          this._pressDelayTimeout = null;
        }
      }
    }, {
      key: "_cancelPressOutDelayTimeout",
      value: function _cancelPressOutDelayTimeout() {
        if (this._pressOutDelayTimeout != null) {
          clearTimeout(this._pressOutDelayTimeout);
          this._pressOutDelayTimeout = null;
        }
      }
    }], [{
      key: "setLongPressDeactivationDistance",
      value: function setLongPressDeactivationDistance(distance) {
        longPressDeactivationDistance = distance;
      }
    }]);
  }();
  function normalizeDelay(delay) {
    var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return Math.max(min, delay ?? fallback);
  }
  var getTouchFromPressEvent = event => {
    var _event$nativeEvent = event.nativeEvent,
      changedTouches = _event$nativeEvent.changedTouches,
      touches = _event$nativeEvent.touches;
    if (touches != null && touches.length > 0) {
      return touches[0];
    }
    if (changedTouches != null && changedTouches.length > 0) {
      return changedTouches[0];
    }
    return event.nativeEvent;
  };
  function convertPointerEventToMouseEvent(input) {
    var _input$nativeEvent = input.nativeEvent,
      clientX = _input$nativeEvent.clientX,
      clientY = _input$nativeEvent.clientY;
    return {
      ...input,
      nativeEvent: {
        clientX,
        clientY,
        pageX: clientX,
        pageY: clientY,
        timestamp: input.timeStamp
      }
    };
  }
},312,[1,10,11,313,316,126,310,87,317,318,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeSoundManager = _interopRequireDefault(require(_dependencyMap[1]));
  var SoundManager = {
    playTouchSound: function () {
      if (_NativeSoundManager.default) {
        _NativeSoundManager.default.playTouchSound();
      }
    }
  };
  var _default = exports.default = SoundManager;
},313,[1,314]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeSoundManager = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeSoundManager).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeSoundManager[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeSoundManager[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeSoundManager.default;
},314,[315]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('SoundManager');
},315,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ReactNativeFeatureFlags = {
    shouldEmitW3CPointerEvents: () => false,
    shouldPressibilityUseW3CPointerEventsForHover: () => false
  };
  var _default = exports.default = ReactNativeFeatureFlags;
},316,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isHoverEnabled = isHoverEnabled;
  var _Platform = _interopRequireDefault(require(_dependencyMap[1]));
  var isEnabled = false;
  function isHoverEnabled() {
    return isEnabled;
  }
},317,[1,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var PressabilityPerformanceEventEmitter = /*#__PURE__*/function () {
    function PressabilityPerformanceEventEmitter() {
      (0, _classCallCheck2.default)(this, PressabilityPerformanceEventEmitter);
      this._listeners = [];
    }
    return (0, _createClass2.default)(PressabilityPerformanceEventEmitter, [{
      key: "addListener",
      value: function addListener(listener) {
        this._listeners.push(listener);
      }
    }, {
      key: "removeListener",
      value: function removeListener(listener) {
        var index = this._listeners.indexOf(listener);
        if (index > -1) {
          this._listeners.splice(index, 1);
        }
      }
    }, {
      key: "emitEvent",
      value: function emitEvent(constructEvent) {
        if (this._listeners.length === 0) {
          return;
        }
        var event = constructEvent();
        this._listeners.forEach(listener => listener(event));
      }
    }]);
  }();
  var PressabilityPerformanceEventEmitterSingleton = new PressabilityPerformanceEventEmitter();
  var _default = exports.default = PressabilityPerformanceEventEmitterSingleton;
},318,[1,10,11]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NativeVirtualText = exports.NativeText = undefined;
  var _ViewConfig = require(_dependencyMap[1]);
  var _UIManager = _interopRequireDefault(require(_dependencyMap[2]));
  var _createReactNativeComponentClass = _interopRequireDefault(require(_dependencyMap[3]));
  var textViewConfig = {
    validAttributes: {
      isHighlighted: true,
      isPressable: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      dynamicTypeRamp: true,
      maxFontSizeMultiplier: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true,
      onTextLayout: true,
      onInlineViewLayout: true,
      dataDetectorType: true,
      android_hyphenationFrequency: true,
      lineBreakStrategyIOS: true
    },
    directEventTypes: {
      topTextLayout: {
        registrationName: 'onTextLayout'
      },
      topInlineViewLayout: {
        registrationName: 'onInlineViewLayout'
      }
    },
    uiViewClassName: 'RCTText'
  };
  var virtualTextViewConfig = {
    validAttributes: {
      isHighlighted: true,
      isPressable: true,
      maxFontSizeMultiplier: true
    },
    uiViewClassName: 'RCTVirtualText'
  };
  var NativeText = exports.NativeText = (0, _createReactNativeComponentClass.default)('RCTText', () => (0, _ViewConfig.createViewConfig)(textViewConfig));
  var NativeVirtualText = exports.NativeVirtualText = !global.RN$Bridgeless && !_UIManager.default.hasViewManagerConfig('RCTVirtualText') ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', () => (0, _ViewConfig.createViewConfig)(virtualTextViewConfig));
},319,[1,136,126,306]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _View = _interopRequireDefault(require(_dependencyMap[7]));
  var _Pressability = _interopRequireDefault(require(_dependencyMap[8]));
  var _PressabilityDebug = require(_dependencyMap[9]);
  var _RendererProxy = require(_dependencyMap[10]);
  var _processColor = _interopRequireDefault(require(_dependencyMap[11]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[12]));
  var _ViewNativeComponent = require(_dependencyMap[13]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[14]));
  var React = _interopRequireWildcard(require(_dependencyMap[15]));
  var _jsxRuntime = require(_dependencyMap[16]);
  var _excluded = ["onBlur", "onFocus"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var TouchableNativeFeedback = /*#__PURE__*/function (_React$Component) {
    function TouchableNativeFeedback() {
      var _this;
      (0, _classCallCheck2.default)(this, TouchableNativeFeedback);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, TouchableNativeFeedback, [...args]);
      _this.state = {
        pressability: new _Pressability.default(_this._createPressabilityConfig())
      };
      return _this;
    }
    (0, _inherits2.default)(TouchableNativeFeedback, _React$Component);
    return (0, _createClass2.default)(TouchableNativeFeedback, [{
      key: "_createPressabilityConfig",
      value: function _createPressabilityConfig() {
        var accessibilityStateDisabled = this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled;
        return {
          cancelable: !this.props.rejectResponderTermination,
          disabled: this.props.disabled != null ? this.props.disabled : accessibilityStateDisabled,
          hitSlop: this.props.hitSlop,
          delayLongPress: this.props.delayLongPress,
          delayPressIn: this.props.delayPressIn,
          delayPressOut: this.props.delayPressOut,
          minPressDuration: 0,
          pressRectOffset: this.props.pressRetentionOffset,
          android_disableSound: this.props.touchSoundDisabled,
          onLongPress: this.props.onLongPress,
          onPress: this.props.onPress,
          onPressIn: event => {
            if (this.props.onPressIn != null) {
              this.props.onPressIn(event);
            }
          },
          onPressMove: event => {},
          onPressOut: event => {
            if (this.props.onPressOut != null) {
              this.props.onPressOut(event);
            }
          }
        };
      }
    }, {
      key: "_dispatchPressedStateChange",
      value: function _dispatchPressedStateChange(pressed) {}
    }, {
      key: "_dispatchHotspotUpdate",
      value: function _dispatchHotspotUpdate(event) {}
    }, {
      key: "render",
      value: function render() {
        var element = React.Children.only(this.props.children);
        var children = [element.props.children];
        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
          onBlur = _this$state$pressabil.onBlur,
          onFocus = _this$state$pressabil.onFocus,
          eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);
        var _accessibilityState = {
          busy: this.props['aria-busy'] ?? this.props.accessibilityState?.busy,
          checked: this.props['aria-checked'] ?? this.props.accessibilityState?.checked,
          disabled: this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled,
          expanded: this.props['aria-expanded'] ?? this.props.accessibilityState?.expanded,
          selected: this.props['aria-selected'] ?? this.props.accessibilityState?.selected
        };
        _accessibilityState = this.props.disabled != null ? {
          ..._accessibilityState,
          disabled: this.props.disabled
        } : _accessibilityState;
        var accessibilityValue = {
          max: this.props['aria-valuemax'] ?? this.props.accessibilityValue?.max,
          min: this.props['aria-valuemin'] ?? this.props.accessibilityValue?.min,
          now: this.props['aria-valuenow'] ?? this.props.accessibilityValue?.now,
          text: this.props['aria-valuetext'] ?? this.props.accessibilityValue?.text
        };
        var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;
        var accessibilityLabel = this.props['aria-label'] ?? this.props.accessibilityLabel;
        return /*#__PURE__*/React.cloneElement(element, {
          ...eventHandlersWithoutBlurAndFocus,
          ...getBackgroundProp(this.props.background === undefined ? TouchableNativeFeedback.SelectableBackground() : this.props.background, this.props.useForeground === true),
          accessible: this.props.accessible !== false,
          accessibilityHint: this.props.accessibilityHint,
          accessibilityLanguage: this.props.accessibilityLanguage,
          accessibilityLabel: accessibilityLabel,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityState: _accessibilityState,
          accessibilityActions: this.props.accessibilityActions,
          onAccessibilityAction: this.props.onAccessibilityAction,
          accessibilityValue: accessibilityValue,
          importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
          accessibilityViewIsModal: this.props['aria-modal'] ?? this.props.accessibilityViewIsModal,
          accessibilityLiveRegion: accessibilityLiveRegion,
          accessibilityElementsHidden: this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          hitSlop: this.props.hitSlop,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
          nativeID: this.props.id ?? this.props.nativeID,
          nextFocusDown: this.props.nextFocusDown,
          nextFocusForward: this.props.nextFocusForward,
          nextFocusLeft: this.props.nextFocusLeft,
          nextFocusRight: this.props.nextFocusRight,
          nextFocusUp: this.props.nextFocusUp,
          onLayout: this.props.onLayout,
          testID: this.props.testID
        }, ...children);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        this.state.pressability.configure(this._createPressabilityConfig());
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.state.pressability.configure(this._createPressabilityConfig());
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.state.pressability.reset();
      }
    }]);
  }(React.Component);
  TouchableNativeFeedback.SelectableBackground = rippleRadius => ({
    type: 'ThemeAttrAndroid',
    attribute: 'selectableItemBackground',
    rippleRadius
  });
  TouchableNativeFeedback.SelectableBackgroundBorderless = rippleRadius => ({
    type: 'ThemeAttrAndroid',
    attribute: 'selectableItemBackgroundBorderless',
    rippleRadius
  });
  TouchableNativeFeedback.Ripple = (color, borderless, rippleRadius) => {
    var processedColor = (0, _processColor.default)(color);
    (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
    return {
      type: 'RippleAndroid',
      color: processedColor,
      borderless,
      rippleRadius
    };
  };
  TouchableNativeFeedback.canUseNativeForeground = () => false;
  var getBackgroundProp = (background, useForeground) => null;
  TouchableNativeFeedback.displayName = 'TouchableNativeFeedback';
  var _default = exports.default = TouchableNativeFeedback;
},320,[1,238,10,11,64,66,69,285,312,309,74,99,87,287,42,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _Animated = _interopRequireDefault(require(_dependencyMap[7]));
  var _Easing = _interopRequireDefault(require(_dependencyMap[8]));
  var _Pressability = _interopRequireDefault(require(_dependencyMap[9]));
  var _PressabilityDebug = require(_dependencyMap[10]);
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[11]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[12]));
  var React = _interopRequireWildcard(require(_dependencyMap[13]));
  var _jsxRuntime = require(_dependencyMap[14]);
  var _excluded = ["onBlur", "onFocus"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var TouchableOpacity = /*#__PURE__*/function (_React$Component) {
    function TouchableOpacity() {
      var _this;
      (0, _classCallCheck2.default)(this, TouchableOpacity);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, TouchableOpacity, [...args]);
      _this.state = {
        anim: new _Animated.default.Value(_this._getChildStyleOpacityWithDefault()),
        pressability: new _Pressability.default(_this._createPressabilityConfig())
      };
      return _this;
    }
    (0, _inherits2.default)(TouchableOpacity, _React$Component);
    return (0, _createClass2.default)(TouchableOpacity, [{
      key: "_createPressabilityConfig",
      value: function _createPressabilityConfig() {
        return {
          cancelable: !this.props.rejectResponderTermination,
          disabled: this.props.disabled ?? this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled,
          hitSlop: this.props.hitSlop,
          delayLongPress: this.props.delayLongPress,
          delayPressIn: this.props.delayPressIn,
          delayPressOut: this.props.delayPressOut,
          minPressDuration: 0,
          pressRectOffset: this.props.pressRetentionOffset,
          onBlur: event => {
            if (_Platform.default.isTV) {
              this._opacityInactive(250);
            }
            if (this.props.onBlur != null) {
              this.props.onBlur(event);
            }
          },
          onFocus: event => {
            if (_Platform.default.isTV) {
              this._opacityActive(150);
            }
            if (this.props.onFocus != null) {
              this.props.onFocus(event);
            }
          },
          onLongPress: this.props.onLongPress,
          onPress: this.props.onPress,
          onPressIn: event => {
            this._opacityActive(event.dispatchConfig.registrationName === 'onResponderGrant' ? 0 : 150);
            if (this.props.onPressIn != null) {
              this.props.onPressIn(event);
            }
          },
          onPressOut: event => {
            this._opacityInactive(250);
            if (this.props.onPressOut != null) {
              this.props.onPressOut(event);
            }
          }
        };
      }
    }, {
      key: "_setOpacityTo",
      value: function _setOpacityTo(toValue, duration) {
        _Animated.default.timing(this.state.anim, {
          toValue,
          duration,
          easing: _Easing.default.inOut(_Easing.default.quad),
          useNativeDriver: true
        }).start();
      }
    }, {
      key: "_opacityActive",
      value: function _opacityActive(duration) {
        this._setOpacityTo(this.props.activeOpacity ?? 0.2, duration);
      }
    }, {
      key: "_opacityInactive",
      value: function _opacityInactive(duration) {
        this._setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
      }
    }, {
      key: "_getChildStyleOpacityWithDefault",
      value: function _getChildStyleOpacityWithDefault() {
        var opacity = (0, _flattenStyle.default)(this.props.style)?.opacity;
        return typeof opacity === 'number' ? opacity : 1;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
          onBlur = _this$state$pressabil.onBlur,
          onFocus = _this$state$pressabil.onFocus,
          eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);
        var _accessibilityState = {
          busy: this.props['aria-busy'] ?? this.props.accessibilityState?.busy,
          checked: this.props['aria-checked'] ?? this.props.accessibilityState?.checked,
          disabled: this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled,
          expanded: this.props['aria-expanded'] ?? this.props.accessibilityState?.expanded,
          selected: this.props['aria-selected'] ?? this.props.accessibilityState?.selected
        };
        _accessibilityState = this.props.disabled != null ? {
          ..._accessibilityState,
          disabled: this.props.disabled
        } : _accessibilityState;
        var accessibilityValue = {
          max: this.props['aria-valuemax'] ?? this.props.accessibilityValue?.max,
          min: this.props['aria-valuemin'] ?? this.props.accessibilityValue?.min,
          now: this.props['aria-valuenow'] ?? this.props.accessibilityValue?.now,
          text: this.props['aria-valuetext'] ?? this.props.accessibilityValue?.text
        };
        var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;
        var accessibilityLabel = this.props['aria-label'] ?? this.props.accessibilityLabel;
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Animated.default.View, {
          accessible: this.props.accessible !== false,
          accessibilityLabel: accessibilityLabel,
          accessibilityHint: this.props.accessibilityHint,
          accessibilityLanguage: this.props.accessibilityLanguage,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityState: _accessibilityState,
          accessibilityActions: this.props.accessibilityActions,
          onAccessibilityAction: this.props.onAccessibilityAction,
          accessibilityValue: accessibilityValue,
          importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
          accessibilityViewIsModal: this.props['aria-modal'] ?? this.props.accessibilityViewIsModal,
          accessibilityLiveRegion: accessibilityLiveRegion,
          accessibilityElementsHidden: this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,
          style: [this.props.style, {
            opacity: this.state.anim
          }],
          nativeID: this.props.id ?? this.props.nativeID,
          testID: this.props.testID,
          onLayout: this.props.onLayout,
          nextFocusDown: this.props.nextFocusDown,
          nextFocusForward: this.props.nextFocusForward,
          nextFocusLeft: this.props.nextFocusLeft,
          nextFocusRight: this.props.nextFocusRight,
          nextFocusUp: this.props.nextFocusUp,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          hitSlop: this.props.hitSlop,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
          ref: this.props.hostRef,
          ...eventHandlersWithoutBlurAndFocus,
          children: [this.props.children, null]
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        this.state.pressability.configure(this._createPressabilityConfig());
        if (this.props.disabled !== prevProps.disabled || (0, _flattenStyle.default)(prevProps.style)?.opacity !== (0, _flattenStyle.default)(this.props.style)?.opacity) {
          this._opacityInactive(250);
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.state.pressability.configure(this._createPressabilityConfig());
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.state.pressability.reset();
        this.state.anim.resetAnimation();
      }
    }]);
  }(React.Component);
  var Touchable = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableOpacity, {
    ...props,
    hostRef: ref
  }));
  Touchable.displayName = 'TouchableOpacity';
  var _default = exports.default = Touchable;
},321,[1,238,10,11,64,66,69,322,339,312,309,146,87,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var Animated = require(_dependencyMap[0]).default;
  var _default = exports.default = Animated;
},322,[323]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Platform = _interopRequireDefault(require(_dependencyMap[1]));
  var _AnimatedImplementation = _interopRequireDefault(require(_dependencyMap[2]));
  var _AnimatedMock = _interopRequireDefault(require(_dependencyMap[3]));
  var Animated = _Platform.default.isDisableAnimations ? _AnimatedMock.default : _AnimatedImplementation.default;
  var _default = exports.default = {
    get FlatList() {
      return require(_dependencyMap[4]).default;
    },
    get Image() {
      return require(_dependencyMap[5]).default;
    },
    get ScrollView() {
      return require(_dependencyMap[6]).default;
    },
    get SectionList() {
      return require(_dependencyMap[7]).default;
    },
    get Text() {
      return require(_dependencyMap[8]).default;
    },
    get View() {
      return require(_dependencyMap[9]).default;
    },
    ...Animated
  };
},323,[1,87,324,367,368,386,395,422,424,425]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _AnimatedEvent = require(_dependencyMap[1]);
  var _DecayAnimation = _interopRequireDefault(require(_dependencyMap[2]));
  var _SpringAnimation = _interopRequireDefault(require(_dependencyMap[3]));
  var _TimingAnimation = _interopRequireDefault(require(_dependencyMap[4]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[5]));
  var _AnimatedAddition = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedColor = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedDiffClamp = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedDivision = _interopRequireDefault(require(_dependencyMap[9]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[10]));
  var _AnimatedModulo = _interopRequireDefault(require(_dependencyMap[11]));
  var _AnimatedMultiplication = _interopRequireDefault(require(_dependencyMap[12]));
  var _AnimatedNode = _interopRequireDefault(require(_dependencyMap[13]));
  var _AnimatedSubtraction = _interopRequireDefault(require(_dependencyMap[14]));
  var _AnimatedTracking = _interopRequireDefault(require(_dependencyMap[15]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[16]));
  var _AnimatedValueXY = _interopRequireDefault(require(_dependencyMap[17]));
  var add = function (a, b) {
    return new _AnimatedAddition.default(a, b);
  };
  var subtract = function (a, b) {
    return new _AnimatedSubtraction.default(a, b);
  };
  var divide = function (a, b) {
    return new _AnimatedDivision.default(a, b);
  };
  var multiply = function (a, b) {
    return new _AnimatedMultiplication.default(a, b);
  };
  var modulo = function (a, modulus) {
    return new _AnimatedModulo.default(a, modulus);
  };
  var diffClamp = function (a, min, max) {
    return new _AnimatedDiffClamp.default(a, min, max);
  };
  var _combineCallbacks = function (callback, config) {
    if (callback && config.onComplete) {
      return function () {
        config.onComplete && config.onComplete(...arguments);
        callback && callback(...arguments);
      };
    } else {
      return callback || config.onComplete;
    }
  };
  var maybeVectorAnim = function (value, config, anim) {
    if (value instanceof _AnimatedValueXY.default) {
      var configX = {
        ...config
      };
      var configY = {
        ...config
      };
      for (var key in config) {
        var _config$key = config[key],
          x = _config$key.x,
          y = _config$key.y;
        if (x !== undefined && y !== undefined) {
          configX[key] = x;
          configY[key] = y;
        }
      }
      var aX = anim(value.x, configX);
      var aY = anim(value.y, configY);
      return parallel([aX, aY], {
        stopTogether: false
      });
    } else if (value instanceof _AnimatedColor.default) {
      var configR = {
        ...config
      };
      var configG = {
        ...config
      };
      var configB = {
        ...config
      };
      var configA = {
        ...config
      };
      for (var _key in config) {
        var _config$_key = config[_key],
          r = _config$_key.r,
          g = _config$_key.g,
          b = _config$_key.b,
          a = _config$_key.a;
        if (r !== undefined && g !== undefined && b !== undefined && a !== undefined) {
          configR[_key] = r;
          configG[_key] = g;
          configB[_key] = b;
          configA[_key] = a;
        }
      }
      var aR = anim(value.r, configR);
      var aG = anim(value.g, configG);
      var aB = anim(value.b, configB);
      var aA = anim(value.a, configA);
      return parallel([aR, aG, aB, aA], {
        stopTogether: false
      });
    }
    return null;
  };
  var spring = function (value, config) {
    var start = function (animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      if (configuration.toValue instanceof _AnimatedNode.default) {
        singleValue.track(new _AnimatedTracking.default(singleValue, configuration.toValue, _SpringAnimation.default, singleConfig, callback));
      } else {
        singleValue.animate(new _SpringAnimation.default(singleConfig), callback);
      }
    };
    return maybeVectorAnim(value, config, spring) || {
      start: function (callback) {
        start(value, config, callback);
      },
      stop: function () {
        value.stopAnimation();
      },
      reset: function () {
        value.resetAnimation();
      },
      _startNativeLoop: function (iterations) {
        var singleConfig = {
          ...config,
          iterations
        };
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function () {
        return config.useNativeDriver || false;
      }
    };
  };
  var timing = function (value, config) {
    var start = function (animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      if (configuration.toValue instanceof _AnimatedNode.default) {
        singleValue.track(new _AnimatedTracking.default(singleValue, configuration.toValue, _TimingAnimation.default, singleConfig, callback));
      } else {
        singleValue.animate(new _TimingAnimation.default(singleConfig), callback);
      }
    };
    return maybeVectorAnim(value, config, timing) || {
      start: function (callback, isLooping) {
        start(value, {
          ...config,
          isLooping
        }, callback);
      },
      stop: function () {
        value.stopAnimation();
      },
      reset: function () {
        value.resetAnimation();
      },
      _startNativeLoop: function (iterations) {
        var singleConfig = {
          ...config,
          iterations
        };
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function () {
        return config.useNativeDriver || false;
      }
    };
  };
  var decay = function (value, config) {
    var start = function (animatedValue, configuration, callback) {
      callback = _combineCallbacks(callback, configuration);
      var singleValue = animatedValue;
      var singleConfig = configuration;
      singleValue.stopTracking();
      singleValue.animate(new _DecayAnimation.default(singleConfig), callback);
    };
    return maybeVectorAnim(value, config, decay) || {
      start: function (callback) {
        start(value, config, callback);
      },
      stop: function () {
        value.stopAnimation();
      },
      reset: function () {
        value.resetAnimation();
      },
      _startNativeLoop: function (iterations) {
        var singleConfig = {
          ...config,
          iterations
        };
        start(value, singleConfig);
      },
      _isUsingNativeDriver: function () {
        return config.useNativeDriver || false;
      }
    };
  };
  var sequence = function (animations) {
    var current = 0;
    return {
      start: function (callback, isLooping) {
        var onComplete = function (result) {
          if (!result.finished) {
            callback && callback(result);
            return;
          }
          current++;
          if (current === animations.length) {
            current = 0;
            callback && callback(result);
            return;
          }
          animations[current].start(onComplete, isLooping);
        };
        if (animations.length === 0) {
          callback && callback({
            finished: true
          });
        } else {
          animations[current].start(onComplete, isLooping);
        }
      },
      stop: function () {
        if (current < animations.length) {
          animations[current].stop();
        }
      },
      reset: function () {
        animations.forEach((animation, idx) => {
          if (idx <= current) {
            animation.reset();
          }
        });
        current = 0;
      },
      _startNativeLoop: function () {
        throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
      },
      _isUsingNativeDriver: function () {
        return false;
      }
    };
  };
  var parallel = function (animations, config) {
    var doneCount = 0;
    var hasEnded = {};
    var stopTogether = !(config && config.stopTogether === false);
    var result = {
      start: function (callback, isLooping) {
        if (doneCount === animations.length) {
          callback && callback({
            finished: true
          });
          return;
        }
        animations.forEach((animation, idx) => {
          var cb = function (endResult) {
            hasEnded[idx] = true;
            doneCount++;
            if (doneCount === animations.length) {
              doneCount = 0;
              callback && callback(endResult);
              return;
            }
            if (!endResult.finished && stopTogether) {
              result.stop();
            }
          };
          if (!animation) {
            cb({
              finished: true
            });
          } else {
            animation.start(cb, isLooping);
          }
        });
      },
      stop: function () {
        animations.forEach((animation, idx) => {
          !hasEnded[idx] && animation.stop();
          hasEnded[idx] = true;
        });
      },
      reset: function () {
        animations.forEach((animation, idx) => {
          animation.reset();
          hasEnded[idx] = false;
          doneCount = 0;
        });
      },
      _startNativeLoop: function () {
        throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
      },
      _isUsingNativeDriver: function () {
        return false;
      }
    };
    return result;
  };
  var delay = function (time) {
    return timing(new _AnimatedValue.default(0), {
      toValue: 0,
      delay: time,
      duration: 0,
      useNativeDriver: false
    });
  };
  var stagger = function (time, animations) {
    return parallel(animations.map((animation, i) => {
      return sequence([delay(time * i), animation]);
    }));
  };
  var loop = function (animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$iterations = _ref.iterations,
      iterations = _ref$iterations === undefined ? -1 : _ref$iterations,
      _ref$resetBeforeItera = _ref.resetBeforeIteration,
      resetBeforeIteration = _ref$resetBeforeItera === undefined ? true : _ref$resetBeforeItera;
    var isFinished = false;
    var iterationsSoFar = 0;
    return {
      start: function (callback) {
        var restart = function () {
          var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            finished: true
          };
          if (isFinished || iterationsSoFar === iterations || result.finished === false) {
            callback && callback(result);
          } else {
            iterationsSoFar++;
            resetBeforeIteration && animation.reset();
            animation.start(restart, iterations === -1);
          }
        };
        if (!animation || iterations === 0) {
          callback && callback({
            finished: true
          });
        } else {
          if (animation._isUsingNativeDriver()) {
            animation._startNativeLoop(iterations);
          } else {
            restart();
          }
        }
      },
      stop: function () {
        isFinished = true;
        animation.stop();
      },
      reset: function () {
        iterationsSoFar = 0;
        isFinished = false;
        animation.reset();
      },
      _startNativeLoop: function () {
        throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
      },
      _isUsingNativeDriver: function () {
        return animation._isUsingNativeDriver();
      }
    };
  };
  function forkEvent(event, listener) {
    if (!event) {
      return listener;
    } else if (event instanceof _AnimatedEvent.AnimatedEvent) {
      event.__addListener(listener);
      return event;
    } else {
      return function () {
        typeof event === 'function' && event(...arguments);
        listener(...arguments);
      };
    }
  }
  function unforkEvent(event, listener) {
    if (event && event instanceof _AnimatedEvent.AnimatedEvent) {
      event.__removeListener(listener);
    }
  }
  var event = function (argMapping, config) {
    var animatedEvent = new _AnimatedEvent.AnimatedEvent(argMapping, config);
    if (animatedEvent.__isNative) {
      return animatedEvent;
    } else {
      return animatedEvent.__getHandler();
    }
  };
  var _default = exports.default = {
    Value: _AnimatedValue.default,
    ValueXY: _AnimatedValueXY.default,
    Color: _AnimatedColor.default,
    Interpolation: _AnimatedInterpolation.default,
    Node: _AnimatedNode.default,
    decay,
    timing,
    spring,
    add,
    subtract,
    divide,
    multiply,
    modulo,
    diffClamp,
    delay,
    sequence,
    parallel,
    stagger,
    loop,
    event,
    createAnimatedComponent: _createAnimatedComponent.default,
    attachNativeEvent: _AnimatedEvent.attachNativeEvent,
    forkEvent,
    unforkEvent,
    Event: _AnimatedEvent.AnimatedEvent
  };
},324,[1,325,344,350,353,354,360,351,361,362,336,363,364,342,365,366,332,343]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AnimatedEvent = undefined;
  exports.attachNativeEvent = attachNativeEvent;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[3]));
  var _RendererProxy = require(_dependencyMap[4]);
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[5]));
  var _AnimatedValueXY = _interopRequireDefault(require(_dependencyMap[6]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[7]));
  function attachNativeEvent(viewRef, eventName, argMapping, platformConfig) {
    var eventMappings = [];
    var traverse = (value, path) => {
      if (value instanceof _AnimatedValue.default) {
        value.__makeNative(platformConfig);
        eventMappings.push({
          nativeEventPath: path,
          animatedValueTag: value.__getNativeTag()
        });
      } else if (value instanceof _AnimatedValueXY.default) {
        traverse(value.x, path.concat('x'));
        traverse(value.y, path.concat('y'));
      } else if (typeof value === 'object') {
        for (var _key in value) {
          traverse(value[_key], path.concat(_key));
        }
      }
    };
    (0, _invariant.default)(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');
    traverse(argMapping[0].nativeEvent, []);
    var viewTag = (0, _RendererProxy.findNodeHandle)(viewRef);
    if (viewTag != null) {
      eventMappings.forEach(mapping => {
        _NativeAnimatedHelper.default.API.addAnimatedEventToView(viewTag, eventName, mapping);
      });
    }
    return {
      detach() {
        if (viewTag != null) {
          eventMappings.forEach(mapping => {
            _NativeAnimatedHelper.default.API.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
          });
        }
      }
    };
  }
  var AnimatedEvent = exports.AnimatedEvent = /*#__PURE__*/function () {
    function AnimatedEvent(argMapping, config) {
      var _this = this;
      (0, _classCallCheck2.default)(this, AnimatedEvent);
      this._listeners = [];
      this._callListeners = function () {
        for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
          args[_key2] = arguments[_key2];
        }
        _this._listeners.forEach(listener => listener(...args));
      };
      this._argMapping = argMapping;
      if (config == null) {
        console.warn('Animated.event now requires a second argument for options');
        config = {
          useNativeDriver: false
        };
      }
      if (config.listener) {
        this.__addListener(config.listener);
      }
      this._attachedEvent = null;
      this.__isNative = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
      this.__platformConfig = config.platformConfig;
    }
    return (0, _createClass2.default)(AnimatedEvent, [{
      key: "__addListener",
      value: function __addListener(callback) {
        this._listeners.push(callback);
      }
    }, {
      key: "__removeListener",
      value: function __removeListener(callback) {
        this._listeners = this._listeners.filter(listener => listener !== callback);
      }
    }, {
      key: "__attach",
      value: function __attach(viewRef, eventName) {
        (0, _invariant.default)(this.__isNative, 'Only native driven events need to be attached.');
        this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping, this.__platformConfig);
      }
    }, {
      key: "__detach",
      value: function __detach(viewTag, eventName) {
        (0, _invariant.default)(this.__isNative, 'Only native driven events need to be detached.');
        this._attachedEvent && this._attachedEvent.detach();
      }
    }, {
      key: "__getHandler",
      value: function __getHandler() {
        var _this2 = this;
        if (this.__isNative) {
          {
            return this._callListeners;
          }
        }
        var validatedMapping = false;
        return function () {
          for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
            args[_key4] = arguments[_key4];
          }
          var traverse = (recMapping, recEvt) => {
            if (recMapping instanceof _AnimatedValue.default) {
              if (typeof recEvt === 'number') {
                recMapping.setValue(recEvt);
              }
            } else if (recMapping instanceof _AnimatedValueXY.default) {
              if (typeof recEvt === 'object') {
                traverse(recMapping.x, recEvt.x);
                traverse(recMapping.y, recEvt.y);
              }
            } else if (typeof recMapping === 'object') {
              for (var mappingKey in recMapping) {
                traverse(recMapping[mappingKey], recEvt[mappingKey]);
              }
            }
          };
          _this2._argMapping.forEach((mapping, idx) => {
            traverse(mapping, args[idx]);
          });
          _this2._callListeners(...args);
        };
      }
    }]);
  }();
},325,[1,10,11,326,74,332,343,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeAnimatedModule = _interopRequireDefault(require(_dependencyMap[1]));
  var _NativeAnimatedTurboModule = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[3]));
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[4]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[5]));
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[6]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[7]));
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[8]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var NativeAnimatedModule = _NativeAnimatedModule.default ?? _NativeAnimatedTurboModule.default;
  var __nativeAnimatedNodeTagCount = 1;
  var __nativeAnimationIdCount = 1;
  var nativeEventEmitter;
  var waitingForQueuedOperations = new Set();
  var queueOperations = false;
  var queue = [];
  var singleOpQueue = [];
  var isSingleOpBatching = false;
  var flushQueueImmediate = null;
  var eventListenerGetValueCallbacks = {};
  var eventListenerAnimationFinishedCallbacks = {};
  var globalEventEmitterGetValueListener = null;
  var globalEventEmitterAnimationFinishedListener = null;
  function createNativeOperations() {
    var methodNames = ['createAnimatedNode', 'updateAnimatedNodeConfig', 'getValue', 'startListeningToAnimatedNodeValue', 'stopListeningToAnimatedNodeValue', 'connectAnimatedNodes', 'disconnectAnimatedNodes', 'startAnimatingNode', 'stopAnimation', 'setAnimatedNodeValue', 'setAnimatedNodeOffset', 'flattenAnimatedNodeOffset', 'extractAnimatedNodeOffset', 'connectAnimatedNodeToView', 'disconnectAnimatedNodeFromView', 'restoreDefaultValues', 'dropAnimatedNode', 'addAnimatedEventToView', 'removeAnimatedEventFromView', 'addListener', 'removeListener'];
    var nativeOperations = {};
    {
      var _loop2 = function () {
        var methodName = methodNames[_ii];
        nativeOperations[methodName] = function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          var method = (0, _nullthrows.default)(NativeAnimatedModule)[methodName];
          if (queueOperations || queue.length !== 0) {
            queue.push(() => method(...args));
          } else {
            method(...args);
          }
        };
      };
      for (var _ii = 0, _length = methodNames.length; _ii < _length; _ii++) {
        _loop2();
      }
    }
    return nativeOperations;
  }
  var NativeOperations = createNativeOperations();
  var API = {
    getValue: (tag, saveValueCallback) => {
      NativeOperations.getValue(tag, saveValueCallback);
    },
    setWaitingForIdentifier(id) {
      waitingForQueuedOperations.add(id);
      queueOperations = true;
      if (ReactNativeFeatureFlags.animatedShouldDebounceQueueFlush() && flushQueueImmediate) {
        if (ReactNativeFeatureFlags.enableAnimatedClearImmediateFix()) {
          clearImmediate(flushQueueImmediate);
        } else {
          clearTimeout(flushQueueImmediate);
        }
      }
    },
    unsetWaitingForIdentifier(id) {
      waitingForQueuedOperations.delete(id);
      if (waitingForQueuedOperations.size === 0) {
        queueOperations = false;
        API.disableQueue();
      }
    },
    disableQueue() {
      (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
      if (ReactNativeFeatureFlags.animatedShouldDebounceQueueFlush()) {
        var prevImmediate = flushQueueImmediate;
        clearImmediate(prevImmediate);
        flushQueueImmediate = setImmediate(API.flushQueue);
      } else {
        API.flushQueue();
      }
    },
    flushQueue: () => {
      (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
      flushQueueImmediate = null;
      if (queue.length === 0) {
        return;
      }
      for (var q = 0, l = queue.length; q < l; q++) {
        queue[q]();
      }
      queue.length = 0;
    },
    createAnimatedNode(tag, config) {
      NativeOperations.createAnimatedNode(tag, config);
    },
    updateAnimatedNodeConfig(tag, config) {
      NativeOperations.updateAnimatedNodeConfig?.(tag, config);
    },
    startListeningToAnimatedNodeValue(tag) {
      NativeOperations.startListeningToAnimatedNodeValue(tag);
    },
    stopListeningToAnimatedNodeValue(tag) {
      NativeOperations.stopListeningToAnimatedNodeValue(tag);
    },
    connectAnimatedNodes(parentTag, childTag) {
      NativeOperations.connectAnimatedNodes(parentTag, childTag);
    },
    disconnectAnimatedNodes(parentTag, childTag) {
      NativeOperations.disconnectAnimatedNodes(parentTag, childTag);
    },
    startAnimatingNode: (animationId, nodeTag, config, endCallback) => {
      NativeOperations.startAnimatingNode(animationId, nodeTag, config, endCallback);
    },
    stopAnimation(animationId) {
      NativeOperations.stopAnimation(animationId);
    },
    setAnimatedNodeValue(nodeTag, value) {
      NativeOperations.setAnimatedNodeValue(nodeTag, value);
    },
    setAnimatedNodeOffset(nodeTag, offset) {
      NativeOperations.setAnimatedNodeOffset(nodeTag, offset);
    },
    flattenAnimatedNodeOffset(nodeTag) {
      NativeOperations.flattenAnimatedNodeOffset(nodeTag);
    },
    extractAnimatedNodeOffset(nodeTag) {
      NativeOperations.extractAnimatedNodeOffset(nodeTag);
    },
    connectAnimatedNodeToView(nodeTag, viewTag) {
      NativeOperations.connectAnimatedNodeToView(nodeTag, viewTag);
    },
    disconnectAnimatedNodeFromView(nodeTag, viewTag) {
      NativeOperations.disconnectAnimatedNodeFromView(nodeTag, viewTag);
    },
    restoreDefaultValues(nodeTag) {
      NativeOperations.restoreDefaultValues?.(nodeTag);
    },
    dropAnimatedNode(tag) {
      NativeOperations.dropAnimatedNode(tag);
    },
    addAnimatedEventToView(viewTag, eventName, eventMapping) {
      NativeOperations.addAnimatedEventToView(viewTag, eventName, eventMapping);
    },
    removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
      NativeOperations.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
    }
  };
  function generateNewNodeTag() {
    return __nativeAnimatedNodeTagCount++;
  }
  function generateNewAnimationId() {
    return __nativeAnimationIdCount++;
  }
  function assertNativeAnimatedModule() {
    (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
  }
  var _warnedMissingNativeAnimated = false;
  function shouldUseNativeDriver(config) {
    if (config.useNativeDriver == null) {
      console.warn("Animated: `useNativeDriver` was not specified. This is a required option and must be explicitly set to `true` or `false`");
    }
    if (config.useNativeDriver === true && !NativeAnimatedModule) {
      {
        if (!_warnedMissingNativeAnimated) {
          console.warn("Animated: `useNativeDriver` is not supported because the native animated module is missing. Falling back to JS-based animation. To resolve this, add `RCTAnimation` module to this app, or remove `useNativeDriver`. Make sure to run `bundle exec pod install` first. Read more about autolinking: https://github.com/react-native-community/cli/blob/master/docs/autolinking.md");
          _warnedMissingNativeAnimated = true;
        }
      }
      return false;
    }
    return config.useNativeDriver || false;
  }
  function transformDataType(value) {
    if (typeof value !== 'string') {
      return value;
    }
    if (value.endsWith('deg')) {
      var degrees = parseFloat(value) || 0;
      return degrees * Math.PI / 180.0;
    } else if (value.endsWith('rad')) {
      return parseFloat(value) || 0;
    } else {
      return value;
    }
  }
  var _default = exports.default = {
    API,
    generateNewNodeTag,
    generateNewAnimationId,
    assertNativeAnimatedModule,
    shouldUseNativeDriver,
    transformDataType,
    get nativeEventEmitter() {
      if (!nativeEventEmitter) {
        nativeEventEmitter = new _NativeEventEmitter.default(NativeAnimatedModule);
      }
      return nativeEventEmitter;
    }
  };
},326,[1,327,330,242,63,87,104,42,128]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeAnimatedModule = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeAnimatedModule).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeAnimatedModule[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeAnimatedModule[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeAnimatedModule.default;
},327,[328]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _shouldUseTurboAnimatedModule = _interopRequireDefault(require(_dependencyMap[1]));
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[2]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var NativeModule = !(0, _shouldUseTurboAnimatedModule.default)() ? TurboModuleRegistry.get('NativeAnimatedModule') : null;
  var _default = exports.default = NativeModule;
},328,[1,329,41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Platform = _interopRequireDefault(require(_dependencyMap[1]));
  function shouldUseTurboAnimatedModule() {
    return global.RN$Bridgeless === true;
  }
  var _default = exports.default = shouldUseTurboAnimatedModule;
},329,[1,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeAnimatedTurboModule = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeAnimatedTurboModule).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeAnimatedTurboModule[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeAnimatedTurboModule[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeAnimatedTurboModule.default;
},330,[331]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _shouldUseTurboAnimatedModule = _interopRequireDefault(require(_dependencyMap[1]));
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[2]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var NativeModule = (0, _shouldUseTurboAnimatedModule.default)() ? TurboModuleRegistry.get('NativeAnimatedTurboModule') : null;
  var _default = exports.default = NativeModule;
},331,[1,329,41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.flushValue = flushValue;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[8]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[9]));
  var _InteractionManager = _interopRequireDefault(require(_dependencyMap[10]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[11]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[12]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
  function flushValue(rootNode) {
    var leaves = new Set();
    function findAnimatedStyles(node) {
      if (typeof node.update === 'function') {
        leaves.add(node);
      } else {
        node.__getChildren().forEach(findAnimatedStyles);
      }
    }
    findAnimatedStyles(rootNode);
    leaves.forEach(leaf => leaf.update());
  }
  function _executeAsAnimatedBatch(id, operation) {
    NativeAnimatedAPI.setWaitingForIdentifier(id);
    operation();
    NativeAnimatedAPI.unsetWaitingForIdentifier(id);
  }
  var _listenerCount = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("listenerCount");
  var _updateSubscription = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("updateSubscription");
  var _ensureUpdateSubscriptionExists = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("ensureUpdateSubscriptionExists");
  var AnimatedValue = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedValue(value, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedValue);
      _this = _callSuper(this, AnimatedValue, [config]);
      Object.defineProperty(_this, _ensureUpdateSubscriptionExists, {
        value: _ensureUpdateSubscriptionExists2
      });
      Object.defineProperty(_this, _listenerCount, {
        writable: true,
        value: 0
      });
      Object.defineProperty(_this, _updateSubscription, {
        writable: true,
        value: null
      });
      if (typeof value !== 'number') {
        throw new Error('AnimatedValue: Attempting to set value to undefined');
      }
      _this._startingValue = _this._value = value;
      _this._offset = 0;
      _this._animation = null;
      if (config && config.useNativeDriver) {
        _this.__makeNative();
      }
      return _this;
    }
    (0, _inherits2.default)(AnimatedValue, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedValue, [{
      key: "__detach",
      value: function __detach() {
        if (this.__isNative) {
          NativeAnimatedAPI.getValue(this.__getNativeTag(), value => {
            this._value = value - this._offset;
          });
        }
        this.stopAnimation();
        _superPropGet(AnimatedValue, "__detach", this, 3)([]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._value + this._offset;
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        _superPropGet(AnimatedValue, "__makeNative", this, 3)([platformConfig]);
        if ((0, _classPrivateFieldLooseBase2.default)(this, _listenerCount)[_listenerCount] > 0) {
          (0, _classPrivateFieldLooseBase2.default)(this, _ensureUpdateSubscriptionExists)[_ensureUpdateSubscriptionExists]();
        }
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = _superPropGet(AnimatedValue, "addListener", this, 3)([callback]);
        (0, _classPrivateFieldLooseBase2.default)(this, _listenerCount)[_listenerCount]++;
        if (this.__isNative) {
          (0, _classPrivateFieldLooseBase2.default)(this, _ensureUpdateSubscriptionExists)[_ensureUpdateSubscriptionExists]();
        }
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        _superPropGet(AnimatedValue, "removeListener", this, 3)([id]);
        (0, _classPrivateFieldLooseBase2.default)(this, _listenerCount)[_listenerCount]--;
        if (this.__isNative && (0, _classPrivateFieldLooseBase2.default)(this, _listenerCount)[_listenerCount] === 0) {
          (0, _classPrivateFieldLooseBase2.default)(this, _updateSubscription)[_updateSubscription]?.remove();
        }
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        _superPropGet(AnimatedValue, "removeAllListeners", this, 3)([]);
        (0, _classPrivateFieldLooseBase2.default)(this, _listenerCount)[_listenerCount] = 0;
        if (this.__isNative) {
          (0, _classPrivateFieldLooseBase2.default)(this, _updateSubscription)[_updateSubscription]?.remove();
        }
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        if (this._animation) {
          this._animation.stop();
          this._animation = null;
        }
        this._updateValue(value, !this.__isNative);
        if (this.__isNative) {
          _executeAsAnimatedBatch(this.__getNativeTag().toString(), () => NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value));
        }
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this._offset = offset;
        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
        }
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this._value += this._offset;
        this._offset = 0;
        if (this.__isNative) {
          NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this._offset += this._value;
        this._value = 0;
        if (this.__isNative) {
          NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
        }
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.stopTracking();
        this._animation && this._animation.stop();
        this._animation = null;
        if (callback) {
          if (this.__isNative) {
            NativeAnimatedAPI.getValue(this.__getNativeTag(), callback);
          } else {
            callback(this.__getValue());
          }
        }
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.stopAnimation(callback);
        this._value = this._startingValue;
        if (this.__isNative) {
          NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), this._startingValue);
        }
      }
    }, {
      key: "__onAnimatedValueUpdateReceived",
      value: function __onAnimatedValueUpdateReceived(value) {
        this._updateValue(value, false);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "animate",
      value: function animate(animation, callback) {
        var handle = null;
        if (animation.__isInteraction) {
          handle = _InteractionManager.default.createInteractionHandle();
        }
        var previousAnimation = this._animation;
        this._animation && this._animation.stop();
        this._animation = animation;
        animation.start(this._value, value => {
          this._updateValue(value, true);
        }, result => {
          this._animation = null;
          if (handle !== null) {
            _InteractionManager.default.clearInteractionHandle(handle);
          }
          callback && callback(result);
        }, previousAnimation, this);
      }
    }, {
      key: "stopTracking",
      value: function stopTracking() {
        this._tracking && this._tracking.__detach();
        this._tracking = null;
      }
    }, {
      key: "track",
      value: function track(tracking) {
        this.stopTracking();
        this._tracking = tracking;
        this._tracking && this._tracking.update();
      }
    }, {
      key: "_updateValue",
      value: function _updateValue(value, flush) {
        if (value === undefined) {
          throw new Error('AnimatedValue: Attempting to set value to undefined');
        }
        this._value = value;
        if (flush) {
          flushValue(this);
        }
        this.__callListeners(this.__getValue());
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'value',
          value: this._value,
          offset: this._offset,
          debugID: this.__getDebugID()
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
  function _ensureUpdateSubscriptionExists2() {
    if ((0, _classPrivateFieldLooseBase2.default)(this, _updateSubscription)[_updateSubscription] != null) {
      return;
    }
    var nativeTag = this.__getNativeTag();
    NativeAnimatedAPI.startListeningToAnimatedNodeValue(nativeTag);
    var subscription = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onAnimatedValueUpdate', data => {
      if (data.tag === nativeTag) {
        this.__onAnimatedValueUpdateReceived(data.value);
      }
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _updateSubscription)[_updateSubscription] = {
      remove: () => {
        if ((0, _classPrivateFieldLooseBase2.default)(this, _updateSubscription)[_updateSubscription] == null) {
          return;
        }
        (0, _classPrivateFieldLooseBase2.default)(this, _updateSubscription)[_updateSubscription] = null;
        subscription.remove();
        NativeAnimatedAPI.stopListeningToAnimatedNodeValue(nativeTag);
      }
    };
  }
},332,[1,10,11,64,66,67,69,72,73,326,333,336,341]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[1]));
  var _EventEmitter = _interopRequireDefault(require(_dependencyMap[2]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var BatchedBridge = require(_dependencyMap[3]).default;
  var infoLog = require(_dependencyMap[4]).default;
  var TaskQueue = require(_dependencyMap[5]).default;
  var invariant = require(_dependencyMap[6]);
  var _emitter = new _EventEmitter.default();
  var DEBUG_DELAY = 0;
  var DEBUG = false;
  var InteractionManagerImpl = {
    Events: {
      interactionStart: 'interactionStart',
      interactionComplete: 'interactionComplete'
    },
    runAfterInteractions(task) {
      var tasks = [];
      var promise = new Promise(resolve => {
        _scheduleUpdate();
        if (task) {
          tasks.push(task);
        }
        tasks.push({
          run: resolve,
          name: 'resolve ' + (task && task.name || '?')
        });
        _taskQueue.enqueueTasks(tasks);
      });
      return {
        then: promise.then.bind(promise),
        cancel: function () {
          _taskQueue.cancelTasks(tasks);
        }
      };
    },
    createInteractionHandle() {
      DEBUG;
      _scheduleUpdate();
      var handle = ++_inc;
      _addInteractionSet.add(handle);
      return handle;
    },
    clearInteractionHandle(handle) {
      DEBUG;
      invariant(!!handle, 'InteractionManager: Must provide a handle to clear.');
      _scheduleUpdate();
      _addInteractionSet.delete(handle);
      _deleteInteractionSet.add(handle);
    },
    addListener: _emitter.addListener.bind(_emitter),
    setDeadline(deadline) {
      _deadline = deadline;
    }
  };
  var _interactionSet = new Set();
  var _addInteractionSet = new Set();
  var _deleteInteractionSet = new Set();
  var _taskQueue = new TaskQueue({
    onMoreTasks: _scheduleUpdate
  });
  var _nextUpdateHandle = 0;
  var _inc = 0;
  var _deadline = -1;
  function _scheduleUpdate() {
    if (!_nextUpdateHandle) {
      if (_deadline > 0) {
        _nextUpdateHandle = setTimeout(_processUpdate, 0);
      } else {
        _nextUpdateHandle = setImmediate(_processUpdate);
      }
    }
  }
  function _processUpdate() {
    _nextUpdateHandle = 0;
    var interactionCount = _interactionSet.size;
    _addInteractionSet.forEach(handle => _interactionSet.add(handle));
    _deleteInteractionSet.forEach(handle => _interactionSet.delete(handle));
    var nextInteractionCount = _interactionSet.size;
    if (interactionCount !== 0 && nextInteractionCount === 0) {
      _emitter.emit(InteractionManager.Events.interactionComplete);
    } else if (interactionCount === 0 && nextInteractionCount !== 0) {
      _emitter.emit(InteractionManager.Events.interactionStart);
    }
    if (nextInteractionCount === 0) {
      while (_taskQueue.hasTasksToProcess()) {
        _taskQueue.processNext();
        if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
          _scheduleUpdate();
          break;
        }
      }
    }
    _addInteractionSet.clear();
    _deleteInteractionSet.clear();
  }
  var InteractionManager = ReactNativeFeatureFlags.disableInteractionManager() ? require(_dependencyMap[7]).default : InteractionManagerImpl;
  var _default = exports.default = InteractionManager;
},333,[1,104,71,44,225,334,42,335]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var infoLog = require(_dependencyMap[3]).default;
  var invariant = require(_dependencyMap[4]);
  var DEBUG = false;
  var TaskQueue = /*#__PURE__*/function () {
    function TaskQueue(_ref) {
      var onMoreTasks = _ref.onMoreTasks;
      (0, _classCallCheck2.default)(this, TaskQueue);
      this._onMoreTasks = onMoreTasks;
      this._queueStack = [{
        tasks: [],
        popable: false
      }];
    }
    return (0, _createClass2.default)(TaskQueue, [{
      key: "enqueue",
      value: function enqueue(task) {
        this._getCurrentQueue().push(task);
      }
    }, {
      key: "enqueueTasks",
      value: function enqueueTasks(tasks) {
        tasks.forEach(task => this.enqueue(task));
      }
    }, {
      key: "cancelTasks",
      value: function cancelTasks(tasksToCancel) {
        this._queueStack = this._queueStack.map(queue => ({
          ...queue,
          tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1)
        })).filter((queue, idx) => queue.tasks.length > 0 || idx === 0);
      }
    }, {
      key: "hasTasksToProcess",
      value: function hasTasksToProcess() {
        return this._getCurrentQueue().length > 0;
      }
    }, {
      key: "processNext",
      value: function processNext() {
        var queue = this._getCurrentQueue();
        if (queue.length) {
          var task = queue.shift();
          try {
            if (typeof task === 'object' && task.gen) {
              DEBUG;
              this._genPromise(task);
            } else if (typeof task === 'object' && task.run) {
              DEBUG;
              task.run();
            } else {
              invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
              DEBUG;
              task();
            }
          } catch (e) {
            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
            throw e;
          }
        }
      }
    }, {
      key: "_getCurrentQueue",
      value: function _getCurrentQueue() {
        var stackIdx = this._queueStack.length - 1;
        var queue = this._queueStack[stackIdx];
        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
          this._queueStack.pop();
          DEBUG;
          return this._getCurrentQueue();
        } else {
          return queue.tasks;
        }
      }
    }, {
      key: "_genPromise",
      value: function _genPromise(task) {
        this._queueStack.push({
          tasks: [],
          popable: false
        });
        var stackIdx = this._queueStack.length - 1;
        var stackItem = this._queueStack[stackIdx];
        DEBUG;
        DEBUG;
        task.gen().then(() => {
          DEBUG;
          stackItem.popable = true;
          this.hasTasksToProcess() && this._onMoreTasks();
        }).catch(ex => {
          setTimeout(() => {
            ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;
            throw ex;
          }, 0);
        });
      }
    }]);
  }();
  var _default = exports.default = TaskQueue;
},334,[1,10,11,225,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var invariant = require(_dependencyMap[0]);
  function reject(error) {
    setTimeout(() => {
      throw error;
    }, 0);
  }
  var InteractionManagerStub = {
    Events: {
      interactionStart: 'interactionStart',
      interactionComplete: 'interactionComplete'
    },
    runAfterInteractions(task) {
      var immediateID;
      var promise = new Promise(resolve => {
        immediateID = setImmediate(() => {
          if (typeof task === 'object' && task !== null) {
            if (typeof task.gen === 'function') {
              task.gen().then(resolve, reject);
            } else if (typeof task.run === 'function') {
              try {
                task.run();
                resolve();
              } catch (error) {
                reject(error);
              }
            } else {
              reject(new TypeError(`Task "${task.name}" missing gen or run.`));
            }
          } else if (typeof task === 'function') {
            try {
              task();
              resolve();
            } catch (error) {
              reject(error);
            }
          } else {
            reject(new TypeError('Invalid task of type: ' + typeof task));
          }
        });
      });
      return {
        then: promise.then.bind(promise),
        cancel() {
          clearImmediate(immediateID);
        }
      };
    },
    createInteractionHandle() {
      return -1;
    },
    clearInteractionHandle(handle) {
      invariant(!!handle, 'InteractionManager: Must provide a handle to clear.');
    },
    addListener() {
      return {
        remove() {}
      };
    },
    setDeadline(deadline) {}
  };
  var _default = exports.default = InteractionManagerStub;
},335,[42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[7]));
  var _NativeAnimatedValidation = require(_dependencyMap[8]);
  var _normalizeColor = _interopRequireDefault(require(_dependencyMap[9]));
  var _processColor = _interopRequireDefault(require(_dependencyMap[10]));
  var _Easing = _interopRequireDefault(require(_dependencyMap[11]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[12]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[13]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  function createNumericInterpolation(config) {
    var outputRange = config.outputRange;
    var inputRange = config.inputRange;
    var easing = config.easing || _Easing.default.linear;
    var extrapolateLeft = 'extend';
    if (config.extrapolateLeft !== undefined) {
      extrapolateLeft = config.extrapolateLeft;
    } else if (config.extrapolate !== undefined) {
      extrapolateLeft = config.extrapolate;
    }
    var extrapolateRight = 'extend';
    if (config.extrapolateRight !== undefined) {
      extrapolateRight = config.extrapolateRight;
    } else if (config.extrapolate !== undefined) {
      extrapolateRight = config.extrapolate;
    }
    return input => {
      (0, _invariant.default)(typeof input === 'number', 'Cannot interpolation an input which is not a number');
      var range = findRange(input, inputRange);
      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
    };
  }
  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
    var result = input;
    if (result < inputMin) {
      if (extrapolateLeft === 'identity') {
        return result;
      } else if (extrapolateLeft === 'clamp') {
        result = inputMin;
      } else if (extrapolateLeft === 'extend') {}
    }
    if (result > inputMax) {
      if (extrapolateRight === 'identity') {
        return result;
      } else if (extrapolateRight === 'clamp') {
        result = inputMax;
      } else if (extrapolateRight === 'extend') {}
    }
    if (outputMin === outputMax) {
      return outputMin;
    }
    if (inputMin === inputMax) {
      if (input <= inputMin) {
        return outputMin;
      }
      return outputMax;
    }
    if (inputMin === -(1 / 0)) {
      result = -result;
    } else if (inputMax === Infinity) {
      result = result - inputMin;
    } else {
      result = (result - inputMin) / (inputMax - inputMin);
    }
    result = easing(result);
    if (outputMin === -(1 / 0)) {
      result = -result;
    } else if (outputMax === Infinity) {
      result = result + outputMin;
    } else {
      result = result * (outputMax - outputMin) + outputMin;
    }
    return result;
  }
  var numericComponentRegex = /[+-]?(?:\d+\.?\d*|\.\d+)(?:[eE][+-]?\d+)?/g;
  function mapStringToNumericComponents(input) {
    var normalizedColor = (0, _normalizeColor.default)(input);
    (0, _invariant.default)(normalizedColor == null || typeof normalizedColor !== 'object', 'PlatformColors are not supported');
    if (typeof normalizedColor === 'number') {
      normalizedColor = normalizedColor || 0;
      var r = (normalizedColor & 0xff000000) >>> 24;
      var g = (normalizedColor & 0x00ff0000) >>> 16;
      var b = (normalizedColor & 0x0000ff00) >>> 8;
      var a = (normalizedColor & 0x000000ff) / 255;
      return {
        isColor: true,
        components: [r, g, b, a]
      };
    } else {
      var components = [];
      var lastMatchEnd = 0;
      var match;
      while ((match = numericComponentRegex.exec(input)) != null) {
        if (match.index > lastMatchEnd) {
          components.push(input.substring(lastMatchEnd, match.index));
        }
        components.push(parseFloat(match[0]));
        lastMatchEnd = match.index + match[0].length;
      }
      (0, _invariant.default)(components.length > 0, 'outputRange must contain color or value with numeric component');
      if (lastMatchEnd < input.length) {
        components.push(input.substring(lastMatchEnd, input.length));
      }
      return {
        isColor: false,
        components
      };
    }
  }
  function createStringInterpolation(config) {
    (0, _invariant.default)(config.outputRange.length >= 2, 'Bad output range');
    var outputRange = config.outputRange.map(mapStringToNumericComponents);
    var isColor = outputRange[0].isColor;
    var numericComponents = outputRange.map(output => isColor ? output.components : output.components.filter(c => typeof c === 'number'));
    var interpolations = numericComponents[0].map((_, i) => createNumericInterpolation({
      ...config,
      outputRange: numericComponents.map(components => components[i])
    }));
    if (!isColor) {
      return input => {
        var values = interpolations.map(interpolation => interpolation(input));
        var i = 0;
        return outputRange[0].components.map(c => typeof c === 'number' ? values[i++] : c).join('');
      };
    } else {
      return input => {
        var result = interpolations.map((interpolation, i) => {
          var value = interpolation(input);
          return i < 3 ? Math.round(value) : Math.round(value * 1000) / 1000;
        });
        return `rgba(${result[0]}, ${result[1]}, ${result[2]}, ${result[3]})`;
      };
    }
  }
  function findRange(input, inputRange) {
    var i;
    for (i = 1; i < inputRange.length - 1; ++i) {
      if (inputRange[i] >= input) {
        break;
      }
    }
    return i - 1;
  }
  var AnimatedInterpolation = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedInterpolation(parent, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedInterpolation);
      _this = _callSuper(this, AnimatedInterpolation, [config]);
      _this._parent = parent;
      _this._config = config;
      return _this;
    }
    (0, _inherits2.default)(AnimatedInterpolation, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedInterpolation, [{
      key: "_getInterpolation",
      value: function _getInterpolation() {
        if (!this._interpolation) {
          var config = this._config;
          if (config.outputRange && typeof config.outputRange[0] === 'string') {
            this._interpolation = createStringInterpolation(config);
          } else {
            this._interpolation = createNumericInterpolation(config);
          }
        }
        return this._interpolation;
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._parent.__makeNative(platformConfig);
        _superPropGet(AnimatedInterpolation, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var parentValue = this._parent.__getValue();
        (0, _invariant.default)(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
        return this._getInterpolation()(parentValue);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new AnimatedInterpolation(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
        _superPropGet(AnimatedInterpolation, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);
        _superPropGet(AnimatedInterpolation, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var outputRange = this._config.outputRange;
        var outputType = null;
        if (typeof outputRange[0] === 'string') {
          outputRange = outputRange.map(value => {
            var processedColor = (0, _processColor.default)(value);
            if (typeof processedColor === 'number') {
              outputType = 'color';
              return processedColor;
            } else {
              return _NativeAnimatedHelper.default.transformDataType(value);
            }
          });
        }
        return {
          inputRange: this._config.inputRange,
          outputRange,
          outputType,
          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
          type: 'interpolation',
          debugID: this.__getDebugID()
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},336,[1,10,11,64,66,67,69,326,337,100,99,339,341,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.validateInterpolation = validateInterpolation;
  exports.validateStyles = validateStyles;
  exports.validateTransform = validateTransform;
  var _NativeAnimatedAllowlist = require(_dependencyMap[0]);
  function validateInterpolation(config) {
    for (var _key in config) {
      if (_key !== 'debugID' && !(0, _NativeAnimatedAllowlist.isSupportedInterpolationParam)(_key)) {
        console.error(`Interpolation property '${_key}' is not supported by native animated module`);
      }
    }
  }
  function validateStyles(styles) {
    for (var _key2 in styles) {
      if (!(0, _NativeAnimatedAllowlist.isSupportedStyleProp)(_key2)) {
        console.error(`Style property '${_key2}' is not supported by native animated module`);
      }
    }
  }
  function validateTransform(configs) {
    configs.forEach(config => {
      if (!(0, _NativeAnimatedAllowlist.isSupportedTransformProp)(config.property)) {
        console.error(`Property '${config.property}' is not supported by native animated module`);
      }
    });
  }
},337,[338]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.allowInterpolationParam = allowInterpolationParam;
  exports.allowStyleProp = allowStyleProp;
  exports.allowTransformProp = allowTransformProp;
  exports.default = undefined;
  exports.isSupportedColorStyleProp = isSupportedColorStyleProp;
  exports.isSupportedInterpolationParam = isSupportedInterpolationParam;
  exports.isSupportedStyleProp = isSupportedStyleProp;
  exports.isSupportedTransformProp = isSupportedTransformProp;
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var SUPPORTED_COLOR_STYLES = {
    backgroundColor: true,
    borderBottomColor: true,
    borderColor: true,
    borderEndColor: true,
    borderLeftColor: true,
    borderRightColor: true,
    borderStartColor: true,
    borderTopColor: true,
    color: true,
    tintColor: true
  };
  var SUPPORTED_STYLES = {
    ...SUPPORTED_COLOR_STYLES,
    borderBottomEndRadius: true,
    borderBottomLeftRadius: true,
    borderBottomRightRadius: true,
    borderBottomStartRadius: true,
    borderEndEndRadius: true,
    borderEndStartRadius: true,
    borderRadius: true,
    borderTopEndRadius: true,
    borderTopLeftRadius: true,
    borderTopRightRadius: true,
    borderTopStartRadius: true,
    borderStartEndRadius: true,
    borderStartStartRadius: true,
    elevation: true,
    opacity: true,
    transform: true,
    zIndex: true,
    shadowOpacity: true,
    shadowRadius: true,
    scaleX: true,
    scaleY: true,
    translateX: true,
    translateY: true
  };
  var SUPPORTED_TRANSFORMS = {
    translateX: true,
    translateY: true,
    scale: true,
    scaleX: true,
    scaleY: true,
    rotate: true,
    rotateX: true,
    rotateY: true,
    rotateZ: true,
    perspective: true,
    skewX: true,
    skewY: true,
    ...(ReactNativeFeatureFlags.shouldUseAnimatedObjectForTransform() ? {
      matrix: true
    } : {})
  };
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };
  var _default = exports.default = {
    style: SUPPORTED_STYLES
  };
  function allowInterpolationParam(param) {
    SUPPORTED_INTERPOLATION_PARAMS[param] = true;
  }
  function allowStyleProp(prop) {
    SUPPORTED_STYLES[prop] = true;
  }
  function allowTransformProp(prop) {
    SUPPORTED_TRANSFORMS[prop] = true;
  }
  function isSupportedColorStyleProp(prop) {
    return SUPPORTED_COLOR_STYLES.hasOwnProperty(prop);
  }
  function isSupportedInterpolationParam(param) {
    return SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(param);
  }
  function isSupportedStyleProp(prop) {
    return SUPPORTED_STYLES.hasOwnProperty(prop);
  }
  function isSupportedTransformProp(prop) {
    return SUPPORTED_TRANSFORMS.hasOwnProperty(prop);
  }
},338,[104]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ease;
  var Easing = {
    step0(n) {
      return n > 0 ? 1 : 0;
    },
    step1(n) {
      return n >= 1 ? 1 : 0;
    },
    linear(t) {
      return t;
    },
    ease(t) {
      if (!ease) {
        ease = Easing.bezier(0.42, 0, 1, 1);
      }
      return ease(t);
    },
    quad(t) {
      return t * t;
    },
    cubic(t) {
      return t * t * t;
    },
    poly(n) {
      return t => Math.pow(t, n);
    },
    sin(t) {
      return 1 - Math.cos(t * Math.PI / 2);
    },
    circle(t) {
      return 1 - Math.sqrt(1 - t * t);
    },
    exp(t) {
      return Math.pow(2, 10 * (t - 1));
    },
    elastic() {
      var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var p = bounciness * Math.PI;
      return t => 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
    },
    back() {
      var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.70158;
      return t => t * t * ((s + 1) * t - s);
    },
    bounce(t) {
      if (t < 0.36363636363636365) {
        return 7.5625 * t * t;
      }
      if (t < 0.7272727272727273) {
        var _t = t - 0.5454545454545454;
        return 7.5625 * _t * _t + 0.75;
      }
      if (t < 0.9090909090909091) {
        var _t2 = t - 0.8181818181818182;
        return 7.5625 * _t2 * _t2 + 0.9375;
      }
      var t2 = t - 0.9545454545454546;
      return 7.5625 * t2 * t2 + 0.984375;
    },
    bezier(x1, y1, x2, y2) {
      var _bezier = require(_dependencyMap[0]).default;
      return _bezier(x1, y1, x2, y2);
    },
    in(easing) {
      return easing;
    },
    out(easing) {
      return t => 1 - easing(1 - t);
    },
    inOut(easing) {
      return t => {
        if (t < 0.5) {
          return easing(t * 2) / 2;
        }
        return 1 - easing((1 - t) * 2) / 2;
      };
    }
  };
  var _default = exports.default = Easing;
},339,[340]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = bezier;
  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;
  var kSplineTableSize = 11;
  var kSampleStepSize = 0.1;
  var float32ArraySupported = typeof Float32Array === 'function';
  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }
  function B(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }
  function C(aA1) {
    return 3.0 * aA1;
  }
  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
  }
  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
  }
  function binarySubdivide(aX, _aA, _aB, mX1, mX2) {
    var currentX,
      currentT,
      i = 0,
      aA = _aA,
      aB = _aB;
    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;
      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
    return currentT;
  }
  function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {
    var aGuessT = _aGuessT;
    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);
      if (currentSlope === 0.0) {
        return aGuessT;
      }
      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
  }
  function bezier(mX1, mY1, mX2, mY2) {
    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }
    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
    if (mX1 !== mY1 || mX2 !== mY2) {
      for (var i = 0; i < kSplineTableSize; ++i) {
        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
      }
    }
    function getTForX(aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = 10;
      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }
      --currentSample;
      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);
      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }
    return function BezierEasing(x) {
      if (mX1 === mY1 && mX2 === mY2) {
        return x;
      }
      if (x === 0) {
        return 0;
      }
      if (x === 1) {
        return 1;
      }
      return calcBezier(getTForX(x), mY1, mY2);
    };
  }
},340,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _NativeAnimatedHelper2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedNode2 = _interopRequireDefault(require(_dependencyMap[8]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var _NativeAnimatedHelper = _NativeAnimatedHelper2.default.API,
    connectAnimatedNodes = _NativeAnimatedHelper.connectAnimatedNodes,
    disconnectAnimatedNodes = _NativeAnimatedHelper.disconnectAnimatedNodes;
  var AnimatedWithChildren = exports.default = /*#__PURE__*/function (_AnimatedNode) {
    function AnimatedWithChildren() {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedWithChildren);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, AnimatedWithChildren, [...args]);
      _this._children = [];
      return _this;
    }
    (0, _inherits2.default)(AnimatedWithChildren, _AnimatedNode);
    return (0, _createClass2.default)(AnimatedWithChildren, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        if (!this.__isNative) {
          this.__isNative = true;
          var children = this._children;
          var length = children.length;
          if (length > 0) {
            for (var ii = 0; ii < length; ii++) {
              var child = children[ii];
              child.__makeNative(platformConfig);
              connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
            }
          }
        }
        _superPropGet(AnimatedWithChildren, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {
        if (this._children.length === 0) {
          this.__attach();
        }
        this._children.push(child);
        if (this.__isNative) {
          child.__makeNative(this.__getPlatformConfig());
          connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {
        var index = this._children.indexOf(child);
        if (index === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }
        if (this.__isNative && child.__isNative) {
          disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
        this._children.splice(index, 1);
        if (this._children.length === 0) {
          this.__detach();
        }
      }
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return this._children;
      }
    }, {
      key: "__callListeners",
      value: function __callListeners(value) {
        _superPropGet(AnimatedWithChildren, "__callListeners", this, 3)([value]);
        if (!this.__isNative) {
          var children = this._children;
          for (var ii = 0, length = children.length; ii < length; ii++) {
            var child = children[ii];
            if (child.__getValue) {
              child.__callListeners(child.__getValue());
            }
          }
        }
      }
    }]);
  }(_AnimatedNode2.default);
},341,[1,10,11,64,66,67,69,326,342]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[5]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[6]));
  var _uniqueId = 1;
  var _assertNativeAnimatedModule = () => {
    _NativeAnimatedHelper.default.assertNativeAnimatedModule();
    _assertNativeAnimatedModule = null;
  };
  var _listeners = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("listeners");
  var AnimatedNode = exports.default = /*#__PURE__*/function () {
    function AnimatedNode(config) {
      (0, _classCallCheck2.default)(this, AnimatedNode);
      Object.defineProperty(this, _listeners, {
        writable: true,
        value: new Map()
      });
      this._platformConfig = undefined;
      this.__isNative = false;
      this.__nativeTag = undefined;
      this.__debugID = undefined;
    }
    return (0, _createClass2.default)(AnimatedNode, [{
      key: "__attach",
      value: function __attach() {}
    }, {
      key: "__detach",
      value: function __detach() {
        this.removeAllListeners();
        if (this.__isNative && this.__nativeTag != null) {
          _NativeAnimatedHelper.default.API.dropAnimatedNode(this.__nativeTag);
          this.__nativeTag = undefined;
        }
      }
    }, {
      key: "__getValue",
      value: function __getValue() {}
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return this.__getValue();
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {}
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {}
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return [];
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        (0, _invariant.default)(this.__isNative, 'This node cannot be made a "native" animated node');
        this._platformConfig = platformConfig;
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = String(_uniqueId++);
        (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].set(id, callback);
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].delete(id);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].clear();
      }
    }, {
      key: "hasListeners",
      value: function hasListeners() {
        return (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].size > 0;
      }
    }, {
      key: "__onAnimatedValueUpdateReceived",
      value: function __onAnimatedValueUpdateReceived(value) {
        this.__callListeners(value);
      }
    }, {
      key: "__callListeners",
      value: function __callListeners(value) {
        var event = {
          value
        };
        (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].forEach(listener => {
          listener(event);
        });
      }
    }, {
      key: "__getNativeTag",
      value: function __getNativeTag() {
        var nativeTag = this.__nativeTag;
        if (nativeTag == null) {
          _assertNativeAnimatedModule?.();
          (0, _invariant.default)(this.__isNative, 'Attempt to get native tag from node not marked as "native"');
          nativeTag = _NativeAnimatedHelper.default.generateNewNodeTag();
          this.__nativeTag = nativeTag;
          var config = this.__getNativeConfig();
          if (this._platformConfig) {
            config.platformConfig = this._platformConfig;
          }
          _NativeAnimatedHelper.default.API.createAnimatedNode(nativeTag, config);
        }
        return nativeTag;
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        throw new Error('This JS animated node type cannot be used as native animated node');
      }
    }, {
      key: "__getPlatformConfig",
      value: function __getPlatformConfig() {
        return this._platformConfig;
      }
    }, {
      key: "__setPlatformConfig",
      value: function __setPlatformConfig(platformConfig) {
        this._platformConfig = platformConfig;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.__getValue();
      }
    }, {
      key: "__getDebugID",
      value: function __getDebugID() {
        return undefined;
      }
    }]);
  }();
},342,[1,10,11,72,73,326,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[8]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[9]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var _uniqueId = 1;
  var AnimatedValueXY = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedValueXY(valueIn, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedValueXY);
      _this = _callSuper(this, AnimatedValueXY, [config]);
      var value = valueIn || {
        x: 0,
        y: 0
      };
      if (typeof value.x === 'number' && typeof value.y === 'number') {
        _this.x = new _AnimatedValue.default(value.x);
        _this.y = new _AnimatedValue.default(value.y);
      } else {
        (0, _invariant.default)(value.x instanceof _AnimatedValue.default && value.y instanceof _AnimatedValue.default, "AnimatedValueXY must be initialized with an object of numbers or AnimatedValues.");
        _this.x = value.x;
        _this.y = value.y;
      }
      _this._listeners = {};
      if (config && config.useNativeDriver) {
        _this.__makeNative();
      }
      return _this;
    }
    (0, _inherits2.default)(AnimatedValueXY, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedValueXY, [{
      key: "setValue",
      value: function setValue(value) {
        this.x.setValue(value.x);
        this.y.setValue(value.y);
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.x.setOffset(offset.x);
        this.y.setOffset(offset.y);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.x.flattenOffset();
        this.y.flattenOffset();
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.x.extractOffset();
        this.y.extractOffset();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return {
          x: this.x.__getValue(),
          y: this.y.__getValue()
        };
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.x.resetAnimation();
        this.y.resetAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.x.stopAnimation();
        this.y.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "addListener",
      value: function addListener(callback) {
        var id = String(_uniqueId++);
        var jointCallback = _ref => {
          var number = _ref.value;
          callback(this.__getValue());
        };
        this._listeners[id] = {
          x: this.x.addListener(jointCallback),
          y: this.y.addListener(jointCallback)
        };
        return id;
      }
    }, {
      key: "removeListener",
      value: function removeListener(id) {
        this.x.removeListener(this._listeners[id].x);
        this.y.removeListener(this._listeners[id].y);
        delete this._listeners[id];
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this.x.removeAllListeners();
        this.y.removeAllListeners();
        this._listeners = {};
      }
    }, {
      key: "getLayout",
      value: function getLayout() {
        return {
          left: this.x,
          top: this.y
        };
      }
    }, {
      key: "getTranslateTransform",
      value: function getTranslateTransform() {
        return [{
          translateX: this.x
        }, {
          translateY: this.y
        }];
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this.x.__addChild(this);
        this.y.__addChild(this);
        _superPropGet(AnimatedValueXY, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this.x.__removeChild(this);
        this.y.__removeChild(this);
        _superPropGet(AnimatedValueXY, "__detach", this, 3)([]);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this.x.__makeNative(platformConfig);
        this.y.__makeNative(platformConfig);
        _superPropGet(AnimatedValueXY, "__makeNative", this, 3)([platformConfig]);
      }
    }]);
  }(_AnimatedWithChildren2.default);
},343,[1,10,11,64,66,67,69,332,341,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _Animation2 = _interopRequireDefault(require(_dependencyMap[7]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var DecayAnimation = exports.default = /*#__PURE__*/function (_Animation) {
    function DecayAnimation(config) {
      var _this;
      (0, _classCallCheck2.default)(this, DecayAnimation);
      _this = _callSuper(this, DecayAnimation, [config]);
      _this._deceleration = config.deceleration ?? 0.998;
      _this._velocity = config.velocity;
      _this._platformConfig = config.platformConfig;
      return _this;
    }
    (0, _inherits2.default)(DecayAnimation, _Animation);
    return (0, _createClass2.default)(DecayAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'decay',
          deceleration: this._deceleration,
          velocity: this._velocity,
          iterations: this.__iterations,
          platformConfig: this._platformConfig,
          debugID: this.__getDebugID()
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        _superPropGet(DecayAnimation, "start", this, 3)([fromValue, onUpdate, onEnd, previousAnimation, animatedValue]);
        this._lastValue = fromValue;
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        this._startTime = Date.now();
        var useNativeDriver = this.__startAnimationIfNative(animatedValue);
        if (!useNativeDriver) {
          this._animationFrame = requestAnimationFrame(() => this.onUpdate());
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));
        this._onUpdate(value);
        if (Math.abs(this._lastValue - value) < 0.1) {
          this.__notifyAnimationEnd({
            finished: true
          });
          return;
        }
        this._lastValue = value;
        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        _superPropGet(DecayAnimation, "stop", this, 3)([]);
        if (this._animationFrame != null) {
          global.cancelAnimationFrame(this._animationFrame);
        }
        this.__notifyAnimationEnd({
          finished: false
        });
      }
    }]);
  }(_Animation2.default);
},344,[1,10,11,64,66,67,69,345]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[5]));
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[6]));
  var _AnimatedProps = _interopRequireDefault(require(_dependencyMap[7]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var startNativeAnimationNextId = 1;
  var _nativeID = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("nativeID");
  var _onEnd = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onEnd");
  var _useNativeDriver = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("useNativeDriver");
  var Animation = exports.default = /*#__PURE__*/function () {
    function Animation(config) {
      (0, _classCallCheck2.default)(this, Animation);
      Object.defineProperty(this, _nativeID, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _onEnd, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(this, _useNativeDriver, {
        writable: true,
        value: undefined
      });
      (0, _classPrivateFieldLooseBase2.default)(this, _useNativeDriver)[_useNativeDriver] = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
      this.__active = false;
      this.__isInteraction = config.isInteraction ?? !(0, _classPrivateFieldLooseBase2.default)(this, _useNativeDriver)[_useNativeDriver];
      this.__isLooping = config.isLooping;
      this.__iterations = config.iterations ?? 1;
    }
    return (0, _createClass2.default)(Animation, [{
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        if (!(0, _classPrivateFieldLooseBase2.default)(this, _useNativeDriver)[_useNativeDriver] && animatedValue.__isNative === true) {
          throw new Error("Attempting to run JS driven animation on animated node that has been moved to \"native\" earlier by starting an animation with `useNativeDriver: true`");
        }
        (0, _classPrivateFieldLooseBase2.default)(this, _onEnd)[_onEnd] = onEnd;
        this.__active = true;
      }
    }, {
      key: "stop",
      value: function stop() {
        if ((0, _classPrivateFieldLooseBase2.default)(this, _nativeID)[_nativeID] != null) {
          var nativeID = (0, _classPrivateFieldLooseBase2.default)(this, _nativeID)[_nativeID];
          var identifier = `${nativeID}:stopAnimation`;
          try {
            _NativeAnimatedHelper.default.API.setWaitingForIdentifier(identifier);
            _NativeAnimatedHelper.default.API.stopAnimation(nativeID);
          } finally {
            _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(identifier);
          }
        }
        this.__active = false;
      }
    }, {
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        throw new Error('This animation type cannot be offloaded to native');
      }
    }, {
      key: "__findAnimatedPropsNodes",
      value: function __findAnimatedPropsNodes(node) {
        var result = [];
        if (node instanceof _AnimatedProps.default) {
          result.push(node);
          return result;
        }
        for (var child of node.__getChildren()) {
          result.push(...this.__findAnimatedPropsNodes(child));
        }
        return result;
      }
    }, {
      key: "__startAnimationIfNative",
      value: function __startAnimationIfNative(animatedValue) {
        if (!(0, _classPrivateFieldLooseBase2.default)(this, _useNativeDriver)[_useNativeDriver]) {
          return false;
        }
        var startNativeAnimationWaitId = `${startNativeAnimationNextId}:startAnimation`;
        startNativeAnimationNextId += 1;
        _NativeAnimatedHelper.default.API.setWaitingForIdentifier(startNativeAnimationWaitId);
        try {
          var config = this.__getNativeAnimationConfig();
          animatedValue.__makeNative(config.platformConfig);
          (0, _classPrivateFieldLooseBase2.default)(this, _nativeID)[_nativeID] = _NativeAnimatedHelper.default.generateNewAnimationId();
          _NativeAnimatedHelper.default.API.startAnimatingNode((0, _classPrivateFieldLooseBase2.default)(this, _nativeID)[_nativeID], animatedValue.__getNativeTag(), config, result => {
            this.__notifyAnimationEnd(result);
            var value = result.value;
            if (value != null) {
              animatedValue.__onAnimatedValueUpdateReceived(value);
              if (this.__isLooping === true) {
                return;
              }
              this.__findAnimatedPropsNodes(animatedValue).forEach(node => node.update());
            }
          });
          return true;
        } catch (e) {
          throw e;
        } finally {
          _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
        }
      }
    }, {
      key: "__notifyAnimationEnd",
      value: function __notifyAnimationEnd(result) {
        var callback = (0, _classPrivateFieldLooseBase2.default)(this, _onEnd)[_onEnd];
        if (callback != null) {
          (0, _classPrivateFieldLooseBase2.default)(this, _onEnd)[_onEnd] = null;
          callback(result);
        }
      }
    }, {
      key: "__getDebugID",
      value: function __getDebugID() {
        return undefined;
      }
    }]);
  }();
},345,[1,10,11,72,73,326,104,346]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[8]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[9]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[10]));
  var _RendererProxy = require(_dependencyMap[11]);
  var _AnimatedEvent = require(_dependencyMap[12]);
  var _AnimatedNode2 = _interopRequireDefault(require(_dependencyMap[13]));
  var _AnimatedObject = _interopRequireDefault(require(_dependencyMap[14]));
  var _AnimatedStyle = _interopRequireDefault(require(_dependencyMap[15]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[16]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  function createAnimatedProps(inputProps, allowlist) {
    var nodeKeys = [];
    var nodes = [];
    var props = {};
    var keys = Object.keys(inputProps);
    for (var ii = 0, length = keys.length; ii < length; ii++) {
      var key = keys[ii];
      var value = inputProps[key];
      if (allowlist == null || hasOwn(allowlist, key)) {
        var node = undefined;
        if (key === 'style') {
          node = _AnimatedStyle.default.from(value, allowlist?.style);
        } else if (value instanceof _AnimatedNode2.default) {
          node = value;
        } else {
          node = _AnimatedObject.default.from(value);
        }
        if (node == null) {
          props[key] = value;
        } else {
          nodeKeys.push(key);
          nodes.push(node);
          props[key] = node;
        }
      } else {
        props[key] = value;
      }
    }
    return [nodeKeys, nodes, props];
  }
  var _animatedView = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("animatedView");
  var _callback = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("callback");
  var _nodeKeys = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("nodeKeys");
  var _nodes = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("nodes");
  var _props = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("props");
  var AnimatedProps = exports.default = /*#__PURE__*/function (_AnimatedNode) {
    function AnimatedProps(inputProps, callback, allowlist, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedProps);
      _this = _callSuper(this, AnimatedProps, [config]);
      Object.defineProperty(_this, _animatedView, {
        writable: true,
        value: null
      });
      Object.defineProperty(_this, _callback, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(_this, _nodeKeys, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(_this, _nodes, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(_this, _props, {
        writable: true,
        value: undefined
      });
      var _createAnimatedProps = createAnimatedProps(inputProps, allowlist),
        _createAnimatedProps2 = (0, _slicedToArray2.default)(_createAnimatedProps, 3),
        nodeKeys = _createAnimatedProps2[0],
        nodes = _createAnimatedProps2[1],
        props = _createAnimatedProps2[2];
      (0, _classPrivateFieldLooseBase2.default)(_this, _nodeKeys)[_nodeKeys] = nodeKeys;
      (0, _classPrivateFieldLooseBase2.default)(_this, _nodes)[_nodes] = nodes;
      (0, _classPrivateFieldLooseBase2.default)(_this, _props)[_props] = props;
      (0, _classPrivateFieldLooseBase2.default)(_this, _callback)[_callback] = callback;
      return _this;
    }
    (0, _inherits2.default)(AnimatedProps, _AnimatedNode);
    return (0, _createClass2.default)(AnimatedProps, [{
      key: "__getValue",
      value: function __getValue() {
        var props = {};
        var keys = Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _props)[_props]);
        for (var ii = 0, length = keys.length; ii < length; ii++) {
          var key = keys[ii];
          var value = (0, _classPrivateFieldLooseBase2.default)(this, _props)[_props][key];
          if (value instanceof _AnimatedNode2.default) {
            props[key] = value.__getValue();
          } else if (value instanceof _AnimatedEvent.AnimatedEvent) {
            props[key] = value.__getHandler();
          } else {
            props[key] = value;
          }
        }
        return props;
      }
    }, {
      key: "__getValueWithStaticProps",
      value: function __getValueWithStaticProps(staticProps) {
        var props = {
          ...staticProps
        };
        var keys = Object.keys(staticProps);
        for (var ii = 0, length = keys.length; ii < length; ii++) {
          var key = keys[ii];
          var maybeNode = (0, _classPrivateFieldLooseBase2.default)(this, _props)[_props][key];
          if (key === 'style' && maybeNode instanceof _AnimatedStyle.default) {
            props[key] = maybeNode.__getValueWithStaticStyle(staticProps.style);
          } else if (maybeNode instanceof _AnimatedNode2.default) {
            props[key] = maybeNode.__getValue();
          } else if (maybeNode instanceof _AnimatedEvent.AnimatedEvent) {
            props[key] = maybeNode.__getHandler();
          }
        }
        return props;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var props = {};
        var nodeKeys = (0, _classPrivateFieldLooseBase2.default)(this, _nodeKeys)[_nodeKeys];
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var key = nodeKeys[ii];
          var node = nodes[ii];
          props[key] = node.__getAnimatedValue();
        }
        return props;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var node = nodes[ii];
          node.__addChild(this);
        }
        _superPropGet(AnimatedProps, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        if (this.__isNative && (0, _classPrivateFieldLooseBase2.default)(this, _animatedView)[_animatedView]) {
          this.__disconnectAnimatedView();
        }
        (0, _classPrivateFieldLooseBase2.default)(this, _animatedView)[_animatedView] = null;
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var node = nodes[ii];
          node.__removeChild(this);
        }
        _superPropGet(AnimatedProps, "__detach", this, 3)([]);
      }
    }, {
      key: "update",
      value: function update() {
        (0, _classPrivateFieldLooseBase2.default)(this, _callback)[_callback]();
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var node = nodes[ii];
          node.__makeNative(platformConfig);
        }
        if (!this.__isNative) {
          this.__isNative = true;
          _superPropGet(AnimatedProps, "__setPlatformConfig", this, 3)([platformConfig]);
          if ((0, _classPrivateFieldLooseBase2.default)(this, _animatedView)[_animatedView]) {
            this.__connectAnimatedView();
          }
        }
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if ((0, _classPrivateFieldLooseBase2.default)(this, _animatedView)[_animatedView] === animatedView) {
          return;
        }
        (0, _classPrivateFieldLooseBase2.default)(this, _animatedView)[_animatedView] = animatedView;
        if (this.__isNative) {
          this.__connectAnimatedView();
        }
      }
    }, {
      key: "__connectAnimatedView",
      value: function __connectAnimatedView() {
        (0, _invariant.default)(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = (0, _RendererProxy.findNodeHandle)((0, _classPrivateFieldLooseBase2.default)(this, _animatedView)[_animatedView]);
        if (nativeViewTag == null) {
          {
            throw new Error('Unable to locate attached view in the native tree');
          }
        }
        _NativeAnimatedHelper.default.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__disconnectAnimatedView",
      value: function __disconnectAnimatedView() {
        (0, _invariant.default)(this.__isNative, 'Expected node to be marked as "native"');
        var nativeViewTag = (0, _RendererProxy.findNodeHandle)((0, _classPrivateFieldLooseBase2.default)(this, _animatedView)[_animatedView]);
        if (nativeViewTag == null) {
          {
            throw new Error('Unable to locate attached view in the native tree');
          }
        }
        _NativeAnimatedHelper.default.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
      }
    }, {
      key: "__restoreDefaultValues",
      value: function __restoreDefaultValues() {
        if (this.__isNative) {
          _NativeAnimatedHelper.default.API.restoreDefaultValues(this.__getNativeTag());
        }
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var platformConfig = this.__getPlatformConfig();
        var propsConfig = {};
        var nodeKeys = (0, _classPrivateFieldLooseBase2.default)(this, _nodeKeys)[_nodeKeys];
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var key = nodeKeys[ii];
          var node = nodes[ii];
          node.__makeNative(platformConfig);
          propsConfig[key] = node.__getNativeTag();
        }
        return {
          type: 'props',
          props: propsConfig,
          debugID: this.__getDebugID()
        };
      }
    }]);
  }(_AnimatedNode2.default);
  var _hasOwnProp = Object.prototype.hasOwnProperty;
  var hasOwn = Object.hasOwn ?? ((obj, prop) => _hasOwnProp.call(obj, prop));
},346,[1,29,10,11,64,66,67,69,72,73,326,74,325,342,347,348,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.isPlainObject = isPlainObject;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedNode = _interopRequireDefault(require(_dependencyMap[9]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[10]));
  var React = _interopRequireWildcard(require(_dependencyMap[11]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var MAX_DEPTH = 5;
  function isPlainObject(value) {
    return value !== null && typeof value === 'object' && Object.getPrototypeOf(value).isPrototypeOf(Object) && ! /*#__PURE__*/React.isValidElement(value);
  }
  function flatAnimatedNodes(value) {
    var nodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    if (depth >= MAX_DEPTH) {
      return nodes;
    }
    if (value instanceof _AnimatedNode.default) {
      nodes.push(value);
    } else if (Array.isArray(value)) {
      for (var ii = 0, length = value.length; ii < length; ii++) {
        var element = value[ii];
        flatAnimatedNodes(element, nodes, depth + 1);
      }
    } else if (isPlainObject(value)) {
      var keys = Object.keys(value);
      for (var _ii = 0, _length = keys.length; _ii < _length; _ii++) {
        var key = keys[_ii];
        flatAnimatedNodes(value[key], nodes, depth + 1);
      }
    }
    return nodes;
  }
  function mapAnimatedNodes(value, fn) {
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    if (depth >= MAX_DEPTH) {
      return value;
    }
    if (value instanceof _AnimatedNode.default) {
      return fn(value);
    } else if (Array.isArray(value)) {
      return value.map(element => mapAnimatedNodes(element, fn, depth + 1));
    } else if (isPlainObject(value)) {
      var result = {};
      var keys = Object.keys(value);
      for (var ii = 0, length = keys.length; ii < length; ii++) {
        var key = keys[ii];
        result[key] = mapAnimatedNodes(value[key], fn, depth + 1);
      }
      return result;
    } else {
      return value;
    }
  }
  var _nodes = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("nodes");
  var AnimatedObject = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedObject(nodes, value, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedObject);
      _this = _callSuper(this, AnimatedObject, [config]);
      Object.defineProperty(_this, _nodes, {
        writable: true,
        value: undefined
      });
      (0, _classPrivateFieldLooseBase2.default)(_this, _nodes)[_nodes] = nodes;
      _this._value = value;
      return _this;
    }
    (0, _inherits2.default)(AnimatedObject, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedObject, [{
      key: "__getValue",
      value: function __getValue() {
        return mapAnimatedNodes(this._value, node => {
          return node.__getValue();
        });
      }
    }, {
      key: "__getValueWithStaticObject",
      value: function __getValueWithStaticObject(staticObject) {
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        var index = 0;
        return mapAnimatedNodes(staticObject, () => nodes[index++].__getValue());
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return mapAnimatedNodes(this._value, node => {
          return node.__getAnimatedValue();
        });
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var node = nodes[ii];
          node.__addChild(this);
        }
        _superPropGet(AnimatedObject, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var node = nodes[ii];
          node.__removeChild(this);
        }
        _superPropGet(AnimatedObject, "__detach", this, 3)([]);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var node = nodes[ii];
          node.__makeNative(platformConfig);
        }
        _superPropGet(AnimatedObject, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'object',
          value: mapAnimatedNodes(this._value, node => {
            return {
              nodeTag: node.__getNativeTag()
            };
          }),
          debugID: this.__getDebugID()
        };
      }
    }], [{
      key: "from",
      value: function from(value) {
        var nodes = flatAnimatedNodes(value);
        if (nodes.length === 0) {
          return null;
        }
        return new AnimatedObject(nodes, value);
      }
    }]);
  }(_AnimatedWithChildren2.default);
},347,[1,10,11,64,66,67,69,72,73,342,341,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[8]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[9]));
  var _NativeAnimatedValidation = require(_dependencyMap[10]);
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[11]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[12]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[13]));
  var _AnimatedNode = _interopRequireDefault(require(_dependencyMap[14]));
  var _AnimatedObject = _interopRequireDefault(require(_dependencyMap[15]));
  var _AnimatedTransform = _interopRequireDefault(require(_dependencyMap[16]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[17]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  function createAnimatedStyle(inputStyle, allowlist, keepUnanimatedValues) {
    var nodeKeys = [];
    var nodes = [];
    var style = {};
    var keys = Object.keys(inputStyle);
    for (var ii = 0, length = keys.length; ii < length; ii++) {
      var key = keys[ii];
      var value = inputStyle[key];
      if (allowlist == null || hasOwn(allowlist, key)) {
        var node = undefined;
        if (value != null && key === 'transform') {
          node = ReactNativeFeatureFlags.shouldUseAnimatedObjectForTransform() ? _AnimatedObject.default.from(value) : _AnimatedTransform.default.from(value);
        } else if (value instanceof _AnimatedNode.default) {
          node = value;
        } else {
          node = _AnimatedObject.default.from(value);
        }
        if (node == null) {
          if (keepUnanimatedValues) {
            style[key] = value;
          }
        } else {
          nodeKeys.push(key);
          nodes.push(node);
          style[key] = node;
        }
      } else {
        if (keepUnanimatedValues) {
          style[key] = value;
        }
      }
    }
    return [nodeKeys, nodes, style];
  }
  var _inputStyle = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("inputStyle");
  var _nodeKeys = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("nodeKeys");
  var _nodes = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("nodes");
  var _style = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("style");
  var AnimatedStyle = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedStyle(nodeKeys, nodes, style, inputStyle, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedStyle);
      _this = _callSuper(this, AnimatedStyle, [config]);
      Object.defineProperty(_this, _inputStyle, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(_this, _nodeKeys, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(_this, _nodes, {
        writable: true,
        value: undefined
      });
      Object.defineProperty(_this, _style, {
        writable: true,
        value: undefined
      });
      (0, _classPrivateFieldLooseBase2.default)(_this, _nodeKeys)[_nodeKeys] = nodeKeys;
      (0, _classPrivateFieldLooseBase2.default)(_this, _nodes)[_nodes] = nodes;
      (0, _classPrivateFieldLooseBase2.default)(_this, _style)[_style] = style;
      (0, _classPrivateFieldLooseBase2.default)(_this, _inputStyle)[_inputStyle] = inputStyle;
      return _this;
    }
    (0, _inherits2.default)(AnimatedStyle, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedStyle, [{
      key: "__getValue",
      value: function __getValue() {
        var style = {};
        var keys = Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _style)[_style]);
        for (var ii = 0, length = keys.length; ii < length; ii++) {
          var key = keys[ii];
          var value = (0, _classPrivateFieldLooseBase2.default)(this, _style)[_style][key];
          if (value instanceof _AnimatedNode.default) {
            style[key] = value.__getValue();
          } else {
            style[key] = value;
          }
        }
        return style;
      }
    }, {
      key: "__getValueWithStaticStyle",
      value: function __getValueWithStaticStyle(staticStyle) {
        var flatStaticStyle = (0, _flattenStyle.default)(staticStyle);
        var style = flatStaticStyle == null ? {} : flatStaticStyle === staticStyle ? {
          ...flatStaticStyle
        } : flatStaticStyle;
        var keys = Object.keys(style);
        for (var ii = 0, length = keys.length; ii < length; ii++) {
          var key = keys[ii];
          var maybeNode = (0, _classPrivateFieldLooseBase2.default)(this, _style)[_style][key];
          if (key === 'transform' && maybeNode instanceof _AnimatedTransform.default) {
            style[key] = maybeNode.__getValueWithStaticTransforms(Array.isArray(style[key]) ? style[key] : []);
          } else if (maybeNode instanceof _AnimatedObject.default) {
            style[key] = maybeNode.__getValueWithStaticObject(style[key]);
          } else if (maybeNode instanceof _AnimatedNode.default) {
            style[key] = maybeNode.__getValue();
          }
        }
        return style;
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        var style = {};
        var nodeKeys = (0, _classPrivateFieldLooseBase2.default)(this, _nodeKeys)[_nodeKeys];
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var key = nodeKeys[ii];
          var node = nodes[ii];
          style[key] = node.__getAnimatedValue();
        }
        return style;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var node = nodes[ii];
          node.__addChild(this);
        }
        _superPropGet(AnimatedStyle, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var node = nodes[ii];
          node.__removeChild(this);
        }
        _superPropGet(AnimatedStyle, "__detach", this, 3)([]);
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var node = nodes[ii];
          node.__makeNative(platformConfig);
        }
        _superPropGet(AnimatedStyle, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var platformConfig = this.__getPlatformConfig();
        var styleConfig = {};
        var nodeKeys = (0, _classPrivateFieldLooseBase2.default)(this, _nodeKeys)[_nodeKeys];
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var key = nodeKeys[ii];
          var node = nodes[ii];
          node.__makeNative(platformConfig);
          styleConfig[key] = node.__getNativeTag();
        }
        return {
          type: 'style',
          style: styleConfig,
          debugID: this.__getDebugID()
        };
      }
    }], [{
      key: "from",
      value: function from(inputStyle, allowlist) {
        var flatStyle = (0, _flattenStyle.default)(inputStyle);
        if (flatStyle == null) {
          return null;
        }
        var _createAnimatedStyle = createAnimatedStyle(flatStyle, allowlist, true),
          _createAnimatedStyle2 = (0, _slicedToArray2.default)(_createAnimatedStyle, 3),
          nodeKeys = _createAnimatedStyle2[0],
          nodes = _createAnimatedStyle2[1],
          style = _createAnimatedStyle2[2];
        if (nodes.length === 0) {
          return null;
        }
        return new AnimatedStyle(nodeKeys, nodes, style, inputStyle);
      }
    }]);
  }(_AnimatedWithChildren2.default);
  var _hasOwnProp = Object.prototype.hasOwnProperty;
  var hasOwn = Object.hasOwn ?? ((obj, prop) => _hasOwnProp.call(obj, prop));
},348,[1,29,10,11,64,66,67,69,72,73,337,104,146,87,342,347,349,341]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _classPrivateFieldLooseBase2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _classPrivateFieldLooseKey2 = _interopRequireDefault(require(_dependencyMap[8]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[9]));
  var _NativeAnimatedValidation = require(_dependencyMap[10]);
  var _AnimatedNode = _interopRequireDefault(require(_dependencyMap[11]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[12]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  function flatAnimatedNodes(transforms) {
    var nodes = [];
    for (var ii = 0, length = transforms.length; ii < length; ii++) {
      var transform = transforms[ii];
      for (var key in transform) {
        var value = transform[key];
        if (value instanceof _AnimatedNode.default) {
          nodes.push(value);
        }
      }
    }
    return nodes;
  }
  var _nodes = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("nodes");
  var AnimatedTransform = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedTransform(nodes, transforms, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedTransform);
      _this = _callSuper(this, AnimatedTransform, [config]);
      Object.defineProperty(_this, _nodes, {
        writable: true,
        value: undefined
      });
      (0, _classPrivateFieldLooseBase2.default)(_this, _nodes)[_nodes] = nodes;
      _this._transforms = transforms;
      return _this;
    }
    (0, _inherits2.default)(AnimatedTransform, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedTransform, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var node = nodes[ii];
          node.__makeNative(platformConfig);
        }
        _superPropGet(AnimatedTransform, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return mapTransforms(this._transforms, animatedNode => animatedNode.__getValue());
      }
    }, {
      key: "__getValueWithStaticTransforms",
      value: function __getValueWithStaticTransforms(staticTransforms) {
        var values = [];
        mapTransforms(this._transforms, node => {
          values.push(node.__getValue());
        });
        return mapTransforms(staticTransforms, () => values.shift());
      }
    }, {
      key: "__getAnimatedValue",
      value: function __getAnimatedValue() {
        return mapTransforms(this._transforms, animatedNode => animatedNode.__getAnimatedValue());
      }
    }, {
      key: "__attach",
      value: function __attach() {
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var node = nodes[ii];
          node.__addChild(this);
        }
        _superPropGet(AnimatedTransform, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
        for (var ii = 0, length = nodes.length; ii < length; ii++) {
          var node = nodes[ii];
          node.__removeChild(this);
        }
        _superPropGet(AnimatedTransform, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var transformsConfig = [];
        var transforms = this._transforms;
        for (var ii = 0, length = transforms.length; ii < length; ii++) {
          var transform = transforms[ii];
          for (var key in transform) {
            var value = transform[key];
            if (value instanceof _AnimatedNode.default) {
              transformsConfig.push({
                type: 'animated',
                property: key,
                nodeTag: value.__getNativeTag()
              });
            } else {
              transformsConfig.push({
                type: 'static',
                property: key,
                value: _NativeAnimatedHelper.default.transformDataType(value)
              });
            }
          }
        }
        return {
          type: 'transform',
          transforms: transformsConfig,
          debugID: this.__getDebugID()
        };
      }
    }], [{
      key: "from",
      value: function from(transforms) {
        var nodes = flatAnimatedNodes(Array.isArray(transforms) ? transforms : []);
        if (nodes.length === 0) {
          return null;
        }
        return new AnimatedTransform(nodes, transforms);
      }
    }]);
  }(_AnimatedWithChildren2.default);
  function mapTransforms(transforms, mapFunction) {
    return transforms.map(transform => {
      var result = {};
      for (var key in transform) {
        var value = transform[key];
        if (value instanceof _AnimatedNode.default) {
          result[key] = mapFunction(value);
        } else if (Array.isArray(value)) {
          result[key] = value.map(element => element instanceof _AnimatedNode.default ? mapFunction(element) : element);
        } else if (typeof value === 'object') {
          var object = {};
          for (var propertyName in value) {
            var propertyValue = value[propertyName];
            object[propertyName] = propertyValue instanceof _AnimatedNode.default ? mapFunction(propertyValue) : propertyValue;
          }
          result[key] = object;
        } else {
          result[key] = value;
        }
      }
      return result;
    });
  }
},349,[1,10,11,64,66,67,69,72,73,326,337,342,341]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _readOnlyError2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedColor = _interopRequireDefault(require(_dependencyMap[8]));
  var SpringConfig = _interopRequireWildcard(require(_dependencyMap[9]));
  var _Animation2 = _interopRequireDefault(require(_dependencyMap[10]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[11]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var SpringAnimation = exports.default = /*#__PURE__*/function (_Animation) {
    function SpringAnimation(config) {
      var _this;
      (0, _classCallCheck2.default)(this, SpringAnimation);
      _this = _callSuper(this, SpringAnimation, [config]);
      _this._overshootClamping = config.overshootClamping ?? false;
      _this._restDisplacementThreshold = config.restDisplacementThreshold ?? 0.001;
      _this._restSpeedThreshold = config.restSpeedThreshold ?? 0.001;
      _this._initialVelocity = config.velocity ?? 0;
      _this._lastVelocity = config.velocity ?? 0;
      _this._toValue = config.toValue;
      _this._delay = config.delay ?? 0;
      _this._platformConfig = config.platformConfig;
      if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
        (0, _invariant.default)(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        _this._stiffness = config.stiffness ?? 100;
        _this._damping = config.damping ?? 10;
        _this._mass = config.mass ?? 1;
      } else if (config.bounciness !== undefined || config.speed !== undefined) {
        (0, _invariant.default)(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        var springConfig = SpringConfig.fromBouncinessAndSpeed(config.bounciness ?? 8, config.speed ?? 12);
        _this._stiffness = springConfig.stiffness;
        _this._damping = springConfig.damping;
        _this._mass = 1;
      } else {
        var _springConfig = SpringConfig.fromOrigamiTensionAndFriction(config.tension ?? 40, config.friction ?? 7);
        _this._stiffness = _springConfig.stiffness;
        _this._damping = _springConfig.damping;
        _this._mass = 1;
      }
      (0, _invariant.default)(_this._stiffness > 0, 'Stiffness value must be greater than 0');
      (0, _invariant.default)(_this._damping > 0, 'Damping value must be greater than 0');
      (0, _invariant.default)(_this._mass > 0, 'Mass value must be greater than 0');
      return _this;
    }
    (0, _inherits2.default)(SpringAnimation, _Animation);
    return (0, _createClass2.default)(SpringAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        return {
          type: 'spring',
          overshootClamping: this._overshootClamping,
          restDisplacementThreshold: this._restDisplacementThreshold,
          restSpeedThreshold: this._restSpeedThreshold,
          stiffness: this._stiffness,
          damping: this._damping,
          mass: this._mass,
          initialVelocity: this._initialVelocity ?? this._lastVelocity,
          toValue: this._toValue,
          iterations: this.__iterations,
          platformConfig: this._platformConfig,
          debugID: this.__getDebugID()
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        _superPropGet(SpringAnimation, "start", this, 3)([fromValue, onUpdate, onEnd, previousAnimation, animatedValue]);
        this._startPosition = fromValue;
        this._lastPosition = this._startPosition;
        this._onUpdate = onUpdate;
        this._lastTime = Date.now();
        this._frameTime = 0.0;
        if (previousAnimation instanceof SpringAnimation) {
          var internalState = previousAnimation.getInternalState();
          this._lastPosition = internalState.lastPosition;
          this._lastVelocity = internalState.lastVelocity;
          this._initialVelocity = this._lastVelocity;
          this._lastTime = internalState.lastTime;
        }
        var start = () => {
          var useNativeDriver = this.__startAnimationIfNative(animatedValue);
          if (!useNativeDriver) {
            this.onUpdate();
          }
        };
        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "getInternalState",
      value: function getInternalState() {
        return {
          lastPosition: this._lastPosition,
          lastVelocity: this._lastVelocity,
          lastTime: this._lastTime
        };
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var MAX_STEPS = 64;
        var now = Date.now();
        if (now > this._lastTime + MAX_STEPS) {
          now = this._lastTime + MAX_STEPS;
        }
        var deltaTime = (now - this._lastTime) / 1000;
        this._frameTime += deltaTime;
        var c = this._damping;
        var m = this._mass;
        var k = this._stiffness;
        var v0 = -this._initialVelocity;
        var zeta = c / (2 * Math.sqrt(k * m));
        var omega0 = Math.sqrt(k / m);
        var omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);
        var x0 = this._toValue - this._startPosition;
        var position = 0.0;
        var velocity = 0.0;
        var t = this._frameTime;
        if (zeta < 1) {
          var envelope = Math.exp(-zeta * omega0 * t);
          position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));
          velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));
        } else {
          var _envelope = Math.exp(-omega0 * t);
          position = this._toValue - _envelope * (x0 + (v0 + omega0 * x0) * t);
          velocity = _envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));
        }
        this._lastTime = now;
        this._lastPosition = position;
        this._lastVelocity = velocity;
        this._onUpdate(position);
        if (!this.__active) {
          return;
        }
        var isOvershooting = false;
        if (this._overshootClamping && this._stiffness !== 0) {
          if (this._startPosition < this._toValue) {
            isOvershooting = position > this._toValue;
          } else {
            isOvershooting = position < this._toValue;
          }
        }
        var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;
        var isDisplacement = true;
        if (this._stiffness !== 0) {
          isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
        }
        if (isOvershooting || isVelocity && isDisplacement) {
          if (this._stiffness !== 0) {
            this._lastPosition = this._toValue;
            this._lastVelocity = 0;
            this._onUpdate(this._toValue);
          }
          this.__notifyAnimationEnd({
            finished: true
          });
          return;
        }
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }, {
      key: "stop",
      value: function stop() {
        _superPropGet(SpringAnimation, "stop", this, 3)([]);
        clearTimeout(this._timeout);
        if (this._animationFrame != null) {
          global.cancelAnimationFrame(this._animationFrame);
        }
        this.__notifyAnimationEnd({
          finished: false
        });
      }
    }]);
  }(_Animation2.default);
},350,[1,182,10,11,64,66,67,69,351,352,345,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[7]));
  var _normalizeColor = _interopRequireDefault(require(_dependencyMap[8]));
  var _PlatformColorValueTypes = require(_dependencyMap[9]);
  var _AnimatedValue = _interopRequireWildcard(require(_dependencyMap[10]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[11]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var NativeAnimatedAPI = _NativeAnimatedHelper.default.API;
  var defaultColor = {
    r: 0,
    g: 0,
    b: 0,
    a: 1.0
  };
  function processColor(color) {
    if (color === undefined || color === null) {
      return null;
    }
    if (isRgbaValue(color)) {
      return color;
    }
    var normalizedColor = (0, _normalizeColor.default)(color);
    if (normalizedColor === undefined || normalizedColor === null) {
      return null;
    }
    if (typeof normalizedColor === 'object') {
      var processedColorObj = (0, _PlatformColorValueTypes.processColorObject)(normalizedColor);
      if (processedColorObj != null) {
        return processedColorObj;
      }
    } else if (typeof normalizedColor === 'number') {
      var r = (normalizedColor & 0xff000000) >>> 24;
      var g = (normalizedColor & 0x00ff0000) >>> 16;
      var b = (normalizedColor & 0x0000ff00) >>> 8;
      var a = (normalizedColor & 0x000000ff) / 255;
      return {
        r,
        g,
        b,
        a
      };
    }
    return null;
  }
  function isRgbaValue(value) {
    return value && typeof value.r === 'number' && typeof value.g === 'number' && typeof value.b === 'number' && typeof value.a === 'number';
  }
  function isRgbaAnimatedValue(value) {
    return value && value.r instanceof _AnimatedValue.default && value.g instanceof _AnimatedValue.default && value.b instanceof _AnimatedValue.default && value.a instanceof _AnimatedValue.default;
  }
  var AnimatedColor = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedColor(valueIn, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedColor);
      _this = _callSuper(this, AnimatedColor, [config]);
      _this._suspendCallbacks = 0;
      var value = valueIn ?? defaultColor;
      if (isRgbaAnimatedValue(value)) {
        var rgbaAnimatedValue = value;
        _this.r = rgbaAnimatedValue.r;
        _this.g = rgbaAnimatedValue.g;
        _this.b = rgbaAnimatedValue.b;
        _this.a = rgbaAnimatedValue.a;
      } else {
        var processedColor = processColor(value) ?? defaultColor;
        var initColor = defaultColor;
        if (isRgbaValue(processedColor)) {
          initColor = processedColor;
        } else {
          _this.nativeColor = processedColor;
        }
        _this.r = new _AnimatedValue.default(initColor.r);
        _this.g = new _AnimatedValue.default(initColor.g);
        _this.b = new _AnimatedValue.default(initColor.b);
        _this.a = new _AnimatedValue.default(initColor.a);
      }
      if (config?.useNativeDriver) {
        _this.__makeNative();
      }
      return _this;
    }
    (0, _inherits2.default)(AnimatedColor, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedColor, [{
      key: "setValue",
      value: function setValue(value) {
        var shouldUpdateNodeConfig = false;
        if (this.__isNative) {
          var nativeTag = this.__getNativeTag();
          NativeAnimatedAPI.setWaitingForIdentifier(nativeTag.toString());
        }
        var processedColor = processColor(value) ?? defaultColor;
        this._withSuspendedCallbacks(() => {
          if (isRgbaValue(processedColor)) {
            var rgbaValue = processedColor;
            this.r.setValue(rgbaValue.r);
            this.g.setValue(rgbaValue.g);
            this.b.setValue(rgbaValue.b);
            this.a.setValue(rgbaValue.a);
            if (this.nativeColor != null) {
              this.nativeColor = null;
              shouldUpdateNodeConfig = true;
            }
          } else {
            var nativeColor = processedColor;
            if (this.nativeColor !== nativeColor) {
              this.nativeColor = nativeColor;
              shouldUpdateNodeConfig = true;
            }
          }
        });
        if (this.__isNative) {
          var _nativeTag = this.__getNativeTag();
          if (shouldUpdateNodeConfig) {
            NativeAnimatedAPI.updateAnimatedNodeConfig(_nativeTag, this.__getNativeConfig());
          }
          NativeAnimatedAPI.unsetWaitingForIdentifier(_nativeTag.toString());
        } else {
          (0, _AnimatedValue.flushValue)(this);
        }
        this.__callListeners(this.__getValue());
      }
    }, {
      key: "setOffset",
      value: function setOffset(offset) {
        this.r.setOffset(offset.r);
        this.g.setOffset(offset.g);
        this.b.setOffset(offset.b);
        this.a.setOffset(offset.a);
      }
    }, {
      key: "flattenOffset",
      value: function flattenOffset() {
        this.r.flattenOffset();
        this.g.flattenOffset();
        this.b.flattenOffset();
        this.a.flattenOffset();
      }
    }, {
      key: "extractOffset",
      value: function extractOffset() {
        this.r.extractOffset();
        this.g.extractOffset();
        this.b.extractOffset();
        this.a.extractOffset();
      }
    }, {
      key: "stopAnimation",
      value: function stopAnimation(callback) {
        this.r.stopAnimation();
        this.g.stopAnimation();
        this.b.stopAnimation();
        this.a.stopAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "resetAnimation",
      value: function resetAnimation(callback) {
        this.r.resetAnimation();
        this.g.resetAnimation();
        this.b.resetAnimation();
        this.a.resetAnimation();
        callback && callback(this.__getValue());
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        if (this.nativeColor != null) {
          return this.nativeColor;
        } else {
          return `rgba(${this.r.__getValue()}, ${this.g.__getValue()}, ${this.b.__getValue()}, ${this.a.__getValue()})`;
        }
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this.r.__addChild(this);
        this.g.__addChild(this);
        this.b.__addChild(this);
        this.a.__addChild(this);
        _superPropGet(AnimatedColor, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this.r.__removeChild(this);
        this.g.__removeChild(this);
        this.b.__removeChild(this);
        this.a.__removeChild(this);
        _superPropGet(AnimatedColor, "__detach", this, 3)([]);
      }
    }, {
      key: "_withSuspendedCallbacks",
      value: function _withSuspendedCallbacks(callback) {
        this._suspendCallbacks++;
        callback();
        this._suspendCallbacks--;
      }
    }, {
      key: "__callListeners",
      value: function __callListeners(value) {
        if (this._suspendCallbacks === 0) {
          _superPropGet(AnimatedColor, "__callListeners", this, 3)([value]);
        }
      }
    }, {
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this.r.__makeNative(platformConfig);
        this.g.__makeNative(platformConfig);
        this.b.__makeNative(platformConfig);
        this.a.__makeNative(platformConfig);
        _superPropGet(AnimatedColor, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'color',
          r: this.r.__getNativeTag(),
          g: this.g.__getNativeTag(),
          b: this.b.__getNativeTag(),
          a: this.a.__getNativeTag(),
          nativeColor: this.nativeColor,
          debugID: this.__getDebugID()
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},351,[1,10,11,64,66,67,69,326,100,102,332,341]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.fromBouncinessAndSpeed = fromBouncinessAndSpeed;
  exports.fromOrigamiTensionAndFriction = fromOrigamiTensionAndFriction;
  function stiffnessFromOrigamiValue(oValue) {
    return (oValue - 30) * 3.62 + 194;
  }
  function dampingFromOrigamiValue(oValue) {
    return (oValue - 8) * 3 + 25;
  }
  function fromOrigamiTensionAndFriction(tension, friction) {
    return {
      stiffness: stiffnessFromOrigamiValue(tension),
      damping: dampingFromOrigamiValue(friction)
    };
  }
  function fromBouncinessAndSpeed(bounciness, speed) {
    function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    }
    function projectNormal(n, start, end) {
      return start + n * (end - start);
    }
    function linearInterpolation(t, start, end) {
      return t * end + (1 - t) * start;
    }
    function quadraticOutInterpolation(t, start, end) {
      return linearInterpolation(2 * t - t * t, start, end);
    }
    function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    }
    function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
    }
    function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    }
    function b3Nobounce(tension) {
      if (tension <= 18) {
        return b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        return b3Friction2(tension);
      } else {
        return b3Friction3(tension);
      }
    }
    var b = normalize(bounciness / 1.7, 0, 20);
    b = projectNormal(b, 0, 0.8);
    var s = normalize(speed / 1.7, 0, 20);
    var bouncyTension = projectNormal(s, 0.5, 200);
    var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
    return {
      stiffness: stiffnessFromOrigamiValue(bouncyTension),
      damping: dampingFromOrigamiValue(bouncyFriction)
    };
  }
},352,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _readOnlyError2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedColor = _interopRequireDefault(require(_dependencyMap[8]));
  var _Animation2 = _interopRequireDefault(require(_dependencyMap[9]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var _easeInOut;
  function easeInOut() {
    if (!_easeInOut) {
      var Easing = require(_dependencyMap[10]).default;
      _easeInOut = Easing.inOut(Easing.ease);
    }
    return _easeInOut;
  }
  var TimingAnimation = exports.default = /*#__PURE__*/function (_Animation) {
    function TimingAnimation(config) {
      var _this;
      (0, _classCallCheck2.default)(this, TimingAnimation);
      _this = _callSuper(this, TimingAnimation, [config]);
      _this._toValue = config.toValue;
      _this._easing = config.easing ?? easeInOut();
      _this._duration = config.duration ?? 500;
      _this._delay = config.delay ?? 0;
      _this._platformConfig = config.platformConfig;
      return _this;
    }
    (0, _inherits2.default)(TimingAnimation, _Animation);
    return (0, _createClass2.default)(TimingAnimation, [{
      key: "__getNativeAnimationConfig",
      value: function __getNativeAnimationConfig() {
        var frameDuration = 16.666666666666668;
        var frames = [];
        var numFrames = Math.round(this._duration / frameDuration);
        for (var frame = 0; frame < numFrames; frame++) {
          frames.push(this._easing(frame / numFrames));
        }
        frames.push(this._easing(1));
        return {
          type: 'frames',
          frames,
          toValue: this._toValue,
          iterations: this.__iterations,
          platformConfig: this._platformConfig,
          debugID: this.__getDebugID()
        };
      }
    }, {
      key: "start",
      value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
        _superPropGet(TimingAnimation, "start", this, 3)([fromValue, onUpdate, onEnd, previousAnimation, animatedValue]);
        this._fromValue = fromValue;
        this._onUpdate = onUpdate;
        var start = () => {
          this._startTime = Date.now();
          var useNativeDriver = this.__startAnimationIfNative(animatedValue);
          if (!useNativeDriver) {
            if (this._duration === 0) {
              this._onUpdate(this._toValue);
              this.__notifyAnimationEnd({
                finished: true
              });
            } else {
              this._animationFrame = requestAnimationFrame(() => this.onUpdate());
            }
          }
        };
        if (this._delay) {
          this._timeout = setTimeout(start, this._delay);
        } else {
          start();
        }
      }
    }, {
      key: "onUpdate",
      value: function onUpdate() {
        var now = Date.now();
        if (now >= this._startTime + this._duration) {
          if (this._duration === 0) {
            this._onUpdate(this._toValue);
          } else {
            this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
          }
          this.__notifyAnimationEnd({
            finished: true
          });
          return;
        }
        this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));
        if (this.__active) {
          this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
        }
      }
    }, {
      key: "stop",
      value: function stop() {
        _superPropGet(TimingAnimation, "stop", this, 3)([]);
        clearTimeout(this._timeout);
        if (this._animationFrame != null) {
          global.cancelAnimationFrame(this._animationFrame);
        }
        this.__notifyAnimationEnd({
          finished: false
        });
      }
    }]);
  }(_Animation2.default);
},353,[1,182,10,11,64,66,67,69,351,345,339]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createAnimatedComponent;
  exports.unstable_createAnimatedComponentWithAllowlist = unstable_createAnimatedComponentWithAllowlist;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createAnimatedPropsHook = _interopRequireDefault(require(_dependencyMap[2]));
  var _composeStyles = _interopRequireDefault(require(_dependencyMap[3]));
  var _View = _interopRequireDefault(require(_dependencyMap[4]));
  var _useMergeRefs = _interopRequireDefault(require(_dependencyMap[5]));
  var _react = _interopRequireWildcard(require(_dependencyMap[6]));
  var React = _react;
  var _jsxRuntime = require(_dependencyMap[7]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function createAnimatedComponent(Component) {
    return unstable_createAnimatedComponentWithAllowlist(Component, null);
  }
  function unstable_createAnimatedComponentWithAllowlist(Component, allowlist) {
    var useAnimatedProps = (0, _createAnimatedPropsHook.default)(allowlist);
    var AnimatedComponent = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
      var _useAnimatedProps = useAnimatedProps(props),
        _useAnimatedProps2 = (0, _slicedToArray2.default)(_useAnimatedProps, 2),
        reducedProps = _useAnimatedProps2[0],
        callbackRef = _useAnimatedProps2[1];
      var ref = (0, _useMergeRefs.default)(callbackRef, forwardedRef);
      var passthroughAnimatedPropExplicitValues = reducedProps.passthroughAnimatedPropExplicitValues,
        style = reducedProps.style;
      var passthroughStyle = passthroughAnimatedPropExplicitValues?.style;
      var mergedStyle = (0, _react.useMemo)(() => (0, _composeStyles.default)(style, passthroughStyle), [passthroughStyle, style]);
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        ...reducedProps,
        ...passthroughAnimatedPropExplicitValues,
        style: mergedStyle,
        ref: ref
      });
    });
    AnimatedComponent.displayName = `Animated(${Component.displayName || 'Anonymous'})`;
    return AnimatedComponent;
  }
},354,[1,29,355,291,285,359,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = createAnimatedPropsHook;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _AnimatedEvent = require(_dependencyMap[2]);
  var _AnimatedNode = _interopRequireDefault(require(_dependencyMap[3]));
  var _AnimatedProps = _interopRequireDefault(require(_dependencyMap[4]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[5]));
  var _ReactFabricPublicInstanceUtils = require(_dependencyMap[6]);
  var _useRefEffect = _interopRequireDefault(require(_dependencyMap[7]));
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[8]));
  var _createAnimatedPropsMemoHook = require(_dependencyMap[9]);
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[10]));
  var _react = require(_dependencyMap[11]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function createAnimatedPropsHook(allowlist) {
    var useAnimatedPropsMemo = (0, _createAnimatedPropsMemoHook.createAnimatedPropsMemoHook)(allowlist);
    return function useAnimatedProps(props) {
      var _useReducer = (0, _react.useReducer)(count => count + 1, 0),
        _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),
        scheduleUpdate = _useReducer2[1];
      var onUpdateRef = (0, _react.useRef)(null);
      var timerRef = (0, _react.useRef)(null);
      var node = useAnimatedPropsMemo(() => new _AnimatedProps.default(props, () => onUpdateRef.current?.(), allowlist), props);
      var useNativePropsInFabric = ReactNativeFeatureFlags.shouldUseSetNativePropsInFabric();
      (0, _react.useEffect)(() => {
        _NativeAnimatedHelper.default.API.flushQueue();
        var drivenAnimationEndedListener = null;
        if (node.__isNative) {
          drivenAnimationEndedListener = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onUserDrivenAnimationEnded', data => {
            node.update();
          });
        }
        return () => {
          drivenAnimationEndedListener?.remove();
        };
      });
      var useAnimatedPropsLifecycle = ReactNativeFeatureFlags.scheduleAnimatedCleanupInMicrotask() ? useAnimatedPropsLifecycleWithCleanupInMicrotask : useAnimatedPropsLifecycleWithPrevNodeRef;
      useAnimatedPropsLifecycle(node);
      var refEffect = (0, _react.useCallback)(instance => {
        node.setNativeView(instance);
        onUpdateRef.current = () => {
          var isFabricNode = isFabricInstance(instance);
          if (node.__isNative) {
            if (isFabricNode) {
              scheduleUpdate();
            }
            return;
          }
          if (typeof instance !== 'object' || typeof instance?.setNativeProps !== 'function') {
            return scheduleUpdate();
          }
          if (!isFabricNode) {
            return instance.setNativeProps(node.__getAnimatedValue());
          }
          if (!useNativePropsInFabric) {
            return scheduleUpdate();
          }
          instance.setNativeProps(node.__getAnimatedValue());
          if (timerRef.current != null) {
            clearTimeout(timerRef.current);
          }
          timerRef.current = setTimeout(() => {
            timerRef.current = null;
            scheduleUpdate();
          }, 48);
        };
        var target = getEventTarget(instance);
        var events = [];
        var animatedValueListeners = [];
        for (var propName in props) {
          var propValue = props[propName];
          if (propValue instanceof _AnimatedEvent.AnimatedEvent && propValue.__isNative) {
            propValue.__attach(target, propName);
            events.push([propName, propValue]);
            addListenersToPropsValue(propValue, animatedValueListeners);
          }
        }
        return () => {
          onUpdateRef.current = null;
          for (var _ref of events) {
            var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
            var _propName = _ref2[0];
            var _propValue = _ref2[1];
            _propValue.__detach(target, _propName);
          }
          for (var _ref3 of animatedValueListeners) {
            var _propValue2 = _ref3.propValue;
            var listenerId = _ref3.listenerId;
            _propValue2.removeListener(listenerId);
          }
        };
      }, [node, useNativePropsInFabric, props]);
      var callbackRef = (0, _useRefEffect.default)(refEffect);
      return [reduceAnimatedProps(node, props), callbackRef];
    };
  }
  function reduceAnimatedProps(node, props) {
    return {
      ...node.__getValueWithStaticProps(props),
      collapsable: false
    };
  }
  function addListenersToPropsValue(propValue, accumulator) {
    if (propValue instanceof _AnimatedValue.default) {
      var listenerId = propValue.addListener(() => {});
      accumulator.push({
        propValue,
        listenerId
      });
    } else if (Array.isArray(propValue)) {
      for (var prop of propValue) {
        addListenersToPropsValue(prop, accumulator);
      }
    } else if (propValue instanceof Object) {
      addAnimatedValuesListenersToProps(propValue, accumulator);
    }
  }
  function addAnimatedValuesListenersToProps(props, accumulator) {
    for (var propName in props) {
      var propValue = props[propName];
      addListenersToPropsValue(propValue, accumulator);
    }
  }
  function useAnimatedPropsLifecycleWithPrevNodeRef(node) {
    var prevNodeRef = (0, _react.useRef)(null);
    var isUnmountingRef = (0, _react.useRef)(false);
    (0, _react.useInsertionEffect)(() => {
      isUnmountingRef.current = false;
      return () => {
        isUnmountingRef.current = true;
      };
    }, []);
    (0, _react.useInsertionEffect)(() => {
      node.__attach();
      if (prevNodeRef.current != null) {
        var prevNode = prevNodeRef.current;
        prevNode.__restoreDefaultValues();
        prevNode.__detach();
        prevNodeRef.current = null;
      }
      return () => {
        if (isUnmountingRef.current) {
          node.__detach();
        } else {
          prevNodeRef.current = node;
        }
      };
    }, [node]);
  }
  function useAnimatedPropsLifecycleWithCleanupInMicrotask(node) {
    var isMounted = (0, _react.useRef)(false);
    (0, _react.useInsertionEffect)(() => {
      isMounted.current = true;
      node.__attach();
      return () => {
        isMounted.current = false;
        queueMicrotask(() => {
          if (isMounted.current) {
            node.__restoreDefaultValues();
          }
          node.__detach();
        });
      };
    }, [node]);
  }
  function getEventTarget(instance) {
    return typeof instance === 'object' && typeof instance?.getScrollableNode === 'function' ? instance.getScrollableNode() : instance;
  }
  function isFabricInstance(instance) {
    return (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance?.getNativeScrollRef?.()) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance?.getScrollResponder?.()?.getNativeScrollRef?.());
  }
},355,[1,29,325,342,346,332,356,357,104,358,326,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isPublicInstance = isPublicInstance;
  function isPublicInstance(maybeInstance) {
    return maybeInstance != null && (maybeInstance.__nativeTag != null || isLegacyFabricInstance(maybeInstance));
  }
  function isLegacyFabricInstance(maybeInstance) {
    return maybeInstance != null && maybeInstance['_internalInstanceHandle'] != null && maybeInstance['_internalInstanceHandle'].stateNode != null && maybeInstance['_internalInstanceHandle'].stateNode.canonical != null;
  }
},356,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useRefEffect;
  var _react = require(_dependencyMap[0]);
  function useRefEffect(effect) {
    var cleanupRef = (0, _react.useRef)(undefined);
    return (0, _react.useCallback)(instance => {
      if (cleanupRef.current) {
        cleanupRef.current();
        cleanupRef.current = undefined;
      }
      if (instance != null) {
        cleanupRef.current = effect(instance);
      }
    }, [effect]);
  }
},357,[140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.areCompositeKeysEqual = areCompositeKeysEqual;
  exports.createAnimatedPropsMemoHook = createAnimatedPropsMemoHook;
  exports.createCompositeKeyForProps = createCompositeKeyForProps;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _AnimatedEvent = require(_dependencyMap[2]);
  var _AnimatedNode = _interopRequireDefault(require(_dependencyMap[3]));
  var _AnimatedObject = require(_dependencyMap[4]);
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[5]));
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[6]));
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[7]));
  var _react = require(_dependencyMap[8]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function createAnimatedPropsMemoHook(allowlist) {
    return function useAnimatedPropsMemo(create, props) {
      var useAnimatedPropsImpl = ReactNativeFeatureFlags.avoidStateUpdateInAnimatedPropsMemo() ? useAnimatedPropsMemo_ref : useAnimatedPropsMemo_state;
      return useAnimatedPropsImpl(create, props);
    };
    function useAnimatedPropsMemo_ref(create, props) {
      var compositeKey = (0, _react.useMemo)(() => createCompositeKeyForProps(props, allowlist), [props]);
      var prevRef = (0, _react.useRef)();
      var prev = prevRef.current;
      var next = prev != null && areCompositeKeysEqual(prev.compositeKey, compositeKey, allowlist) ? prev : {
        compositeKey,
        node: create()
      };
      (0, _react.useInsertionEffect)(() => {
        prevRef.current = next;
      }, [next]);
      return next.node;
    }
    function useAnimatedPropsMemo_state(create, props) {
      var compositeKey = (0, _react.useMemo)(() => createCompositeKeyForProps(props, allowlist), [props]);
      var _useState = (0, _react.useState)(() => ({
          allowlist,
          compositeKey,
          value: create()
        })),
        _useState2 = (0, _slicedToArray2.default)(_useState, 2),
        state = _useState2[0],
        setState = _useState2[1];
      if (state.allowlist !== allowlist || !areCompositeKeysEqual(state.compositeKey, compositeKey)) {
        setState({
          allowlist,
          compositeKey,
          value: create()
        });
      }
      return state.value;
    }
  }
  function createCompositeKeyForProps(props, allowlist) {
    var compositeKey = null;
    var keys = Object.keys(props);
    for (var ii = 0, length = keys.length; ii < length; ii++) {
      var key = keys[ii];
      var value = props[key];
      if (allowlist == null || hasOwn(allowlist, key)) {
        var compositeKeyComponent = undefined;
        if (key === 'style') {
          var flatStyle = (0, _flattenStyle.default)(value);
          if (flatStyle != null) {
            compositeKeyComponent = createCompositeKeyForObject(flatStyle, allowlist?.style);
          }
        } else if (value instanceof _AnimatedNode.default || value instanceof _AnimatedEvent.AnimatedEvent) {
          compositeKeyComponent = value;
        } else if (Array.isArray(value)) {
          compositeKeyComponent = allowlist == null ? value : createCompositeKeyForArray(value);
        } else if ((0, _AnimatedObject.isPlainObject)(value)) {
          compositeKeyComponent = allowlist == null ? value : createCompositeKeyForObject(value);
        }
        if (compositeKeyComponent != null) {
          if (compositeKey == null) {
            compositeKey = {};
          }
          compositeKey[key] = compositeKeyComponent;
        }
      }
    }
    return compositeKey;
  }
  function createCompositeKeyForArray(array) {
    var compositeKey = null;
    for (var ii = 0, length = array.length; ii < length; ii++) {
      var value = array[ii];
      var compositeKeyComponent = undefined;
      if (value instanceof _AnimatedNode.default) {
        compositeKeyComponent = value;
      } else if (Array.isArray(value)) {
        compositeKeyComponent = createCompositeKeyForArray(value);
      } else if ((0, _AnimatedObject.isPlainObject)(value)) {
        compositeKeyComponent = createCompositeKeyForObject(value);
      }
      if (compositeKeyComponent != null) {
        if (compositeKey == null) {
          compositeKey = new Array(array.length).fill(null);
        }
        compositeKey[ii] = compositeKeyComponent;
      }
    }
    return compositeKey;
  }
  function createCompositeKeyForObject(object, allowlist) {
    var compositeKey = null;
    var keys = Object.keys(object);
    for (var ii = 0, length = keys.length; ii < length; ii++) {
      var key = keys[ii];
      if (allowlist == null || hasOwn(allowlist, key)) {
        var value = object[key];
        var compositeKeyComponent = undefined;
        if (value instanceof _AnimatedNode.default) {
          compositeKeyComponent = value;
        } else if (Array.isArray(value)) {
          compositeKeyComponent = createCompositeKeyForArray(value);
        } else if ((0, _AnimatedObject.isPlainObject)(value)) {
          compositeKeyComponent = createCompositeKeyForObject(value);
        }
        if (compositeKeyComponent != null) {
          if (compositeKey == null) {
            compositeKey = {};
          }
          compositeKey[key] = compositeKeyComponent;
        }
      }
    }
    return compositeKey;
  }
  function areCompositeKeysEqual(maybePrev, maybeNext, allowlist) {
    if (maybePrev === maybeNext) {
      return true;
    }
    if (maybePrev === null || maybeNext === null) {
      return false;
    }
    var prev = maybePrev;
    var next = maybeNext;
    var keys = Object.keys(prev);
    var length = keys.length;
    if (length !== Object.keys(next).length) {
      return false;
    }
    for (var ii = 0; ii < length; ii++) {
      var key = keys[ii];
      if (!hasOwn(next, key)) {
        return false;
      }
      var prevComponent = prev[key];
      var nextComponent = next[key];
      if (key === 'style') {
        if (!areCompositeKeyComponentsEqual(prevComponent, nextComponent)) {
          return false;
        }
      } else if (prevComponent instanceof _AnimatedNode.default || prevComponent instanceof _AnimatedEvent.AnimatedEvent) {
        if (prevComponent !== nextComponent) {
          return false;
        }
      } else {
        if (allowlist == null) {
          if (prevComponent !== nextComponent) {
            return false;
          }
        } else {
          if (!areCompositeKeyComponentsEqual(prevComponent, nextComponent)) {
            return false;
          }
        }
      }
    }
    return true;
  }
  function areCompositeKeyComponentsEqual(prev, next) {
    if (prev === next) {
      return true;
    }
    if (prev instanceof _AnimatedNode.default) {
      return prev === next;
    }
    if (Array.isArray(prev)) {
      if (!Array.isArray(next)) {
        return false;
      }
      var length = prev.length;
      if (length !== next.length) {
        return false;
      }
      for (var ii = 0; ii < length; ii++) {
        if (!areCompositeKeyComponentsEqual(prev[ii], next[ii])) {
          return false;
        }
      }
      return true;
    }
    if ((0, _AnimatedObject.isPlainObject)(prev)) {
      if (!(0, _AnimatedObject.isPlainObject)(next)) {
        return false;
      }
      var keys = Object.keys(prev);
      var _length = keys.length;
      if (_length !== Object.keys(next).length) {
        return false;
      }
      for (var _ii = 0; _ii < _length; _ii++) {
        var key = keys[_ii];
        if (!hasOwn((0, _nullthrows.default)(next), key) || !areCompositeKeyComponentsEqual(prev[key], next[key])) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  var _hasOwnProp = Object.prototype.hasOwnProperty;
  var hasOwn = Object.hasOwn ?? ((obj, prop) => _hasOwnProp.call(obj, prop));
},358,[1,29,325,342,347,146,104,128,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useMergeRefs;
  var _useRefEffect = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = _interopRequireWildcard(require(_dependencyMap[2]));
  var React = _react;
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function useMergeRefs() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
      refs[_key] = arguments[_key];
    }
    var refEffect = (0, _react.useCallback)(current => {
      var cleanups = refs.map(ref => {
        if (ref == null) {
          return undefined;
        } else {
          if (typeof ref === 'function') {
            var cleanup = ref(current);
            return typeof cleanup === 'function' ? cleanup : () => {
              ref(null);
            };
          } else {
            ref.current = current;
            return () => {
              ref.current = null;
            };
          }
        }
      });
      return () => {
        for (var cleanup of cleanups) {
          cleanup?.();
        }
      };
    }, [...refs]);
    return (0, _useRefEffect.default)(refEffect);
  }
},359,[1,357,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[9]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedAddition = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedAddition(a, b, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedAddition);
      _this = _callSuper(this, AnimatedAddition, [config]);
      _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
      _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
      return _this;
    }
    (0, _inherits2.default)(AnimatedAddition, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedAddition, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        _superPropGet(AnimatedAddition, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() + this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
        _superPropGet(AnimatedAddition, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        _superPropGet(AnimatedAddition, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'addition',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()],
          debugID: this.__getDebugID()
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},360,[1,10,11,64,66,67,69,336,332,341]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[8]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedDiffClamp = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedDiffClamp(a, min, max, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedDiffClamp);
      _this = _callSuper(this, AnimatedDiffClamp, [config]);
      _this._a = a;
      _this._min = min;
      _this._max = max;
      _this._value = _this._lastValue = _this._a.__getValue();
      return _this;
    }
    (0, _inherits2.default)(AnimatedDiffClamp, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedDiffClamp, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        _superPropGet(AnimatedDiffClamp, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var value = this._a.__getValue();
        var diff = value - this._lastValue;
        this._lastValue = value;
        this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
        return this._value;
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
        _superPropGet(AnimatedDiffClamp, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        _superPropGet(AnimatedDiffClamp, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'diffclamp',
          input: this._a.__getNativeTag(),
          min: this._min,
          max: this._max,
          debugID: this.__getDebugID()
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},361,[1,10,11,64,66,67,69,336,341]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedNode = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[9]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[10]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedDivision = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedDivision(a, b, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedDivision);
      _this = _callSuper(this, AnimatedDivision, [config]);
      _this._warnedAboutDivideByZero = false;
      if (b === 0 || b instanceof _AnimatedNode.default && b.__getValue() === 0) {
        console.error('Detected potential division by zero in AnimatedDivision');
      }
      _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
      _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
      return _this;
    }
    (0, _inherits2.default)(AnimatedDivision, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedDivision, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        _superPropGet(AnimatedDivision, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        var a = this._a.__getValue();
        var b = this._b.__getValue();
        if (b === 0) {
          if (!this._warnedAboutDivideByZero) {
            console.error('Detected division by zero in AnimatedDivision');
            this._warnedAboutDivideByZero = true;
          }
          return 0;
        }
        this._warnedAboutDivideByZero = false;
        return a / b;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
        _superPropGet(AnimatedDivision, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        _superPropGet(AnimatedDivision, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'division',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()],
          debugID: this.__getDebugID()
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},362,[1,10,11,64,66,67,69,336,342,332,341]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[8]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedModulo = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedModulo(a, modulus, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedModulo);
      _this = _callSuper(this, AnimatedModulo, [config]);
      _this._a = a;
      _this._modulus = modulus;
      return _this;
    }
    (0, _inherits2.default)(AnimatedModulo, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedModulo, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        _superPropGet(AnimatedModulo, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
        _superPropGet(AnimatedModulo, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        _superPropGet(AnimatedModulo, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'modulus',
          input: this._a.__getNativeTag(),
          modulus: this._modulus,
          debugID: this.__getDebugID()
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},363,[1,10,11,64,66,67,69,336,341]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[9]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedMultiplication = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedMultiplication(a, b, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedMultiplication);
      _this = _callSuper(this, AnimatedMultiplication, [config]);
      _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
      _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
      return _this;
    }
    (0, _inherits2.default)(AnimatedMultiplication, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedMultiplication, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        _superPropGet(AnimatedMultiplication, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() * this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
        _superPropGet(AnimatedMultiplication, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        _superPropGet(AnimatedMultiplication, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'multiplication',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()],
          debugID: this.__getDebugID()
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},364,[1,10,11,64,66,67,69,336,332,341]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[8]));
  var _AnimatedWithChildren2 = _interopRequireDefault(require(_dependencyMap[9]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedSubtraction = exports.default = /*#__PURE__*/function (_AnimatedWithChildren) {
    function AnimatedSubtraction(a, b, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedSubtraction);
      _this = _callSuper(this, AnimatedSubtraction, [config]);
      _this._a = typeof a === 'number' ? new _AnimatedValue.default(a) : a;
      _this._b = typeof b === 'number' ? new _AnimatedValue.default(b) : b;
      return _this;
    }
    (0, _inherits2.default)(AnimatedSubtraction, _AnimatedWithChildren);
    return (0, _createClass2.default)(AnimatedSubtraction, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this._a.__makeNative(platformConfig);
        this._b.__makeNative(platformConfig);
        _superPropGet(AnimatedSubtraction, "__makeNative", this, 3)([platformConfig]);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._a.__getValue() - this._b.__getValue();
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return new _AnimatedInterpolation.default(this, config);
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._a.__addChild(this);
        this._b.__addChild(this);
        _superPropGet(AnimatedSubtraction, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._a.__removeChild(this);
        this._b.__removeChild(this);
        _superPropGet(AnimatedSubtraction, "__detach", this, 3)([]);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        return {
          type: 'subtraction',
          input: [this._a.__getNativeTag(), this._b.__getNativeTag()],
          debugID: this.__getDebugID()
        };
      }
    }]);
  }(_AnimatedWithChildren2.default);
},365,[1,10,11,64,66,67,69,336,332,341]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _NativeAnimatedHelper = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedNode2 = _interopRequireDefault(require(_dependencyMap[8]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var AnimatedTracking = exports.default = /*#__PURE__*/function (_AnimatedNode) {
    function AnimatedTracking(value, parent, animationClass, animationConfig, callback, config) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedTracking);
      _this = _callSuper(this, AnimatedTracking, [config]);
      _this._value = value;
      _this._parent = parent;
      _this._animationClass = animationClass;
      _this._animationConfig = animationConfig;
      _this._useNativeDriver = _NativeAnimatedHelper.default.shouldUseNativeDriver(animationConfig);
      _this._callback = callback;
      _this.__attach();
      return _this;
    }
    (0, _inherits2.default)(AnimatedTracking, _AnimatedNode);
    return (0, _createClass2.default)(AnimatedTracking, [{
      key: "__makeNative",
      value: function __makeNative(platformConfig) {
        this.__isNative = true;
        this._parent.__makeNative(platformConfig);
        _superPropGet(AnimatedTracking, "__makeNative", this, 3)([platformConfig]);
        this._value.__makeNative(platformConfig);
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        return this._parent.__getValue();
      }
    }, {
      key: "__attach",
      value: function __attach() {
        this._parent.__addChild(this);
        if (this._useNativeDriver) {
          var platformConfig = this._animationConfig.platformConfig;
          this.__makeNative(platformConfig);
        }
        _superPropGet(AnimatedTracking, "__attach", this, 3)([]);
      }
    }, {
      key: "__detach",
      value: function __detach() {
        this._parent.__removeChild(this);
        _superPropGet(AnimatedTracking, "__detach", this, 3)([]);
      }
    }, {
      key: "update",
      value: function update() {
        this._value.animate(new this._animationClass({
          ...this._animationConfig,
          toValue: this._animationConfig.toValue.__getValue()
        }), this._callback);
      }
    }, {
      key: "__getNativeConfig",
      value: function __getNativeConfig() {
        var animation = new this._animationClass({
          ...this._animationConfig,
          toValue: undefined
        });
        var animationConfig = animation.__getNativeAnimationConfig();
        return {
          type: 'tracking',
          animationId: _NativeAnimatedHelper.default.generateNewAnimationId(),
          animationConfig,
          toValue: this._parent.__getNativeTag(),
          value: this._value.__getNativeTag(),
          debugID: this.__getDebugID()
        };
      }
    }]);
  }(_AnimatedNode2.default);
},366,[1,10,11,64,66,67,69,326,342]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _AnimatedEvent = require(_dependencyMap[1]);
  var _AnimatedImplementation = _interopRequireDefault(require(_dependencyMap[2]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[3]));
  var _AnimatedColor = _interopRequireDefault(require(_dependencyMap[4]));
  var _AnimatedInterpolation = _interopRequireDefault(require(_dependencyMap[5]));
  var _AnimatedNode = _interopRequireDefault(require(_dependencyMap[6]));
  var _AnimatedValue = _interopRequireDefault(require(_dependencyMap[7]));
  var _AnimatedValueXY = _interopRequireDefault(require(_dependencyMap[8]));
  var inAnimationCallback = false;
  function mockAnimationStart(start) {
    return callback => {
      var guardedCallback = callback == null ? callback : function () {
        if (inAnimationCallback) {
          console.warn('Ignoring recursive animation callback when running mock animations');
          return;
        }
        inAnimationCallback = true;
        try {
          callback(...arguments);
        } finally {
          inAnimationCallback = false;
        }
      };
      start(guardedCallback);
    };
  }
  var emptyAnimation = {
    start: () => {},
    stop: () => {},
    reset: () => {},
    _startNativeLoop: () => {},
    _isUsingNativeDriver: () => {
      return false;
    }
  };
  var mockCompositeAnimation = animations => ({
    ...emptyAnimation,
    start: mockAnimationStart(callback => {
      animations.forEach(animation => animation.start());
      callback?.({
        finished: true
      });
    })
  });
  var spring = function (value, config) {
    var anyValue = value;
    return {
      ...emptyAnimation,
      start: mockAnimationStart(callback => {
        anyValue.setValue(config.toValue);
        callback?.({
          finished: true
        });
      })
    };
  };
  var timing = function (value, config) {
    var anyValue = value;
    return {
      ...emptyAnimation,
      start: mockAnimationStart(callback => {
        anyValue.setValue(config.toValue);
        callback?.({
          finished: true
        });
      })
    };
  };
  var decay = function (value, config) {
    return emptyAnimation;
  };
  var sequence = function (animations) {
    return mockCompositeAnimation(animations);
  };
  var parallel = function (animations, config) {
    return mockCompositeAnimation(animations);
  };
  var delay = function (time) {
    return emptyAnimation;
  };
  var stagger = function (time, animations) {
    return mockCompositeAnimation(animations);
  };
  var loop = function (animation) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$iterations = _ref.iterations,
      iterations = _ref$iterations === undefined ? -1 : _ref$iterations;
    return emptyAnimation;
  };
  var _default = exports.default = {
    Value: _AnimatedValue.default,
    ValueXY: _AnimatedValueXY.default,
    Color: _AnimatedColor.default,
    Interpolation: _AnimatedInterpolation.default,
    Node: _AnimatedNode.default,
    decay,
    timing,
    spring,
    add: _AnimatedImplementation.default.add,
    subtract: _AnimatedImplementation.default.subtract,
    divide: _AnimatedImplementation.default.divide,
    multiply: _AnimatedImplementation.default.multiply,
    modulo: _AnimatedImplementation.default.modulo,
    diffClamp: _AnimatedImplementation.default.diffClamp,
    delay,
    sequence,
    parallel,
    stagger,
    loop,
    event: _AnimatedImplementation.default.event,
    createAnimatedComponent: _createAnimatedComponent.default,
    attachNativeEvent: _AnimatedEvent.attachNativeEvent,
    forkEvent: _AnimatedImplementation.default.forkEvent,
    unforkEvent: _AnimatedImplementation.default.unforkEvent,
    Event: _AnimatedEvent.AnimatedEvent
  };
},367,[1,325,324,354,351,336,342,332,343]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _FlatList = _interopRequireDefault(require(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = (0, _createAnimatedComponent.default)(_FlatList.default);
},368,[1,369,354,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[7]));
  var _View = _interopRequireDefault(require(_dependencyMap[8]));
  var _virtualizedLists = _interopRequireDefault(require(_dependencyMap[9]));
  var _memoizeOne = _interopRequireDefault(require(_dependencyMap[10]));
  var _react = _interopRequireDefault(require(_dependencyMap[11]));
  var _jsxRuntime = require(_dependencyMap[12]);
  var _excluded = ["numColumns", "columnWrapperStyle", "removeClippedSubviews", "strictMode"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var StyleSheet = require(_dependencyMap[13]).default;
  var deepDiffer = require(_dependencyMap[14]).default;
  var Platform = require(_dependencyMap[15]).default;
  var invariant = require(_dependencyMap[16]);
  var VirtualizedList = _virtualizedLists.default.VirtualizedList;
  var defaultKeyExtractor = _virtualizedLists.default.keyExtractor;
  function removeClippedSubviewsOrDefault(removeClippedSubviews) {
    if (ReactNativeFeatureFlags.shouldUseRemoveClippedSubviewsAsDefaultOnIOS()) {
      return removeClippedSubviews ?? true;
    } else {
      return removeClippedSubviews ?? false;
    }
  }
  function numColumnsOrDefault(numColumns) {
    return numColumns ?? 1;
  }
  function isArrayLike(data) {
    return typeof Object(data).length === 'number';
  }
  var FlatList = /*#__PURE__*/function (_React$PureComponent) {
    function FlatList(_props) {
      var _this;
      (0, _classCallCheck2.default)(this, FlatList);
      _this = _callSuper(this, FlatList, [_props]);
      _this._virtualizedListPairs = [];
      _this._captureRef = ref => {
        _this._listRef = ref;
      };
      _this._getItem = (data, index) => {
        var numColumns = numColumnsOrDefault(_this.props.numColumns);
        if (numColumns > 1) {
          var ret = [];
          for (var kk = 0; kk < numColumns; kk++) {
            var itemIndex = index * numColumns + kk;
            if (itemIndex < data.length) {
              var _item = data[itemIndex];
              ret.push(_item);
            }
          }
          return ret;
        } else {
          return data[index];
        }
      };
      _this._getItemCount = data => {
        if (data != null && isArrayLike(data)) {
          var numColumns = numColumnsOrDefault(_this.props.numColumns);
          return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;
        } else {
          return 0;
        }
      };
      _this._keyExtractor = (items, index) => {
        var numColumns = numColumnsOrDefault(_this.props.numColumns);
        var keyExtractor = _this.props.keyExtractor ?? defaultKeyExtractor;
        if (numColumns > 1) {
          invariant(Array.isArray(items), "FlatList: Encountered internal consistency error, expected each item to consist of an array with 1-%s columns; instead, received a single item.", numColumns);
          return items.map((item, kk) => keyExtractor(item, index * numColumns + kk)).join(':');
        }
        return keyExtractor(items, index);
      };
      _this._renderer = (ListItemComponent, renderItem, columnWrapperStyle, numColumns, extraData) => {
        var cols = numColumnsOrDefault(numColumns);
        var render = props => {
          if (ListItemComponent) {
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(ListItemComponent, {
              ...props
            });
          } else if (renderItem) {
            return renderItem(props);
          } else {
            return null;
          }
        };
        var renderProp = info => {
          if (cols > 1) {
            var _item2 = info.item,
              _index = info.index;
            invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
              style: StyleSheet.compose(styles.row, columnWrapperStyle),
              children: _item2.map((it, kk) => {
                var element = render({
                  item: it,
                  index: _index * cols + kk,
                  separators: info.separators
                });
                return element != null ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_react.default.Fragment, {
                  children: element
                }, kk) : null;
              })
            });
          } else {
            return render(info);
          }
        };
        return ListItemComponent ? {
          ListItemComponent: renderProp
        } : {
          renderItem: renderProp
        };
      };
      _this._memoizedRenderer = (0, _memoizeOne.default)(_this._renderer);
      _this._checkProps(_this.props);
      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(pair => ({
          viewabilityConfig: pair.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)
        }));
      } else if (_this.props.onViewableItemsChanged) {
        _this._virtualizedListPairs.push({
          viewabilityConfig: _this.props.viewabilityConfig,
          onViewableItemsChanged: _this._createOnViewableItemsChanged(function () {
            invariant(_this.props.onViewableItemsChanged, "Changing the nullability of onViewableItemsChanged is not supported. Once a function or null is supplied that cannot be changed.");
            return _this.props.onViewableItemsChanged(...arguments);
          })
        });
      }
      return _this;
    }
    (0, _inherits2.default)(FlatList, _React$PureComponent);
    return (0, _createClass2.default)(FlatList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        if (this._listRef) {
          this._listRef.scrollToEnd(params);
        }
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        if (this._listRef) {
          this._listRef.scrollToIndex(params);
        }
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        if (this._listRef) {
          this._listRef.scrollToItem(params);
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        if (this._listRef) {
          this._listRef.scrollToOffset(params);
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        if (this._listRef) {
          this._listRef.recordInteraction();
        }
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._listRef) {
          this._listRef.flashScrollIndicators();
        }
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._listRef) {
          return this._listRef.getScrollResponder();
        }
      }
    }, {
      key: "getNativeScrollRef",
      value: function getNativeScrollRef() {
        if (this._listRef) {
          return this._listRef.getScrollRef();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._listRef) {
          return this._listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._listRef) {
          this._listRef.setNativeProps(props);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        invariant(prevProps.numColumns === this.props.numColumns, "Changing numColumns on the fly is not supported. Change the key prop on FlatList when changing the number of columns to force a fresh render of the component.");
        invariant(prevProps.onViewableItemsChanged == null === (this.props.onViewableItemsChanged == null), 'Changing onViewableItemsChanged nullability on the fly is not supported');
        invariant(!deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig), 'Changing viewabilityConfig on the fly is not supported');
        invariant(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');
        this._checkProps(this.props);
      }
    }, {
      key: "_checkProps",
      value: function _checkProps(props) {
        var getItem = props.getItem,
          getItemCount = props.getItemCount,
          horizontal = props.horizontal,
          columnWrapperStyle = props.columnWrapperStyle,
          onViewableItemsChanged = props.onViewableItemsChanged,
          viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;
        var numColumns = numColumnsOrDefault(this.props.numColumns);
        invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');
        if (numColumns > 1) {
          invariant(!horizontal, 'numColumns does not support horizontal.');
        } else {
          invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
        }
        invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), "FlatList does not support setting both onViewableItemsChanged and viewabilityConfigCallbackPairs.");
      }
    }, {
      key: "_pushMultiColumnViewable",
      value: function _pushMultiColumnViewable(arr, v) {
        var numColumns = numColumnsOrDefault(this.props.numColumns);
        var keyExtractor = this.props.keyExtractor ?? defaultKeyExtractor;
        v.item.forEach((item, ii) => {
          invariant(v.index != null, 'Missing index!');
          var index = v.index * numColumns + ii;
          arr.push({
            ...v,
            item,
            key: keyExtractor(item, index),
            index
          });
        });
      }
    }, {
      key: "_createOnViewableItemsChanged",
      value: function _createOnViewableItemsChanged(onViewableItemsChanged) {
        return info => {
          var numColumns = numColumnsOrDefault(this.props.numColumns);
          if (onViewableItemsChanged) {
            if (numColumns > 1) {
              var changed = [];
              var viewableItems = [];
              info.viewableItems.forEach(v => this._pushMultiColumnViewable(viewableItems, v));
              info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));
              onViewableItemsChanged({
                viewableItems,
                changed
              });
            } else {
              onViewableItemsChanged(info);
            }
          }
        };
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          numColumns = _this$props.numColumns,
          columnWrapperStyle = _this$props.columnWrapperStyle,
          _removeClippedSubviews = _this$props.removeClippedSubviews,
          _this$props$strictMod = _this$props.strictMode,
          strictMode = _this$props$strictMod === undefined ? false : _this$props$strictMod,
          restProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var renderer = strictMode ? this._memoizedRenderer : this._renderer;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(VirtualizedList, {
          ...restProps,
          getItem: this._getItem,
          getItemCount: this._getItemCount,
          keyExtractor: this._keyExtractor,
          ref: this._captureRef,
          viewabilityConfigCallbackPairs: this._virtualizedListPairs,
          removeClippedSubviews: removeClippedSubviewsOrDefault(_removeClippedSubviews),
          ...renderer(this.props.ListItemComponent, this.props.renderItem, columnWrapperStyle, numColumns, this.props.extraData)
        });
      }
    }]);
  }(_react.default.PureComponent);
  var styles = StyleSheet.create({
    row: {
      flexDirection: 'row'
    }
  });
  var _default = exports.default = FlatList;
},369,[1,238,10,11,64,66,69,104,285,370,385,140,288,290,145,87,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _VirtualizeUtils = require(_dependencyMap[0]);
  var _default = exports.default = {
    keyExtractor: _VirtualizeUtils.keyExtractor,
    get VirtualizedList() {
      return require(_dependencyMap[1]).default;
    },
    get VirtualizedSectionList() {
      return require(_dependencyMap[2]).default;
    },
    get VirtualizedListContextResetter() {
      var VirtualizedListContext = require(_dependencyMap[3]);
      return VirtualizedListContext.VirtualizedListContextResetter;
    },
    get ViewabilityHelper() {
      return require(_dependencyMap[4]).default;
    },
    get FillRateHelper() {
      return require(_dependencyMap[5]).default;
    }
  };
},370,[371,372,384,382,380,377]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.computeWindowedRenderLimits = computeWindowedRenderLimits;
  exports.elementsThatOverlapOffsets = elementsThatOverlapOffsets;
  exports.keyExtractor = keyExtractor;
  exports.newRangeCount = newRangeCount;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[2]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function elementsThatOverlapOffsets(offsets, props, listMetrics) {
    var zoomScale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    var itemCount = props.getItemCount(props.data);
    var result = [];
    for (var offsetIndex = 0; offsetIndex < offsets.length; offsetIndex++) {
      var currentOffset = offsets[offsetIndex];
      var left = 0;
      var right = itemCount - 1;
      while (left <= right) {
        var mid = left + Math.floor((right - left) / 2);
        var frame = listMetrics.getCellMetricsApprox(mid, props);
        var scaledOffsetStart = frame.offset * zoomScale;
        var scaledOffsetEnd = (frame.offset + frame.length) * zoomScale;
        if (mid === 0 && currentOffset < scaledOffsetStart || mid !== 0 && currentOffset <= scaledOffsetStart) {
          right = mid - 1;
        } else if (currentOffset > scaledOffsetEnd) {
          left = mid + 1;
        } else {
          result[offsetIndex] = mid;
          break;
        }
      }
    }
    return result;
  }
  function newRangeCount(prev, next) {
    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
  }
  function computeWindowedRenderLimits(props, maxToRenderPerBatch, windowSize, prev, listMetrics, scrollMetrics) {
    var itemCount = props.getItemCount(props.data);
    if (itemCount === 0) {
      return {
        first: 0,
        last: -1
      };
    }
    var offset = scrollMetrics.offset,
      velocity = scrollMetrics.velocity,
      visibleLength = scrollMetrics.visibleLength,
      _scrollMetrics$zoomSc = scrollMetrics.zoomScale,
      zoomScale = _scrollMetrics$zoomSc === undefined ? 1 : _scrollMetrics$zoomSc;
    var visibleBegin = Math.max(0, offset);
    var visibleEnd = visibleBegin + visibleLength;
    var overscanLength = (windowSize - 1) * visibleLength;
    var leadFactor = 0.5;
    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';
    var overscanBegin = Math.max(0, visibleBegin - 0.5 * overscanLength);
    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);
    var lastItemOffset = listMetrics.getCellMetricsApprox(itemCount - 1, props).offset * zoomScale;
    if (lastItemOffset < overscanBegin) {
      return {
        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),
        last: itemCount - 1
      };
    }
    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props, listMetrics, zoomScale),
      _elementsThatOverlapO2 = (0, _slicedToArray2.default)(_elementsThatOverlapO, 4),
      overscanFirst = _elementsThatOverlapO2[0],
      first = _elementsThatOverlapO2[1],
      last = _elementsThatOverlapO2[2],
      overscanLast = _elementsThatOverlapO2[3];
    overscanFirst = overscanFirst == null ? 0 : overscanFirst;
    first = first == null ? Math.max(0, overscanFirst) : first;
    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
    var visible = {
      first,
      last
    };
    var newCellCount = newRangeCount(prev, visible);
    while (true) {
      if (first <= overscanFirst && last >= overscanLast) {
        break;
      }
      var maxNewCells = newCellCount >= maxToRenderPerBatch;
      var firstWillAddMore = undefined;
      var lastWillAddMore = undefined;
      if (ReactNativeFeatureFlags.fixVirtualizeListCollapseWindowSize()) {
        firstWillAddMore = first <= prev.first;
        lastWillAddMore = last >= prev.last;
      } else {
        firstWillAddMore = first <= prev.first || first > prev.last;
        lastWillAddMore = last >= prev.last || last < prev.first;
      }
      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);
      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
        break;
      }
      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
        if (firstWillAddMore) {
          newCellCount++;
        }
        first--;
      }
      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
        if (lastWillAddMore) {
          newCellCount++;
        }
        last++;
      }
    }
    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
      throw new Error('Bad window calculation ' + JSON.stringify({
        first,
        last,
        itemCount,
        overscanFirst,
        overscanLast,
        visible
      }));
    }
    return {
      first,
      last
    };
  }
  function keyExtractor(item, index) {
    if (typeof item === 'object' && item?.key != null) {
      return item.key;
    }
    if (typeof item === 'object' && item?.id != null) {
      return item.id;
    }
    return String(index);
  }
},371,[1,29,104]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _clamp = _interopRequireDefault(require(_dependencyMap[7]));
  var _infoLog = _interopRequireDefault(require(_dependencyMap[8]));
  var _CellRenderMask = require(_dependencyMap[9]);
  var _ChildListCollection = _interopRequireDefault(require(_dependencyMap[10]));
  var _FillRateHelper = _interopRequireDefault(require(_dependencyMap[11]));
  var _ListMetricsAggregator = _interopRequireDefault(require(_dependencyMap[12]));
  var _StateSafePureComponent = _interopRequireDefault(require(_dependencyMap[13]));
  var _ViewabilityHelper = _interopRequireDefault(require(_dependencyMap[14]));
  var _VirtualizedListCellRenderer = _interopRequireDefault(require(_dependencyMap[15]));
  var _VirtualizedListContext = require(_dependencyMap[16]);
  var _VirtualizedListProps = require(_dependencyMap[17]);
  var _VirtualizeUtils = require(_dependencyMap[18]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[19]));
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[20]));
  var React = _interopRequireWildcard(require(_dependencyMap[21]));
  var _reactNative = require(_dependencyMap[22]);
  var _jsxRuntime = require(_dependencyMap[23]);
  var _excluded = ["onContentSizeChange"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var ON_EDGE_REACHED_EPSILON = 0.001;
  var _usedIndexForKey = false;
  var _keylessItemComponentName = '';
  function getScrollingThreshold(threshold, visibleLength) {
    return threshold * visibleLength / 2;
  }
  var VirtualizedList = /*#__PURE__*/function (_StateSafePureCompone) {
    function VirtualizedList(_props) {
      var _this;
      (0, _classCallCheck2.default)(this, VirtualizedList);
      _this = _callSuper(this, VirtualizedList, [_props]);
      _this._getScrollMetrics = () => {
        return _this._scrollMetrics;
      };
      _this._getOutermostParentListRef = () => {
        if (_this._isNestedWithSameOrientation()) {
          return _this.context.getOutermostParentListRef();
        } else {
          return _this;
        }
      };
      _this._registerAsNestedChild = childList => {
        _this._nestedChildLists.add(childList.ref, childList.cellKey);
        if (_this._hasInteracted) {
          childList.ref.recordInteraction();
        }
      };
      _this._unregisterAsNestedChild = childList => {
        _this._nestedChildLists.remove(childList.ref);
      };
      _this._onUpdateSeparators = (keys, newProps) => {
        keys.forEach(key => {
          var ref = key != null && _this._cellRefs[key];
          ref && ref.updateSeparatorProps(newProps);
        });
      };
      _this._getSpacerKey = isVertical => isVertical ? 'height' : 'width';
      _this._cellRefs = {};
      _this._listMetrics = new _ListMetricsAggregator.default();
      _this._footerLength = 0;
      _this._hasTriggeredInitialScrollToIndex = false;
      _this._hasInteracted = false;
      _this._hasMore = false;
      _this._hasWarned = {};
      _this._headerLength = 0;
      _this._hiPriInProgress = false;
      _this._indicesToKeys = new Map();
      _this._lastFocusedCellKey = null;
      _this._nestedChildLists = new _ChildListCollection.default();
      _this._offsetFromParentVirtualizedList = 0;
      _this._pendingViewabilityUpdate = false;
      _this._prevParentOffset = 0;
      _this._scrollMetrics = {
        dOffset: 0,
        dt: 10,
        offset: 0,
        timestamp: 0,
        velocity: 0,
        visibleLength: 0,
        zoomScale: 1
      };
      _this._scrollRef = null;
      _this._sentStartForContentLength = 0;
      _this._sentEndForContentLength = 0;
      _this._updateCellsToRenderTimeoutID = null;
      _this._viewabilityTuples = [];
      _this._captureScrollRef = ref => {
        _this._scrollRef = ref;
      };
      _this._defaultRenderScrollComponent = props => {
        var onRefresh = props.onRefresh;
        if (_this._isNestedWithSameOrientation()) {
          var onContentSizeChange = props.onContentSizeChange,
            otherProps = (0, _objectWithoutProperties2.default)(props, _excluded);
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            ...otherProps
          });
        } else if (onRefresh) {
          (0, _invariant.default)(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing ?? 'undefined') + '`');
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
            ...props,
            refreshControl: props.refreshControl == null ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.RefreshControl, {
              refreshing: props.refreshing,
              onRefresh: onRefresh,
              progressViewOffset: props.progressViewOffset
            }) : props.refreshControl
          });
        } else {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
            ...props
          });
        }
      };
      _this._onCellLayout = (e, cellKey, cellIndex) => {
        var layoutHasChanged = _this._listMetrics.notifyCellLayout({
          cellIndex,
          cellKey,
          layout: e.nativeEvent.layout,
          orientation: _this._orientation()
        });
        if (layoutHasChanged) {
          _this._scheduleCellsToRenderUpdate();
        }
        _this._triggerRemeasureForChildListsInCell(cellKey);
        _this._computeBlankness();
        _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
      };
      _this._onCellFocusCapture = cellKey => {
        _this._lastFocusedCellKey = cellKey;
        _this._updateCellsToRender();
      };
      _this._onCellUnmount = cellKey => {
        delete _this._cellRefs[cellKey];
        _this._listMetrics.notifyCellUnmounted(cellKey);
      };
      _this._onLayout = e => {
        if (_this._isNestedWithSameOrientation()) {
          _this.measureLayoutRelativeToContainingList();
        } else {
          _this._scrollMetrics.visibleLength = _this._selectLength(e.nativeEvent.layout);
        }
        _this.props.onLayout && _this.props.onLayout(e);
        _this._scheduleCellsToRenderUpdate();
        _this._maybeCallOnEdgeReached();
      };
      _this._onLayoutEmpty = e => {
        _this.props.onLayout && _this.props.onLayout(e);
      };
      _this._onLayoutFooter = e => {
        _this._triggerRemeasureForChildListsInCell(_this._getFooterCellKey());
        _this._footerLength = _this._selectLength(e.nativeEvent.layout);
      };
      _this._onLayoutHeader = e => {
        _this._headerLength = _this._selectLength(e.nativeEvent.layout);
      };
      _this._onContentSizeChange = (width, height) => {
        _this._listMetrics.notifyListContentLayout({
          layout: {
            width,
            height
          },
          orientation: _this._orientation()
        });
        _this._maybeScrollToInitialScrollIndex(width, height);
        if (_this.props.onContentSizeChange) {
          _this.props.onContentSizeChange(width, height);
        }
        _this._scheduleCellsToRenderUpdate();
        _this._maybeCallOnEdgeReached();
      };
      _this._convertParentScrollMetrics = metrics => {
        var offset = metrics.offset - _this._offsetFromParentVirtualizedList;
        var visibleLength = metrics.visibleLength;
        var dOffset = offset - _this._scrollMetrics.offset;
        var contentLength = _this._listMetrics.getContentLength();
        return {
          visibleLength,
          contentLength,
          offset,
          dOffset
        };
      };
      _this._onScroll = e => {
        _this._nestedChildLists.forEach(childList => {
          childList._onScroll(e);
        });
        if (_this.props.onScroll) {
          _this.props.onScroll(e);
        }
        var timestamp = e.timeStamp;
        var visibleLength = _this._selectLength(e.nativeEvent.layoutMeasurement);
        var contentLength = _this._selectLength(e.nativeEvent.contentSize);
        var offset = _this._offsetFromScrollEvent(e);
        var dOffset = offset - _this._scrollMetrics.offset;
        if (_this._isNestedWithSameOrientation()) {
          if (_this._listMetrics.getContentLength() === 0) {
            return;
          }
          var _this$_convertParentS = _this._convertParentScrollMetrics({
            visibleLength,
            offset
          });
          visibleLength = _this$_convertParentS.visibleLength;
          contentLength = _this$_convertParentS.contentLength;
          offset = _this$_convertParentS.offset;
          dOffset = _this$_convertParentS.dOffset;
        }
        var dt = _this._scrollMetrics.timestamp ? Math.max(1, timestamp - _this._scrollMetrics.timestamp) : 1;
        var velocity = dOffset / dt;
        if (dt > 500 && _this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this._hasWarned.perf) {
          (0, _infoLog.default)("VirtualizedList: You have a large list that is slow to update - make sure your renderItem function renders components that follow React performance best practices like PureComponent, shouldComponentUpdate, etc.", {
            dt,
            prevDt: _this._scrollMetrics.dt,
            contentLength
          });
          _this._hasWarned.perf = true;
        }
        var zoomScale = e.nativeEvent.zoomScale < 0 ? 1 : e.nativeEvent.zoomScale;
        _this._scrollMetrics = {
          dt,
          dOffset,
          offset,
          timestamp,
          velocity,
          visibleLength,
          zoomScale
        };
        if (_this.state.pendingScrollUpdateCount > 0) {
          _this.setState(state => ({
            pendingScrollUpdateCount: state.pendingScrollUpdateCount - 1
          }));
        }
        _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
        if (!_this.props) {
          return;
        }
        _this._maybeCallOnEdgeReached();
        if (velocity !== 0) {
          _this._fillRateHelper.activate();
        }
        _this._computeBlankness();
        _this._scheduleCellsToRenderUpdate();
      };
      _this._onScrollBeginDrag = e => {
        _this._nestedChildLists.forEach(childList => {
          childList._onScrollBeginDrag(e);
        });
        _this._viewabilityTuples.forEach(tuple => {
          tuple.viewabilityHelper.recordInteraction();
        });
        _this._hasInteracted = true;
        _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
      };
      _this._onScrollEndDrag = e => {
        _this._nestedChildLists.forEach(childList => {
          childList._onScrollEndDrag(e);
        });
        var velocity = e.nativeEvent.velocity;
        if (velocity) {
          _this._scrollMetrics.velocity = _this._selectOffset(velocity);
        }
        _this._computeBlankness();
        _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
      };
      _this._onMomentumScrollBegin = e => {
        _this._nestedChildLists.forEach(childList => {
          childList._onMomentumScrollBegin(e);
        });
        _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
      };
      _this._onMomentumScrollEnd = e => {
        _this._nestedChildLists.forEach(childList => {
          childList._onMomentumScrollEnd(e);
        });
        _this._scrollMetrics.velocity = 0;
        _this._computeBlankness();
        _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
      };
      _this._updateCellsToRender = () => {
        _this._updateViewableItems(_this.props, _this.state.cellsAroundViewport);
        _this.setState((state, props) => {
          var cellsAroundViewport = _this._adjustCellsAroundViewport(props, state.cellsAroundViewport, state.pendingScrollUpdateCount);
          var renderMask = VirtualizedList._createRenderMask(props, cellsAroundViewport, _this._getNonViewportRenderRegions(props));
          if (cellsAroundViewport.first === state.cellsAroundViewport.first && cellsAroundViewport.last === state.cellsAroundViewport.last && renderMask.equals(state.renderMask)) {
            return null;
          }
          return {
            cellsAroundViewport,
            renderMask
          };
        });
      };
      _this._createViewToken = (index, isViewable, props) => {
        var data = props.data,
          getItem = props.getItem;
        var item = getItem(data, index);
        return {
          index,
          item,
          key: VirtualizedList._keyExtractor(item, index, props),
          isViewable
        };
      };
      _this._getNonViewportRenderRegions = props => {
        if (!(_this._lastFocusedCellKey && _this._cellRefs[_this._lastFocusedCellKey])) {
          return [];
        }
        var lastFocusedCellRenderer = _this._cellRefs[_this._lastFocusedCellKey];
        var focusedCellIndex = lastFocusedCellRenderer.props.index;
        var itemCount = props.getItemCount(props.data);
        if (focusedCellIndex >= itemCount || VirtualizedList._getItemKey(props, focusedCellIndex) !== _this._lastFocusedCellKey) {
          return [];
        }
        var first = focusedCellIndex;
        var heightOfCellsBeforeFocused = 0;
        for (var i = first - 1; i >= 0 && heightOfCellsBeforeFocused < _this._scrollMetrics.visibleLength; i--) {
          first--;
          heightOfCellsBeforeFocused += _this._listMetrics.getCellMetricsApprox(i, props).length;
        }
        var last = focusedCellIndex;
        var heightOfCellsAfterFocused = 0;
        for (var _i = last + 1; _i < itemCount && heightOfCellsAfterFocused < _this._scrollMetrics.visibleLength; _i++) {
          last++;
          heightOfCellsAfterFocused += _this._listMetrics.getCellMetricsApprox(_i, props).length;
        }
        return [{
          first,
          last
        }];
      };
      _this._checkProps(_props);
      _this._fillRateHelper = new _FillRateHelper.default(_this._listMetrics);
      if (_this.props.viewabilityConfigCallbackPairs) {
        _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(pair => ({
          viewabilityHelper: new _ViewabilityHelper.default(pair.viewabilityConfig),
          onViewableItemsChanged: pair.onViewableItemsChanged
        }));
      } else {
        var _this$props = _this.props,
          onViewableItemsChanged = _this$props.onViewableItemsChanged,
          viewabilityConfig = _this$props.viewabilityConfig;
        if (onViewableItemsChanged) {
          _this._viewabilityTuples.push({
            viewabilityHelper: new _ViewabilityHelper.default(viewabilityConfig),
            onViewableItemsChanged: onViewableItemsChanged
          });
        }
      }
      var initialRenderRegion = VirtualizedList._initialRenderRegion(_props);
      var minIndexForVisible = _this.props.maintainVisibleContentPosition?.minIndexForVisible ?? 0;
      _this.state = {
        cellsAroundViewport: initialRenderRegion,
        renderMask: VirtualizedList._createRenderMask(_props, initialRenderRegion),
        firstVisibleItemKey: _this.props.getItemCount(_this.props.data) > minIndexForVisible ? VirtualizedList._getItemKey(_this.props, minIndexForVisible) : null,
        pendingScrollUpdateCount: _this.props.initialScrollIndex != null && _this.props.initialScrollIndex > 0 ? 1 : 0
      };
      return _this;
    }
    (0, _inherits2.default)(VirtualizedList, _StateSafePureCompone);
    return (0, _createClass2.default)(VirtualizedList, [{
      key: "scrollToEnd",
      value: function scrollToEnd(params) {
        var animated = params ? params.animated : true;
        var veryLast = this.props.getItemCount(this.props.data) - 1;
        if (veryLast < 0) {
          return;
        }
        var frame = this._listMetrics.getCellMetricsApprox(veryLast, this.props);
        var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);
        this.scrollToOffset({
          animated,
          offset
        });
      }
    }, {
      key: "scrollToIndex",
      value: function scrollToIndex(params) {
        var _this$props2 = this.props,
          data = _this$props2.data,
          getItemCount = _this$props2.getItemCount,
          getItemLayout = _this$props2.getItemLayout,
          onScrollToIndexFailed = _this$props2.onScrollToIndexFailed;
        var animated = params.animated,
          index = params.index,
          viewOffset = params.viewOffset,
          viewPosition = params.viewPosition;
        (0, _invariant.default)(index >= 0, `scrollToIndex out of range: requested index ${index} but minimum is 0`);
        (0, _invariant.default)(getItemCount(data) >= 1, `scrollToIndex out of range: item length ${getItemCount(data)} but minimum is 1`);
        (0, _invariant.default)(index < getItemCount(data), `scrollToIndex out of range: requested index ${index} is out of 0 to ${getItemCount(data) - 1}`);
        if (!getItemLayout && index > this._listMetrics.getHighestMeasuredCellIndex()) {
          (0, _invariant.default)(!!onScrollToIndexFailed, "scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, otherwise there is no way to know the location of offscreen indices or handle failures.");
          onScrollToIndexFailed({
            averageItemLength: this._listMetrics.getAverageCellLength(),
            highestMeasuredFrameIndex: this._listMetrics.getHighestMeasuredCellIndex(),
            index
          });
          return;
        }
        var frame = this._listMetrics.getCellMetricsApprox(Math.floor(index), this.props);
        var offset = Math.max(0, this._listMetrics.getCellOffsetApprox(index, this.props) - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);
        this.scrollToOffset({
          offset,
          animated
        });
      }
    }, {
      key: "scrollToItem",
      value: function scrollToItem(params) {
        var item = params.item;
        var _this$props3 = this.props,
          data = _this$props3.data,
          getItem = _this$props3.getItem,
          getItemCount = _this$props3.getItemCount;
        var itemCount = getItemCount(data);
        for (var index = 0; index < itemCount; index++) {
          if (getItem(data, index) === item) {
            this.scrollToIndex({
              ...params,
              index
            });
            break;
          }
        }
      }
    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(params) {
        var animated = params.animated,
          offset = params.offset;
        var scrollRef = this._scrollRef;
        if (scrollRef == null) {
          return;
        }
        if (scrollRef.scrollTo == null) {
          console.warn("No scrollTo method provided. This may be because you have two nested VirtualizedLists with the same orientation, or because you are using a custom component that does not implement scrollTo.");
          return;
        }
        var _this$_orientation = this._orientation(),
          horizontal = _this$_orientation.horizontal,
          rtl = _this$_orientation.rtl;
        if (horizontal && rtl && !this._listMetrics.hasContentLength()) {
          console.warn('scrollToOffset may not be called in RTL before content is laid out');
          return;
        }
        scrollRef.scrollTo({
          animated,
          ...this._scrollToParamsFromOffset(offset)
        });
      }
    }, {
      key: "_scrollToParamsFromOffset",
      value: function _scrollToParamsFromOffset(offset) {
        var _this$_orientation2 = this._orientation(),
          horizontal = _this$_orientation2.horizontal,
          rtl = _this$_orientation2.rtl;
        if (horizontal && rtl) {
          var cartOffset = this._listMetrics.cartesianOffset(offset + this._scrollMetrics.visibleLength);
          return horizontal ? {
            x: cartOffset
          } : {
            y: cartOffset
          };
        } else {
          return horizontal ? {
            x: offset
          } : {
            y: offset
          };
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._nestedChildLists.forEach(childList => {
          childList.recordInteraction();
        });
        this._viewabilityTuples.forEach(t => {
          t.viewabilityHelper.recordInteraction();
        });
        this._updateViewableItems(this.props, this.state.cellsAroundViewport);
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        if (this._scrollRef == null) {
          return;
        }
        this._scrollRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        if (this._scrollRef && this._scrollRef.getScrollResponder) {
          return this._scrollRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        if (this._scrollRef && this._scrollRef.getScrollableNode) {
          return this._scrollRef.getScrollableNode();
        } else {
          return (0, _reactNative.findNodeHandle)(this._scrollRef);
        }
      }
    }, {
      key: "getScrollRef",
      value: function getScrollRef() {
        if (this._scrollRef && this._scrollRef.getScrollRef) {
          return this._scrollRef.getScrollRef();
        } else {
          return this._scrollRef;
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        if (this._scrollRef) {
          this._scrollRef.setNativeProps(props);
        }
      }
    }, {
      key: "_getCellKey",
      value: function _getCellKey() {
        return this.context?.cellKey || 'rootList';
      }
    }, {
      key: "hasMore",
      value: function hasMore() {
        return this._hasMore;
      }
    }, {
      key: "_checkProps",
      value: function _checkProps(props) {
        var onScroll = props.onScroll,
          windowSize = props.windowSize,
          getItemCount = props.getItemCount,
          data = props.data,
          initialScrollIndex = props.initialScrollIndex;
        (0, _invariant.default)(!onScroll || !onScroll.__isNative, "Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent to support native onScroll events with useNativeDriver");
        (0, _invariant.default)((0, _VirtualizedListProps.windowSizeOrDefault)(windowSize) > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
        (0, _invariant.default)(getItemCount, 'VirtualizedList: The "getItemCount" prop must be provided');
        var itemCount = getItemCount(data);
        if (initialScrollIndex != null && !this._hasTriggeredInitialScrollToIndex && (initialScrollIndex < 0 || itemCount > 0 && initialScrollIndex >= itemCount) && !this._hasWarned.initialScrollIndex) {
          console.warn(`initialScrollIndex "${initialScrollIndex}" is not valid (list has ${itemCount} items)`);
          this._hasWarned.initialScrollIndex = true;
        }
      }
    }, {
      key: "_adjustCellsAroundViewport",
      value: function _adjustCellsAroundViewport(props, cellsAroundViewport, pendingScrollUpdateCount) {
        var data = props.data,
          getItemCount = props.getItemCount;
        var onEndReachedThreshold = (0, _VirtualizedListProps.onEndReachedThresholdOrDefault)(props.onEndReachedThreshold);
        var _this$_scrollMetrics = this._scrollMetrics,
          offset = _this$_scrollMetrics.offset,
          visibleLength = _this$_scrollMetrics.visibleLength;
        var contentLength = this._listMetrics.getContentLength();
        var distanceFromEnd = contentLength - visibleLength - offset;
        if (visibleLength <= 0 || contentLength <= 0) {
          return cellsAroundViewport.last >= getItemCount(data) ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props) : cellsAroundViewport;
        }
        var newCellsAroundViewport;
        if (props.disableVirtualization) {
          var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch) : 0;
          newCellsAroundViewport = {
            first: 0,
            last: Math.min(cellsAroundViewport.last + renderAhead, getItemCount(data) - 1)
          };
        } else {
          if (pendingScrollUpdateCount > 0) {
            return cellsAroundViewport.last >= getItemCount(data) ? VirtualizedList._constrainToItemCount(cellsAroundViewport, props) : cellsAroundViewport;
          }
          newCellsAroundViewport = (0, _VirtualizeUtils.computeWindowedRenderLimits)(props, (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch), (0, _VirtualizedListProps.windowSizeOrDefault)(props.windowSize), cellsAroundViewport, this._listMetrics, this._scrollMetrics);
          (0, _invariant.default)(newCellsAroundViewport.last < getItemCount(data), 'computeWindowedRenderLimits() should return range in-bounds');
        }
        if (this._nestedChildLists.size() > 0) {
          var childIdx = this._findFirstChildWithMore(newCellsAroundViewport.first, newCellsAroundViewport.last);
          newCellsAroundViewport.last = childIdx ?? newCellsAroundViewport.last;
        }
        return newCellsAroundViewport;
      }
    }, {
      key: "_findFirstChildWithMore",
      value: function _findFirstChildWithMore(first, last) {
        for (var ii = first; ii <= last; ii++) {
          var cellKeyForIndex = this._indicesToKeys.get(ii);
          if (cellKeyForIndex != null && this._nestedChildLists.anyInCell(cellKeyForIndex, childList => childList.hasMore())) {
            return ii;
          }
        }
        return null;
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.registerAsNestedChild({
            ref: this,
            cellKey: this.context.cellKey
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._isNestedWithSameOrientation()) {
          this.context.unregisterAsNestedChild({
            ref: this
          });
        }
        clearTimeout(this._updateCellsToRenderTimeoutID);
        this._viewabilityTuples.forEach(tuple => {
          tuple.viewabilityHelper.dispose();
        });
        this._fillRateHelper.deactivateAndFlush();
      }
    }, {
      key: "_pushCells",
      value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
        var _this2 = this;
        var _this$props4 = this.props,
          CellRendererComponent = _this$props4.CellRendererComponent,
          ItemSeparatorComponent = _this$props4.ItemSeparatorComponent,
          ListHeaderComponent = _this$props4.ListHeaderComponent,
          ListItemComponent = _this$props4.ListItemComponent,
          data = _this$props4.data,
          debug = _this$props4.debug,
          getItem = _this$props4.getItem,
          getItemCount = _this$props4.getItemCount,
          getItemLayout = _this$props4.getItemLayout,
          horizontal = _this$props4.horizontal,
          renderItem = _this$props4.renderItem;
        var stickyOffset = ListHeaderComponent ? 1 : 0;
        var end = getItemCount(data) - 1;
        var prevCellKey;
        last = Math.min(end, last);
        var _loop = function () {
          var item = getItem(data, ii);
          var key = VirtualizedList._keyExtractor(item, ii, _this2.props);
          _this2._indicesToKeys.set(ii, key);
          if (stickyIndicesFromProps.has(ii + stickyOffset)) {
            stickyHeaderIndices.push(cells.length);
          }
          var shouldListenForLayout = getItemLayout == null || debug || _this2._fillRateHelper.enabled();
          cells.push(/*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedListCellRenderer.default, {
            CellRendererComponent: CellRendererComponent,
            ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
            ListItemComponent: ListItemComponent,
            cellKey: key,
            horizontal: horizontal,
            index: ii,
            inversionStyle: inversionStyle,
            item: item,
            prevCellKey: prevCellKey,
            onUpdateSeparators: _this2._onUpdateSeparators,
            onCellFocusCapture: _this2._onCellFocusCapture,
            onUnmount: _this2._onCellUnmount,
            ref: ref => {
              _this2._cellRefs[key] = ref;
            },
            renderItem: renderItem,
            ...(shouldListenForLayout && {
              onCellLayout: _this2._onCellLayout
            })
          }, key));
          prevCellKey = key;
        };
        for (var ii = first; ii <= last; ii++) {
          _loop();
        }
      }
    }, {
      key: "_isNestedWithSameOrientation",
      value: function _isNestedWithSameOrientation() {
        var nestedContext = this.context;
        return !!(nestedContext && !!nestedContext.horizontal === (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal));
      }
    }, {
      key: "render",
      value: function render() {
        this._checkProps(this.props);
        var _this$props5 = this.props,
          ListEmptyComponent = _this$props5.ListEmptyComponent,
          ListFooterComponent = _this$props5.ListFooterComponent,
          ListHeaderComponent = _this$props5.ListHeaderComponent;
        var _this$props6 = this.props,
          data = _this$props6.data,
          horizontal = _this$props6.horizontal;
        var inversionStyle = this.props.inverted ? (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal) ? styles.horizontallyInverted : styles.verticallyInverted : null;
        var cells = [];
        var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
        var stickyHeaderIndices = [];
        if (ListHeaderComponent) {
          if (stickyIndicesFromProps.has(0)) {
            stickyHeaderIndices.push(0);
          }
          var element = /*#__PURE__*/React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : /*#__PURE__*/(0, _jsxRuntime.jsx)(ListHeaderComponent, {});
          cells.push(/*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
            cellKey: this._getCellKey() + '-header',
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
              collapsable: false,
              onLayout: this._onLayoutHeader,
              style: _reactNative.StyleSheet.compose(inversionStyle, this.props.ListHeaderComponentStyle),
              children: element
            })
          }, "$header"));
        }
        var itemCount = this.props.getItemCount(data);
        if (itemCount === 0 && ListEmptyComponent) {
          var _element = /*#__PURE__*/React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : /*#__PURE__*/(0, _jsxRuntime.jsx)(ListEmptyComponent, {});
          cells.push(/*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
            cellKey: this._getCellKey() + '-empty',
            children: /*#__PURE__*/React.cloneElement(_element, {
              onLayout: event => {
                this._onLayoutEmpty(event);
                if (_element.props.onLayout) {
                  _element.props.onLayout(event);
                }
              },
              style: _reactNative.StyleSheet.compose(inversionStyle, _element.props.style)
            })
          }, "$empty"));
        }
        if (itemCount > 0) {
          _usedIndexForKey = false;
          _keylessItemComponentName = '';
          var spacerKey = this._getSpacerKey(!horizontal);
          var renderRegions = this.state.renderMask.enumerateRegions();
          var lastRegion = renderRegions[renderRegions.length - 1];
          var lastSpacer = lastRegion?.isSpacer ? lastRegion : null;
          for (var section of renderRegions) {
            if (section.isSpacer) {
              if (this.props.disableVirtualization) {
                continue;
              }
              var isLastSpacer = section === lastSpacer;
              var constrainToMeasured = isLastSpacer && !this.props.getItemLayout;
              var last = constrainToMeasured ? (0, _clamp.default)(section.first - 1, section.last, this._listMetrics.getHighestMeasuredCellIndex()) : section.last;
              var firstMetrics = this._listMetrics.getCellMetricsApprox(section.first, this.props);
              var lastMetrics = this._listMetrics.getCellMetricsApprox(last, this.props);
              var spacerSize = lastMetrics.offset + lastMetrics.length - firstMetrics.offset;
              cells.push(/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
                style: {
                  [spacerKey]: spacerSize
                }
              }, `$spacer-${section.first}`));
            } else {
              this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, section.first, section.last, inversionStyle);
            }
          }
          if (!this._hasWarned.keys && _usedIndexForKey) {
            console.warn("VirtualizedList: missing keys for items, make sure to specify a key or id property on each item or provide a custom keyExtractor.", _keylessItemComponentName);
            this._hasWarned.keys = true;
          }
        }
        if (ListFooterComponent) {
          var _element2 = /*#__PURE__*/React.isValidElement(ListFooterComponent) ? ListFooterComponent : /*#__PURE__*/(0, _jsxRuntime.jsx)(ListFooterComponent, {});
          cells.push(/*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
            cellKey: this._getFooterCellKey(),
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
              onLayout: this._onLayoutFooter,
              style: _reactNative.StyleSheet.compose(inversionStyle, this.props.ListFooterComponentStyle),
              children: _element2
            })
          }, "$footer"));
        }
        var scrollProps = {
          ...this.props,
          onContentSizeChange: this._onContentSizeChange,
          onLayout: this._onLayout,
          onScroll: this._onScroll,
          onScrollBeginDrag: this._onScrollBeginDrag,
          onScrollEndDrag: this._onScrollEndDrag,
          onMomentumScrollBegin: this._onMomentumScrollBegin,
          onMomentumScrollEnd: this._onMomentumScrollEnd,
          scrollEventThrottle: this.props.scrollEventThrottle ?? 0.0001,
          invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
          stickyHeaderIndices,
          style: inversionStyle ? [inversionStyle, this.props.style] : this.props.style,
          isInvertedVirtualizedList: this.props.inverted,
          maintainVisibleContentPosition: this.props.maintainVisibleContentPosition != null ? {
            ...this.props.maintainVisibleContentPosition,
            minIndexForVisible: this.props.maintainVisibleContentPosition.minIndexForVisible + (this.props.ListHeaderComponent ? 1 : 0)
          } : undefined
        };
        this._hasMore = this.state.cellsAroundViewport.last < itemCount - 1;
        var innerRet = /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListContextProvider, {
          value: {
            cellKey: null,
            getScrollMetrics: this._getScrollMetrics,
            horizontal: (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal),
            getOutermostParentListRef: this._getOutermostParentListRef,
            registerAsNestedChild: this._registerAsNestedChild,
            unregisterAsNestedChild: this._unregisterAsNestedChild
          },
          children: /*#__PURE__*/React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
            ref: this._captureScrollRef
          }, cells)
        });
        var ret = innerRet;
        if (this.props.debug) {
          return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.debug,
            children: [ret, this._renderDebugOverlay()]
          });
        } else {
          return ret;
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props7 = this.props,
          data = _this$props7.data,
          extraData = _this$props7.extraData,
          getItemLayout = _this$props7.getItemLayout;
        if (data !== prevProps.data || extraData !== prevProps.extraData) {
          this._viewabilityTuples.forEach(tuple => {
            tuple.viewabilityHelper.resetViewableIndices();
          });
        }
        var hiPriInProgress = this._hiPriInProgress;
        this._scheduleCellsToRenderUpdate();
        if (hiPriInProgress) {
          this._hiPriInProgress = false;
        }
        if (getItemLayout != null) {
          this._maybeCallOnEdgeReached();
        }
      }
    }, {
      key: "_computeBlankness",
      value: function _computeBlankness() {
        this._fillRateHelper.computeBlankness(this.props, this.state.cellsAroundViewport, this._scrollMetrics);
      }
    }, {
      key: "_triggerRemeasureForChildListsInCell",
      value: function _triggerRemeasureForChildListsInCell(cellKey) {
        this._nestedChildLists.forEachInCell(cellKey, childList => {
          childList.measureLayoutRelativeToContainingList();
        });
      }
    }, {
      key: "measureLayoutRelativeToContainingList",
      value: function measureLayoutRelativeToContainingList() {
        try {
          if (!this._scrollRef) {
            return;
          }
          this._scrollRef.measureLayout(this.context.getOutermostParentListRef().getScrollRef(), (x, y, width, height) => {
            this._offsetFromParentVirtualizedList = this._selectOffset({
              x,
              y
            });
            this._listMetrics.notifyListContentLayout({
              layout: {
                width,
                height
              },
              orientation: this._orientation()
            });
            var scrollMetrics = this._convertParentScrollMetrics(this.context.getScrollMetrics());
            var metricsChanged = this._scrollMetrics.visibleLength !== scrollMetrics.visibleLength || this._scrollMetrics.offset !== scrollMetrics.offset;
            if (metricsChanged) {
              this._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
              this._scrollMetrics.offset = scrollMetrics.offset;
              this._nestedChildLists.forEach(childList => {
                childList.measureLayoutRelativeToContainingList();
              });
            }
          }, error => {
            console.warn("VirtualizedList: Encountered an error while measuring a list's offset from its containing VirtualizedList.");
          });
        } catch (error) {
          console.warn('measureLayoutRelativeToContainingList threw an error', error.stack);
        }
      }
    }, {
      key: "_getFooterCellKey",
      value: function _getFooterCellKey() {
        return this._getCellKey() + '-footer';
      }
    }, {
      key: "_renderDebugOverlay",
      value: function _renderDebugOverlay() {
        var normalize = this._scrollMetrics.visibleLength / (this._listMetrics.getContentLength() || 1);
        var framesInLayout = [];
        var itemCount = this.props.getItemCount(this.props.data);
        for (var ii = 0; ii < itemCount; ii++) {
          var frame = this._listMetrics.getCellMetricsApprox(ii, this.props);
          if (frame.isMounted) {
            framesInLayout.push(frame);
          }
        }
        var windowTop = this._listMetrics.getCellMetricsApprox(this.state.cellsAroundViewport.first, this.props).offset;
        var frameLast = this._listMetrics.getCellMetricsApprox(this.state.cellsAroundViewport.last, this.props);
        var windowLen = frameLast.offset + frameLast.length - windowTop;
        var visTop = this._scrollMetrics.offset;
        var visLen = this._scrollMetrics.visibleLength;
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [styles.debugOverlayBase, styles.debugOverlay],
          children: [framesInLayout.map((f, ii) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.debugOverlayBase, styles.debugOverlayFrame, {
              top: f.offset * normalize,
              height: f.length * normalize
            }]
          }, 'f' + ii)), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.debugOverlayBase, styles.debugOverlayFrameLast, {
              top: windowTop * normalize,
              height: windowLen * normalize
            }]
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.debugOverlayBase, styles.debugOverlayFrameVis, {
              top: visTop * normalize,
              height: visLen * normalize
            }]
          })]
        });
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(metrics) {
        return !(0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal) ? metrics.height : metrics.width;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(_ref) {
        var x = _ref.x,
          y = _ref.y;
        return this._orientation().horizontal ? x : y;
      }
    }, {
      key: "_orientation",
      value: function _orientation() {
        return {
          horizontal: (0, _VirtualizedListProps.horizontalOrDefault)(this.props.horizontal),
          rtl: _reactNative.I18nManager.isRTL
        };
      }
    }, {
      key: "_maybeCallOnEdgeReached",
      value: function _maybeCallOnEdgeReached() {
        var _this$props8 = this.props,
          data = _this$props8.data,
          getItemCount = _this$props8.getItemCount,
          onStartReached = _this$props8.onStartReached,
          onStartReachedThreshold = _this$props8.onStartReachedThreshold,
          onEndReached = _this$props8.onEndReached,
          onEndReachedThreshold = _this$props8.onEndReachedThreshold;
        if (!this._listMetrics.hasContentLength() || this._scrollMetrics.visibleLength === 0) {
          return;
        }
        if (this.state.pendingScrollUpdateCount > 0) {
          return;
        }
        var _this$_scrollMetrics2 = this._scrollMetrics,
          visibleLength = _this$_scrollMetrics2.visibleLength,
          offset = _this$_scrollMetrics2.offset;
        var distanceFromStart = offset;
        var distanceFromEnd = this._listMetrics.getContentLength() - visibleLength - offset;
        if (distanceFromStart < ON_EDGE_REACHED_EPSILON) {
          distanceFromStart = 0;
        }
        if (distanceFromEnd < ON_EDGE_REACHED_EPSILON) {
          distanceFromEnd = 0;
        }
        var DEFAULT_THRESHOLD_PX = 2;
        var startThreshold = onStartReachedThreshold != null ? onStartReachedThreshold * visibleLength : DEFAULT_THRESHOLD_PX;
        var endThreshold = onEndReachedThreshold != null ? onEndReachedThreshold * visibleLength : DEFAULT_THRESHOLD_PX;
        var isWithinStartThreshold = distanceFromStart <= startThreshold;
        var isWithinEndThreshold = distanceFromEnd <= endThreshold;
        if (onEndReached && this.state.cellsAroundViewport.last === getItemCount(data) - 1 && isWithinEndThreshold && this._listMetrics.getContentLength() !== this._sentEndForContentLength) {
          this._sentEndForContentLength = this._listMetrics.getContentLength();
          onEndReached({
            distanceFromEnd
          });
        }
        if (onStartReached != null && this.state.cellsAroundViewport.first === 0 && isWithinStartThreshold && this._listMetrics.getContentLength() !== this._sentStartForContentLength) {
          this._sentStartForContentLength = this._listMetrics.getContentLength();
          onStartReached({
            distanceFromStart
          });
        }
        if (!isWithinStartThreshold) {
          this._sentStartForContentLength = 0;
        }
        if (!isWithinEndThreshold) {
          this._sentEndForContentLength = 0;
        }
      }
    }, {
      key: "_maybeScrollToInitialScrollIndex",
      value: function _maybeScrollToInitialScrollIndex(contentWidth, contentHeight) {
        if (contentWidth > 0 && contentHeight > 0 && this.props.initialScrollIndex != null && this.props.initialScrollIndex > 0 && !this._hasTriggeredInitialScrollToIndex) {
          if (this.props.contentOffset == null) {
            if (this.props.initialScrollIndex < this.props.getItemCount(this.props.data)) {
              this.scrollToIndex({
                animated: false,
                index: (0, _nullthrows.default)(this.props.initialScrollIndex)
              });
            } else {
              this.scrollToEnd({
                animated: false
              });
            }
          }
          this._hasTriggeredInitialScrollToIndex = true;
        }
      }
    }, {
      key: "unstable_onScroll",
      value: function unstable_onScroll(e) {
        this._onScroll(e);
      }
    }, {
      key: "_offsetFromScrollEvent",
      value: function _offsetFromScrollEvent(e) {
        var _e$nativeEvent = e.nativeEvent,
          contentOffset = _e$nativeEvent.contentOffset,
          contentSize = _e$nativeEvent.contentSize,
          layoutMeasurement = _e$nativeEvent.layoutMeasurement;
        var _this$_orientation3 = this._orientation(),
          horizontal = _this$_orientation3.horizontal,
          rtl = _this$_orientation3.rtl;
        if (horizontal && rtl) {
          return this._selectLength(contentSize) - (this._selectOffset(contentOffset) + this._selectLength(layoutMeasurement));
        } else {
          return this._selectOffset(contentOffset);
        }
      }
    }, {
      key: "_scheduleCellsToRenderUpdate",
      value: function _scheduleCellsToRenderUpdate() {
        if ((this._listMetrics.getAverageCellLength() > 0 || this.props.getItemLayout != null) && this._shouldRenderWithPriority() && !this._hiPriInProgress) {
          this._hiPriInProgress = true;
          if (this._updateCellsToRenderTimeoutID != null) {
            clearTimeout(this._updateCellsToRenderTimeoutID);
            this._updateCellsToRenderTimeoutID = null;
          }
          this._updateCellsToRender();
          return;
        } else {
          if (this._updateCellsToRenderTimeoutID == null) {
            this._updateCellsToRenderTimeoutID = setTimeout(() => {
              this._updateCellsToRenderTimeoutID = null;
              this._updateCellsToRender();
            }, this.props.updateCellsBatchingPeriod ?? 50);
          }
        }
      }
    }, {
      key: "_shouldRenderWithPriority",
      value: function _shouldRenderWithPriority() {
        var _this$state$cellsArou = this.state.cellsAroundViewport,
          first = _this$state$cellsArou.first,
          last = _this$state$cellsArou.last;
        var _this$_scrollMetrics3 = this._scrollMetrics,
          offset = _this$_scrollMetrics3.offset,
          visibleLength = _this$_scrollMetrics3.visibleLength,
          velocity = _this$_scrollMetrics3.velocity;
        var itemCount = this.props.getItemCount(this.props.data);
        var hiPri = false;
        var onStartReachedThreshold = (0, _VirtualizedListProps.onStartReachedThresholdOrDefault)(this.props.onStartReachedThreshold);
        var onEndReachedThreshold = (0, _VirtualizedListProps.onEndReachedThresholdOrDefault)(this.props.onEndReachedThreshold);
        if (first > 0) {
          var distTop = offset - this._listMetrics.getCellMetricsApprox(first, this.props).offset;
          hiPri = distTop < 0 || velocity < -2 && distTop < getScrollingThreshold(onStartReachedThreshold, visibleLength);
        }
        if (!hiPri && last >= 0 && last < itemCount - 1) {
          var distBottom = this._listMetrics.getCellMetricsApprox(last, this.props).offset - (offset + visibleLength);
          hiPri = distBottom < 0 || velocity > 2 && distBottom < getScrollingThreshold(onEndReachedThreshold, visibleLength);
        }
        return hiPri;
      }
    }, {
      key: "unstable_onScrollBeginDrag",
      value: function unstable_onScrollBeginDrag(e) {
        this._onScrollBeginDrag(e);
      }
    }, {
      key: "unstable_onScrollEndDrag",
      value: function unstable_onScrollEndDrag(e) {
        this._onScrollEndDrag(e);
      }
    }, {
      key: "unstable_onMomentumScrollBegin",
      value: function unstable_onMomentumScrollBegin(e) {
        this._onMomentumScrollBegin(e);
      }
    }, {
      key: "unstable_onMomentumScrollEnd",
      value: function unstable_onMomentumScrollEnd(e) {
        this._onMomentumScrollEnd(e);
      }
    }, {
      key: "__getListMetrics",
      value: function __getListMetrics() {
        return this._listMetrics;
      }
    }, {
      key: "_updateViewableItems",
      value: function _updateViewableItems(props, cellsAroundViewport) {
        if (this.state.pendingScrollUpdateCount > 0) {
          return;
        }
        this._viewabilityTuples.forEach(tuple => {
          tuple.viewabilityHelper.onUpdate(props, this._scrollMetrics.offset, this._scrollMetrics.visibleLength, this._listMetrics, this._createViewToken, tuple.onViewableItemsChanged, cellsAroundViewport);
        });
      }
    }], [{
      key: "_findItemIndexWithKey",
      value: function _findItemIndexWithKey(props, key, hint) {
        var itemCount = props.getItemCount(props.data);
        if (hint != null && hint >= 0 && hint < itemCount) {
          var curKey = VirtualizedList._getItemKey(props, hint);
          if (curKey === key) {
            return hint;
          }
        }
        for (var ii = 0; ii < itemCount; ii++) {
          var _curKey = VirtualizedList._getItemKey(props, ii);
          if (_curKey === key) {
            return ii;
          }
        }
        return null;
      }
    }, {
      key: "_getItemKey",
      value: function _getItemKey(props, index) {
        var item = props.getItem(props.data, index);
        return VirtualizedList._keyExtractor(item, index, props);
      }
    }, {
      key: "_createRenderMask",
      value: function _createRenderMask(props, cellsAroundViewport, additionalRegions) {
        var itemCount = props.getItemCount(props.data);
        (0, _invariant.default)(cellsAroundViewport.first >= 0 && cellsAroundViewport.last >= cellsAroundViewport.first - 1 && cellsAroundViewport.last < itemCount, `Invalid cells around viewport "[${cellsAroundViewport.first}, ${cellsAroundViewport.last}]" was passed to VirtualizedList._createRenderMask`);
        var renderMask = new _CellRenderMask.CellRenderMask(itemCount);
        if (itemCount > 0) {
          var allRegions = [cellsAroundViewport, ...(additionalRegions ?? [])];
          for (var region of allRegions) {
            renderMask.addCells(region);
          }
          if (props.initialScrollIndex == null || props.initialScrollIndex <= 0) {
            var initialRegion = VirtualizedList._initialRenderRegion(props);
            renderMask.addCells(initialRegion);
          }
          var stickyIndicesSet = new Set(props.stickyHeaderIndices);
          VirtualizedList._ensureClosestStickyHeader(props, stickyIndicesSet, renderMask, cellsAroundViewport.first);
        }
        return renderMask;
      }
    }, {
      key: "_initialRenderRegion",
      value: function _initialRenderRegion(props) {
        var itemCount = props.getItemCount(props.data);
        var firstCellIndex = Math.max(0, Math.min(itemCount - 1, Math.floor(props.initialScrollIndex ?? 0)));
        var lastCellIndex = Math.min(itemCount, firstCellIndex + (0, _VirtualizedListProps.initialNumToRenderOrDefault)(props.initialNumToRender)) - 1;
        return {
          first: firstCellIndex,
          last: lastCellIndex
        };
      }
    }, {
      key: "_ensureClosestStickyHeader",
      value: function _ensureClosestStickyHeader(props, stickyIndicesSet, renderMask, cellIdx) {
        var stickyOffset = props.ListHeaderComponent ? 1 : 0;
        for (var itemIdx = cellIdx - 1; itemIdx >= 0; itemIdx--) {
          if (stickyIndicesSet.has(itemIdx + stickyOffset)) {
            renderMask.addCells({
              first: itemIdx,
              last: itemIdx
            });
            break;
          }
        }
      }
    }, {
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(newProps, prevState) {
        var itemCount = newProps.getItemCount(newProps.data);
        if (itemCount === prevState.renderMask.numCells()) {
          return prevState;
        }
        var maintainVisibleContentPositionAdjustment = null;
        var prevFirstVisibleItemKey = prevState.firstVisibleItemKey;
        var minIndexForVisible = newProps.maintainVisibleContentPosition?.minIndexForVisible ?? 0;
        var newFirstVisibleItemKey = newProps.getItemCount(newProps.data) > minIndexForVisible ? VirtualizedList._getItemKey(newProps, minIndexForVisible) : null;
        if (newProps.maintainVisibleContentPosition != null && prevFirstVisibleItemKey != null && newFirstVisibleItemKey != null) {
          if (newFirstVisibleItemKey !== prevFirstVisibleItemKey) {
            var hint = itemCount - prevState.renderMask.numCells() + minIndexForVisible;
            var firstVisibleItemIndex = VirtualizedList._findItemIndexWithKey(newProps, prevFirstVisibleItemKey, hint);
            maintainVisibleContentPositionAdjustment = firstVisibleItemIndex != null ? firstVisibleItemIndex - minIndexForVisible : null;
          } else {
            maintainVisibleContentPositionAdjustment = null;
          }
        }
        var constrainedCells = VirtualizedList._constrainToItemCount(maintainVisibleContentPositionAdjustment != null ? {
          first: prevState.cellsAroundViewport.first + maintainVisibleContentPositionAdjustment,
          last: prevState.cellsAroundViewport.last + maintainVisibleContentPositionAdjustment
        } : prevState.cellsAroundViewport, newProps);
        return {
          cellsAroundViewport: constrainedCells,
          renderMask: VirtualizedList._createRenderMask(newProps, constrainedCells),
          firstVisibleItemKey: newFirstVisibleItemKey,
          pendingScrollUpdateCount: maintainVisibleContentPositionAdjustment != null ? prevState.pendingScrollUpdateCount + 1 : prevState.pendingScrollUpdateCount
        };
      }
    }, {
      key: "_constrainToItemCount",
      value: function _constrainToItemCount(cells, props) {
        var itemCount = props.getItemCount(props.data);
        var lastPossibleCellIndex = itemCount - 1;
        var maxToRenderPerBatch = (0, _VirtualizedListProps.maxToRenderPerBatchOrDefault)(props.maxToRenderPerBatch);
        var maxFirst = Math.max(0, lastPossibleCellIndex - maxToRenderPerBatch);
        return {
          first: (0, _clamp.default)(0, cells.first, maxFirst),
          last: Math.min(lastPossibleCellIndex, cells.last)
        };
      }
    }, {
      key: "_keyExtractor",
      value: function _keyExtractor(item, index, props) {
        if (props.keyExtractor != null) {
          return props.keyExtractor(item, index);
        }
        var key = (0, _VirtualizeUtils.keyExtractor)(item, index);
        if (key === String(index)) {
          _usedIndexForKey = true;
          if (item.type && item.type.displayName) {
            _keylessItemComponentName = item.type.displayName;
          }
        }
        return key;
      }
    }]);
  }(_StateSafePureComponent.default);
  VirtualizedList.contextType = _VirtualizedListContext.VirtualizedListContext;
  var styles = _reactNative.StyleSheet.create({
    verticallyInverted: {
      transform: [{
        scaleY: -1
      }]
    },
    horizontallyInverted: {
      transform: [{
        scaleX: -1
      }]
    },
    debug: {
      flex: 1
    },
    debugOverlayBase: {
      position: 'absolute',
      top: 0,
      right: 0
    },
    debugOverlay: {
      bottom: 0,
      width: 20,
      borderColor: 'blue',
      borderWidth: 1
    },
    debugOverlayFrame: {
      left: 0,
      backgroundColor: 'orange'
    },
    debugOverlayFrameLast: {
      left: 0,
      borderColor: 'green',
      borderWidth: 2
    },
    debugOverlayFrameVis: {
      left: 0,
      borderColor: 'red',
      borderWidth: 2
    }
  });
  var _default = exports.default = VirtualizedList;
},372,[1,238,10,11,64,66,69,373,374,375,376,377,378,379,380,381,382,383,371,42,128,140,60,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  function clamp(min, value, max) {
    if (value < min) {
      return min;
    }
    if (value > max) {
      return max;
    }
    return value;
  }
  var _default = exports.default = clamp;
},373,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  function infoLog() {
    return console.log(...arguments);
  }
  var _default = exports.default = infoLog;
},374,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CellRenderMask = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[4]));
  var CellRenderMask = exports.CellRenderMask = /*#__PURE__*/function () {
    function CellRenderMask(numCells) {
      (0, _classCallCheck2.default)(this, CellRenderMask);
      (0, _invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');
      this._numCells = numCells;
      if (numCells === 0) {
        this._regions = [];
      } else {
        this._regions = [{
          first: 0,
          last: numCells - 1,
          isSpacer: true
        }];
      }
    }
    return (0, _createClass2.default)(CellRenderMask, [{
      key: "enumerateRegions",
      value: function enumerateRegions() {
        return this._regions;
      }
    }, {
      key: "addCells",
      value: function addCells(cells) {
        (0, _invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');
        if (cells.last < cells.first) {
          return;
        }
        var _this$_findRegion = this._findRegion(cells.first),
          _this$_findRegion2 = (0, _slicedToArray2.default)(_this$_findRegion, 2),
          firstIntersect = _this$_findRegion2[0],
          firstIntersectIdx = _this$_findRegion2[1];
        var _this$_findRegion3 = this._findRegion(cells.last),
          _this$_findRegion4 = (0, _slicedToArray2.default)(_this$_findRegion3, 2),
          lastIntersect = _this$_findRegion4[0],
          lastIntersectIdx = _this$_findRegion4[1];
        if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {
          return;
        }
        var newLeadRegion = [];
        var newTailRegion = [];
        var newMainRegion = {
          ...cells,
          isSpacer: false
        };
        if (firstIntersect.first < newMainRegion.first) {
          if (firstIntersect.isSpacer) {
            newLeadRegion.push({
              first: firstIntersect.first,
              last: newMainRegion.first - 1,
              isSpacer: true
            });
          } else {
            newMainRegion.first = firstIntersect.first;
          }
        }
        if (lastIntersect.last > newMainRegion.last) {
          if (lastIntersect.isSpacer) {
            newTailRegion.push({
              first: newMainRegion.last + 1,
              last: lastIntersect.last,
              isSpacer: true
            });
          } else {
            newMainRegion.last = lastIntersect.last;
          }
        }
        var replacementRegions = [...newLeadRegion, newMainRegion, ...newTailRegion];
        var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;
        this._regions.splice(firstIntersectIdx, numRegionsToDelete, ...replacementRegions);
      }
    }, {
      key: "numCells",
      value: function numCells() {
        return this._numCells;
      }
    }, {
      key: "equals",
      value: function equals(other) {
        return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every((region, i) => region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer);
      }
    }, {
      key: "_findRegion",
      value: function _findRegion(cellIdx) {
        var firstIdx = 0;
        var lastIdx = this._regions.length - 1;
        while (firstIdx <= lastIdx) {
          var middleIdx = Math.floor((firstIdx + lastIdx) / 2);
          var middleRegion = this._regions[middleIdx];
          if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {
            return [middleRegion, middleIdx];
          } else if (cellIdx < middleRegion.first) {
            lastIdx = middleIdx - 1;
          } else if (cellIdx > middleRegion.last) {
            firstIdx = middleIdx + 1;
          }
        }
        (0, _invariant.default)(false, `A region was not found containing cellIdx ${cellIdx}`);
      }
    }]);
  }();
},375,[1,29,10,11,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[3]));
  var ChildListCollection = exports.default = /*#__PURE__*/function () {
    function ChildListCollection() {
      (0, _classCallCheck2.default)(this, ChildListCollection);
      this._cellKeyToChildren = new Map();
      this._childrenToCellKey = new Map();
    }
    return (0, _createClass2.default)(ChildListCollection, [{
      key: "add",
      value: function add(list, cellKey) {
        (0, _invariant.default)(!this._childrenToCellKey.has(list), 'Trying to add already present child list');
        var cellLists = this._cellKeyToChildren.get(cellKey) ?? new Set();
        cellLists.add(list);
        this._cellKeyToChildren.set(cellKey, cellLists);
        this._childrenToCellKey.set(list, cellKey);
      }
    }, {
      key: "remove",
      value: function remove(list) {
        var cellKey = this._childrenToCellKey.get(list);
        (0, _invariant.default)(cellKey != null, 'Trying to remove non-present child list');
        this._childrenToCellKey.delete(list);
        var cellLists = this._cellKeyToChildren.get(cellKey);
        (0, _invariant.default)(cellLists, '_cellKeyToChildren should contain cellKey');
        cellLists.delete(list);
        if (cellLists.size === 0) {
          this._cellKeyToChildren.delete(cellKey);
        }
      }
    }, {
      key: "forEach",
      value: function forEach(fn) {
        for (var listSet of this._cellKeyToChildren.values()) {
          for (var list of listSet) {
            fn(list);
          }
        }
      }
    }, {
      key: "forEachInCell",
      value: function forEachInCell(cellKey, fn) {
        var listSet = this._cellKeyToChildren.get(cellKey) ?? [];
        for (var list of listSet) {
          fn(list);
        }
      }
    }, {
      key: "anyInCell",
      value: function anyInCell(cellKey, fn) {
        var listSet = this._cellKeyToChildren.get(cellKey) ?? [];
        for (var list of listSet) {
          if (fn(list)) {
            return true;
          }
        }
        return false;
      }
    }, {
      key: "size",
      value: function size() {
        return this._childrenToCellKey.size;
      }
    }]);
  }();
},376,[1,10,11,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _ListMetricsAggregator = _interopRequireDefault(require(_dependencyMap[3]));
  var Info = /*#__PURE__*/(0, _createClass2.default)(function Info() {
    (0, _classCallCheck2.default)(this, Info);
    this.any_blank_count = 0;
    this.any_blank_ms = 0;
    this.any_blank_speed_sum = 0;
    this.mostly_blank_count = 0;
    this.mostly_blank_ms = 0;
    this.pixels_blank = 0;
    this.pixels_sampled = 0;
    this.pixels_scrolled = 0;
    this.total_time_spent = 0;
    this.sample_count = 0;
  });
  var DEBUG = false;
  var _listeners = [];
  var _minSampleCount = 10;
  var _sampleRate = null;
  var FillRateHelper = /*#__PURE__*/function () {
    function FillRateHelper(listMetrics) {
      (0, _classCallCheck2.default)(this, FillRateHelper);
      this._anyBlankStartTime = null;
      this._enabled = false;
      this._info = new Info();
      this._mostlyBlankStartTime = null;
      this._samplesStartTime = null;
      this._listMetrics = listMetrics;
      this._enabled = (_sampleRate || 0) > Math.random();
      this._resetData();
    }
    return (0, _createClass2.default)(FillRateHelper, [{
      key: "activate",
      value: function activate() {
        if (this._enabled && this._samplesStartTime == null) {
          DEBUG;
          this._samplesStartTime = global.performance.now();
        }
      }
    }, {
      key: "deactivateAndFlush",
      value: function deactivateAndFlush() {
        if (!this._enabled) {
          return;
        }
        var start = this._samplesStartTime;
        if (start == null) {
          DEBUG;
          return;
        }
        if (this._info.sample_count < _minSampleCount) {
          this._resetData();
          return;
        }
        var total_time_spent = global.performance.now() - start;
        var info = {
          ...this._info,
          total_time_spent
        };
        _listeners.forEach(listener => listener(info));
        this._resetData();
      }
    }, {
      key: "computeBlankness",
      value: function computeBlankness(props, cellsAroundViewport, scrollMetrics) {
        if (!this._enabled || props.getItemCount(props.data) === 0 || cellsAroundViewport.last < cellsAroundViewport.first || this._samplesStartTime == null) {
          return 0;
        }
        var dOffset = scrollMetrics.dOffset,
          offset = scrollMetrics.offset,
          velocity = scrollMetrics.velocity,
          visibleLength = scrollMetrics.visibleLength;
        this._info.sample_count++;
        this._info.pixels_sampled += Math.round(visibleLength);
        this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
        var scrollSpeed = Math.round(Math.abs(velocity) * 1000);
        var now = global.performance.now();
        if (this._anyBlankStartTime != null) {
          this._info.any_blank_ms += now - this._anyBlankStartTime;
        }
        this._anyBlankStartTime = null;
        if (this._mostlyBlankStartTime != null) {
          this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
        }
        this._mostlyBlankStartTime = null;
        var blankTop = 0;
        var first = cellsAroundViewport.first;
        var firstFrame = this._listMetrics.getCellMetrics(first, props);
        while (first <= cellsAroundViewport.last && (!firstFrame || !firstFrame.isMounted)) {
          firstFrame = this._listMetrics.getCellMetrics(first, props);
          first++;
        }
        if (firstFrame && first > 0) {
          blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
        }
        var blankBottom = 0;
        var last = cellsAroundViewport.last;
        var lastFrame = this._listMetrics.getCellMetrics(last, props);
        while (last >= cellsAroundViewport.first && (!lastFrame || !lastFrame.isMounted)) {
          lastFrame = this._listMetrics.getCellMetrics(last, props);
          last--;
        }
        if (lastFrame && last < props.getItemCount(props.data) - 1) {
          var bottomEdge = lastFrame.offset + lastFrame.length;
          blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
        }
        var pixels_blank = Math.round(blankTop + blankBottom);
        var blankness = pixels_blank / visibleLength;
        if (blankness > 0) {
          this._anyBlankStartTime = now;
          this._info.any_blank_speed_sum += scrollSpeed;
          this._info.any_blank_count++;
          this._info.pixels_blank += pixels_blank;
          if (blankness > 0.5) {
            this._mostlyBlankStartTime = now;
            this._info.mostly_blank_count++;
          }
        } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
          this.deactivateAndFlush();
        }
        return blankness;
      }
    }, {
      key: "enabled",
      value: function enabled() {
        return this._enabled;
      }
    }, {
      key: "_resetData",
      value: function _resetData() {
        this._anyBlankStartTime = null;
        this._info = new Info();
        this._mostlyBlankStartTime = null;
        this._samplesStartTime = null;
      }
    }], [{
      key: "addListener",
      value: function addListener(callback) {
        if (_sampleRate === null) {
          console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');
        }
        _listeners.push(callback);
        return {
          remove: () => {
            _listeners = _listeners.filter(listener => callback !== listener);
          }
        };
      }
    }, {
      key: "setSampleRate",
      value: function setSampleRate(sampleRate) {
        _sampleRate = sampleRate;
      }
    }, {
      key: "setMinSampleCount",
      value: function setMinSampleCount(minSampleCount) {
        _minSampleCount = minSampleCount;
      }
    }]);
  }();
  var _default = exports.default = FillRateHelper;
},377,[1,11,10,378]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _VirtualizeUtils = require(_dependencyMap[3]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[4]));
  var ListMetricsAggregator = exports.default = /*#__PURE__*/function () {
    function ListMetricsAggregator() {
      (0, _classCallCheck2.default)(this, ListMetricsAggregator);
      this._averageCellLength = 0;
      this._cellMetrics = new Map();
      this._highestMeasuredCellIndex = 0;
      this._measuredCellsLength = 0;
      this._measuredCellsCount = 0;
      this._orientation = {
        horizontal: false,
        rtl: false
      };
    }
    return (0, _createClass2.default)(ListMetricsAggregator, [{
      key: "notifyCellLayout",
      value: function notifyCellLayout(_ref) {
        var cellIndex = _ref.cellIndex,
          cellKey = _ref.cellKey,
          orientation = _ref.orientation,
          layout = _ref.layout;
        this._invalidateIfOrientationChanged(orientation);
        var next = {
          index: cellIndex,
          length: this._selectLength(layout),
          isMounted: true,
          offset: this.flowRelativeOffset(layout)
        };
        var curr = this._cellMetrics.get(cellKey);
        if (!curr || next.offset !== curr.offset || next.length !== curr.length) {
          if (curr) {
            var dLength = next.length - curr.length;
            this._measuredCellsLength += dLength;
          } else {
            this._measuredCellsLength += next.length;
            this._measuredCellsCount += 1;
          }
          this._averageCellLength = this._measuredCellsLength / this._measuredCellsCount;
          this._cellMetrics.set(cellKey, next);
          this._highestMeasuredCellIndex = Math.max(this._highestMeasuredCellIndex, cellIndex);
          return true;
        } else {
          curr.isMounted = true;
          return false;
        }
      }
    }, {
      key: "notifyCellUnmounted",
      value: function notifyCellUnmounted(cellKey) {
        var curr = this._cellMetrics.get(cellKey);
        if (curr) {
          curr.isMounted = false;
        }
      }
    }, {
      key: "notifyListContentLayout",
      value: function notifyListContentLayout(_ref2) {
        var orientation = _ref2.orientation,
          layout = _ref2.layout;
        this._invalidateIfOrientationChanged(orientation);
        this._contentLength = this._selectLength(layout);
      }
    }, {
      key: "getAverageCellLength",
      value: function getAverageCellLength() {
        return this._averageCellLength;
      }
    }, {
      key: "getHighestMeasuredCellIndex",
      value: function getHighestMeasuredCellIndex() {
        return this._highestMeasuredCellIndex;
      }
    }, {
      key: "getCellMetricsApprox",
      value: function getCellMetricsApprox(index, props) {
        var frame = this.getCellMetrics(index, props);
        if (frame && frame.index === index) {
          return frame;
        } else {
          var offset;
          var highestMeasuredCellIndex = this.getHighestMeasuredCellIndex();
          if (highestMeasuredCellIndex < index) {
            var highestMeasuredCellFrame = this.getCellMetrics(highestMeasuredCellIndex, props);
            if (highestMeasuredCellFrame) {
              offset = highestMeasuredCellFrame.offset + highestMeasuredCellFrame.length + this._averageCellLength * (index - highestMeasuredCellIndex - 1);
            }
          }
          if (offset == null) {
            offset = this._averageCellLength * index;
          }
          var data = props.data,
            getItemCount = props.getItemCount;
          (0, _invariant.default)(index >= 0 && index < getItemCount(data), 'Tried to get frame for out of range index ' + index);
          return {
            length: this._averageCellLength,
            offset,
            index,
            isMounted: false
          };
        }
      }
    }, {
      key: "getCellMetrics",
      value: function getCellMetrics(index, props) {
        var data = props.data,
          getItem = props.getItem,
          getItemCount = props.getItemCount,
          getItemLayout = props.getItemLayout;
        (0, _invariant.default)(index >= 0 && index < getItemCount(data), 'Tried to get metrics for out of range cell index ' + index);
        var keyExtractor = props.keyExtractor ?? _VirtualizeUtils.keyExtractor;
        var frame = this._cellMetrics.get(keyExtractor(getItem(data, index), index));
        if (frame && frame.index === index) {
          return frame;
        }
        if (getItemLayout) {
          var _getItemLayout = getItemLayout(data, index),
            length = _getItemLayout.length,
            offset = _getItemLayout.offset;
          return {
            index,
            length,
            offset,
            isMounted: true
          };
        }
        return null;
      }
    }, {
      key: "getCellOffsetApprox",
      value: function getCellOffsetApprox(index, props) {
        if (Number.isInteger(index)) {
          return this.getCellMetricsApprox(index, props).offset;
        } else {
          var frameMetrics = this.getCellMetricsApprox(Math.floor(index), props);
          var remainder = index - Math.floor(index);
          return frameMetrics.offset + remainder * frameMetrics.length;
        }
      }
    }, {
      key: "getContentLength",
      value: function getContentLength() {
        return this._contentLength ?? 0;
      }
    }, {
      key: "hasContentLength",
      value: function hasContentLength() {
        return this._contentLength != null;
      }
    }, {
      key: "flowRelativeOffset",
      value: function flowRelativeOffset(layout, referenceContentLength) {
        var _this$_orientation = this._orientation,
          horizontal = _this$_orientation.horizontal,
          rtl = _this$_orientation.rtl;
        if (horizontal && rtl) {
          var contentLength = referenceContentLength ?? this._contentLength;
          (0, _invariant.default)(contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');
          return contentLength - (this._selectOffset(layout) + this._selectLength(layout));
        } else {
          return this._selectOffset(layout);
        }
      }
    }, {
      key: "cartesianOffset",
      value: function cartesianOffset(flowRelativeOffset) {
        var _this$_orientation2 = this._orientation,
          horizontal = _this$_orientation2.horizontal,
          rtl = _this$_orientation2.rtl;
        if (horizontal && rtl) {
          (0, _invariant.default)(this._contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');
          return this._contentLength - flowRelativeOffset;
        } else {
          return flowRelativeOffset;
        }
      }
    }, {
      key: "_invalidateIfOrientationChanged",
      value: function _invalidateIfOrientationChanged(orientation) {
        if (orientation.rtl !== this._orientation.rtl) {
          this._cellMetrics.clear();
        }
        if (orientation.horizontal !== this._orientation.horizontal) {
          this._averageCellLength = 0;
          this._highestMeasuredCellIndex = 0;
          this._measuredCellsLength = 0;
          this._measuredCellsCount = 0;
        }
        this._orientation = orientation;
      }
    }, {
      key: "_selectLength",
      value: function _selectLength(_ref3) {
        var width = _ref3.width,
          height = _ref3.height;
        return this._orientation.horizontal ? width : height;
      }
    }, {
      key: "_selectOffset",
      value: function _selectOffset(_ref4) {
        var x = _ref4.x,
          y = _ref4.y;
        return this._orientation.horizontal ? x : y;
      }
    }]);
  }();
},378,[1,10,11,371,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _get2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[7]));
  var React = _interopRequireWildcard(require(_dependencyMap[8]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
  var StateSafePureComponent = exports.default = /*#__PURE__*/function (_React$PureComponent) {
    function StateSafePureComponent(props) {
      var _this;
      (0, _classCallCheck2.default)(this, StateSafePureComponent);
      _this = _callSuper(this, StateSafePureComponent, [props]);
      _this._inAsyncStateUpdate = false;
      _this._installSetStateHooks();
      return _this;
    }
    (0, _inherits2.default)(StateSafePureComponent, _React$PureComponent);
    return (0, _createClass2.default)(StateSafePureComponent, [{
      key: "setState",
      value: function setState(partialState, callback) {
        if (typeof partialState === 'function') {
          _superPropGet(StateSafePureComponent, "setState", this, 3)([(state, props) => {
            this._inAsyncStateUpdate = true;
            var ret;
            try {
              ret = partialState(state, props);
            } catch (err) {
              throw err;
            } finally {
              this._inAsyncStateUpdate = false;
            }
            return ret;
          }, callback]);
        } else {
          _superPropGet(StateSafePureComponent, "setState", this, 3)([partialState, callback]);
        }
      }
    }, {
      key: "_installSetStateHooks",
      value: function _installSetStateHooks() {
        var that = this;
        var props = this.props,
          state = this.state;
        Object.defineProperty(this, 'props', {
          get() {
            (0, _invariant.default)(!that._inAsyncStateUpdate, '"this.props" should not be accessed during state updates');
            return props;
          },
          set(newProps) {
            props = newProps;
          }
        });
        Object.defineProperty(this, 'state', {
          get() {
            (0, _invariant.default)(!that._inAsyncStateUpdate, '"this.state" should not be acceessed during state updates');
            return state;
          },
          set(newState) {
            state = newState;
          }
        });
      }
    }]);
  }(React.PureComponent);
},379,[1,10,11,64,66,67,69,42,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _ListMetricsAggregator = _interopRequireDefault(require(_dependencyMap[4]));
  var invariant = require(_dependencyMap[5]);
  var ViewabilityHelper = /*#__PURE__*/function () {
    function ViewabilityHelper() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        viewAreaCoveragePercentThreshold: 0
      };
      (0, _classCallCheck2.default)(this, ViewabilityHelper);
      this._hasInteracted = false;
      this._timers = new Set();
      this._viewableIndices = [];
      this._viewableItems = new Map();
      this._config = config;
    }
    return (0, _createClass2.default)(ViewabilityHelper, [{
      key: "dispose",
      value: function dispose() {
        this._timers.forEach(clearTimeout);
      }
    }, {
      key: "computeViewableItems",
      value: function computeViewableItems(props, scrollOffset, viewportHeight, listMetrics, renderRange) {
        var itemCount = props.getItemCount(props.data);
        var _this$_config = this._config,
          itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,
          viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;
        var viewAreaMode = viewAreaCoveragePercentThreshold != null;
        var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
        invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
        var viewableIndices = [];
        if (itemCount === 0) {
          return viewableIndices;
        }
        var firstVisible = -1;
        var _ref = renderRange || {
            first: 0,
            last: itemCount - 1
          },
          first = _ref.first,
          last = _ref.last;
        if (last >= itemCount) {
          console.warn('Invalid render range computing viewability ' + JSON.stringify({
            renderRange,
            itemCount
          }));
          return [];
        }
        for (var idx = first; idx <= last; idx++) {
          var metrics = listMetrics.getCellMetrics(idx, props);
          if (!metrics) {
            continue;
          }
          var top = Math.floor(metrics.offset - scrollOffset);
          var bottom = Math.floor(top + metrics.length);
          if (top < viewportHeight && bottom > 0) {
            firstVisible = idx;
            if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
              viewableIndices.push(idx);
            }
          } else if (firstVisible >= 0) {
            break;
          }
        }
        return viewableIndices;
      }
    }, {
      key: "onUpdate",
      value: function onUpdate(props, scrollOffset, viewportHeight, listMetrics, createViewToken, onViewableItemsChanged, renderRange) {
        var itemCount = props.getItemCount(props.data);
        if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !listMetrics.getCellMetrics(0, props)) {
          return;
        }
        var viewableIndices = [];
        if (itemCount) {
          viewableIndices = this.computeViewableItems(props, scrollOffset, viewportHeight, listMetrics, renderRange);
        }
        if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every((v, ii) => v === viewableIndices[ii])) {
          return;
        }
        this._viewableIndices = viewableIndices;
        if (this._config.minimumViewTime) {
          var handle = setTimeout(() => {
            this._timers.delete(handle);
            this._onUpdateSync(props, viewableIndices, onViewableItemsChanged, createViewToken);
          }, this._config.minimumViewTime);
          this._timers.add(handle);
        } else {
          this._onUpdateSync(props, viewableIndices, onViewableItemsChanged, createViewToken);
        }
      }
    }, {
      key: "resetViewableIndices",
      value: function resetViewableIndices() {
        this._viewableIndices = [];
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        this._hasInteracted = true;
      }
    }, {
      key: "_onUpdateSync",
      value: function _onUpdateSync(props, viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
        viewableIndicesToCheck = viewableIndicesToCheck.filter(ii => this._viewableIndices.includes(ii));
        var prevItems = this._viewableItems;
        var nextItems = new Map(viewableIndicesToCheck.map(ii => {
          var viewable = createViewToken(ii, true, props);
          return [viewable.key, viewable];
        }));
        var changed = [];
        for (var _ref2 of nextItems) {
          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2);
          var key = _ref3[0];
          var viewable = _ref3[1];
          if (!prevItems.has(key)) {
            changed.push(viewable);
          }
        }
        for (var _ref4 of prevItems) {
          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2);
          var _key = _ref5[0];
          var _viewable = _ref5[1];
          if (!nextItems.has(_key)) {
            changed.push({
              ..._viewable,
              isViewable: false
            });
          }
        }
        if (changed.length > 0) {
          this._viewableItems = nextItems;
          onViewableItemsChanged({
            viewableItems: Array.from(nextItems.values()),
            changed,
            viewabilityConfig: this._config
          });
        }
      }
    }]);
  }();
  function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
    if (_isEntirelyVisible(top, bottom, viewportHeight)) {
      return true;
    } else {
      var pixels = _getPixelsVisible(top, bottom, viewportHeight);
      var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
      return percent >= viewablePercentThreshold;
    }
  }
  function _getPixelsVisible(top, bottom, viewportHeight) {
    var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
    return Math.max(0, visibleHeight);
  }
  function _isEntirelyVisible(top, bottom, viewportHeight) {
    return top >= 0 && bottom <= viewportHeight && bottom > top;
  }
  var _default = exports.default = ViewabilityHelper;
},380,[1,29,10,11,378,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _VirtualizedListContext = require(_dependencyMap[6]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[7]));
  var React = _interopRequireWildcard(require(_dependencyMap[8]));
  var _reactNative = require(_dependencyMap[9]);
  var _jsxRuntime = require(_dependencyMap[10]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var CellRenderer = exports.default = /*#__PURE__*/function (_React$PureComponent) {
    function CellRenderer() {
      var _this;
      (0, _classCallCheck2.default)(this, CellRenderer);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, CellRenderer, [...args]);
      _this.state = {
        separatorProps: {
          highlighted: false,
          leadingItem: _this.props.item
        }
      };
      _this._separators = {
        highlight: () => {
          var _this$props = _this.props,
            cellKey = _this$props.cellKey,
            prevCellKey = _this$props.prevCellKey;
          _this.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: true
          });
        },
        unhighlight: () => {
          var _this$props2 = _this.props,
            cellKey = _this$props2.cellKey,
            prevCellKey = _this$props2.prevCellKey;
          _this.props.onUpdateSeparators([cellKey, prevCellKey], {
            highlighted: false
          });
        },
        updateProps: (select, newProps) => {
          var _this$props3 = _this.props,
            cellKey = _this$props3.cellKey,
            prevCellKey = _this$props3.prevCellKey;
          _this.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
        }
      };
      _this._onLayout = nativeEvent => {
        _this.props.onCellLayout?.(nativeEvent, _this.props.cellKey, _this.props.index);
      };
      _this._onCellFocusCapture = e => {
        _this.props.onCellFocusCapture?.(_this.props.cellKey);
      };
      return _this;
    }
    (0, _inherits2.default)(CellRenderer, _React$PureComponent);
    return (0, _createClass2.default)(CellRenderer, [{
      key: "updateSeparatorProps",
      value: function updateSeparatorProps(newProps) {
        this.setState(state => ({
          separatorProps: {
            ...state.separatorProps,
            ...newProps
          }
        }));
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.onUnmount(this.props.cellKey);
      }
    }, {
      key: "_renderElement",
      value: function _renderElement(renderItem, ListItemComponent, item, index) {
        if (renderItem && ListItemComponent) {
          console.warn("VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take precedence over renderItem.");
        }
        if (ListItemComponent) {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(ListItemComponent, {
            item: item,
            index: index,
            separators: this._separators
          });
        }
        if (renderItem) {
          return renderItem({
            item,
            index,
            separators: this._separators
          });
        }
        (0, _invariant.default)(false, 'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.');
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props4 = this.props,
          CellRendererComponent = _this$props4.CellRendererComponent,
          ItemSeparatorComponent = _this$props4.ItemSeparatorComponent,
          ListItemComponent = _this$props4.ListItemComponent,
          cellKey = _this$props4.cellKey,
          horizontal = _this$props4.horizontal,
          item = _this$props4.item,
          index = _this$props4.index,
          inversionStyle = _this$props4.inversionStyle,
          onCellLayout = _this$props4.onCellLayout,
          renderItem = _this$props4.renderItem;
        var element = this._renderElement(renderItem, ListItemComponent, item, index);
        var itemSeparator = /*#__PURE__*/React.isValidElement(ItemSeparatorComponent) ? ItemSeparatorComponent : ItemSeparatorComponent && /*#__PURE__*/(0, _jsxRuntime.jsx)(ItemSeparatorComponent, {
          ...this.state.separatorProps
        });
        var cellStyle = inversionStyle ? horizontal ? [styles.rowReverse, inversionStyle] : [styles.columnReverse, inversionStyle] : horizontal ? [styles.row, inversionStyle] : inversionStyle;
        var result = !CellRendererComponent ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: cellStyle,
          onFocusCapture: this._onCellFocusCapture,
          ...(onCellLayout && {
            onLayout: this._onLayout
          }),
          children: [element, itemSeparator]
        }) : /*#__PURE__*/(0, _jsxRuntime.jsxs)(CellRendererComponent, {
          cellKey: cellKey,
          index: index,
          item: item,
          style: cellStyle,
          onFocusCapture: this._onCellFocusCapture,
          ...(onCellLayout && {
            onLayout: this._onLayout
          }),
          children: [element, itemSeparator]
        });
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
          cellKey: this.props.cellKey,
          children: result
        });
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, prevState) {
        if (props.item !== prevState.separatorProps.leadingItem) {
          return {
            separatorProps: {
              ...prevState.separatorProps,
              leadingItem: props.item
            }
          };
        }
        return null;
      }
    }]);
  }(React.PureComponent);
  var styles = _reactNative.StyleSheet.create({
    row: {
      flexDirection: 'row'
    },
    rowReverse: {
      flexDirection: 'row-reverse'
    },
    columnReverse: {
      flexDirection: 'column-reverse'
    }
  });
},381,[1,10,11,64,66,69,382,42,140,60,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.VirtualizedListCellContextProvider = VirtualizedListCellContextProvider;
  exports.VirtualizedListContext = undefined;
  exports.VirtualizedListContextProvider = VirtualizedListContextProvider;
  exports.VirtualizedListContextResetter = VirtualizedListContextResetter;
  var _react = _interopRequireWildcard(require(_dependencyMap[0]));
  var React = _react;
  var _jsxRuntime = require(_dependencyMap[1]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var VirtualizedListContext = exports.VirtualizedListContext = /*#__PURE__*/React.createContext(null);
  function VirtualizedListContextResetter(_ref) {
    var children = _ref.children;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
      value: null,
      children: children
    });
  }
  function VirtualizedListContextProvider(_ref2) {
    var children = _ref2.children,
      value = _ref2.value;
    var context = (0, _react.useMemo)(() => ({
      cellKey: null,
      getScrollMetrics: value.getScrollMetrics,
      horizontal: value.horizontal,
      getOutermostParentListRef: value.getOutermostParentListRef,
      registerAsNestedChild: value.registerAsNestedChild,
      unregisterAsNestedChild: value.unregisterAsNestedChild
    }), [value.getScrollMetrics, value.horizontal, value.getOutermostParentListRef, value.registerAsNestedChild, value.unregisterAsNestedChild]);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
      value: context,
      children: children
    });
  }
  function VirtualizedListCellContextProvider(_ref3) {
    var cellKey = _ref3.cellKey,
      children = _ref3.children;
    var currContext = (0, _react.useContext)(VirtualizedListContext);
    var context = (0, _react.useMemo)(() => currContext == null ? null : {
      ...currContext,
      cellKey
    }, [currContext, cellKey]);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(VirtualizedListContext.Provider, {
      value: context,
      children: children
    });
  }
},382,[140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.horizontalOrDefault = horizontalOrDefault;
  exports.initialNumToRenderOrDefault = initialNumToRenderOrDefault;
  exports.maxToRenderPerBatchOrDefault = maxToRenderPerBatchOrDefault;
  exports.onEndReachedThresholdOrDefault = onEndReachedThresholdOrDefault;
  exports.onStartReachedThresholdOrDefault = onStartReachedThresholdOrDefault;
  exports.windowSizeOrDefault = windowSizeOrDefault;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function horizontalOrDefault(horizontal) {
    return horizontal ?? false;
  }
  function initialNumToRenderOrDefault(initialNumToRender) {
    return initialNumToRender ?? 10;
  }
  function maxToRenderPerBatchOrDefault(maxToRenderPerBatch) {
    return maxToRenderPerBatch ?? 10;
  }
  function onStartReachedThresholdOrDefault(onStartReachedThreshold) {
    return onStartReachedThreshold ?? 2;
  }
  function onEndReachedThresholdOrDefault(onEndReachedThreshold) {
    return onEndReachedThreshold ?? 2;
  }
  function windowSizeOrDefault(windowSize) {
    return windowSize ?? 21;
  }
},383,[140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _VirtualizedList = _interopRequireDefault(require(_dependencyMap[8]));
  var _VirtualizeUtils = require(_dependencyMap[9]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[10]));
  var React = _interopRequireWildcard(require(_dependencyMap[11]));
  var _jsxRuntime = require(_dependencyMap[12]);
  var _excluded = ["ItemSeparatorComponent", "SectionSeparatorComponent", "renderItem", "renderSectionFooter", "renderSectionHeader", "sections", "stickySectionHeadersEnabled"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var VirtualizedSectionList = /*#__PURE__*/function (_React$PureComponent) {
    function VirtualizedSectionList() {
      var _this;
      (0, _classCallCheck2.default)(this, VirtualizedSectionList);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, VirtualizedSectionList, [...args]);
      _this._keyExtractor = (item, index) => {
        var info = _this._subExtractor(index);
        return info && info.key || String(index);
      };
      _this._convertViewable = viewable => {
        (0, _invariant.default)(viewable.index != null, 'Received a broken ViewToken');
        var info = _this._subExtractor(viewable.index);
        if (!info) {
          return null;
        }
        var keyExtractorWithNullableIndex = info.section.keyExtractor;
        var keyExtractorWithNonNullableIndex = _this.props.keyExtractor || _VirtualizeUtils.keyExtractor;
        var key = keyExtractorWithNullableIndex != null ? keyExtractorWithNullableIndex(viewable.item, info.index) : keyExtractorWithNonNullableIndex(viewable.item, info.index ?? 0);
        return {
          ...viewable,
          index: info.index,
          key,
          section: info.section
        };
      };
      _this._onViewableItemsChanged = _ref => {
        var viewableItems = _ref.viewableItems,
          changed = _ref.changed;
        var onViewableItemsChanged = _this.props.onViewableItemsChanged;
        if (onViewableItemsChanged != null) {
          onViewableItemsChanged({
            viewableItems: viewableItems.map(_this._convertViewable, _this).filter(Boolean),
            changed: changed.map(_this._convertViewable, _this).filter(Boolean)
          });
        }
      };
      _this._renderItem = listItemCount => _ref2 => {
        var item = _ref2.item,
          index = _ref2.index;
        var info = _this._subExtractor(index);
        if (!info) {
          return null;
        }
        var infoIndex = info.index;
        if (infoIndex == null) {
          var section = info.section;
          if (info.header === true) {
            var renderSectionHeader = _this.props.renderSectionHeader;
            return renderSectionHeader ? renderSectionHeader({
              section
            }) : null;
          } else {
            var renderSectionFooter = _this.props.renderSectionFooter;
            return renderSectionFooter ? renderSectionFooter({
              section
            }) : null;
          }
        } else {
          var renderItem = info.section.renderItem || _this.props.renderItem;
          var SeparatorComponent = _this._getSeparatorComponent(index, info, listItemCount);
          (0, _invariant.default)(renderItem, 'no renderItem!');
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(ItemWithSeparator, {
            SeparatorComponent: SeparatorComponent,
            LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
            cellKey: info.key,
            index: infoIndex,
            item: item,
            leadingItem: info.leadingItem,
            leadingSection: info.leadingSection,
            prevCellKey: (_this._subExtractor(index - 1) || {}).key,
            setSelfHighlightCallback: _this._setUpdateHighlightFor,
            setSelfUpdatePropsCallback: _this._setUpdatePropsFor,
            updateHighlightFor: _this._updateHighlightFor,
            updatePropsFor: _this._updatePropsFor,
            renderItem: renderItem,
            section: info.section,
            trailingItem: info.trailingItem,
            trailingSection: info.trailingSection,
            inverted: !!_this.props.inverted
          });
        }
      };
      _this._updatePropsFor = (cellKey, value) => {
        var updateProps = _this._updatePropsMap[cellKey];
        if (updateProps != null) {
          updateProps(value);
        }
      };
      _this._updateHighlightFor = (cellKey, value) => {
        var updateHighlight = _this._updateHighlightMap[cellKey];
        if (updateHighlight != null) {
          updateHighlight(value);
        }
      };
      _this._setUpdateHighlightFor = (cellKey, updateHighlightFn) => {
        if (updateHighlightFn != null) {
          _this._updateHighlightMap[cellKey] = updateHighlightFn;
        } else {
          delete _this._updateHighlightFor[cellKey];
        }
      };
      _this._setUpdatePropsFor = (cellKey, updatePropsFn) => {
        if (updatePropsFn != null) {
          _this._updatePropsMap[cellKey] = updatePropsFn;
        } else {
          delete _this._updatePropsMap[cellKey];
        }
      };
      _this._updateHighlightMap = {};
      _this._updatePropsMap = {};
      _this._captureRef = ref => {
        _this._listRef = ref;
      };
      return _this;
    }
    (0, _inherits2.default)(VirtualizedSectionList, _React$PureComponent);
    return (0, _createClass2.default)(VirtualizedSectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        var index = params.itemIndex;
        for (var i = 0; i < params.sectionIndex; i++) {
          index += this.props.getItemCount(this.props.sections[i].data) + 2;
        }
        var viewOffset = params.viewOffset || 0;
        if (this._listRef == null) {
          return;
        }
        var listRef = this._listRef;
        if (params.itemIndex > 0 && this.props.stickySectionHeadersEnabled) {
          var frame = listRef.__getListMetrics().getCellMetricsApprox(index - params.itemIndex, listRef.props);
          viewOffset += frame.length;
        }
        var toIndexParams = {
          ...params,
          viewOffset,
          index
        };
        this._listRef.scrollToIndex(toIndexParams);
      }
    }, {
      key: "getListRef",
      value: function getListRef() {
        return this._listRef;
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          ItemSeparatorComponent = _this$props.ItemSeparatorComponent,
          SectionSeparatorComponent = _this$props.SectionSeparatorComponent,
          _renderItem = _this$props.renderItem,
          renderSectionFooter = _this$props.renderSectionFooter,
          renderSectionHeader = _this$props.renderSectionHeader,
          _sections = _this$props.sections,
          stickySectionHeadersEnabled = _this$props.stickySectionHeadersEnabled,
          passThroughProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var listHeaderOffset = this.props.ListHeaderComponent ? 1 : 0;
        var stickyHeaderIndices = this.props.stickySectionHeadersEnabled ? [] : undefined;
        var itemCount = 0;
        for (var section of this.props.sections) {
          if (stickyHeaderIndices != null) {
            stickyHeaderIndices.push(itemCount + listHeaderOffset);
          }
          itemCount += 2;
          itemCount += this.props.getItemCount(section.data);
        }
        var renderItem = this._renderItem(itemCount);
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_VirtualizedList.default, {
          ...passThroughProps,
          keyExtractor: this._keyExtractor,
          stickyHeaderIndices: stickyHeaderIndices,
          renderItem: renderItem,
          data: this.props.sections,
          getItem: (sections, index) => this._getItem(this.props, sections, index),
          getItemCount: () => itemCount,
          onViewableItemsChanged: this.props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
          ref: this._captureRef
        });
      }
    }, {
      key: "_getItem",
      value: function _getItem(props, sections, index) {
        if (!sections) {
          return null;
        }
        var itemIdx = index - 1;
        for (var i = 0; i < sections.length; i++) {
          var section = sections[i];
          var sectionData = section.data;
          var itemCount = props.getItemCount(sectionData);
          if (itemIdx === -1 || itemIdx === itemCount) {
            return section;
          } else if (itemIdx < itemCount) {
            return props.getItem(sectionData, itemIdx);
          } else {
            itemIdx -= itemCount + 2;
          }
        }
        return null;
      }
    }, {
      key: "_subExtractor",
      value: function _subExtractor(index) {
        var itemIndex = index;
        var _this$props2 = this.props,
          getItem = _this$props2.getItem,
          getItemCount = _this$props2.getItemCount,
          keyExtractor = _this$props2.keyExtractor,
          sections = _this$props2.sections;
        for (var i = 0; i < sections.length; i++) {
          var section = sections[i];
          var sectionData = section.data;
          var key = section.key || String(i);
          itemIndex -= 1;
          if (itemIndex >= getItemCount(sectionData) + 1) {
            itemIndex -= getItemCount(sectionData) + 1;
          } else if (itemIndex === -1) {
            return {
              section,
              key: key + ':header',
              index: null,
              header: true,
              trailingSection: sections[i + 1]
            };
          } else if (itemIndex === getItemCount(sectionData)) {
            return {
              section,
              key: key + ':footer',
              index: null,
              header: false,
              trailingSection: sections[i + 1]
            };
          } else {
            var extractor = section.keyExtractor || keyExtractor || _VirtualizeUtils.keyExtractor;
            return {
              section,
              key: key + ':' + extractor(getItem(sectionData, itemIndex), itemIndex),
              index: itemIndex,
              leadingItem: getItem(sectionData, itemIndex - 1),
              leadingSection: sections[i - 1],
              trailingItem: getItem(sectionData, itemIndex + 1),
              trailingSection: sections[i + 1]
            };
          }
        }
      }
    }, {
      key: "_getSeparatorComponent",
      value: function _getSeparatorComponent(index, info, listItemCount) {
        info = info || this._subExtractor(index);
        if (!info) {
          return null;
        }
        var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
        var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
        var isLastItemInList = index === listItemCount - 1;
        var isLastItemInSection = info.index === this.props.getItemCount(info.section.data) - 1;
        if (SectionSeparatorComponent && isLastItemInSection) {
          return SectionSeparatorComponent;
        }
        if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
          return ItemSeparatorComponent;
        }
        return null;
      }
    }]);
  }(React.PureComponent);
  function ItemWithSeparator(props) {
    var LeadingSeparatorComponent = props.LeadingSeparatorComponent,
      SeparatorComponent = props.SeparatorComponent,
      cellKey = props.cellKey,
      prevCellKey = props.prevCellKey,
      setSelfHighlightCallback = props.setSelfHighlightCallback,
      updateHighlightFor = props.updateHighlightFor,
      setSelfUpdatePropsCallback = props.setSelfUpdatePropsCallback,
      updatePropsFor = props.updatePropsFor,
      item = props.item,
      index = props.index,
      section = props.section,
      inverted = props.inverted;
    var _React$useState = React.useState(false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      leadingSeparatorHiglighted = _React$useState2[0],
      setLeadingSeparatorHighlighted = _React$useState2[1];
    var _React$useState3 = React.useState(false),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      separatorHighlighted = _React$useState4[0],
      setSeparatorHighlighted = _React$useState4[1];
    var _React$useState5 = React.useState({
        leadingItem: props.leadingItem,
        leadingSection: props.leadingSection,
        section: props.section,
        trailingItem: props.item,
        trailingSection: props.trailingSection
      }),
      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
      leadingSeparatorProps = _React$useState6[0],
      setLeadingSeparatorProps = _React$useState6[1];
    var _React$useState7 = React.useState({
        leadingItem: props.item,
        leadingSection: props.leadingSection,
        section: props.section,
        trailingItem: props.trailingItem,
        trailingSection: props.trailingSection
      }),
      _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
      separatorProps = _React$useState8[0],
      setSeparatorProps = _React$useState8[1];
    React.useEffect(() => {
      setSelfHighlightCallback(cellKey, setSeparatorHighlighted);
      setSelfUpdatePropsCallback(cellKey, setSeparatorProps);
      return () => {
        setSelfUpdatePropsCallback(cellKey, null);
        setSelfHighlightCallback(cellKey, null);
      };
    }, [cellKey, setSelfHighlightCallback, setSeparatorProps, setSelfUpdatePropsCallback]);
    var separators = {
      highlight: () => {
        setLeadingSeparatorHighlighted(true);
        setSeparatorHighlighted(true);
        if (prevCellKey != null) {
          updateHighlightFor(prevCellKey, true);
        }
      },
      unhighlight: () => {
        setLeadingSeparatorHighlighted(false);
        setSeparatorHighlighted(false);
        if (prevCellKey != null) {
          updateHighlightFor(prevCellKey, false);
        }
      },
      updateProps: (select, newProps) => {
        if (select === 'leading') {
          if (LeadingSeparatorComponent != null) {
            setLeadingSeparatorProps({
              ...leadingSeparatorProps,
              ...newProps
            });
          } else if (prevCellKey != null) {
            updatePropsFor(prevCellKey, {
              ...leadingSeparatorProps,
              ...newProps
            });
          }
        } else if (select === 'trailing' && SeparatorComponent != null) {
          setSeparatorProps({
            ...separatorProps,
            ...newProps
          });
        }
      }
    };
    var element = props.renderItem({
      item,
      index,
      section,
      separators
    });
    var leadingSeparator = LeadingSeparatorComponent != null && /*#__PURE__*/(0, _jsxRuntime.jsx)(LeadingSeparatorComponent, {
      highlighted: leadingSeparatorHiglighted,
      ...leadingSeparatorProps
    });
    var separator = SeparatorComponent != null && /*#__PURE__*/(0, _jsxRuntime.jsx)(SeparatorComponent, {
      highlighted: separatorHighlighted,
      ...separatorProps
    });
    var RenderSeparator = leadingSeparator || separator;
    var firstSeparator = inverted === false ? leadingSeparator : separator;
    var secondSeparator = inverted === false ? separator : leadingSeparator;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [RenderSeparator ? firstSeparator : null, element, RenderSeparator ? secondSeparator : null]
    });
  }
  var _default = exports.default = VirtualizedSectionList;
},384,[1,29,238,10,11,64,66,69,372,371,42,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var safeIsNaN = Number.isNaN || function ponyfill(value) {
    return typeof value === 'number' && value !== value;
  };
  function isEqual(first, second) {
    if (first === second) {
      return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
      return true;
    }
    return false;
  }
  function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (var i = 0; i < newInputs.length; i++) {
      if (!isEqual(newInputs[i], lastInputs[i])) {
        return false;
      }
    }
    return true;
  }
  function memoizeOne(resultFn, isEqual) {
    if (isEqual === undefined) {
      isEqual = areInputsEqual;
    }
    var lastThis;
    var lastArgs = [];
    var lastResult;
    var calledOnce = false;
    function memoized() {
      var newArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        newArgs[_i] = arguments[_i];
      }
      if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
        return lastResult;
      }
      lastResult = resultFn.apply(this, newArgs);
      calledOnce = true;
      lastThis = this;
      lastArgs = newArgs;
      return lastResult;
    }
    return memoized;
  }
  module.exports = memoizeOne;
},385,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Image = _interopRequireDefault(require(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = (0, _createAnimatedComponent.default)(_Image.default);
},386,[1,387,354,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _RootTag = require(_dependencyMap[4]);
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[5]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[6]));
  var _ImageAnalyticsTagContext = _interopRequireDefault(require(_dependencyMap[7]));
  var _ImageInjection = require(_dependencyMap[8]);
  var _ImageSourceUtils = require(_dependencyMap[9]);
  var _ImageUtils = require(_dependencyMap[10]);
  var _ImageViewNativeComponent = _interopRequireDefault(require(_dependencyMap[11]));
  var _NativeImageLoaderIOS = _interopRequireDefault(require(_dependencyMap[12]));
  var _resolveAssetSource = _interopRequireDefault(require(_dependencyMap[13]));
  var React = _interopRequireWildcard(require(_dependencyMap[14]));
  var _jsxRuntime = require(_dependencyMap[15]);
  var _excluded = ["aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-selected", "src"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function getSize(uri, success, failure) {
    var promise = _NativeImageLoaderIOS.default.getSize(uri).then(_ref => {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        width = _ref2[0],
        height = _ref2[1];
      return {
        width,
        height
      };
    });
    if (typeof success !== 'function') {
      return promise;
    }
    promise.then(sizes => success(sizes.width, sizes.height)).catch(failure || function () {
      console.warn('Failed to get size for image: ' + uri);
    });
  }
  function getSizeWithHeaders(uri, headers, success, failure) {
    var promise = _NativeImageLoaderIOS.default.getSizeWithHeaders(uri, headers);
    if (typeof success !== 'function') {
      return promise;
    }
    promise.then(sizes => success(sizes.width, sizes.height)).catch(failure || function () {
      console.warn('Failed to get size for image: ' + uri);
    });
  }
  function prefetchWithMetadata(url, queryRootName, rootTag) {
    if (_NativeImageLoaderIOS.default.prefetchImageWithMetadata) {
      return _NativeImageLoaderIOS.default.prefetchImageWithMetadata(url, queryRootName, rootTag != null ? rootTag : (0, _RootTag.createRootTag)(0));
    } else {
      return _NativeImageLoaderIOS.default.prefetchImage(url);
    }
  }
  function prefetch(url) {
    return _NativeImageLoaderIOS.default.prefetchImage(url);
  }
  function queryCache(_x) {
    return _queryCache.apply(this, arguments);
  }
  function _queryCache() {
    _queryCache = (0, _asyncToGenerator2.default)(function* (urls) {
      return _NativeImageLoaderIOS.default.queryCache(urls);
    });
    return _queryCache.apply(this, arguments);
  }
  var BaseImage = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
    var source = (0, _ImageSourceUtils.getImageSourcesFromImageProps)(props) || {
      uri: undefined,
      width: undefined,
      height: undefined
    };
    var style;
    var sources;
    if (Array.isArray(source)) {
      style = [styles.base, props.style];
      sources = source;
    } else {
      var uri = source.uri;
      if (uri === '') {
        console.warn('source.uri should not be an empty string');
      }
      var _width = source.width ?? props.width;
      var _height = source.height ?? props.height;
      style = [{
        width: _width,
        height: _height
      }, styles.base, props.style];
      sources = [source];
    }
    var flattenedStyle = (0, _flattenStyle.default)(style);
    var objectFit = (0, _ImageUtils.convertObjectFitToResizeMode)(flattenedStyle?.objectFit);
    var resizeMode = objectFit || props.resizeMode || flattenedStyle?.resizeMode || 'cover';
    var tintColor = props.tintColor ?? flattenedStyle?.tintColor;
    if (props.children != null) {
      throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
    }
    var ariaBusy = props['aria-busy'],
      ariaChecked = props['aria-checked'],
      ariaDisabled = props['aria-disabled'],
      ariaExpanded = props['aria-expanded'],
      ariaSelected = props['aria-selected'],
      src = props.src,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var _accessibilityState = {
      busy: ariaBusy ?? props.accessibilityState?.busy,
      checked: ariaChecked ?? props.accessibilityState?.checked,
      disabled: ariaDisabled ?? props.accessibilityState?.disabled,
      expanded: ariaExpanded ?? props.accessibilityState?.expanded,
      selected: ariaSelected ?? props.accessibilityState?.selected
    };
    var accessibilityLabel = props['aria-label'] ?? props.accessibilityLabel;
    var actualRef = (0, _ImageInjection.useWrapRefWithImageAttachedCallbacks)(forwardedRef);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageAnalyticsTagContext.default.Consumer, {
      children: analyticTag => {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageViewNativeComponent.default, {
          accessibilityState: _accessibilityState,
          ...restProps,
          accessible: props.alt !== undefined ? true : props.accessible,
          accessibilityLabel: accessibilityLabel ?? props.alt,
          ref: actualRef,
          style: style,
          resizeMode: resizeMode,
          tintColor: tintColor,
          source: sources,
          internal_analyticTag: analyticTag
        });
      }
    });
  });
  var imageComponentDecorator = (0, _ImageInjection.unstable_getImageComponentDecorator)();
  if (imageComponentDecorator != null) {
    BaseImage = imageComponentDecorator(BaseImage);
  }
  var Image = BaseImage;
  Image.displayName = 'Image';
  Image.getSize = getSize;
  Image.getSizeWithHeaders = getSizeWithHeaders;
  Image.prefetch = prefetch;
  Image.prefetchWithMetadata = prefetchWithMetadata;
  Image.queryCache = queryCache;
  Image.resolveAssetSource = _resolveAssetSource.default;
  var styles = _StyleSheet.default.create({
    base: {
      overflow: 'hidden'
    }
  });
  var _default = exports.default = Image;
},387,[1,238,54,29,292,146,290,388,389,390,391,392,393,114,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var Context = /*#__PURE__*/React.createContext(null);
  var _default = exports.default = Context;
},388,[140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.unstable_getImageComponentDecorator = unstable_getImageComponentDecorator;
  exports.unstable_registerImageAttachedCallback = unstable_registerImageAttachedCallback;
  exports.unstable_setImageComponentDecorator = unstable_setImageComponentDecorator;
  exports.unstable_unregisterImageAttachedCallback = unstable_unregisterImageAttachedCallback;
  exports.useWrapRefWithImageAttachedCallbacks = useWrapRefWithImageAttachedCallbacks;
  var _useMergeRefs = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = _interopRequireWildcard(require(_dependencyMap[2]));
  var React = _react;
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var injectedImageComponentDecorator;
  function unstable_setImageComponentDecorator(imageComponentDecorator) {
    injectedImageComponentDecorator = imageComponentDecorator;
  }
  function unstable_getImageComponentDecorator() {
    return injectedImageComponentDecorator;
  }
  var imageAttachedCallbacks = new Set();
  function unstable_registerImageAttachedCallback(callback) {
    imageAttachedCallbacks.add(callback);
  }
  function unstable_unregisterImageAttachedCallback(callback) {
    imageAttachedCallbacks.delete(callback);
  }
  function useWrapRefWithImageAttachedCallbacks(forwardedRef) {
    var pendingCleanupCallbacks = (0, _react.useRef)([]);
    var imageAttachedCallbacksRef = (0, _react.useRef)(null);
    if (imageAttachedCallbacksRef.current == null) {
      imageAttachedCallbacksRef.current = node => {
        if (node == null) {
          if (pendingCleanupCallbacks.current.length > 0) {
            pendingCleanupCallbacks.current.forEach(cb => cb());
            pendingCleanupCallbacks.current = [];
          }
        } else {
          imageAttachedCallbacks.forEach(imageAttachedCallback => {
            var maybeCleanupCallback = imageAttachedCallback(node);
            if (maybeCleanupCallback != null) {
              pendingCleanupCallbacks.current.push(maybeCleanupCallback);
            }
          });
        }
      };
    }
    return (0, _useMergeRefs.default)(forwardedRef, imageAttachedCallbacksRef.current);
  }
},389,[1,359,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageSourcesFromImageProps = getImageSourcesFromImageProps;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _resolveAssetSource = _interopRequireDefault(require(_dependencyMap[2]));
  function getImageSourcesFromImageProps(imageProps) {
    var source = (0, _resolveAssetSource.default)(imageProps.source);
    var sources;
    var crossOrigin = imageProps.crossOrigin,
      referrerPolicy = imageProps.referrerPolicy,
      src = imageProps.src,
      srcSet = imageProps.srcSet,
      width = imageProps.width,
      height = imageProps.height;
    var headers = {};
    if (crossOrigin === 'use-credentials') {
      headers['Access-Control-Allow-Credentials'] = 'true';
    }
    if (referrerPolicy != null) {
      headers['Referrer-Policy'] = referrerPolicy;
    }
    if (srcSet != null) {
      var sourceList = [];
      var srcSetList = srcSet.split(', ');
      var shouldUseSrcForDefaultScale = true;
      srcSetList.forEach(imageSrc => {
        var _imageSrc$split = imageSrc.split(' '),
          _imageSrc$split2 = (0, _slicedToArray2.default)(_imageSrc$split, 2),
          uri = _imageSrc$split2[0],
          _imageSrc$split2$ = _imageSrc$split2[1],
          xScale = _imageSrc$split2$ === undefined ? '1x' : _imageSrc$split2$;
        if (!xScale.endsWith('x')) {
          console.warn('The provided format for scale is not supported yet. Please use scales like 1x, 2x, etc.');
        } else {
          var scale = parseInt(xScale.split('x')[0], 10);
          if (!isNaN(scale)) {
            shouldUseSrcForDefaultScale = scale === 1 ? false : shouldUseSrcForDefaultScale;
            sourceList.push({
              headers: headers,
              scale,
              uri,
              width,
              height
            });
          }
        }
      });
      if (shouldUseSrcForDefaultScale && src != null) {
        sourceList.push({
          headers: headers,
          scale: 1,
          uri: src,
          width,
          height
        });
      }
      if (sourceList.length === 0) {
        console.warn('The provided value for srcSet is not valid.');
      }
      sources = sourceList;
    } else if (src != null) {
      sources = [{
        uri: src,
        headers: headers,
        width,
        height
      }];
    } else {
      sources = source;
    }
    return sources;
  }
},390,[1,29,114]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.convertObjectFitToResizeMode = convertObjectFitToResizeMode;
  var objectFitMap = {
    contain: 'contain',
    cover: 'cover',
    fill: 'stretch',
    'scale-down': 'contain',
    none: 'none'
  };
  function convertObjectFitToResizeMode(objectFit) {
    return objectFit != null ? objectFitMap[objectFit] : undefined;
  }
},391,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _ViewConfigIgnore = require(_dependencyMap[2]);
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[4]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['setIsVisible_EXPERIMENTAL']
  });
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTImageView',
    bubblingEventTypes: {},
    directEventTypes: {
      topLoadStart: {
        registrationName: 'onLoadStart'
      },
      topProgress: {
        registrationName: 'onProgress'
      },
      topError: {
        registrationName: 'onError'
      },
      topPartialLoad: {
        registrationName: 'onPartialLoad'
      },
      topLoad: {
        registrationName: 'onLoad'
      },
      topLoadEnd: {
        registrationName: 'onLoadEnd'
      }
    },
    validAttributes: {
      blurRadius: true,
      capInsets: {
        diff: require(_dependencyMap[5]).default
      },
      defaultSource: {
        process: require(_dependencyMap[6]).default
      },
      internal_analyticTag: true,
      resizeMode: true,
      source: true,
      tintColor: {
        process: require(_dependencyMap[7]).default
      },
      ...(0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onLoadStart: true,
        onLoad: true,
        onLoadEnd: true,
        onProgress: true,
        onError: true,
        onPartialLoad: true
      })
    }
  };
  var ImageViewNativeComponent = NativeComponentRegistry.get('RCTImageView', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = ImageViewNativeComponent;
},392,[1,96,139,142,87,123,114,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeImageLoaderIOS = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeImageLoaderIOS).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeImageLoaderIOS[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeImageLoaderIOS[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeImageLoaderIOS.default;
},393,[394]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('ImageLoader');
},394,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _RefreshControl = _interopRequireDefault(require(_dependencyMap[2]));
  var _ScrollView = _interopRequireDefault(require(_dependencyMap[3]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[4]));
  var _splitLayoutProps2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  var _useMergeRefs = _interopRequireDefault(require(_dependencyMap[8]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[9]));
  var _useAnimatedProps5 = _interopRequireDefault(require(_dependencyMap[10]));
  var _react = _interopRequireWildcard(require(_dependencyMap[11]));
  var React = _react;
  var _jsxRuntime = require(_dependencyMap[12]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var AnimatedScrollView = /*#__PURE__*/React.forwardRef(function AnimatedScrollViewWithOrWithoutInvertedRefreshControl(props, forwardedRef) {
    {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(AnimatedScrollViewWithoutInvertedRefreshControl, {
        scrollEventThrottle: 0.0001,
        ...props,
        ref: forwardedRef
      });
    }
  });
  var AnimatedScrollViewWithInvertedRefreshControl = /*#__PURE__*/React.forwardRef(function AnimatedScrollViewWithInvertedRefreshControl(props, forwardedRef) {
    var _useMemo = (0, _react.useMemo)(() => {
        var _splitLayoutProps = (0, _splitLayoutProps2.default)((0, _flattenStyle.default)(props.style)),
          outer = _splitLayoutProps.outer,
          inner = _splitLayoutProps.inner;
        return {
          intermediatePropsForRefreshControl: {
            style: outer
          },
          intermediatePropsForScrollView: {
            ...props,
            style: inner
          }
        };
      }, [props]),
      intermediatePropsForRefreshControl = _useMemo.intermediatePropsForRefreshControl,
      intermediatePropsForScrollView = _useMemo.intermediatePropsForScrollView;
    var _useAnimatedProps = (0, _useAnimatedProps5.default)(intermediatePropsForRefreshControl),
      _useAnimatedProps2 = (0, _slicedToArray2.default)(_useAnimatedProps, 2),
      refreshControlAnimatedProps = _useAnimatedProps2[0],
      refreshControlRef = _useAnimatedProps2[1];
    var refreshControl = /*#__PURE__*/React.cloneElement(props.refreshControl, {
      ...refreshControlAnimatedProps,
      ref: refreshControlRef
    });
    var _useAnimatedProps3 = (0, _useAnimatedProps5.default)(intermediatePropsForScrollView),
      _useAnimatedProps4 = (0, _slicedToArray2.default)(_useAnimatedProps3, 2),
      scrollViewAnimatedProps = _useAnimatedProps4[0],
      scrollViewRef = _useAnimatedProps4[1];
    var ref = (0, _useMergeRefs.default)(scrollViewRef, forwardedRef);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ScrollView.default, {
      ...scrollViewAnimatedProps,
      ref: ref,
      refreshControl: refreshControl,
      style: _StyleSheet.default.compose(scrollViewAnimatedProps.style, refreshControlAnimatedProps.style)
    });
  });
  var AnimatedScrollViewWithoutInvertedRefreshControl = (0, _createAnimatedComponent.default)(_ScrollView.default);
  var _default = exports.default = AnimatedScrollView;
},395,[1,29,396,401,146,411,290,87,359,354,421,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _AndroidSwipeRefreshLayoutNativeComponent = _interopRequireWildcard(require(_dependencyMap[7]));
  var _PullToRefreshViewNativeComponent = _interopRequireWildcard(require(_dependencyMap[8]));
  var _react = _interopRequireDefault(require(_dependencyMap[9]));
  var _jsxRuntime = require(_dependencyMap[10]);
  var _excluded = ["enabled", "colors", "progressBackgroundColor", "size"],
    _excluded2 = ["tintColor", "titleColor", "title"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var Platform = require(_dependencyMap[11]).default;
  var RefreshControl = /*#__PURE__*/function (_React$Component) {
    function RefreshControl() {
      var _this;
      (0, _classCallCheck2.default)(this, RefreshControl);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, RefreshControl, [...args]);
      _this._lastNativeRefreshing = false;
      _this._onRefresh = () => {
        _this._lastNativeRefreshing = true;
        _this.props.onRefresh && _this.props.onRefresh();
        _this.forceUpdate();
      };
      _this._setNativeRef = ref => {
        _this._nativeRef = ref;
      };
      return _this;
    }
    (0, _inherits2.default)(RefreshControl, _React$Component);
    return (0, _createClass2.default)(RefreshControl, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._lastNativeRefreshing = this.props.refreshing;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.refreshing !== prevProps.refreshing) {
          this._lastNativeRefreshing = this.props.refreshing;
        } else if (this.props.refreshing !== this._lastNativeRefreshing && this._nativeRef) {
          {
            _PullToRefreshViewNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);
          }
          this._lastNativeRefreshing = this.props.refreshing;
        }
      }
    }, {
      key: "render",
      value: function render() {
        {
          var _this$props = this.props,
            enabled = _this$props.enabled,
            colors = _this$props.colors,
            progressBackgroundColor = _this$props.progressBackgroundColor,
            size = _this$props.size,
            props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_PullToRefreshViewNativeComponent.default, {
            ...props,
            ref: this._setNativeRef,
            onRefresh: this._onRefresh
          });
        }
      }
    }]);
  }(_react.default.Component);
  var _default = exports.default = RefreshControl;
},396,[1,238,10,11,64,66,69,397,399,140,288,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _AndroidSwipeRefreshLayoutNativeComponent = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_AndroidSwipeRefreshLayoutNativeComponent).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _AndroidSwipeRefreshLayoutNativeComponent[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _AndroidSwipeRefreshLayoutNativeComponent[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _AndroidSwipeRefreshLayoutNativeComponent.default;
},397,[398]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var NativeComponentRegistry = require(_dependencyMap[4]);
  var _require = require(_dependencyMap[5]),
    ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
  var _require2 = require(_dependencyMap[6]),
    dispatchCommand = _require2.dispatchCommand;
  var nativeComponentName = 'AndroidSwipeRefreshLayout';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "AndroidSwipeRefreshLayout",
    directEventTypes: {
      topRefresh: {
        registrationName: "onRefresh"
      }
    },
    validAttributes: {
      enabled: true,
      colors: {
        process: (req => 'default' in req ? req.default : req)(require(_dependencyMap[7]))
      },
      progressBackgroundColor: {
        process: require(_dependencyMap[8]).default
      },
      size: true,
      progressViewOffset: true,
      refreshing: true,
      ...ConditionallyIgnoredEventHandlers({
        onRefresh: true
      })
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
  var Commands = exports.Commands = {
    setNativeRefreshing(ref, value) {
      dispatchCommand(ref, "setNativeRefreshing", [value]);
    }
  };
},398,[1,142,304,140,96,139,74,122,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _PullToRefreshViewNativeComponent = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_PullToRefreshViewNativeComponent).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _PullToRefreshViewNativeComponent[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _PullToRefreshViewNativeComponent[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _PullToRefreshViewNativeComponent.default;
},399,[400]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var NativeComponentRegistry = require(_dependencyMap[4]);
  var _require = require(_dependencyMap[5]),
    ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
  var _require2 = require(_dependencyMap[6]),
    dispatchCommand = _require2.dispatchCommand;
  var nativeComponentName = 'RCTRefreshControl';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "RCTRefreshControl",
    directEventTypes: {
      topRefresh: {
        registrationName: "onRefresh"
      }
    },
    validAttributes: {
      tintColor: {
        process: require(_dependencyMap[7]).default
      },
      titleColor: {
        process: require(_dependencyMap[7]).default
      },
      title: true,
      progressViewOffset: true,
      refreshing: true,
      ...ConditionallyIgnoredEventHandlers({
        onRefresh: true
      })
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
  var Commands = exports.Commands = {
    setNativeRefreshing(ref, refreshing) {
      dispatchCommand(ref, "setNativeRefreshing", [refreshing]);
    }
  };
},400,[1,142,304,140,96,139,74,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _HScrollViewNativeComponents = require(_dependencyMap[7]);
  var _VScrollViewNativeComponents = require(_dependencyMap[8]);
  var _AnimatedImplementation = _interopRequireDefault(require(_dependencyMap[9]));
  var _FrameRateLogger = _interopRequireDefault(require(_dependencyMap[10]));
  var _RendererProxy = require(_dependencyMap[11]);
  var _UIManager = _interopRequireDefault(require(_dependencyMap[12]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[13]));
  var _splitLayoutProps2 = _interopRequireDefault(require(_dependencyMap[14]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[15]));
  var _Dimensions = _interopRequireDefault(require(_dependencyMap[16]));
  var _dismissKeyboard = _interopRequireDefault(require(_dependencyMap[17]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[18]));
  var _Keyboard = _interopRequireDefault(require(_dependencyMap[19]));
  var _TextInputState = _interopRequireDefault(require(_dependencyMap[20]));
  var _processDecelerationRate = _interopRequireDefault(require(_dependencyMap[21]));
  var _ScrollViewCommands = _interopRequireDefault(require(_dependencyMap[22]));
  var _ScrollViewContext = _interopRequireWildcard(require(_dependencyMap[23]));
  var _ScrollViewStickyHeader = _interopRequireDefault(require(_dependencyMap[24]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[25]));
  var _memoizeOne = _interopRequireDefault(require(_dependencyMap[26]));
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[27]));
  var React = _interopRequireWildcard(require(_dependencyMap[28]));
  var _jsxRuntime = require(_dependencyMap[29]);
  var _excluded = ["experimental_endDraggingSensitivityMultiplier"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;
  var ScrollView = /*#__PURE__*/function (_React$Component) {
    function ScrollView(props) {
      var _this;
      (0, _classCallCheck2.default)(this, ScrollView);
      _this = _callSuper(this, ScrollView, [props]);
      _this._scrollAnimatedValueAttachment = null;
      _this._stickyHeaderRefs = new Map();
      _this._headerLayoutYs = new Map();
      _this._keyboardMetrics = null;
      _this._additionalScrollOffset = 0;
      _this._isTouching = false;
      _this._lastMomentumScrollBeginTime = 0;
      _this._lastMomentumScrollEndTime = 0;
      _this._observedScrollSinceBecomingResponder = false;
      _this._becameResponderWhileAnimating = false;
      _this._preventNegativeScrollOffset = null;
      _this._animated = null;
      _this._subscriptionKeyboardWillShow = null;
      _this._subscriptionKeyboardWillHide = null;
      _this._subscriptionKeyboardDidShow = null;
      _this._subscriptionKeyboardDidHide = null;
      _this.state = {
        layoutHeight: null
      };
      _this.getScrollResponder = () => {
        return _this;
      };
      _this.getScrollableNode = () => {
        return (0, _RendererProxy.findNodeHandle)(_this.getNativeScrollRef());
      };
      _this.getInnerViewNode = () => {
        return (0, _RendererProxy.findNodeHandle)(_this._innerView.nativeInstance);
      };
      _this.getInnerViewRef = () => {
        return _this._innerView.nativeInstance;
      };
      _this.getNativeScrollRef = () => {
        return _this._scrollView.nativeInstance;
      };
      _this.scrollTo = (options, deprecatedX, deprecatedAnimated) => {
        var x, y, animated;
        if (typeof options === 'number') {
          console.warn("`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead.");
          y = options;
          x = deprecatedX;
          animated = deprecatedAnimated;
        } else if (options) {
          y = options.y;
          x = options.x;
          animated = options.animated;
        }
        var component = _this.getNativeScrollRef();
        if (component == null) {
          return;
        }
        _ScrollViewCommands.default.scrollTo(component, x || 0, y || 0, animated !== false);
      };
      _this.scrollToEnd = options => {
        var animated = (options && options.animated) !== false;
        var component = _this.getNativeScrollRef();
        if (component == null) {
          return;
        }
        _ScrollViewCommands.default.scrollToEnd(component, animated);
      };
      _this.flashScrollIndicators = () => {
        var component = _this.getNativeScrollRef();
        if (component == null) {
          return;
        }
        _ScrollViewCommands.default.flashScrollIndicators(component);
      };
      _this.scrollResponderScrollNativeHandleToKeyboard = (nodeHandle, additionalOffset, preventNegativeScrollOffset) => {
        _this._additionalScrollOffset = additionalOffset || 0;
        _this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;
        if (_this._innerView.nativeInstance == null) {
          return;
        }
        if (typeof nodeHandle === 'number') {
          _UIManager.default.measureLayout(nodeHandle, (0, _nullthrows.default)((0, _RendererProxy.findNodeHandle)(_this)), _this._textInputFocusError, _this._inputMeasureAndScrollToKeyboard);
        } else {
          nodeHandle.measureLayout(_this._innerView.nativeInstance, _this._inputMeasureAndScrollToKeyboard, _this._textInputFocusError);
        }
      };
      _this.scrollResponderZoomTo = (rect, animated) => {
        (0, _invariant.default)(true, 'zoomToRect is not implemented');
        if ('animated' in rect) {
          _this._animated = rect.animated;
          delete rect.animated;
        } else if (typeof animated !== 'undefined') {
          console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
        }
        var component = _this.getNativeScrollRef();
        if (component == null) {
          return;
        }
        _ScrollViewCommands.default.zoomToRect(component, rect, animated !== false);
      };
      _this._inputMeasureAndScrollToKeyboard = (left, top, width, height) => {
        var keyboardScreenY = _Dimensions.default.get('window').height;
        var scrollTextInputIntoVisibleRect = () => {
          if (_this._keyboardMetrics != null) {
            keyboardScreenY = _this._keyboardMetrics.screenY;
          }
          var scrollOffsetY = top - keyboardScreenY + height + _this._additionalScrollOffset;
          if (_this._preventNegativeScrollOffset === true) {
            scrollOffsetY = Math.max(0, scrollOffsetY);
          }
          _this.scrollTo({
            x: 0,
            y: scrollOffsetY,
            animated: true
          });
          _this._additionalScrollOffset = 0;
          _this._preventNegativeScrollOffset = false;
        };
        if (_this._keyboardMetrics == null) {
          setTimeout(() => {
            scrollTextInputIntoVisibleRect();
          }, 0);
        } else {
          scrollTextInputIntoVisibleRect();
        }
      };
      _this._handleScroll = e => {
        _this._observedScrollSinceBecomingResponder = true;
        _this.props.onScroll && _this.props.onScroll(e);
      };
      _this._handleLayout = e => {
        if (_this.props.invertStickyHeaders === true) {
          _this.setState({
            layoutHeight: e.nativeEvent.layout.height
          });
        }
        if (_this.props.onLayout) {
          _this.props.onLayout(e);
        }
      };
      _this._handleContentOnLayout = e => {
        var _e$nativeEvent$layout = e.nativeEvent.layout,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;
        _this.props.onContentSizeChange && _this.props.onContentSizeChange(width, height);
      };
      _this._innerView = createRefForwarder(instance => instance);
      _this._scrollView = createRefForwarder(nativeInstance => {
        var publicInstance = Object.assign(nativeInstance, {
          getScrollResponder: _this.getScrollResponder,
          getScrollableNode: _this.getScrollableNode,
          getInnerViewNode: _this.getInnerViewNode,
          getInnerViewRef: _this.getInnerViewRef,
          getNativeScrollRef: _this.getNativeScrollRef,
          scrollTo: _this.scrollTo,
          scrollToEnd: _this.scrollToEnd,
          flashScrollIndicators: _this.flashScrollIndicators,
          scrollResponderZoomTo: _this.scrollResponderZoomTo,
          scrollResponderScrollNativeHandleToKeyboard: _this.scrollResponderScrollNativeHandleToKeyboard
        });
        return publicInstance;
      });
      _this.scrollResponderKeyboardWillShow = e => {
        _this._keyboardMetrics = e.endCoordinates;
        _this.props.onKeyboardWillShow && _this.props.onKeyboardWillShow(e);
      };
      _this.scrollResponderKeyboardWillHide = e => {
        _this._keyboardMetrics = null;
        _this.props.onKeyboardWillHide && _this.props.onKeyboardWillHide(e);
      };
      _this.scrollResponderKeyboardDidShow = e => {
        _this._keyboardMetrics = e.endCoordinates;
        _this.props.onKeyboardDidShow && _this.props.onKeyboardDidShow(e);
      };
      _this.scrollResponderKeyboardDidHide = e => {
        _this._keyboardMetrics = null;
        _this.props.onKeyboardDidHide && _this.props.onKeyboardDidHide(e);
      };
      _this._handleMomentumScrollBegin = e => {
        _this._lastMomentumScrollBeginTime = global.performance.now();
        _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
      };
      _this._handleMomentumScrollEnd = e => {
        _FrameRateLogger.default.endScroll();
        _this._lastMomentumScrollEndTime = global.performance.now();
        _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
      };
      _this._handleScrollBeginDrag = e => {
        _FrameRateLogger.default.beginScroll();
        _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
      };
      _this._handleScrollEndDrag = e => {
        var velocity = e.nativeEvent.velocity;
        if (!_this._isAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
          _FrameRateLogger.default.endScroll();
        }
        _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
      };
      _this._isAnimating = () => {
        var now = global.performance.now();
        var timeSinceLastMomentumScrollEnd = now - _this._lastMomentumScrollEndTime;
        var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || _this._lastMomentumScrollEndTime < _this._lastMomentumScrollBeginTime;
        return isAnimating;
      };
      _this._handleResponderGrant = e => {
        _this._observedScrollSinceBecomingResponder = false;
        _this.props.onResponderGrant && _this.props.onResponderGrant(e);
        _this._becameResponderWhileAnimating = _this._isAnimating();
      };
      _this._handleResponderReject = () => {};
      _this._handleResponderRelease = e => {
        _this._isTouching = e.nativeEvent.touches.length !== 0;
        _this.props.onResponderRelease && _this.props.onResponderRelease(e);
        if (typeof e.target === 'number') {
          return;
        }
        var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedInput();
        if (currentlyFocusedTextInput != null && _this.props.keyboardShouldPersistTaps !== true && _this.props.keyboardShouldPersistTaps !== 'always' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedTextInput && !_this._observedScrollSinceBecomingResponder && !_this._becameResponderWhileAnimating) {
          _TextInputState.default.blurTextInput(currentlyFocusedTextInput);
        }
      };
      _this._handleResponderTerminationRequest = () => {
        return !_this._observedScrollSinceBecomingResponder;
      };
      _this._handleScrollShouldSetResponder = () => {
        if (_this.props.disableScrollViewPanResponder === true) {
          return false;
        }
        return _this._isTouching;
      };
      _this._handleStartShouldSetResponder = e => {
        if (_this.props.disableScrollViewPanResponder === true) {
          return false;
        }
        var currentlyFocusedInput = _TextInputState.default.currentlyFocusedInput();
        if (_this.props.keyboardShouldPersistTaps === 'handled' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedInput) {
          return true;
        }
        return false;
      };
      _this._handleStartShouldSetResponderCapture = e => {
        if (_this._isAnimating()) {
          return true;
        }
        if (_this.props.disableScrollViewPanResponder === true) {
          return false;
        }
        var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;
        var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
        if (typeof e.target === 'number') {
          return false;
        }
        if (_this._softKeyboardIsDetached()) {
          return false;
        }
        if (keyboardNeverPersistTaps && _this._keyboardIsDismissible() && e.target != null && !_TextInputState.default.isTextInput(e.target)) {
          return true;
        }
        return false;
      };
      _this._keyboardIsDismissible = () => {
        var currentlyFocusedInput = _TextInputState.default.currentlyFocusedInput();
        var hasFocusedTextInput = currentlyFocusedInput != null && _TextInputState.default.isTextInput(currentlyFocusedInput);
        var softKeyboardMayBeOpen = _this._keyboardMetrics != null || _this._keyboardEventsAreUnreliable();
        return hasFocusedTextInput && softKeyboardMayBeOpen;
      };
      _this._softKeyboardIsDetached = () => {
        return _this._keyboardMetrics != null && _this._keyboardMetrics.height === 0;
      };
      _this._keyboardEventsAreUnreliable = () => {
        return false;
      };
      _this._handleTouchEnd = e => {
        var nativeEvent = e.nativeEvent;
        _this._isTouching = nativeEvent.touches.length !== 0;
        var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;
        var keyboardNeverPersistsTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
        var currentlyFocusedTextInput = _TextInputState.default.currentlyFocusedInput();
        if (currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && _this._softKeyboardIsDetached() && _this._keyboardIsDismissible() && keyboardNeverPersistsTaps) {
          _TextInputState.default.blurTextInput(currentlyFocusedTextInput);
        }
        _this.props.onTouchEnd && _this.props.onTouchEnd(e);
      };
      _this._handleTouchCancel = e => {
        _this._isTouching = false;
        _this.props.onTouchCancel && _this.props.onTouchCancel(e);
      };
      _this._handleTouchStart = e => {
        _this._isTouching = true;
        _this.props.onTouchStart && _this.props.onTouchStart(e);
      };
      _this._handleTouchMove = e => {
        _this.props.onTouchMove && _this.props.onTouchMove(e);
      };
      _this._scrollAnimatedValue = new _AnimatedImplementation.default.Value(_this.props.contentOffset?.y ?? 0);
      _this._scrollAnimatedValue.setOffset(_this.props.contentInset?.top ?? 0);
      return _this;
    }
    (0, _inherits2.default)(ScrollView, _React$Component);
    return (0, _createClass2.default)(ScrollView, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {
          console.warn(`'keyboardShouldPersistTaps={${this.props.keyboardShouldPersistTaps === true ? 'true' : 'false'}}' is deprecated. ` + `Use 'keyboardShouldPersistTaps="${this.props.keyboardShouldPersistTaps ? 'always' : 'never'}"' instead`);
        }
        this._keyboardMetrics = _Keyboard.default.metrics();
        this._additionalScrollOffset = 0;
        this._subscriptionKeyboardWillShow = _Keyboard.default.addListener('keyboardWillShow', this.scrollResponderKeyboardWillShow);
        this._subscriptionKeyboardWillHide = _Keyboard.default.addListener('keyboardWillHide', this.scrollResponderKeyboardWillHide);
        this._subscriptionKeyboardDidShow = _Keyboard.default.addListener('keyboardDidShow', this.scrollResponderKeyboardDidShow);
        this._subscriptionKeyboardDidHide = _Keyboard.default.addListener('keyboardDidHide', this.scrollResponderKeyboardDidHide);
        this._updateAnimatedNodeAttachment();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var prevContentInsetTop = prevProps.contentInset ? prevProps.contentInset.top : 0;
        var newContentInsetTop = this.props.contentInset ? this.props.contentInset.top : 0;
        if (prevContentInsetTop !== newContentInsetTop) {
          this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);
        }
        this._updateAnimatedNodeAttachment();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subscriptionKeyboardWillShow != null) {
          this._subscriptionKeyboardWillShow.remove();
        }
        if (this._subscriptionKeyboardWillHide != null) {
          this._subscriptionKeyboardWillHide.remove();
        }
        if (this._subscriptionKeyboardDidShow != null) {
          this._subscriptionKeyboardDidShow.remove();
        }
        if (this._subscriptionKeyboardDidHide != null) {
          this._subscriptionKeyboardDidHide.remove();
        }
        if (this._scrollAnimatedValueAttachment) {
          this._scrollAnimatedValueAttachment.detach();
        }
      }
    }, {
      key: "_textInputFocusError",
      value: function _textInputFocusError() {
        console.warn('Error measuring text field.');
      }
    }, {
      key: "_getKeyForIndex",
      value: function _getKeyForIndex(index, childArray) {
        var child = childArray[index];
        return child && child.key;
      }
    }, {
      key: "_updateAnimatedNodeAttachment",
      value: function _updateAnimatedNodeAttachment() {
        if (this._scrollAnimatedValueAttachment) {
          this._scrollAnimatedValueAttachment.detach();
        }
        if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
          this._scrollAnimatedValueAttachment = _AnimatedImplementation.default.attachNativeEvent(this.getNativeScrollRef(), 'onScroll', [{
            nativeEvent: {
              contentOffset: {
                y: this._scrollAnimatedValue
              }
            }
          }]);
        }
      }
    }, {
      key: "_setStickyHeaderRef",
      value: function _setStickyHeaderRef(key, ref) {
        if (ref) {
          this._stickyHeaderRefs.set(key, ref);
        } else {
          this._stickyHeaderRefs.delete(key);
        }
      }
    }, {
      key: "_onStickyHeaderLayout",
      value: function _onStickyHeaderLayout(index, event, key) {
        var stickyHeaderIndices = this.props.stickyHeaderIndices;
        if (!stickyHeaderIndices) {
          return;
        }
        var childArray = React.Children.toArray(this.props.children);
        if (key !== this._getKeyForIndex(index, childArray)) {
          return;
        }
        var layoutY = event.nativeEvent.layout.y;
        this._headerLayoutYs.set(key, layoutY);
        var indexOfIndex = stickyHeaderIndices.indexOf(index);
        var previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];
        if (previousHeaderIndex != null) {
          var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));
          previousHeader && previousHeader.setNextHeaderY && previousHeader.setNextHeaderY(layoutY);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var horizontal = this.props.horizontal === true;
        var NativeScrollView = horizontal ? _HScrollViewNativeComponents.HScrollViewNativeComponent : _VScrollViewNativeComponents.VScrollViewNativeComponent;
        var NativeScrollContentView = horizontal ? _HScrollViewNativeComponents.HScrollContentViewNativeComponent : _VScrollViewNativeComponents.VScrollContentViewNativeComponent;
        var contentContainerStyle = [horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];
        var contentSizeChangeProps = this.props.onContentSizeChange == null ? null : {
          onLayout: this._handleContentOnLayout
        };
        var stickyHeaderIndices = this.props.stickyHeaderIndices;
        var children = this.props.children;
        children = React.Children.toArray(children);
        if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {
          children = children.map((child, index) => {
            var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;
            if (indexOfIndex > -1) {
              var key = child.key;
              var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
              var StickyHeaderComponent = this.props.StickyHeaderComponent || _ScrollViewStickyHeader.default;
              return /*#__PURE__*/(0, _jsxRuntime.jsx)(StickyHeaderComponent, {
                ref: ref => this._setStickyHeaderRef(key, ref),
                nextHeaderLayoutY: this._headerLayoutYs.get(this._getKeyForIndex(nextIndex, children)),
                onLayout: event => this._onStickyHeaderLayout(index, event, key),
                scrollAnimatedValue: this._scrollAnimatedValue,
                inverted: this.props.invertStickyHeaders,
                hiddenOnScroll: this.props.stickyHeaderHiddenOnScroll,
                scrollViewHeight: this.state.layoutHeight,
                children: child
              }, key);
            } else {
              return child;
            }
          });
        }
        children = /*#__PURE__*/(0, _jsxRuntime.jsx)(_ScrollViewContext.default.Provider, {
          value: horizontal ? _ScrollViewContext.HORIZONTAL : _ScrollViewContext.VERTICAL,
          children: children
        });
        var hasStickyHeaders = Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;
        var preserveChildren = this.props.maintainVisibleContentPosition != null || false;
        var contentContainer = /*#__PURE__*/(0, _jsxRuntime.jsx)(NativeScrollContentView, {
          ...contentSizeChangeProps,
          ref: this._innerView.getForwardingRef(this.props.innerViewRef),
          style: contentContainerStyle,
          removeClippedSubviews: this.props.removeClippedSubviews,
          collapsable: false,
          collapsableChildren: !preserveChildren,
          children: children
        });
        var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
        var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
        var baseStyle = horizontal ? styles.baseHorizontal : styles.baseVertical;
        var _this$props = this.props,
          experimental_endDraggingSensitivityMultiplier = _this$props.experimental_endDraggingSensitivityMultiplier,
          otherProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var props = {
          ...otherProps,
          alwaysBounceHorizontal,
          alwaysBounceVertical,
          style: _StyleSheet.default.compose(baseStyle, this.props.style),
          onContentSizeChange: null,
          onLayout: this._handleLayout,
          onMomentumScrollBegin: this._handleMomentumScrollBegin,
          onMomentumScrollEnd: this._handleMomentumScrollEnd,
          onResponderGrant: this._handleResponderGrant,
          onResponderReject: this._handleResponderReject,
          onResponderRelease: this._handleResponderRelease,
          onResponderTerminationRequest: this._handleResponderTerminationRequest,
          onScrollBeginDrag: this._handleScrollBeginDrag,
          onScrollEndDrag: this._handleScrollEndDrag,
          onScrollShouldSetResponder: this._handleScrollShouldSetResponder,
          onStartShouldSetResponder: this._handleStartShouldSetResponder,
          onStartShouldSetResponderCapture: this._handleStartShouldSetResponderCapture,
          onTouchEnd: this._handleTouchEnd,
          onTouchMove: this._handleTouchMove,
          onTouchStart: this._handleTouchStart,
          onTouchCancel: this._handleTouchCancel,
          onScroll: this._handleScroll,
          endDraggingSensitivityMultiplier: experimental_endDraggingSensitivityMultiplier,
          scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
          sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
          snapToStart: this.props.snapToStart !== false,
          snapToEnd: this.props.snapToEnd !== false,
          pagingEnabled: this.props.pagingEnabled === true && this.props.snapToInterval == null && this.props.snapToOffsets == null
        };
        var decelerationRate = this.props.decelerationRate;
        if (decelerationRate != null) {
          props.decelerationRate = (0, _processDecelerationRate.default)(decelerationRate);
        }
        var refreshControl = this.props.refreshControl;
        var scrollViewRef = this._scrollView.getForwardingRef(this.props.scrollViewRef);
        if (refreshControl != null) {
          {
            return /*#__PURE__*/(0, _jsxRuntime.jsxs)(NativeScrollView, {
              ...props,
              ref: scrollViewRef,
              children: [refreshControl, contentContainer]
            });
          }
        }
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(NativeScrollView, {
          ...props,
          ref: scrollViewRef,
          children: contentContainer
        });
      }
    }]);
  }(React.Component);
  ScrollView.Context = _ScrollViewContext.default;
  var styles = _StyleSheet.default.create({
    baseVertical: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'column',
      overflow: 'scroll'
    },
    baseHorizontal: {
      flexGrow: 1,
      flexShrink: 1,
      flexDirection: 'row',
      overflow: 'scroll'
    },
    contentContainerHorizontal: {
      flexDirection: 'row'
    }
  });
  function createRefForwarder(mutator) {
    var state = {
      getForwardingRef: (0, _memoizeOne.default)(forwardedRef => {
        return nativeInstance => {
          var publicInstance = nativeInstance == null ? null : mutator(nativeInstance);
          state.nativeInstance = nativeInstance;
          state.publicInstance = publicInstance;
          if (forwardedRef != null) {
            if (typeof forwardedRef === 'function') {
              forwardedRef(publicInstance);
            } else {
              forwardedRef.current = publicInstance;
            }
          }
        };
      }),
      nativeInstance: null,
      publicInstance: null
    };
    return state;
  }
  var Wrapper = /*#__PURE__*/React.forwardRef(function Wrapper(props, ref) {
    return ref == null ? /*#__PURE__*/(0, _jsxRuntime.jsx)(ScrollView, {
      ...props
    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(ScrollView, {
      ...props,
      scrollViewRef: ref
    });
  });
  Wrapper.displayName = 'ScrollView';
  Wrapper.Context = _ScrollViewContext.default;
  var _default = exports.default = Wrapper;
},401,[1,238,10,11,64,66,69,402,407,324,408,74,126,146,411,290,117,412,87,413,94,417,418,419,420,42,385,128,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HScrollViewNativeComponent = exports.HScrollContentViewNativeComponent = undefined;
  var _AndroidHorizontalScrollViewNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var _ScrollContentViewNativeComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var _ScrollViewNativeComponent = _interopRequireDefault(require(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[4]));
  var _AndroidHorizontalScrollContentViewNativeComponent = _interopRequireDefault(require(_dependencyMap[5]));
  var HScrollViewNativeComponent = exports.HScrollViewNativeComponent = _ScrollViewNativeComponent.default;
  var HScrollContentViewNativeComponent = exports.HScrollContentViewNativeComponent = _ScrollContentViewNativeComponent.default;
},402,[1,403,404,405,87,406]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'AndroidHorizontalScrollView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {
      decelerationRate: true,
      disableIntervalMomentum: true,
      maintainVisibleContentPosition: true,
      endFillColor: {
        process: require(_dependencyMap[1]).default
      },
      fadingEdgeLength: true,
      nestedScrollEnabled: true,
      overScrollMode: true,
      pagingEnabled: true,
      persistentScrollbar: true,
      horizontal: true,
      scrollEnabled: true,
      scrollEventThrottle: true,
      scrollPerfTag: true,
      sendMomentumEvents: true,
      showsHorizontalScrollIndicator: true,
      snapToAlignment: true,
      snapToEnd: true,
      snapToInterval: true,
      snapToStart: true,
      snapToOffsets: true,
      contentOffset: true,
      borderBottomLeftRadius: true,
      borderBottomRightRadius: true,
      borderRadius: true,
      borderStyle: true,
      borderRightColor: {
        process: require(_dependencyMap[1]).default
      },
      borderColor: {
        process: require(_dependencyMap[1]).default
      },
      borderBottomColor: {
        process: require(_dependencyMap[1]).default
      },
      borderTopLeftRadius: true,
      borderTopColor: {
        process: require(_dependencyMap[1]).default
      },
      removeClippedSubviews: true,
      borderTopRightRadius: true,
      borderLeftColor: {
        process: require(_dependencyMap[1]).default
      },
      pointerEvents: true
    }
  };
  var AndroidHorizontalScrollViewNativeComponent = NativeComponentRegistry.get('AndroidHorizontalScrollView', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = AndroidHorizontalScrollViewNativeComponent;
},403,[96,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTScrollContentView',
    bubblingEventTypes: {},
    directEventTypes: {},
    validAttributes: {}
  };
  var ScrollContentViewNativeComponent = NativeComponentRegistry.get('RCTScrollContentView', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = ScrollContentViewNativeComponent;
},404,[96]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _ViewConfigIgnore = require(_dependencyMap[2]);
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTScrollView',
    bubblingEventTypes: {},
    directEventTypes: {
      topMomentumScrollBegin: {
        registrationName: 'onMomentumScrollBegin'
      },
      topMomentumScrollEnd: {
        registrationName: 'onMomentumScrollEnd'
      },
      topScroll: {
        registrationName: 'onScroll'
      },
      topScrollBeginDrag: {
        registrationName: 'onScrollBeginDrag'
      },
      topScrollEndDrag: {
        registrationName: 'onScrollEndDrag'
      },
      topScrollToTop: {
        registrationName: 'onScrollToTop'
      }
    },
    validAttributes: {
      alwaysBounceHorizontal: true,
      alwaysBounceVertical: true,
      automaticallyAdjustContentInsets: true,
      automaticallyAdjustKeyboardInsets: true,
      automaticallyAdjustsScrollIndicatorInsets: true,
      bounces: true,
      bouncesZoom: true,
      canCancelContentTouches: true,
      centerContent: true,
      contentInset: {
        diff: require(_dependencyMap[4]).default
      },
      contentOffset: {
        diff: require(_dependencyMap[5]).default
      },
      contentInsetAdjustmentBehavior: true,
      decelerationRate: true,
      endDraggingSensitivityMultiplier: true,
      directionalLockEnabled: true,
      disableIntervalMomentum: true,
      indicatorStyle: true,
      inverted: true,
      keyboardDismissMode: true,
      maintainVisibleContentPosition: true,
      maximumZoomScale: true,
      minimumZoomScale: true,
      pagingEnabled: true,
      pinchGestureEnabled: true,
      scrollEnabled: true,
      scrollEventThrottle: true,
      scrollIndicatorInsets: {
        diff: require(_dependencyMap[4]).default
      },
      scrollToOverflowEnabled: true,
      scrollsToTop: true,
      showsHorizontalScrollIndicator: true,
      showsVerticalScrollIndicator: true,
      snapToAlignment: true,
      snapToEnd: true,
      snapToInterval: true,
      snapToOffsets: true,
      snapToStart: true,
      verticalScrollIndicatorInsets: {
        diff: require(_dependencyMap[4]).default
      },
      zoomScale: true,
      ...(0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
        onScrollBeginDrag: true,
        onMomentumScrollEnd: true,
        onScrollEndDrag: true,
        onMomentumScrollBegin: true,
        onScrollToTop: true,
        onScroll: true
      })
    }
  };
  var ScrollViewNativeComponent = NativeComponentRegistry.get('RCTScrollView', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = ScrollViewNativeComponent;
},405,[1,96,139,87,123,125]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeComponentRegistry = require(_dependencyMap[2]);
  var nativeComponentName = 'AndroidHorizontalScrollContentView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "AndroidHorizontalScrollContentView",
    validAttributes: {
      removeClippedSubviews: true
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
},406,[1,304,96]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.VScrollViewNativeComponent = exports.VScrollContentViewNativeComponent = undefined;
  var _ScrollContentViewNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var _ScrollViewNativeComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var _View = _interopRequireDefault(require(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[4]));
  var VScrollViewNativeComponent = exports.VScrollViewNativeComponent = _ScrollViewNativeComponent.default;
  var VScrollContentViewNativeComponent = exports.VScrollContentViewNativeComponent = _ScrollContentViewNativeComponent.default;
},407,[1,404,405,285,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeFrameRateLogger = _interopRequireDefault(require(_dependencyMap[1]));
  var invariant = require(_dependencyMap[2]);
  var FrameRateLogger = {
    setGlobalOptions: function (options) {
      if (options.debug !== undefined) {
        invariant(_NativeFrameRateLogger.default, 'Trying to debug FrameRateLogger without the native module!');
      }
      _NativeFrameRateLogger.default?.setGlobalOptions({
        debug: !!options.debug
      });
    },
    setContext: function (context) {
      _NativeFrameRateLogger.default?.setContext(context);
    },
    beginScroll() {
      _NativeFrameRateLogger.default?.beginScroll();
    },
    endScroll() {
      _NativeFrameRateLogger.default?.endScroll();
    }
  };
  var _default = exports.default = FrameRateLogger;
},408,[1,409,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeFrameRateLogger = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeFrameRateLogger).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeFrameRateLogger[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeFrameRateLogger[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeFrameRateLogger.default;
},409,[410]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('FrameRateLogger');
},410,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = splitLayoutProps;
  function splitLayoutProps(props) {
    var outer = null;
    var inner = null;
    if (props != null) {
      outer = {};
      inner = {};
      for (var prop of Object.keys(props)) {
        switch (prop) {
          case 'margin':
          case 'marginHorizontal':
          case 'marginVertical':
          case 'marginBottom':
          case 'marginTop':
          case 'marginLeft':
          case 'marginRight':
          case 'flex':
          case 'flexGrow':
          case 'flexShrink':
          case 'flexBasis':
          case 'alignSelf':
          case 'height':
          case 'minHeight':
          case 'maxHeight':
          case 'width':
          case 'minWidth':
          case 'maxWidth':
          case 'position':
          case 'left':
          case 'right':
          case 'bottom':
          case 'top':
          case 'transform':
          case 'transformOrigin':
          case 'rowGap':
          case 'columnGap':
          case 'gap':
            outer[prop] = props[prop];
            break;
          default:
            inner[prop] = props[prop];
            break;
        }
      }
    }
    return {
      outer,
      inner
    };
  }
},411,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TextInputState = require(_dependencyMap[0]).default;
  function dismissKeyboard() {
    TextInputState.blurTextInput(TextInputState.currentlyFocusedInput());
  }
  var _default = exports.default = dismissKeyboard;
},412,[94]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[3]));
  var _LayoutAnimation = _interopRequireDefault(require(_dependencyMap[4]));
  var _dismissKeyboard = _interopRequireDefault(require(_dependencyMap[5]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[6]));
  var _NativeKeyboardObserver = _interopRequireDefault(require(_dependencyMap[7]));
  var Keyboard = /*#__PURE__*/function () {
    function Keyboard() {
      (0, _classCallCheck2.default)(this, Keyboard);
      this._emitter = new _NativeEventEmitter.default(_NativeKeyboardObserver.default);
      this.addListener('keyboardDidShow', ev => {
        this._currentlyShowing = ev;
      });
      this.addListener('keyboardDidHide', _ev => {
        this._currentlyShowing = null;
      });
    }
    return (0, _createClass2.default)(Keyboard, [{
      key: "addListener",
      value: function addListener(eventType, listener, context) {
        return this._emitter.addListener(eventType, listener);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventType) {
        this._emitter.removeAllListeners(eventType);
      }
    }, {
      key: "dismiss",
      value: function dismiss() {
        (0, _dismissKeyboard.default)();
      }
    }, {
      key: "isVisible",
      value: function isVisible() {
        return !!this._currentlyShowing;
      }
    }, {
      key: "metrics",
      value: function metrics() {
        return this._currentlyShowing?.endCoordinates;
      }
    }, {
      key: "scheduleLayoutAnimation",
      value: function scheduleLayoutAnimation(event) {
        var duration = event.duration,
          easing = event.easing;
        if (duration != null && duration !== 0) {
          _LayoutAnimation.default.configureNext({
            duration: duration,
            update: {
              duration: duration,
              type: easing != null && _LayoutAnimation.default.Types[easing] || 'keyboard'
            }
          });
        }
      }
    }]);
  }();
  var _default = exports.default = new Keyboard();
},413,[1,10,11,242,414,412,87,415]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[1]));
  var _FabricUIManager = require(_dependencyMap[2]);
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var UIManager = require(_dependencyMap[4]).default;
  var isLayoutAnimationEnabled = ReactNativeFeatureFlags.isLayoutAnimationEnabled();
  function setEnabled(value) {
    isLayoutAnimationEnabled = isLayoutAnimationEnabled;
  }
  function configureNext(config, onAnimationDidEnd, onAnimationDidFail) {
    if (_Platform.default.isDisableAnimations) {
      return;
    }
    if (!isLayoutAnimationEnabled) {
      return;
    }
    var animationCompletionHasRun = false;
    var onAnimationComplete = () => {
      if (animationCompletionHasRun) {
        return;
      }
      animationCompletionHasRun = true;
      clearTimeout(raceWithAnimationId);
      onAnimationDidEnd?.();
    };
    var raceWithAnimationId = setTimeout(onAnimationComplete, (config.duration ?? 0) + 17);
    var FabricUIManager = (0, _FabricUIManager.getFabricUIManager)();
    if (FabricUIManager?.configureNextLayoutAnimation) {
      global?.nativeFabricUIManager?.configureNextLayoutAnimation(config, onAnimationComplete, onAnimationDidFail ?? function () {});
      return;
    }
    if (UIManager?.configureNextLayoutAnimation) {
      UIManager.configureNextLayoutAnimation(config, onAnimationComplete ?? function () {}, onAnimationDidFail ?? function () {});
    }
  }
  function create(duration, type, property) {
    return {
      duration,
      create: {
        type,
        property
      },
      update: {
        type
      },
      delete: {
        type,
        property
      }
    };
  }
  var Presets = {
    easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),
    linear: create(500, 'linear', 'opacity'),
    spring: {
      duration: 700,
      create: {
        type: 'linear',
        property: 'opacity'
      },
      update: {
        type: 'spring',
        springDamping: 0.4
      },
      delete: {
        type: 'linear',
        property: 'opacity'
      }
    }
  };
  var LayoutAnimation = {
    configureNext,
    create,
    Types: Object.freeze({
      spring: 'spring',
      linear: 'linear',
      easeInEaseOut: 'easeInEaseOut',
      easeIn: 'easeIn',
      easeOut: 'easeOut',
      keyboard: 'keyboard'
    }),
    Properties: Object.freeze({
      opacity: 'opacity',
      scaleX: 'scaleX',
      scaleY: 'scaleY',
      scaleXY: 'scaleXY'
    }),
    checkConfig() {
      console.error('LayoutAnimation.checkConfig(...) has been disabled.');
    },
    Presets,
    easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
    linear: configureNext.bind(null, Presets.linear),
    spring: configureNext.bind(null, Presets.spring),
    setEnabled
  };
  var _default = exports.default = LayoutAnimation;
},414,[1,104,127,87,126]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeKeyboardObserver = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeKeyboardObserver).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeKeyboardObserver[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeKeyboardObserver[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeKeyboardObserver.default;
},415,[416]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('KeyboardObserver');
},416,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Platform = _interopRequireDefault(require(_dependencyMap[1]));
  function processDecelerationRate(decelerationRate) {
    if (decelerationRate === 'normal') {
      return 0.998;
    } else if (decelerationRate === 'fast') {
      return 0.99;
    }
    return decelerationRate;
  }
  var _default = exports.default = processDecelerationRate;
},417,[1,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[1]));
  var React = _interopRequireWildcard(require(_dependencyMap[2]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = (0, _codegenNativeCommands.default)({
    supportedCommands: ['flashScrollIndicators', 'scrollTo', 'scrollToEnd', 'zoomToRect']
  });
},418,[1,142,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.VERTICAL = exports.HORIZONTAL = undefined;
  var React = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var ScrollViewContext = /*#__PURE__*/React.createContext(null);
  var _default = exports.default = ScrollViewContext;
  var HORIZONTAL = exports.HORIZONTAL = Object.freeze({
    horizontal: true
  });
  var VERTICAL = exports.VERTICAL = Object.freeze({
    horizontal: false
  });
},419,[140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _Animated = _interopRequireDefault(require(_dependencyMap[2]));
  var _ReactFabricPublicInstanceUtils = require(_dependencyMap[3]);
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[4]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[5]));
  var _useMergeRefs = _interopRequireDefault(require(_dependencyMap[6]));
  var _react = _interopRequireWildcard(require(_dependencyMap[7]));
  var React = _react;
  var _jsxRuntime = require(_dependencyMap[8]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var ScrollViewStickyHeaderWithForwardedRef = /*#__PURE__*/React.forwardRef(function ScrollViewStickyHeader(props, forwardedRef) {
    var inverted = props.inverted,
      scrollViewHeight = props.scrollViewHeight,
      hiddenOnScroll = props.hiddenOnScroll,
      scrollAnimatedValue = props.scrollAnimatedValue,
      _nextHeaderLayoutY = props.nextHeaderLayoutY;
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      measured = _useState2[0],
      setMeasured = _useState2[1];
    var _useState3 = (0, _react.useState)(0),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      layoutY = _useState4[0],
      setLayoutY = _useState4[1];
    var _useState5 = (0, _react.useState)(0),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      layoutHeight = _useState6[0],
      setLayoutHeight = _useState6[1];
    var _useState7 = (0, _react.useState)(null),
      _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
      translateY = _useState8[0],
      setTranslateY = _useState8[1];
    var _useState9 = (0, _react.useState)(_nextHeaderLayoutY),
      _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
      nextHeaderLayoutY = _useState0[0],
      setNextHeaderLayoutY = _useState0[1];
    var _useState1 = (0, _react.useState)(false),
      _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
      isFabric = _useState10[0],
      setIsFabric = _useState10[1];
    var callbackRef = (0, _react.useCallback)(ref => {
      if (ref == null) {
        return;
      }
      ref.setNextHeaderY = setNextHeaderLayoutY;
      setIsFabric((0, _ReactFabricPublicInstanceUtils.isPublicInstance)(ref));
    }, []);
    var ref = (0, _useMergeRefs.default)(callbackRef, forwardedRef);
    var offset = (0, _react.useMemo)(() => hiddenOnScroll === true ? _Animated.default.diffClamp(scrollAnimatedValue.interpolate({
      extrapolateLeft: 'clamp',
      inputRange: [layoutY, layoutY + 1],
      outputRange: [0, 1]
    }).interpolate({
      inputRange: [0, 1],
      outputRange: [0, -1]
    }), -layoutHeight, 0) : null, [scrollAnimatedValue, layoutHeight, layoutY, hiddenOnScroll]);
    var _useState11 = (0, _react.useState)(() => {
        var inputRange = [-1, 0];
        var outputRange = [0, 0];
        var initialTranslateY = scrollAnimatedValue.interpolate({
          inputRange,
          outputRange
        });
        if (offset != null) {
          return _Animated.default.add(initialTranslateY, offset);
        }
        return initialTranslateY;
      }),
      _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
      animatedTranslateY = _useState12[0],
      setAnimatedTranslateY = _useState12[1];
    var haveReceivedInitialZeroTranslateY = (0, _react.useRef)(true);
    var translateYDebounceTimer = (0, _react.useRef)(null);
    (0, _react.useEffect)(() => {
      if (translateY !== 0 && translateY != null) {
        haveReceivedInitialZeroTranslateY.current = false;
      }
    }, [translateY]);
    var animatedValueListener = (0, _react.useCallback)(_ref => {
      var value = _ref.value;
      var debounceTimeout = 64;
      if (value === 0 && !haveReceivedInitialZeroTranslateY.current) {
        haveReceivedInitialZeroTranslateY.current = true;
        return;
      }
      if (translateYDebounceTimer.current != null) {
        clearTimeout(translateYDebounceTimer.current);
      }
      translateYDebounceTimer.current = setTimeout(() => setTranslateY(value), debounceTimeout);
    }, []);
    (0, _react.useEffect)(() => {
      var inputRange = [-1, 0];
      var outputRange = [0, 0];
      if (measured) {
        if (inverted === true) {
          if (scrollViewHeight != null) {
            var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;
            if (stickStartPoint > 0) {
              inputRange.push(stickStartPoint);
              outputRange.push(0);
              inputRange.push(stickStartPoint + 1);
              outputRange.push(1);
              var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;
              if (collisionPoint > stickStartPoint) {
                inputRange.push(collisionPoint, collisionPoint + 1);
                outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
              }
            }
          }
        } else {
          inputRange.push(layoutY);
          outputRange.push(0);
          var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;
          if (_collisionPoint >= layoutY) {
            inputRange.push(_collisionPoint, _collisionPoint + 1);
            outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);
          } else {
            inputRange.push(layoutY + 1);
            outputRange.push(1);
          }
        }
      }
      var newAnimatedTranslateY = scrollAnimatedValue.interpolate({
        inputRange,
        outputRange
      });
      if (offset != null) {
        newAnimatedTranslateY = _Animated.default.add(newAnimatedTranslateY, offset);
      }
      var animatedListenerId;
      if (isFabric) {
        animatedListenerId = newAnimatedTranslateY.addListener(animatedValueListener);
      }
      setAnimatedTranslateY(newAnimatedTranslateY);
      return () => {
        if (animatedListenerId) {
          newAnimatedTranslateY.removeListener(animatedListenerId);
        }
        if (translateYDebounceTimer.current != null) {
          clearTimeout(translateYDebounceTimer.current);
        }
      };
    }, [nextHeaderLayoutY, measured, layoutHeight, layoutY, scrollViewHeight, scrollAnimatedValue, inverted, offset, animatedValueListener, isFabric]);
    var _onLayout = event => {
      setLayoutY(event.nativeEvent.layout.y);
      setLayoutHeight(event.nativeEvent.layout.height);
      setMeasured(true);
      props.onLayout(event);
      var child = React.Children.only(props.children);
      if (child.props.onLayout) {
        child.props.onLayout(event);
      }
    };
    var child = React.Children.only(props.children);
    var passthroughAnimatedPropExplicitValues = isFabric && translateY != null ? {
      style: {
        transform: [{
          translateY: translateY
        }]
      }
    } : null;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Animated.default.View, {
      collapsable: false,
      nativeID: props.nativeID,
      onLayout: _onLayout,
      ref: ref,
      style: [child.props.style, styles.header, {
        transform: [{
          translateY: animatedTranslateY
        }]
      }],
      passthroughAnimatedPropExplicitValues: passthroughAnimatedPropExplicitValues,
      children: /*#__PURE__*/React.cloneElement(child, {
        style: styles.fill,
        onLayout: undefined
      })
    });
  });
  var styles = _StyleSheet.default.create({
    header: {
      zIndex: 10
    },
    fill: {
      flex: 1
    }
  });
  var _default = exports.default = ScrollViewStickyHeaderWithForwardedRef;
},420,[1,29,322,356,290,87,359,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _createAnimatedPropsHook = _interopRequireDefault(require(_dependencyMap[1]));
  var _default = exports.default = (0, _createAnimatedPropsHook.default)(null);
},421,[1,355]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _SectionList = _interopRequireDefault(require(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = (0, _createAnimatedComponent.default)(_SectionList.default);
},422,[1,423,354,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  var _virtualizedLists = _interopRequireDefault(require(_dependencyMap[8]));
  var React = _interopRequireWildcard(require(_dependencyMap[9]));
  var _jsxRuntime = require(_dependencyMap[10]);
  var _excluded = ["stickySectionHeadersEnabled"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var VirtualizedSectionList = _virtualizedLists.default.VirtualizedSectionList;
  var SectionList = exports.default = /*#__PURE__*/function (_React$PureComponent) {
    function SectionList() {
      var _this;
      (0, _classCallCheck2.default)(this, SectionList);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, SectionList, [...args]);
      _this._captureRef = ref => {
        _this._wrapperListRef = ref;
      };
      return _this;
    }
    (0, _inherits2.default)(SectionList, _React$PureComponent);
    return (0, _createClass2.default)(SectionList, [{
      key: "scrollToLocation",
      value: function scrollToLocation(params) {
        if (this._wrapperListRef != null) {
          this._wrapperListRef.scrollToLocation(params);
        }
      }
    }, {
      key: "recordInteraction",
      value: function recordInteraction() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        listRef && listRef.recordInteraction();
      }
    }, {
      key: "flashScrollIndicators",
      value: function flashScrollIndicators() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        listRef && listRef.flashScrollIndicators();
      }
    }, {
      key: "getScrollResponder",
      value: function getScrollResponder() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        if (listRef) {
          return listRef.getScrollResponder();
        }
      }
    }, {
      key: "getScrollableNode",
      value: function getScrollableNode() {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        if (listRef) {
          return listRef.getScrollableNode();
        }
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
        if (listRef) {
          listRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          _stickySectionHeadersEnabled = _this$props.stickySectionHeadersEnabled,
          restProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var stickySectionHeadersEnabled = _stickySectionHeadersEnabled ?? true;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(VirtualizedSectionList, {
          ...restProps,
          stickySectionHeadersEnabled: stickySectionHeadersEnabled,
          ref: this._captureRef,
          getItemCount: items => items.length,
          getItem: (items, index) => items[index]
        });
      }
    }]);
  }(React.PureComponent);
},423,[1,238,10,11,64,66,69,87,370,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Text = _interopRequireDefault(require(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = (0, _createAnimatedComponent.default)(_Text.default);
},424,[1,308,354,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _View = _interopRequireDefault(require(_dependencyMap[1]));
  var _createAnimatedComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = (0, _createAnimatedComponent.default)(_View.default);
},425,[1,285,354,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _UnimplementedView = _interopRequireDefault(require(_dependencyMap[6]));
  var React = _interopRequireWildcard(require(_dependencyMap[7]));
  var _jsxRuntime = require(_dependencyMap[8]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var DrawerLayoutAndroid = exports.default = /*#__PURE__*/function (_React$Component) {
    function DrawerLayoutAndroid() {
      (0, _classCallCheck2.default)(this, DrawerLayoutAndroid);
      return _callSuper(this, DrawerLayoutAndroid, arguments);
    }
    (0, _inherits2.default)(DrawerLayoutAndroid, _React$Component);
    return (0, _createClass2.default)(DrawerLayoutAndroid, [{
      key: "render",
      value: function render() {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_UnimplementedView.default, {
          ...this.props
        });
      }
    }, {
      key: "openDrawer",
      value: function openDrawer() {
        throw new Error('DrawerLayoutAndroid is only available on Android');
      }
    }, {
      key: "closeDrawer",
      value: function closeDrawer() {
        throw new Error('DrawerLayoutAndroid is only available on Android');
      }
    }, {
      key: "blur",
      value: function blur() {
        throw new Error('DrawerLayoutAndroid is only available on Android');
      }
    }, {
      key: "focus",
      value: function focus() {
        throw new Error('DrawerLayoutAndroid is only available on Android');
      }
    }, {
      key: "measure",
      value: function measure(callback) {
        throw new Error('DrawerLayoutAndroid is only available on Android');
      }
    }, {
      key: "measureInWindow",
      value: function measureInWindow(callback) {
        throw new Error('DrawerLayoutAndroid is only available on Android');
      }
    }, {
      key: "measureLayout",
      value: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        throw new Error('DrawerLayoutAndroid is only available on Android');
      }
    }, {
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        throw new Error('DrawerLayoutAndroid is only available on Android');
      }
    }]);
  }(React.Component);
},426,[1,10,11,64,66,69,427,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[6]));
  var React = _interopRequireWildcard(require(_dependencyMap[7]));
  var _jsxRuntime = require(_dependencyMap[8]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var UnimplementedView = /*#__PURE__*/function (_React$Component) {
    function UnimplementedView() {
      (0, _classCallCheck2.default)(this, UnimplementedView);
      return _callSuper(this, UnimplementedView, arguments);
    }
    (0, _inherits2.default)(UnimplementedView, _React$Component);
    return (0, _createClass2.default)(UnimplementedView, [{
      key: "render",
      value: function render() {
        var View = require(_dependencyMap[9]).default;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(View, {
          style: [styles.unimplementedView, this.props.style],
          children: this.props.children
        });
      }
    }]);
  }(React.Component);
  var styles = _StyleSheet.default.create({
    unimplementedView: {}
  });
  var _default = exports.default = UnimplementedView;
},427,[1,10,11,64,66,69,290,140,288,285]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _View = _interopRequireDefault(require(_dependencyMap[7]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[8]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[9]));
  var _Image = _interopRequireDefault(require(_dependencyMap[10]));
  var React = _interopRequireWildcard(require(_dependencyMap[11]));
  var _jsxRuntime = require(_dependencyMap[12]);
  var _excluded = ["children", "style", "imageStyle", "imageRef", "importantForAccessibility"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var ImageBackground = /*#__PURE__*/function (_React$Component) {
    function ImageBackground() {
      var _this;
      (0, _classCallCheck2.default)(this, ImageBackground);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, ImageBackground, [...args]);
      _this._viewRef = null;
      _this._captureRef = ref => {
        _this._viewRef = ref;
      };
      return _this;
    }
    (0, _inherits2.default)(ImageBackground, _React$Component);
    return (0, _createClass2.default)(ImageBackground, [{
      key: "setNativeProps",
      value: function setNativeProps(props) {
        var viewRef = this._viewRef;
        if (viewRef) {
          viewRef.setNativeProps(props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          children = _this$props.children,
          style = _this$props.style,
          imageStyle = _this$props.imageStyle,
          imageRef = _this$props.imageRef,
          importantForAccessibility = _this$props.importantForAccessibility,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var flattenedStyle = (0, _flattenStyle.default)(style);
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_View.default, {
          accessibilityIgnoresInvertColors: true,
          importantForAccessibility: importantForAccessibility,
          style: style,
          ref: this._captureRef,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Image.default, {
            ...props,
            importantForAccessibility: importantForAccessibility,
            style: [_StyleSheet.default.absoluteFill, {
              width: flattenedStyle?.width,
              height: flattenedStyle?.height
            }, imageStyle],
            ref: imageRef
          }), children]
        });
      }
    }]);
  }(React.Component);
  var _default = exports.default = ImageBackground;
},428,[1,238,10,11,64,66,69,285,146,290,387,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _SafeAreaView = _interopRequireDefault(require(_dependencyMap[1]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var _useWindowDimensions2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _RCTInputAccessoryViewNativeComponent = _interopRequireDefault(require(_dependencyMap[5]));
  var React = _interopRequireWildcard(require(_dependencyMap[6]));
  var _jsxRuntime = require(_dependencyMap[7]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var InputAccessoryView = props => {
    var _useWindowDimensions = (0, _useWindowDimensions2.default)(),
      width = _useWindowDimensions.width;
    {
      if (React.Children.count(props.children) === 0) {
        return null;
      }
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_RCTInputAccessoryViewNativeComponent.default, {
        style: [props.style, styles.container],
        nativeID: props.nativeID,
        backgroundColor: props.backgroundColor,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SafeAreaView.default, {
          style: [styles.safeAreaView, {
            width
          }],
          children: props.children
        })
      });
    }
  };
  var styles = _StyleSheet.default.create({
    container: {
      position: 'absolute'
    },
    safeAreaView: {
      flex: 1
    }
  });
  var _default = exports.default = InputAccessoryView;
},429,[1,430,290,87,433,434,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Platform = _interopRequireDefault(require(_dependencyMap[1]));
  var _View = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var exported = require(_dependencyMap[4]).default;
  var _default = exports.default = exported;
},430,[1,87,285,140,431]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _RCTSafeAreaViewNativeComponent = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_RCTSafeAreaViewNativeComponent).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _RCTSafeAreaViewNativeComponent[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _RCTSafeAreaViewNativeComponent[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _RCTSafeAreaViewNativeComponent.default;
},431,[432]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeComponentRegistry = require(_dependencyMap[2]);
  var nativeComponentName = 'RCTSafeAreaView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "RCTSafeAreaView",
    validAttributes: {}
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
},432,[1,304,96]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useWindowDimensions;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _Dimensions = _interopRequireDefault(require(_dependencyMap[2]));
  var _react = require(_dependencyMap[3]);
  function useWindowDimensions() {
    var _useState = (0, _react.useState)(() => _Dimensions.default.get('window')),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      dimensions = _useState2[0],
      setDimensions = _useState2[1];
    (0, _react.useEffect)(() => {
      function handleChange(_ref) {
        var window = _ref.window;
        if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {
          setDimensions(window);
        }
      }
      var subscription = _Dimensions.default.addEventListener('change', handleChange);
      handleChange({
        window: _Dimensions.default.get('window')
      });
      return () => {
        subscription.remove();
      };
    }, [dimensions]);
    return dimensions;
  }
},433,[1,29,117,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _RCTInputAccessoryViewNativeComponent = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_RCTInputAccessoryViewNativeComponent).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _RCTInputAccessoryViewNativeComponent[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _RCTInputAccessoryViewNativeComponent[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _RCTInputAccessoryViewNativeComponent.default;
},434,[435]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeComponentRegistry = require(_dependencyMap[2]);
  var nativeComponentName = 'RCTInputAccessoryView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "RCTInputAccessoryView",
    validAttributes: {
      backgroundColor: {
        process: require(_dependencyMap[3]).default
      }
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
},435,[1,304,96,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[1]));
  var _LayoutConformanceNativeComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  var _jsxRuntime = require(_dependencyMap[4]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var isFabricUIManagerInstalled = global?.nativeFabricUIManager != null;
  function LayoutConformance(props) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_LayoutConformanceNativeComponent.default, {
      ...props,
      style: styles.container
    });
  }
  function UnimplementedLayoutConformance(props) {
    return props.children;
  }
  var _default = exports.default = isFabricUIManagerInstalled ? LayoutConformance : UnimplementedLayoutConformance;
  var styles = _StyleSheet.default.create({
    container: {
      display: 'contents'
    }
  });
},436,[1,290,437,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var LayoutConformanceNativeComponent = NativeComponentRegistry.get('LayoutConformance', () => ({
    uiViewClassName: 'LayoutConformance',
    validAttributes: {
      mode: true
    }
  }));
  var _default = exports.default = LayoutConformanceNativeComponent;
},437,[96]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[7]));
  var _LayoutAnimation = _interopRequireDefault(require(_dependencyMap[8]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[9]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[10]));
  var _AccessibilityInfo = _interopRequireDefault(require(_dependencyMap[11]));
  var _View = _interopRequireDefault(require(_dependencyMap[12]));
  var _Keyboard = _interopRequireDefault(require(_dependencyMap[13]));
  var React = _interopRequireWildcard(require(_dependencyMap[14]));
  var _jsxRuntime = require(_dependencyMap[15]);
  var _excluded = ["behavior", "children", "contentContainerStyle", "enabled", "keyboardVerticalOffset", "style", "onLayout"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var KeyboardAvoidingView = /*#__PURE__*/function (_React$Component) {
    function KeyboardAvoidingView(props) {
      var _this;
      (0, _classCallCheck2.default)(this, KeyboardAvoidingView);
      _this = _callSuper(this, KeyboardAvoidingView, [props]);
      _this._frame = null;
      _this._keyboardEvent = null;
      _this._subscriptions = [];
      _this._initialFrameHeight = 0;
      _this._bottom = 0;
      _this._onKeyboardChange = event => {
        _this._keyboardEvent = event;
        _this._updateBottomIfNecessary();
      };
      _this._onKeyboardHide = event => {
        _this._keyboardEvent = null;
        _this._updateBottomIfNecessary();
      };
      _this._onLayout = /*#__PURE__*/function () {
        var _ref = (0, _asyncToGenerator2.default)(function* (event) {
          event.persist();
          var oldFrame = _this._frame;
          _this._frame = event.nativeEvent.layout;
          if (!_this._initialFrameHeight) {
            _this._initialFrameHeight = _this._frame.height;
          }
          if (!oldFrame || oldFrame.height !== _this._frame.height) {
            yield _this._updateBottomIfNecessary();
          }
          if (_this.props.onLayout) {
            _this.props.onLayout(event);
          }
        });
        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }();
      _this._setBottom = value => {
        var enabled = _this.props.enabled ?? true;
        _this._bottom = value;
        if (enabled) {
          _this.setState({
            bottom: value
          });
        }
      };
      _this._updateBottomIfNecessary = /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
        if (_this._keyboardEvent == null) {
          _this._setBottom(0);
          return;
        }
        var _this$_keyboardEvent = _this._keyboardEvent,
          duration = _this$_keyboardEvent.duration,
          easing = _this$_keyboardEvent.easing,
          endCoordinates = _this$_keyboardEvent.endCoordinates;
        var height = yield _this._relativeKeyboardHeight(endCoordinates);
        if (_this._bottom === height) {
          return;
        }
        _this._setBottom(height);
        var enabled = _this.props.enabled ?? true;
        if (enabled && duration && easing) {
          _LayoutAnimation.default.configureNext({
            duration: duration > 10 ? duration : 10,
            update: {
              duration: duration > 10 ? duration : 10,
              type: _LayoutAnimation.default.Types[easing] || 'keyboard'
            }
          });
        }
      });
      _this.state = {
        bottom: 0
      };
      _this.viewRef = /*#__PURE__*/React.createRef();
      return _this;
    }
    (0, _inherits2.default)(KeyboardAvoidingView, _React$Component);
    return (0, _createClass2.default)(KeyboardAvoidingView, [{
      key: "_relativeKeyboardHeight",
      value: function () {
        var _relativeKeyboardHeight2 = (0, _asyncToGenerator2.default)(function* (keyboardFrame) {
          var frame = this._frame;
          if (!frame || !keyboardFrame) {
            return 0;
          }
          if (keyboardFrame.screenY === 0 && (yield _AccessibilityInfo.default.prefersCrossFadeTransitions())) {
            return 0;
          }
          var keyboardY = keyboardFrame.screenY - (this.props.keyboardVerticalOffset ?? 0);
          if (this.props.behavior === 'height') {
            return Math.max(this.state.bottom + frame.y + frame.height - keyboardY, 0);
          }
          return Math.max(frame.y + frame.height - keyboardY, 0);
        });
        function _relativeKeyboardHeight(_x2) {
          return _relativeKeyboardHeight2.apply(this, arguments);
        }
        return _relativeKeyboardHeight;
      }()
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(_, prevState) {
        var enabled = this.props.enabled ?? true;
        if (enabled && this._bottom !== prevState.bottom) {
          this.setState({
            bottom: this._bottom
          });
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (!_Keyboard.default.isVisible()) {
          this._keyboardEvent = null;
          this._setBottom(0);
        }
        {
          this._subscriptions = [_Keyboard.default.addListener('keyboardWillHide', this._onKeyboardHide), _Keyboard.default.addListener('keyboardWillShow', this._onKeyboardChange)];
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._subscriptions.forEach(subscription => {
          subscription.remove();
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          behavior = _this$props.behavior,
          children = _this$props.children,
          contentContainerStyle = _this$props.contentContainerStyle,
          _this$props$enabled = _this$props.enabled,
          enabled = _this$props$enabled === undefined ? true : _this$props$enabled,
          _this$props$keyboardV = _this$props.keyboardVerticalOffset,
          keyboardVerticalOffset = _this$props$keyboardV === undefined ? 0 : _this$props$keyboardV,
          style = _this$props.style,
          onLayout = _this$props.onLayout,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var bottomHeight = enabled === true ? this.state.bottom : 0;
        switch (behavior) {
          case 'height':
            var heightStyle;
            if (this._frame != null && this.state.bottom > 0) {
              heightStyle = {
                height: this._initialFrameHeight - bottomHeight,
                flex: 0
              };
            }
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
              ref: this.viewRef,
              style: _StyleSheet.default.compose(style, heightStyle),
              onLayout: this._onLayout,
              ...props,
              children: children
            });
          case 'position':
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
              ref: this.viewRef,
              style: style,
              onLayout: this._onLayout,
              ...props,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
                style: _StyleSheet.default.compose(contentContainerStyle, {
                  bottom: bottomHeight
                }),
                children: children
              })
            });
          case 'padding':
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
              ref: this.viewRef,
              style: _StyleSheet.default.compose(style, {
                paddingBottom: bottomHeight
              }),
              onLayout: this._onLayout,
              ...props,
              children: children
            });
          default:
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {
              ref: this.viewRef,
              onLayout: this._onLayout,
              style: style,
              ...props,
              children: children
            });
        }
      }
    }]);
  }(React.Component);
  var _default = exports.default = KeyboardAvoidingView;
},438,[1,238,54,10,11,64,66,69,414,290,87,62,285,413,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[6]));
  var _ModalInjection = _interopRequireDefault(require(_dependencyMap[7]));
  var _NativeModalManager = _interopRequireDefault(require(_dependencyMap[8]));
  var _RCTModalHostViewNativeComponent = _interopRequireDefault(require(_dependencyMap[9]));
  var _virtualizedLists = _interopRequireDefault(require(_dependencyMap[10]));
  var _react = _interopRequireDefault(require(_dependencyMap[11]));
  var _jsxRuntime = require(_dependencyMap[12]);
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var ScrollView = require(_dependencyMap[13]).default;
  var View = require(_dependencyMap[14]).default;
  var AppContainer = require(_dependencyMap[15]).default;
  var I18nManager = require(_dependencyMap[16]).default;
  var _require = require(_dependencyMap[17]),
    RootTagContext = _require.RootTagContext;
  var StyleSheet = require(_dependencyMap[18]).default;
  var Platform = require(_dependencyMap[19]).default;
  var VirtualizedListContextResetter = _virtualizedLists.default.VirtualizedListContextResetter;
  var ModalEventEmitter = _NativeModalManager.default != null ? new _NativeEventEmitter.default(_NativeModalManager.default) : null;
  var uniqueModalIdentifier = 0;
  var Modal = /*#__PURE__*/function (_React$Component) {
    function Modal(props) {
      var _this;
      (0, _classCallCheck2.default)(this, Modal);
      _this = _callSuper(this, Modal, [props]);
      _this._identifier = uniqueModalIdentifier++;
      _this.state = {
        isRendered: props.visible === true
      };
      return _this;
    }
    (0, _inherits2.default)(Modal, _React$Component);
    return (0, _createClass2.default)(Modal, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (ModalEventEmitter) {
          this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', event => {
            this.setState({
              isRendered: false
            }, () => {
              if (event.modalID === this._identifier && this.props.onDismiss) {
                this.props.onDismiss();
              }
            });
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        {
          this.setState({
            isRendered: false
          });
        }
        if (this._eventSubscription) {
          this._eventSubscription.remove();
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.visible === false && this.props.visible === true) {
          this.setState({
            isRendered: true
          });
        }
      }
    }, {
      key: "_shouldShowModal",
      value: function _shouldShowModal() {
        {
          return this.props.visible === true || this.state.isRendered === true;
        }
        return this.props.visible === true;
      }
    }, {
      key: "render",
      value: function render() {
        if (!this._shouldShowModal()) {
          return null;
        }
        var containerStyles = {
          backgroundColor: this.props.transparent === true ? 'transparent' : this.props.backdropColor ?? 'white'
        };
        var animationType = this.props.animationType || 'none';
        var presentationStyle = this.props.presentationStyle;
        if (!presentationStyle) {
          presentationStyle = 'fullScreen';
          if (this.props.transparent === true) {
            presentationStyle = 'overFullScreen';
          }
        }
        var innerChildren = this.props.children;
        var onDismiss = () => {
          {
            this.setState({
              isRendered: false
            }, () => {
              if (this.props.onDismiss) {
                this.props.onDismiss();
              }
            });
          }
        };
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_RCTModalHostViewNativeComponent.default, {
          animationType: animationType,
          presentationStyle: presentationStyle,
          transparent: this.props.transparent,
          hardwareAccelerated: this.props.hardwareAccelerated,
          onRequestClose: this.props.onRequestClose,
          onShow: this.props.onShow,
          onDismiss: onDismiss,
          visible: this.props.visible,
          statusBarTranslucent: this.props.statusBarTranslucent,
          navigationBarTranslucent: this.props.navigationBarTranslucent,
          identifier: this._identifier,
          style: styles.modal,
          onStartShouldSetResponder: this._shouldSetResponder,
          supportedOrientations: this.props.supportedOrientations,
          onOrientationChange: this.props.onOrientationChange,
          testID: this.props.testID,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(VirtualizedListContextResetter, {
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ScrollView.Context.Provider, {
              value: null,
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(View, {
                style: [styles.container, containerStyles],
                collapsable: false,
                children: innerChildren
              })
            })
          })
        });
      }
    }, {
      key: "_shouldSetResponder",
      value: function _shouldSetResponder() {
        return true;
      }
    }]);
  }(_react.default.Component);
  Modal.defaultProps = {
    visible: true,
    hardwareAccelerated: false
  };
  Modal.contextType = RootTagContext;
  var side = I18nManager.getConstants().isRTL ? 'right' : 'left';
  var styles = StyleSheet.create({
    modal: {
      position: 'absolute'
    },
    container: {
      [side]: 0,
      top: 0,
      flex: 1
    }
  });
  var ExportedModal = _ModalInjection.default.unstable_Modal ?? Modal;
  var _default = exports.default = ExportedModal;
},439,[1,10,11,64,66,69,242,440,441,443,370,140,288,401,285,283,445,292,290,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = exports.default = {
    unstable_Modal: null
  };
},440,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeModalManager = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeModalManager).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeModalManager[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeModalManager[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeModalManager.default;
},441,[442]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('ModalManager');
},442,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _RCTModalHostViewNativeComponent = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_RCTModalHostViewNativeComponent).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _RCTModalHostViewNativeComponent[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _RCTModalHostViewNativeComponent[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _RCTModalHostViewNativeComponent.default;
},443,[444]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = undefined;
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[1]));
  var NativeComponentRegistry = require(_dependencyMap[2]);
  var _require = require(_dependencyMap[3]),
    ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
  var nativeComponentName = 'RCTModalHostView';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "RCTModalHostView",
    directEventTypes: {
      topRequestClose: {
        registrationName: "onRequestClose"
      },
      topShow: {
        registrationName: "onShow"
      },
      topDismiss: {
        registrationName: "onDismiss"
      },
      topOrientationChange: {
        registrationName: "onOrientationChange"
      }
    },
    validAttributes: {
      animationType: true,
      presentationStyle: true,
      transparent: true,
      statusBarTranslucent: true,
      navigationBarTranslucent: true,
      hardwareAccelerated: true,
      visible: true,
      animated: true,
      supportedOrientations: true,
      identifier: true,
      ...ConditionallyIgnoredEventHandlers({
        onRequestClose: true,
        onShow: true,
        onDismiss: true,
        onOrientationChange: true
      })
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
},444,[1,304,96,139]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeI18nManager = _interopRequireDefault(require(_dependencyMap[1]));
  var i18nConstants = getI18nManagerConstants();
  function getI18nManagerConstants() {
    if (_NativeI18nManager.default) {
      var _NativeI18nManager$ge = _NativeI18nManager.default.getConstants(),
        isRTL = _NativeI18nManager$ge.isRTL,
        doLeftAndRightSwapInRTL = _NativeI18nManager$ge.doLeftAndRightSwapInRTL,
        localeIdentifier = _NativeI18nManager$ge.localeIdentifier;
      return {
        isRTL,
        doLeftAndRightSwapInRTL,
        localeIdentifier
      };
    }
    return {
      isRTL: false,
      doLeftAndRightSwapInRTL: true
    };
  }
  var _default = exports.default = {
    getConstants: () => {
      return i18nConstants;
    },
    allowRTL: shouldAllow => {
      if (!_NativeI18nManager.default) {
        return;
      }
      _NativeI18nManager.default.allowRTL(shouldAllow);
    },
    forceRTL: shouldForce => {
      if (!_NativeI18nManager.default) {
        return;
      }
      _NativeI18nManager.default.forceRTL(shouldForce);
    },
    swapLeftAndRightInRTL: flipStyles => {
      if (!_NativeI18nManager.default) {
        return;
      }
      _NativeI18nManager.default.swapLeftAndRightInRTL(flipStyles);
    },
    isRTL: i18nConstants.isRTL,
    doLeftAndRightSwapInRTL: i18nConstants.doLeftAndRightSwapInRTL
  };
},445,[1,446]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeI18nManager = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeI18nManager).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeI18nManager[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeI18nManager[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeI18nManager.default;
},446,[447]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('I18nManager');
},447,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _PressabilityDebug = require(_dependencyMap[3]);
  var _usePressability = _interopRequireDefault(require(_dependencyMap[4]));
  var _useMergeRefs = _interopRequireDefault(require(_dependencyMap[5]));
  var _View = _interopRequireDefault(require(_dependencyMap[6]));
  var _useAndroidRippleForView = _interopRequireDefault(require(_dependencyMap[7]));
  var _react = _interopRequireWildcard(require(_dependencyMap[8]));
  var React = _react;
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["accessible", "accessibilityState", "aria-live", "android_disableSound", "android_ripple", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-label", "aria-selected", "cancelable", "children", "delayHoverIn", "delayHoverOut", "delayLongPress", "disabled", "focusable", "hitSlop", "onHoverIn", "onHoverOut", "onLongPress", "onPress", "onPressIn", "onPressOut", "pressRetentionOffset", "style", "testOnly_pressed", "unstable_pressDelay"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function Pressable(props, forwardedRef) {
    var accessible = props.accessible,
      accessibilityState = props.accessibilityState,
      ariaLive = props['aria-live'],
      android_disableSound = props.android_disableSound,
      android_ripple = props.android_ripple,
      ariaBusy = props['aria-busy'],
      ariaChecked = props['aria-checked'],
      ariaDisabled = props['aria-disabled'],
      ariaExpanded = props['aria-expanded'],
      ariaLabel = props['aria-label'],
      ariaSelected = props['aria-selected'],
      cancelable = props.cancelable,
      children = props.children,
      delayHoverIn = props.delayHoverIn,
      delayHoverOut = props.delayHoverOut,
      delayLongPress = props.delayLongPress,
      disabled = props.disabled,
      focusable = props.focusable,
      hitSlop = props.hitSlop,
      onHoverIn = props.onHoverIn,
      onHoverOut = props.onHoverOut,
      onLongPress = props.onLongPress,
      onPress = props.onPress,
      onPressIn = props.onPressIn,
      onPressOut = props.onPressOut,
      pressRetentionOffset = props.pressRetentionOffset,
      style = props.style,
      testOnly_pressed = props.testOnly_pressed,
      unstable_pressDelay = props.unstable_pressDelay,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var viewRef = (0, _react.useRef)(null);
    var mergedRef = (0, _useMergeRefs.default)(forwardedRef, viewRef);
    var android_rippleConfig = (0, _useAndroidRippleForView.default)(android_ripple, viewRef);
    var _usePressState = usePressState(testOnly_pressed === true),
      _usePressState2 = (0, _slicedToArray2.default)(_usePressState, 2),
      pressed = _usePressState2[0],
      setPressed = _usePressState2[1];
    var shouldUpdatePressed = typeof children === 'function' || typeof style === 'function';
    var _accessibilityState = {
      busy: ariaBusy ?? accessibilityState?.busy,
      checked: ariaChecked ?? accessibilityState?.checked,
      disabled: ariaDisabled ?? accessibilityState?.disabled,
      expanded: ariaExpanded ?? accessibilityState?.expanded,
      selected: ariaSelected ?? accessibilityState?.selected
    };
    _accessibilityState = disabled != null ? {
      ..._accessibilityState,
      disabled
    } : _accessibilityState;
    var accessibilityValue = {
      max: props['aria-valuemax'] ?? props.accessibilityValue?.max,
      min: props['aria-valuemin'] ?? props.accessibilityValue?.min,
      now: props['aria-valuenow'] ?? props.accessibilityValue?.now,
      text: props['aria-valuetext'] ?? props.accessibilityValue?.text
    };
    var accessibilityLiveRegion = ariaLive === 'off' ? 'none' : ariaLive ?? props.accessibilityLiveRegion;
    var accessibilityLabel = ariaLabel ?? props.accessibilityLabel;
    var restPropsWithDefaults = {
      ...restProps,
      ...android_rippleConfig?.viewProps,
      accessible: accessible !== false,
      accessibilityViewIsModal: restProps['aria-modal'] ?? restProps.accessibilityViewIsModal,
      accessibilityLiveRegion,
      accessibilityLabel,
      accessibilityState: _accessibilityState,
      focusable: focusable !== false,
      accessibilityValue,
      hitSlop
    };
    var config = (0, _react.useMemo)(() => ({
      cancelable,
      disabled,
      hitSlop,
      pressRectOffset: pressRetentionOffset,
      android_disableSound,
      delayHoverIn,
      delayHoverOut,
      delayLongPress,
      delayPressIn: unstable_pressDelay,
      onHoverIn,
      onHoverOut,
      onLongPress,
      onPress,
      onPressIn(event) {
        if (android_rippleConfig != null) {
          android_rippleConfig.onPressIn(event);
        }
        shouldUpdatePressed && setPressed(true);
        if (onPressIn != null) {
          onPressIn(event);
        }
      },
      onPressMove: android_rippleConfig?.onPressMove,
      onPressOut(event) {
        if (android_rippleConfig != null) {
          android_rippleConfig.onPressOut(event);
        }
        shouldUpdatePressed && setPressed(false);
        if (onPressOut != null) {
          onPressOut(event);
        }
      }
    }), [android_disableSound, android_rippleConfig, cancelable, delayHoverIn, delayHoverOut, delayLongPress, disabled, hitSlop, onHoverIn, onHoverOut, onLongPress, onPress, onPressIn, onPressOut, pressRetentionOffset, setPressed, shouldUpdatePressed, unstable_pressDelay]);
    var eventHandlers = (0, _usePressability.default)(config);
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_View.default, {
      ...restPropsWithDefaults,
      ...eventHandlers,
      ref: mergedRef,
      style: typeof style === 'function' ? style({
        pressed
      }) : style,
      collapsable: false,
      children: [typeof children === 'function' ? children({
        pressed
      }) : children, null]
    });
  }
  function usePressState(forcePressed) {
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      pressed = _useState2[0],
      setPressed = _useState2[1];
    return [pressed || forcePressed, setPressed];
  }
  var MemoedPressable = /*#__PURE__*/React.memo(/*#__PURE__*/React.forwardRef(Pressable));
  MemoedPressable.displayName = 'Pressable';
  var _default = exports.default = MemoedPressable;
},448,[1,29,238,309,311,359,285,449,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useAndroidRippleForView;
  var _processColor = _interopRequireDefault(require(_dependencyMap[1]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[2]));
  var _View = _interopRequireDefault(require(_dependencyMap[3]));
  var _ViewNativeComponent = require(_dependencyMap[4]);
  var _invariant = _interopRequireDefault(require(_dependencyMap[5]));
  var _react = _interopRequireWildcard(require(_dependencyMap[6]));
  var React = _react;
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function useAndroidRippleForView(rippleConfig, viewRef) {
    var _ref = rippleConfig ?? {},
      color = _ref.color,
      borderless = _ref.borderless,
      radius = _ref.radius,
      foreground = _ref.foreground;
    return (0, _react.useMemo)(() => {
      return null;
    }, [borderless, color, foreground, radius, viewRef]);
  }
},449,[1,99,87,285,287,42,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = exports.default = require(_dependencyMap[0]).default;
},450,[427]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _processColor = _interopRequireDefault(require(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  var _NativeStatusBarManagerAndroid = _interopRequireDefault(require(_dependencyMap[8]));
  var _NativeStatusBarManagerIOS = _interopRequireDefault(require(_dependencyMap[9]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[10]));
  var React = _interopRequireWildcard(require(_dependencyMap[11]));
  var _StatusBar;
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  function mergePropsStack(propsStack, defaultValues) {
    return propsStack.reduce((prev, cur) => {
      for (var prop in cur) {
        if (cur[prop] != null) {
          prev[prop] = cur[prop];
        }
      }
      return prev;
    }, {
      ...defaultValues
    });
  }
  function createStackEntry(props) {
    var animated = props.animated ?? false;
    var showHideTransition = props.showHideTransition ?? 'fade';
    return {
      backgroundColor: props.backgroundColor != null ? {
        value: props.backgroundColor,
        animated
      } : null,
      barStyle: props.barStyle != null ? {
        value: props.barStyle,
        animated
      } : null,
      translucent: props.translucent,
      hidden: props.hidden != null ? {
        value: props.hidden,
        animated,
        transition: showHideTransition
      } : null,
      networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
    };
  }
  var StatusBar = /*#__PURE__*/function (_React$Component) {
    function StatusBar() {
      var _this;
      (0, _classCallCheck2.default)(this, StatusBar);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, StatusBar, [...args]);
      _this._stackEntry = null;
      return _this;
    }
    (0, _inherits2.default)(StatusBar, _React$Component);
    return (0, _createClass2.default)(StatusBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._stackEntry = StatusBar.pushStackEntry(this.props);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._stackEntry != null) {
          StatusBar.popStackEntry(this._stackEntry);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        if (this._stackEntry != null) {
          this._stackEntry = StatusBar.replaceStackEntry(this._stackEntry, this.props);
        }
      }
    }, {
      key: "render",
      value: function render() {
        return null;
      }
    }], [{
      key: "setHidden",
      value: function setHidden(hidden, animation) {
        animation = animation || 'none';
        StatusBar._defaultProps.hidden.value = hidden;
        {
          _NativeStatusBarManagerIOS.default.setHidden(hidden, animation);
        }
      }
    }, {
      key: "setBarStyle",
      value: function setBarStyle(style, animated) {
        animated = animated || false;
        StatusBar._defaultProps.barStyle.value = style;
        {
          _NativeStatusBarManagerIOS.default.setStyle(style, animated);
        }
      }
    }, {
      key: "setNetworkActivityIndicatorVisible",
      value: function setNetworkActivityIndicatorVisible(visible) {
        StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
        _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(visible);
      }
    }, {
      key: "setBackgroundColor",
      value: function setBackgroundColor(color, animated) {
        {
          console.warn('`setBackgroundColor` is only available on Android');
          return;
        }
        animated = animated || false;
        StatusBar._defaultProps.backgroundColor.value = color;
        var processedColor = (0, _processColor.default)(color);
        if (processedColor == null) {
          console.warn(`\`StatusBar.setBackgroundColor\`: Color ${String(color)} parsed to null or undefined`);
          return;
        }
        (0, _invariant.default)(typeof processedColor === 'number', 'Unexpected color given for StatusBar.setBackgroundColor');
        _NativeStatusBarManagerAndroid.default.setColor(processedColor, animated);
      }
    }, {
      key: "setTranslucent",
      value: function setTranslucent(translucent) {
        {
          console.warn('`setTranslucent` is only available on Android');
          return;
        }
        StatusBar._defaultProps.translucent = translucent;
        _NativeStatusBarManagerAndroid.default.setTranslucent(translucent);
      }
    }, {
      key: "pushStackEntry",
      value: function pushStackEntry(props) {
        var entry = createStackEntry(props);
        StatusBar._propsStack.push(entry);
        StatusBar._updatePropsStack();
        return entry;
      }
    }, {
      key: "popStackEntry",
      value: function popStackEntry(entry) {
        var index = StatusBar._propsStack.indexOf(entry);
        if (index !== -1) {
          StatusBar._propsStack.splice(index, 1);
        }
        StatusBar._updatePropsStack();
      }
    }, {
      key: "replaceStackEntry",
      value: function replaceStackEntry(entry, props) {
        var newEntry = createStackEntry(props);
        var index = StatusBar._propsStack.indexOf(entry);
        if (index !== -1) {
          StatusBar._propsStack[index] = newEntry;
        }
        StatusBar._updatePropsStack();
        return newEntry;
      }
    }]);
  }(React.Component);
  _StatusBar = StatusBar;
  StatusBar._propsStack = [];
  StatusBar._defaultProps = createStackEntry({
    backgroundColor: 'black',
    barStyle: 'default',
    translucent: false,
    hidden: false,
    networkActivityIndicatorVisible: false
  });
  StatusBar._updateImmediate = null;
  StatusBar._currentValues = null;
  StatusBar.currentHeight = null;
  StatusBar._updatePropsStack = () => {
    clearImmediate(_StatusBar._updateImmediate);
    _StatusBar._updateImmediate = setImmediate(() => {
      var oldProps = _StatusBar._currentValues;
      var mergedProps = mergePropsStack(_StatusBar._propsStack, _StatusBar._defaultProps);
      {
        if (!oldProps || oldProps.barStyle?.value !== mergedProps.barStyle.value) {
          _NativeStatusBarManagerIOS.default.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated || false);
        }
        if (!oldProps || oldProps.hidden?.value !== mergedProps.hidden.value) {
          _NativeStatusBarManagerIOS.default.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
        }
        if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
          _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
        }
      }
      _StatusBar._currentValues = mergedProps;
    });
  };
  var _default = exports.default = StatusBar;
},451,[1,10,11,64,66,69,99,87,452,454,42,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeStatusBarManagerAndroid = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeStatusBarManagerAndroid).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeStatusBarManagerAndroid[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeStatusBarManagerAndroid[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeStatusBarManagerAndroid.default;
},452,[453]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var NativeModule = TurboModuleRegistry.getEnforcing('StatusBarManager');
  var constants = null;
  var NativeStatusBarManager = {
    getConstants() {
      if (constants == null) {
        constants = NativeModule.getConstants();
      }
      return constants;
    },
    setColor(color, animated) {
      NativeModule.setColor(color, animated);
    },
    setTranslucent(translucent) {
      NativeModule.setTranslucent(translucent);
    },
    setStyle(statusBarStyle) {
      NativeModule.setStyle(statusBarStyle);
    },
    setHidden(hidden) {
      NativeModule.setHidden(hidden);
    }
  };
  var _default = exports.default = NativeStatusBarManager;
},453,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeStatusBarManagerIOS = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeStatusBarManagerIOS).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeStatusBarManagerIOS[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeStatusBarManagerIOS[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeStatusBarManagerIOS.default;
},454,[455]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var NativeModule = TurboModuleRegistry.getEnforcing('StatusBarManager');
  var constants = null;
  var NativeStatusBarManager = {
    getConstants() {
      if (constants == null) {
        constants = NativeModule.getConstants();
      }
      return constants;
    },
    getHeight(callback) {
      NativeModule.getHeight(callback);
    },
    setNetworkActivityIndicatorVisible(visible) {
      NativeModule.setNetworkActivityIndicatorVisible(visible);
    },
    addListener(eventType) {
      NativeModule.addListener(eventType);
    },
    removeListeners(count) {
      NativeModule.removeListeners(count);
    },
    setStyle(statusBarStyle, animated) {
      NativeModule.setStyle(statusBarStyle, animated);
    },
    setHidden(hidden, withAnimation) {
      NativeModule.setHidden(hidden, withAnimation);
    }
  };
  var _default = exports.default = NativeStatusBarManager;
},455,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[4]));
  var _useMergeRefs = _interopRequireDefault(require(_dependencyMap[5]));
  var _AndroidSwitchNativeComponent = _interopRequireWildcard(require(_dependencyMap[6]));
  var _SwitchNativeComponent = _interopRequireWildcard(require(_dependencyMap[7]));
  var React = _interopRequireWildcard(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  var _excluded = ["disabled", "ios_backgroundColor", "onChange", "onValueChange", "style", "thumbColor", "trackColor", "value"],
    _excluded2 = ["onTintColor", "tintColor"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var returnsFalse = () => false;
  var returnsTrue = () => true;
  var Switch = /*#__PURE__*/React.forwardRef(function Switch(props, forwardedRef) {
    var disabled = props.disabled,
      ios_backgroundColor = props.ios_backgroundColor,
      onChange = props.onChange,
      onValueChange = props.onValueChange,
      style = props.style,
      thumbColor = props.thumbColor,
      trackColor = props.trackColor,
      value = props.value,
      restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var trackColorForFalse = trackColor?.false;
    var trackColorForTrue = trackColor?.true;
    var nativeSwitchRef = React.useRef(null);
    var ref = (0, _useMergeRefs.default)(nativeSwitchRef, forwardedRef);
    var _React$useState = React.useState({
        value: null
      }),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      native = _React$useState2[0],
      setNative = _React$useState2[1];
    var handleChange = event => {
      onChange?.(event);
      onValueChange?.(event.nativeEvent.value);
      setNative({
        value: event.nativeEvent.value
      });
    };
    React.useLayoutEffect(() => {
      var jsValue = value === true;
      var shouldUpdateNativeSwitch = native.value != null && native.value !== jsValue;
      if (shouldUpdateNativeSwitch && nativeSwitchRef.current?.setNativeProps != null) {
        {
          _SwitchNativeComponent.Commands.setValue(nativeSwitchRef.current, jsValue);
        }
      }
    }, [value, native]);
    {
      var _platformProps = {
        disabled,
        onTintColor: trackColorForTrue,
        style: _StyleSheet.default.compose({
          height: 31,
          width: 51
        }, _StyleSheet.default.compose(style, ios_backgroundColor == null ? null : {
          backgroundColor: ios_backgroundColor,
          borderRadius: 16
        })),
        thumbTintColor: thumbColor,
        tintColor: trackColorForFalse,
        value: value === true
      };
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SwitchNativeComponent.default, {
        ...restProps,
        ..._platformProps,
        accessibilityRole: props.accessibilityRole ?? 'switch',
        onChange: handleChange,
        onResponderTerminationRequest: returnsFalse,
        onStartShouldSetResponder: returnsTrue,
        ref: ref
      });
    }
  });
  var _default = exports.default = Switch;
},456,[1,29,238,290,87,359,457,459,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _AndroidSwitchNativeComponent = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_AndroidSwitchNativeComponent).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _AndroidSwitchNativeComponent[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _AndroidSwitchNativeComponent[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _AndroidSwitchNativeComponent.default;
},457,[458]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var NativeComponentRegistry = require(_dependencyMap[4]);
  var _require = require(_dependencyMap[5]),
    ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
  var _require2 = require(_dependencyMap[6]),
    dispatchCommand = _require2.dispatchCommand;
  var nativeComponentName = 'AndroidSwitch';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "AndroidSwitch",
    bubblingEventTypes: {
      topChange: {
        phasedRegistrationNames: {
          captured: "onChangeCapture",
          bubbled: "onChange"
        }
      }
    },
    validAttributes: {
      disabled: true,
      enabled: true,
      thumbColor: {
        process: require(_dependencyMap[7]).default
      },
      trackColorForFalse: {
        process: require(_dependencyMap[7]).default
      },
      trackColorForTrue: {
        process: require(_dependencyMap[7]).default
      },
      value: true,
      on: true,
      thumbTintColor: {
        process: require(_dependencyMap[7]).default
      },
      trackTintColor: {
        process: require(_dependencyMap[7]).default
      },
      ...ConditionallyIgnoredEventHandlers({
        onChange: true
      })
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
  var Commands = exports.Commands = {
    setNativeValue(ref, value) {
      dispatchCommand(ref, "setNativeValue", [value]);
    }
  };
},458,[1,142,304,140,96,139,74,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _SwitchNativeComponent = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_SwitchNativeComponent).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _SwitchNativeComponent[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _SwitchNativeComponent[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _SwitchNativeComponent.default;
},459,[460]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[1]));
  var _codegenNativeComponent = _interopRequireDefault(require(_dependencyMap[2]));
  var React = _interopRequireWildcard(require(_dependencyMap[3]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var NativeComponentRegistry = require(_dependencyMap[4]);
  var _require = require(_dependencyMap[5]),
    ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
  var _require2 = require(_dependencyMap[6]),
    dispatchCommand = _require2.dispatchCommand;
  var nativeComponentName = 'RCTSwitch';
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: "RCTSwitch",
    bubblingEventTypes: {
      topChange: {
        phasedRegistrationNames: {
          captured: "onChangeCapture",
          bubbled: "onChange"
        }
      }
    },
    validAttributes: {
      disabled: true,
      value: true,
      tintColor: {
        process: require(_dependencyMap[7]).default
      },
      onTintColor: {
        process: require(_dependencyMap[7]).default
      },
      thumbTintColor: {
        process: require(_dependencyMap[7]).default
      },
      thumbColor: {
        process: require(_dependencyMap[7]).default
      },
      trackColorForFalse: {
        process: require(_dependencyMap[7]).default
      },
      trackColorForTrue: {
        process: require(_dependencyMap[7]).default
      },
      ...ConditionallyIgnoredEventHandlers({
        onChange: true
      })
    }
  };
  var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);
  var Commands = exports.Commands = {
    setValue(ref, value) {
      dispatchCommand(ref, "setValue", [value]);
    }
  };
},460,[1,142,304,140,96,139,74,99]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[2]));
  var ReactNativeFeatureFlags = _interopRequireWildcard(require(_dependencyMap[3]));
  var _usePressability2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _flattenStyle = _interopRequireDefault(require(_dependencyMap[5]));
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[6]));
  var _Text = _interopRequireDefault(require(_dependencyMap[7]));
  var _TextAncestor = _interopRequireDefault(require(_dependencyMap[8]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[9]));
  var _useMergeRefs = _interopRequireDefault(require(_dependencyMap[10]));
  var _TextInputState = _interopRequireDefault(require(_dependencyMap[11]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[12]));
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[13]));
  var _react = _interopRequireWildcard(require(_dependencyMap[14]));
  var React = _react;
  var _jsxRuntime = require(_dependencyMap[15]);
  var _excluded = ["aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-selected", "accessibilityState", "id", "tabIndex", "selection", "selectionColor", "selectionHandleColor", "cursorColor"],
    _excluded2 = ["onBlur", "onFocus"],
    _excluded3 = ["allowFontScaling", "rejectResponderTermination", "underlineColorAndroid", "autoComplete", "textContentType", "readOnly", "editable", "enterKeyHint", "returnKeyType", "inputMode", "showSoftInputOnFocus", "keyboardType"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var AndroidTextInput;
  var AndroidTextInputCommands;
  var RCTSinglelineTextInputView;
  var RCTSinglelineTextInputNativeCommands;
  var RCTMultilineTextInputView;
  var RCTMultilineTextInputNativeCommands;
  {
    RCTSinglelineTextInputView = require(_dependencyMap[16]).default;
    RCTSinglelineTextInputNativeCommands = require(_dependencyMap[16]).Commands;
    RCTMultilineTextInputView = require(_dependencyMap[17]).default;
    RCTMultilineTextInputNativeCommands = require(_dependencyMap[17]).Commands;
  }
  var emptyFunctionThatReturnsTrue = () => true;
  function useTextInputStateSynchronization_STATE(_ref) {
    var props = _ref.props,
      mostRecentEventCount = _ref.mostRecentEventCount,
      selection = _ref.selection,
      inputRef = _ref.inputRef,
      text = _ref.text,
      viewCommands = _ref.viewCommands;
    var _useState = (0, _react.useState)(props.value),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      lastNativeText = _useState2[0],
      setLastNativeText = _useState2[1];
    var _useState3 = (0, _react.useState)({
        selection: {
          start: -1,
          end: -1
        },
        mostRecentEventCount: mostRecentEventCount
      }),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      lastNativeSelectionState = _useState4[0],
      setLastNativeSelection = _useState4[1];
    var lastNativeSelection = lastNativeSelectionState.selection;
    (0, _react.useLayoutEffect)(() => {
      var nativeUpdate = {};
      if (lastNativeText !== props.value && typeof props.value === 'string') {
        nativeUpdate.text = props.value;
        setLastNativeText(props.value);
      }
      if (selection && lastNativeSelection && (lastNativeSelection.start !== selection.start || lastNativeSelection.end !== selection.end)) {
        nativeUpdate.selection = selection;
        setLastNativeSelection({
          selection,
          mostRecentEventCount
        });
      }
      if (Object.keys(nativeUpdate).length === 0) {
        return;
      }
      if (inputRef.current != null) {
        viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, text, selection?.start ?? -1, selection?.end ?? -1);
      }
    }, [mostRecentEventCount, inputRef, props.value, props.defaultValue, lastNativeText, selection, lastNativeSelection, text, viewCommands]);
    return {
      setLastNativeText,
      setLastNativeSelection
    };
  }
  function useTextInputStateSynchronization_REFS(_ref2) {
    var props = _ref2.props,
      mostRecentEventCount = _ref2.mostRecentEventCount,
      selection = _ref2.selection,
      inputRef = _ref2.inputRef,
      text = _ref2.text,
      viewCommands = _ref2.viewCommands;
    var lastNativeTextRef = (0, _react.useRef)(props.value);
    var lastNativeSelectionRef = (0, _react.useRef)({
      selection: {
        start: -1,
        end: -1
      },
      mostRecentEventCount: mostRecentEventCount
    });
    (0, _react.useLayoutEffect)(() => {
      var nativeUpdate = {};
      var lastNativeSelection = lastNativeSelectionRef.current.selection;
      if (lastNativeTextRef.current !== props.value && typeof props.value === 'string') {
        nativeUpdate.text = props.value;
        lastNativeTextRef.current = props.value;
      }
      if (selection && lastNativeSelection && (lastNativeSelection.start !== selection.start || lastNativeSelection.end !== selection.end)) {
        nativeUpdate.selection = selection;
        lastNativeSelectionRef.current = {
          selection,
          mostRecentEventCount
        };
      }
      if (Object.keys(nativeUpdate).length === 0) {
        return;
      }
      if (inputRef.current != null) {
        viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, text, selection?.start ?? -1, selection?.end ?? -1);
      }
    }, [mostRecentEventCount, inputRef, props.value, props.defaultValue, selection, text, viewCommands]);
    return {
      setLastNativeText: lastNativeText => {
        lastNativeTextRef.current = lastNativeText;
      },
      setLastNativeSelection: lastNativeSelection => {
        lastNativeSelectionRef.current = lastNativeSelection;
      }
    };
  }
  function InternalTextInput(props) {
    var ariaBusy = props['aria-busy'],
      ariaChecked = props['aria-checked'],
      ariaDisabled = props['aria-disabled'],
      ariaExpanded = props['aria-expanded'],
      ariaSelected = props['aria-selected'],
      accessibilityState = props.accessibilityState,
      id = props.id,
      tabIndex = props.tabIndex,
      propsSelection = props.selection,
      selectionColor = props.selectionColor,
      selectionHandleColor = props.selectionHandleColor,
      cursorColor = props.cursorColor,
      otherProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var inputRef = (0, _react.useRef)(null);
    var selection = propsSelection == null ? null : {
      start: propsSelection.start,
      end: propsSelection.end ?? propsSelection.start
    };
    var text = typeof props.value === 'string' ? props.value : typeof props.defaultValue === 'string' ? props.defaultValue : undefined;
    var viewCommands = AndroidTextInputCommands || (props.multiline === true ? RCTMultilineTextInputNativeCommands : RCTSinglelineTextInputNativeCommands);
    var _useState5 = (0, _react.useState)(0),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      mostRecentEventCount = _useState6[0],
      setMostRecentEventCount = _useState6[1];
    var useTextInputStateSynchronization = ReactNativeFeatureFlags.useRefsForTextInputState() ? useTextInputStateSynchronization_REFS : useTextInputStateSynchronization_STATE;
    var _useTextInputStateSyn = useTextInputStateSynchronization({
        props,
        inputRef,
        mostRecentEventCount,
        selection,
        text,
        viewCommands
      }),
      setLastNativeText = _useTextInputStateSyn.setLastNativeText,
      setLastNativeSelection = _useTextInputStateSyn.setLastNativeSelection;
    (0, _react.useLayoutEffect)(() => {
      var inputRefValue = inputRef.current;
      if (inputRefValue != null) {
        _TextInputState.default.registerInput(inputRefValue);
        return () => {
          _TextInputState.default.unregisterInput(inputRefValue);
          if (_TextInputState.default.currentlyFocusedInput() === inputRefValue) {
            (0, _nullthrows.default)(inputRefValue).blur();
          }
        };
      }
    }, []);
    var setLocalRef = (0, _react.useCallback)(instance => {
      inputRef.current = instance;
      if (instance != null) {
        Object.assign(instance, {
          clear() {
            if (inputRef.current != null) {
              viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, '', 0, 0);
            }
          },
          isFocused() {
            return _TextInputState.default.currentlyFocusedInput() === inputRef.current;
          },
          getNativeRef() {
            return inputRef.current;
          },
          setSelection(start, end) {
            if (inputRef.current != null) {
              viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, null, start, end);
            }
          }
        });
      }
    }, [mostRecentEventCount, viewCommands]);
    var ref = (0, _useMergeRefs.default)(setLocalRef, props.forwardedRef);
    var _onChange = event => {
      var currentText = event.nativeEvent.text;
      props.onChange && props.onChange(event);
      props.onChangeText && props.onChangeText(currentText);
      if (inputRef.current == null) {
        return;
      }
      setLastNativeText(currentText);
      setMostRecentEventCount(event.nativeEvent.eventCount);
    };
    var _onSelectionChange = event => {
      props.onSelectionChange && props.onSelectionChange(event);
      if (inputRef.current == null) {
        return;
      }
      setLastNativeSelection({
        selection: event.nativeEvent.selection,
        mostRecentEventCount
      });
    };
    var _onFocus = event => {
      _TextInputState.default.focusInput(inputRef.current);
      if (props.onFocus) {
        props.onFocus(event);
      }
    };
    var _onBlur = event => {
      _TextInputState.default.blurInput(inputRef.current);
      if (props.onBlur) {
        props.onBlur(event);
      }
    };
    var _onScroll = event => {
      props.onScroll && props.onScroll(event);
    };
    var textInput = null;
    var multiline = props.multiline ?? false;
    var submitBehavior;
    if (props.submitBehavior != null) {
      if (!multiline && props.submitBehavior === 'newline') {
        submitBehavior = 'blurAndSubmit';
      } else {
        submitBehavior = props.submitBehavior;
      }
    } else if (multiline) {
      if (props.blurOnSubmit === true) {
        submitBehavior = 'blurAndSubmit';
      } else {
        submitBehavior = 'newline';
      }
    } else {
      if (props.blurOnSubmit !== false) {
        submitBehavior = 'blurAndSubmit';
      } else {
        submitBehavior = 'submit';
      }
    }
    var accessible = props.accessible !== false;
    var focusable = props.focusable !== false;
    var editable = props.editable,
      hitSlop = props.hitSlop,
      onPress = props.onPress,
      onPressIn = props.onPressIn,
      onPressOut = props.onPressOut,
      rejectResponderTermination = props.rejectResponderTermination;
    var config = React.useMemo(() => ({
      hitSlop,
      onPress: event => {
        onPress?.(event);
        if (editable !== false) {
          if (inputRef.current != null) {
            inputRef.current.focus();
          }
        }
      },
      onPressIn: onPressIn,
      onPressOut: onPressOut,
      cancelable: !rejectResponderTermination
    }), [editable, hitSlop, onPress, onPressIn, onPressOut, rejectResponderTermination]);
    var caretHidden = props.caretHidden;
    if (_Platform.default.isTesting) {
      caretHidden = true;
    }
    var _usePressability = (0, _usePressability2.default)(config),
      onBlur = _usePressability.onBlur,
      onFocus = _usePressability.onFocus,
      eventHandlers = (0, _objectWithoutProperties2.default)(_usePressability, _excluded2);
    var _accessibilityState;
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
      _accessibilityState = {
        busy: ariaBusy ?? accessibilityState?.busy,
        checked: ariaChecked ?? accessibilityState?.checked,
        disabled: ariaDisabled ?? accessibilityState?.disabled,
        expanded: ariaExpanded ?? accessibilityState?.expanded,
        selected: ariaSelected ?? accessibilityState?.selected
      };
    }
    var _style = props.style;
    var flattenedStyle = (0, _flattenStyle.default)(props.style);
    if (flattenedStyle != null) {
      var overrides = null;
      if (typeof flattenedStyle?.fontWeight === 'number') {
        overrides = overrides || {};
        overrides.fontWeight = flattenedStyle.fontWeight.toString();
      }
      if (flattenedStyle.verticalAlign != null) {
        overrides = overrides || {};
        overrides.textAlignVertical = verticalAlignToTextAlignVerticalMap[flattenedStyle.verticalAlign];
        overrides.verticalAlign = undefined;
      }
      if (overrides != null) {
        _style = [_style, overrides];
      }
    }
    {
      var RCTTextInputView = props.multiline === true ? RCTMultilineTextInputView : RCTSinglelineTextInputView;
      var useMultilineDefaultStyle = props.multiline === true && (flattenedStyle == null || flattenedStyle.padding == null && flattenedStyle.paddingVertical == null && flattenedStyle.paddingTop == null);
      textInput = /*#__PURE__*/(0, _jsxRuntime.jsx)(RCTTextInputView, {
        ref: ref,
        ...otherProps,
        ...eventHandlers,
        accessibilityState: _accessibilityState,
        accessible: accessible,
        submitBehavior: submitBehavior,
        caretHidden: caretHidden,
        dataDetectorTypes: props.dataDetectorTypes,
        focusable: tabIndex !== undefined ? !tabIndex : focusable,
        mostRecentEventCount: mostRecentEventCount,
        nativeID: id ?? props.nativeID,
        numberOfLines: props.rows ?? props.numberOfLines,
        onBlur: _onBlur,
        onChange: _onChange,
        onContentSizeChange: props.onContentSizeChange,
        onFocus: _onFocus,
        onScroll: _onScroll,
        onSelectionChange: _onSelectionChange,
        onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
        selection: selection,
        selectionColor: selectionColor,
        style: _StyleSheet.default.compose(useMultilineDefaultStyle ? styles.multilineDefault : null, _style),
        text: text
      });
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
      value: true,
      children: textInput
    });
  }
  var enterKeyHintToReturnTypeMap = {
    enter: 'default',
    done: 'done',
    go: 'go',
    next: 'next',
    previous: 'previous',
    search: 'search',
    send: 'send'
  };
  var inputModeToKeyboardTypeMap = {
    none: 'default',
    text: 'default',
    decimal: 'decimal-pad',
    numeric: 'number-pad',
    tel: 'phone-pad',
    search: 'web-search',
    email: 'email-address',
    url: 'url'
  };
  var autoCompleteWebToAutoCompleteAndroidMap = {
    'address-line1': 'postal-address-region',
    'address-line2': 'postal-address-locality',
    bday: 'birthdate-full',
    'bday-day': 'birthdate-day',
    'bday-month': 'birthdate-month',
    'bday-year': 'birthdate-year',
    'cc-csc': 'cc-csc',
    'cc-exp': 'cc-exp',
    'cc-exp-month': 'cc-exp-month',
    'cc-exp-year': 'cc-exp-year',
    'cc-number': 'cc-number',
    country: 'postal-address-country',
    'current-password': 'password',
    email: 'email',
    'honorific-prefix': 'name-prefix',
    'honorific-suffix': 'name-suffix',
    name: 'name',
    'additional-name': 'name-middle',
    'family-name': 'name-family',
    'given-name': 'name-given',
    'new-password': 'password-new',
    off: 'off',
    'one-time-code': 'sms-otp',
    'postal-code': 'postal-code',
    sex: 'gender',
    'street-address': 'street-address',
    tel: 'tel',
    'tel-country-code': 'tel-country-code',
    'tel-national': 'tel-national',
    username: 'username'
  };
  var autoCompleteWebToTextContentTypeMap = {
    'address-line1': 'streetAddressLine1',
    'address-line2': 'streetAddressLine2',
    bday: 'birthdate',
    'bday-day': 'birthdateDay',
    'bday-month': 'birthdateMonth',
    'bday-year': 'birthdateYear',
    'cc-csc': 'creditCardSecurityCode',
    'cc-exp-month': 'creditCardExpirationMonth',
    'cc-exp-year': 'creditCardExpirationYear',
    'cc-exp': 'creditCardExpiration',
    'cc-given-name': 'creditCardGivenName',
    'cc-additional-name': 'creditCardMiddleName',
    'cc-family-name': 'creditCardFamilyName',
    'cc-name': 'creditCardName',
    'cc-number': 'creditCardNumber',
    'cc-type': 'creditCardType',
    'current-password': 'password',
    country: 'countryName',
    email: 'emailAddress',
    name: 'name',
    'additional-name': 'middleName',
    'family-name': 'familyName',
    'given-name': 'givenName',
    nickname: 'nickname',
    'honorific-prefix': 'namePrefix',
    'honorific-suffix': 'nameSuffix',
    'new-password': 'newPassword',
    off: 'none',
    'one-time-code': 'oneTimeCode',
    organization: 'organizationName',
    'organization-title': 'jobTitle',
    'postal-code': 'postalCode',
    'street-address': 'fullStreetAddress',
    tel: 'telephoneNumber',
    url: 'URL',
    username: 'username'
  };
  var ExportedForwardRef = /*#__PURE__*/React.forwardRef(function TextInput(_ref3, forwardedRef) {
    var _ref3$allowFontScalin = _ref3.allowFontScaling,
      allowFontScaling = _ref3$allowFontScalin === undefined ? true : _ref3$allowFontScalin,
      _ref3$rejectResponder = _ref3.rejectResponderTermination,
      rejectResponderTermination = _ref3$rejectResponder === undefined ? true : _ref3$rejectResponder,
      _ref3$underlineColorA = _ref3.underlineColorAndroid,
      underlineColorAndroid = _ref3$underlineColorA === undefined ? 'transparent' : _ref3$underlineColorA,
      autoComplete = _ref3.autoComplete,
      textContentType = _ref3.textContentType,
      readOnly = _ref3.readOnly,
      editable = _ref3.editable,
      enterKeyHint = _ref3.enterKeyHint,
      returnKeyType = _ref3.returnKeyType,
      inputMode = _ref3.inputMode,
      showSoftInputOnFocus = _ref3.showSoftInputOnFocus,
      keyboardType = _ref3.keyboardType,
      restProps = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(InternalTextInput, {
      allowFontScaling: allowFontScaling,
      rejectResponderTermination: rejectResponderTermination,
      underlineColorAndroid: underlineColorAndroid,
      editable: readOnly !== undefined ? !readOnly : editable,
      returnKeyType: enterKeyHint ? enterKeyHintToReturnTypeMap[enterKeyHint] : returnKeyType,
      keyboardType: inputMode ? inputModeToKeyboardTypeMap[inputMode] : keyboardType,
      showSoftInputOnFocus: inputMode == null ? showSoftInputOnFocus : inputMode !== 'none',
      autoComplete: undefined,
      textContentType: textContentType != null ? textContentType : autoComplete && autoComplete in autoCompleteWebToTextContentTypeMap ? autoCompleteWebToTextContentTypeMap[autoComplete] : textContentType,
      ...restProps,
      forwardedRef: forwardedRef
    });
  });
  ExportedForwardRef.displayName = 'TextInput';
  ExportedForwardRef.State = {
    currentlyFocusedInput: _TextInputState.default.currentlyFocusedInput,
    currentlyFocusedField: _TextInputState.default.currentlyFocusedField,
    focusTextInput: _TextInputState.default.focusTextInput,
    blurTextInput: _TextInputState.default.blurTextInput
  };
  var styles = _StyleSheet.default.create({
    multilineDefault: {
      paddingTop: 5
    }
  });
  var verticalAlignToTextAlignVerticalMap = {
    auto: 'auto',
    top: 'top',
    bottom: 'bottom',
    middle: 'center'
  };
  var _default = exports.default = ExportedForwardRef;
},461,[1,238,29,104,311,146,290,308,286,87,359,94,42,128,140,288,143,462]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = undefined;
  var NativeComponentRegistry = _interopRequireWildcard(require(_dependencyMap[1]));
  var _codegenNativeCommands = _interopRequireDefault(require(_dependencyMap[2]));
  var _RCTTextInputViewConfig = _interopRequireDefault(require(_dependencyMap[3]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['focus', 'blur', 'setTextAndSelection']
  });
  var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
    uiViewClassName: 'RCTMultilineTextInputView',
    ..._RCTTextInputViewConfig.default,
    validAttributes: {
      ..._RCTTextInputViewConfig.default.validAttributes,
      dataDetectorTypes: true
    }
  };
  var MultilineTextInputNativeComponent = NativeComponentRegistry.get('RCTMultilineTextInputView', () => __INTERNAL_VIEW_CONFIG);
  var _default = exports.default = MultilineTextInputNativeComponent;
},462,[1,96,142,144]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _PressabilityDebug = require(_dependencyMap[2]);
  var _UIManager = _interopRequireDefault(require(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[4]));
  var _SoundManager = _interopRequireDefault(require(_dependencyMap[5]));
  var _BoundingDimensions = _interopRequireDefault(require(_dependencyMap[6]));
  var _Position = _interopRequireDefault(require(_dependencyMap[7]));
  var React = _interopRequireWildcard(require(_dependencyMap[8]));
  var _jsxRuntime = require(_dependencyMap[9]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var extractSingleTouch = nativeEvent => {
    var touches = nativeEvent.touches;
    var changedTouches = nativeEvent.changedTouches;
    var hasTouches = touches && touches.length > 0;
    var hasChangedTouches = changedTouches && changedTouches.length > 0;
    return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
  };
  var States = {
    NOT_RESPONDER: 'NOT_RESPONDER',
    RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',
    RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',
    RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',
    RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',
    RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
    RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
    ERROR: 'ERROR'
  };
  var baseStatesConditions = {
    NOT_RESPONDER: false,
    RESPONDER_INACTIVE_PRESS_IN: false,
    RESPONDER_INACTIVE_PRESS_OUT: false,
    RESPONDER_ACTIVE_PRESS_IN: false,
    RESPONDER_ACTIVE_PRESS_OUT: false,
    RESPONDER_ACTIVE_LONG_PRESS_IN: false,
    RESPONDER_ACTIVE_LONG_PRESS_OUT: false,
    ERROR: false
  };
  var IsActive = {
    ...baseStatesConditions,
    RESPONDER_ACTIVE_PRESS_OUT: true,
    RESPONDER_ACTIVE_PRESS_IN: true
  };
  var IsPressingIn = {
    ...baseStatesConditions,
    RESPONDER_INACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_PRESS_IN: true,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var IsLongPressingIn = {
    ...baseStatesConditions,
    RESPONDER_ACTIVE_LONG_PRESS_IN: true
  };
  var Signals = {
    DELAY: 'DELAY',
    RESPONDER_GRANT: 'RESPONDER_GRANT',
    RESPONDER_RELEASE: 'RESPONDER_RELEASE',
    RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',
    ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',
    LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',
    LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'
  };
  var Transitions = {
    NOT_RESPONDER: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.ERROR,
      RESPONDER_TERMINATED: States.ERROR,
      ENTER_PRESS_RECT: States.ERROR,
      LEAVE_PRESS_RECT: States.ERROR,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_IN: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_INACTIVE_PRESS_OUT: {
      DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    RESPONDER_ACTIVE_LONG_PRESS_IN: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
    },
    RESPONDER_ACTIVE_LONG_PRESS_OUT: {
      DELAY: States.ERROR,
      RESPONDER_GRANT: States.ERROR,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
      LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
      LONG_PRESS_DETECTED: States.ERROR
    },
    error: {
      DELAY: States.NOT_RESPONDER,
      RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
      RESPONDER_RELEASE: States.NOT_RESPONDER,
      RESPONDER_TERMINATED: States.NOT_RESPONDER,
      ENTER_PRESS_RECT: States.NOT_RESPONDER,
      LEAVE_PRESS_RECT: States.NOT_RESPONDER,
      LONG_PRESS_DETECTED: States.NOT_RESPONDER
    }
  };
  var HIGHLIGHT_DELAY_MS = 130;
  var PRESS_EXPAND_PX = 20;
  var LONG_PRESS_THRESHOLD = 500;
  var LONG_PRESS_DELAY_MS = 370;
  var LONG_PRESS_ALLOWED_MOVEMENT = 10;
  var TouchableMixinImpl = {
    componentDidMount: function () {
      if (!_Platform.default.isTV) {
        return;
      }
    },
    componentWillUnmount: function () {
      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    },
    touchableGetInitialState: function () {
      return {
        touchable: {
          touchState: undefined,
          responderID: null
        }
      };
    },
    touchableHandleResponderTerminationRequest: function () {
      return !this.props.rejectResponderTermination;
    },
    touchableHandleStartShouldSetResponder: function () {
      return !this.props.disabled;
    },
    touchableLongPressCancelsPress: function () {
      return true;
    },
    touchableHandleResponderGrant: function (e) {
      var dispatchID = e.currentTarget;
      e.persist();
      this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
      this.pressOutDelayTimeout = null;
      this.state.touchable.touchState = States.NOT_RESPONDER;
      this.state.touchable.responderID = dispatchID;
      this._receiveSignal(Signals.RESPONDER_GRANT, e);
      var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
      delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;
      if (delayMS !== 0) {
        this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
      } else {
        this._handleDelay(e);
      }
      var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
      longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
      this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
    },
    touchableHandleResponderRelease: function (e) {
      this.pressInLocation = null;
      this._receiveSignal(Signals.RESPONDER_RELEASE, e);
    },
    touchableHandleResponderTerminate: function (e) {
      this.pressInLocation = null;
      this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
    },
    touchableHandleResponderMove: function (e) {
      if (!this.state.touchable.positionOnActivate) {
        return;
      }
      var positionOnActivate = this.state.touchable.positionOnActivate;
      var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
      var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
        left: PRESS_EXPAND_PX,
        right: PRESS_EXPAND_PX,
        top: PRESS_EXPAND_PX,
        bottom: PRESS_EXPAND_PX
      };
      var pressExpandLeft = pressRectOffset.left;
      var pressExpandTop = pressRectOffset.top;
      var pressExpandRight = pressRectOffset.right;
      var pressExpandBottom = pressRectOffset.bottom;
      var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;
      if (hitSlop) {
        pressExpandLeft += hitSlop.left || 0;
        pressExpandTop += hitSlop.top || 0;
        pressExpandRight += hitSlop.right || 0;
        pressExpandBottom += hitSlop.bottom || 0;
      }
      var touch = extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      if (this.pressInLocation) {
        var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);
        if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
          this._cancelLongPressDelayTimeout();
        }
      }
      var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;
      if (isTouchWithinActive) {
        var prevState = this.state.touchable.touchState;
        this._receiveSignal(Signals.ENTER_PRESS_RECT, e);
        var curState = this.state.touchable.touchState;
        if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {
          this._cancelLongPressDelayTimeout();
        }
      } else {
        this._cancelLongPressDelayTimeout();
        this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
      }
    },
    touchableHandleFocus: function (e) {
      this.props.onFocus && this.props.onFocus(e);
    },
    touchableHandleBlur: function (e) {
      this.props.onBlur && this.props.onBlur(e);
    },
    _remeasureMetricsOnActivation: function () {
      var responderID = this.state.touchable.responderID;
      if (responderID == null) {
        return;
      }
      if (typeof responderID === 'number') {
        _UIManager.default.measure(responderID, this._handleQueryLayout);
      } else {
        responderID.measure(this._handleQueryLayout);
      }
    },
    _handleQueryLayout: function (l, t, w, h, globalX, globalY) {
      if (!l && !t && !w && !h && !globalX && !globalY) {
        return;
      }
      this.state.touchable.positionOnActivate && _Position.default.release(this.state.touchable.positionOnActivate);
      this.state.touchable.dimensionsOnActivate && _BoundingDimensions.default.release(this.state.touchable.dimensionsOnActivate);
      this.state.touchable.positionOnActivate = _Position.default.getPooled(globalX, globalY);
      this.state.touchable.dimensionsOnActivate = _BoundingDimensions.default.getPooled(w, h);
    },
    _handleDelay: function (e) {
      this.touchableDelayTimeout = null;
      this._receiveSignal(Signals.DELAY, e);
    },
    _handleLongDelay: function (e) {
      this.longPressDelayTimeout = null;
      var curState = this.state.touchable.touchState;
      if (curState === States.RESPONDER_ACTIVE_PRESS_IN || curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
        this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
      }
    },
    _receiveSignal: function (signal, e) {
      var responderID = this.state.touchable.responderID;
      var curState = this.state.touchable.touchState;
      var nextState = Transitions[curState] && Transitions[curState][signal];
      if (!responderID && signal === Signals.RESPONDER_RELEASE) {
        return;
      }
      if (!nextState) {
        throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : "host component`");
      }
      if (nextState === States.ERROR) {
        throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : "<<host component>>`");
      }
      if (curState !== nextState) {
        this._performSideEffectsForTransition(curState, nextState, signal, e);
        this.state.touchable.touchState = nextState;
      }
    },
    _cancelLongPressDelayTimeout: function () {
      this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
      this.longPressDelayTimeout = null;
    },
    _isHighlight: function (state) {
      return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
    },
    _savePressInLocation: function (e) {
      var touch = extractSingleTouch(e.nativeEvent);
      var pageX = touch && touch.pageX;
      var pageY = touch && touch.pageY;
      var locationX = touch && touch.locationX;
      var locationY = touch && touch.locationY;
      this.pressInLocation = {
        pageX,
        pageY,
        locationX,
        locationY
      };
    },
    _getDistanceBetweenPoints: function (aX, aY, bX, bY) {
      var deltaX = aX - bX;
      var deltaY = aY - bY;
      return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    },
    _performSideEffectsForTransition: function (curState, nextState, signal, e) {
      var curIsHighlight = this._isHighlight(curState);
      var newIsHighlight = this._isHighlight(nextState);
      var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;
      if (isFinalSignal) {
        this._cancelLongPressDelayTimeout();
      }
      var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;
      var isActiveTransition = !IsActive[curState] && IsActive[nextState];
      if (isInitialTransition || isActiveTransition) {
        this._remeasureMetricsOnActivation();
      }
      if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
        this.touchableHandleLongPress && this.touchableHandleLongPress(e);
      }
      if (newIsHighlight && !curIsHighlight) {
        this._startHighlight(e);
      } else if (!newIsHighlight && curIsHighlight) {
        this._endHighlight(e);
      }
      if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
        var hasLongPressHandler = !!this.props.onLongPress;
        var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());
        var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;
        if (shouldInvokePress && this.touchableHandlePress) {
          if (!newIsHighlight && !curIsHighlight) {
            this._startHighlight(e);
            this._endHighlight(e);
          }
          this.touchableHandlePress(e);
        }
      }
      this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
      this.touchableDelayTimeout = null;
    },
    _startHighlight: function (e) {
      this._savePressInLocation(e);
      this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
    },
    _endHighlight: function (e) {
      if (this.touchableHandleActivePressOut) {
        if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
          this.pressOutDelayTimeout = setTimeout(() => {
            this.touchableHandleActivePressOut(e);
          }, this.touchableGetPressOutDelayMS());
        } else {
          this.touchableHandleActivePressOut(e);
        }
      }
    },
    withoutDefaultFocusAndBlur: {}
  };
  var touchableHandleFocus = TouchableMixinImpl.touchableHandleFocus,
    touchableHandleBlur = TouchableMixinImpl.touchableHandleBlur,
    TouchableMixinWithoutDefaultFocusAndBlur = (0, _objectWithoutProperties2.default)(TouchableMixinImpl, ["touchableHandleFocus", "touchableHandleBlur"]);
  TouchableMixinImpl.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;
  var TouchableImpl = {
    Mixin: TouchableMixinImpl,
    renderDebugView: _ref => {
      var color = _ref.color,
        hitSlop = _ref.hitSlop;
      return null;
    }
  };
  var _default = exports.default = TouchableImpl;
},463,[1,238,309,126,87,313,464,466,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _PooledClass = _interopRequireDefault(require(_dependencyMap[1]));
  var twoArgumentPooler = _PooledClass.default.twoArgumentPooler;
  function BoundingDimensions(width, height) {
    this.width = width;
    this.height = height;
  }
  BoundingDimensions.prototype.destructor = function () {
    this.width = null;
    this.height = null;
  };
  BoundingDimensions.getPooledFromElement = function (element) {
    return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
  };
  _PooledClass.default.addPoolingTo(BoundingDimensions, twoArgumentPooler);
  var _default = exports.default = BoundingDimensions;
},464,[1,465]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _invariant = _interopRequireDefault(require(_dependencyMap[1]));
  var oneArgumentPooler = function (copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var _instance = Klass.instancePool.pop();
      Klass.call(_instance, copyFieldsFrom);
      return _instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };
  var twoArgumentPooler = function (a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var _instance2 = Klass.instancePool.pop();
      Klass.call(_instance2, a1, a2);
      return _instance2;
    } else {
      return new Klass(a1, a2);
    }
  };
  var threeArgumentPooler = function (a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var _instance3 = Klass.instancePool.pop();
      Klass.call(_instance3, a1, a2, a3);
      return _instance3;
    } else {
      return new Klass(a1, a2, a3);
    }
  };
  var fourArgumentPooler = function (a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var _instance4 = Klass.instancePool.pop();
      Klass.call(_instance4, a1, a2, a3, a4);
      return _instance4;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };
  var standardReleaser = function (instance) {
    var Klass = this;
    (0, _invariant.default)(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
    instance.destructor();
    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };
  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;
  var addPoolingTo = function (CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;
    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }
    NewKlass.release = standardReleaser;
    return NewKlass;
  };
  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
  };
  var _default = exports.default = PooledClass;
},465,[1,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _PooledClass = _interopRequireDefault(require(_dependencyMap[1]));
  var twoArgumentPooler = _PooledClass.default.twoArgumentPooler;
  function Position(left, top) {
    this.left = left;
    this.top = top;
  }
  Position.prototype.destructor = function () {
    this.left = null;
    this.top = null;
  };
  _PooledClass.default.addPoolingTo(Position, twoArgumentPooler);
  var _default = exports.default = Position;
},466,[1,465]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _View = _interopRequireDefault(require(_dependencyMap[7]));
  var _Pressability = _interopRequireDefault(require(_dependencyMap[8]));
  var _PressabilityDebug = require(_dependencyMap[9]);
  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[10]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[11]));
  var React = _interopRequireWildcard(require(_dependencyMap[12]));
  var _jsxRuntime = require(_dependencyMap[13]);
  var _excluded = ["onBlur", "onFocus"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var TouchableHighlightImpl = /*#__PURE__*/function (_React$Component) {
    function TouchableHighlightImpl() {
      var _this;
      (0, _classCallCheck2.default)(this, TouchableHighlightImpl);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, TouchableHighlightImpl, [...args]);
      _this._isMounted = false;
      _this.state = {
        pressability: new _Pressability.default(_this._createPressabilityConfig()),
        extraStyles: _this.props.testOnly_pressed === true ? _this._createExtraStyles() : null
      };
      return _this;
    }
    (0, _inherits2.default)(TouchableHighlightImpl, _React$Component);
    return (0, _createClass2.default)(TouchableHighlightImpl, [{
      key: "_createPressabilityConfig",
      value: function _createPressabilityConfig() {
        return {
          cancelable: !this.props.rejectResponderTermination,
          disabled: this.props.disabled != null ? this.props.disabled : this.props.accessibilityState?.disabled,
          hitSlop: this.props.hitSlop,
          delayLongPress: this.props.delayLongPress,
          delayPressIn: this.props.delayPressIn,
          delayPressOut: this.props.delayPressOut,
          minPressDuration: 0,
          pressRectOffset: this.props.pressRetentionOffset,
          android_disableSound: this.props.touchSoundDisabled,
          onBlur: event => {
            if (_Platform.default.isTV) {
              this._hideUnderlay();
            }
            if (this.props.onBlur != null) {
              this.props.onBlur(event);
            }
          },
          onFocus: event => {
            if (_Platform.default.isTV) {
              this._showUnderlay();
            }
            if (this.props.onFocus != null) {
              this.props.onFocus(event);
            }
          },
          onLongPress: this.props.onLongPress,
          onPress: event => {
            if (this._hideTimeout != null) {
              clearTimeout(this._hideTimeout);
            }
            if (!_Platform.default.isTV) {
              this._showUnderlay();
              this._hideTimeout = setTimeout(() => {
                this._hideUnderlay();
              }, this.props.delayPressOut ?? 0);
            }
            if (this.props.onPress != null) {
              this.props.onPress(event);
            }
          },
          onPressIn: event => {
            if (this._hideTimeout != null) {
              clearTimeout(this._hideTimeout);
              this._hideTimeout = null;
            }
            this._showUnderlay();
            if (this.props.onPressIn != null) {
              this.props.onPressIn(event);
            }
          },
          onPressOut: event => {
            if (this._hideTimeout == null) {
              this._hideUnderlay();
            }
            if (this.props.onPressOut != null) {
              this.props.onPressOut(event);
            }
          }
        };
      }
    }, {
      key: "_createExtraStyles",
      value: function _createExtraStyles() {
        return {
          child: {
            opacity: this.props.activeOpacity ?? 0.85
          },
          underlay: {
            backgroundColor: this.props.underlayColor === undefined ? 'black' : this.props.underlayColor
          }
        };
      }
    }, {
      key: "_showUnderlay",
      value: function _showUnderlay() {
        if (!this._isMounted || !this._hasPressHandler()) {
          return;
        }
        this.setState({
          extraStyles: this._createExtraStyles()
        });
        if (this.props.onShowUnderlay != null) {
          this.props.onShowUnderlay();
        }
      }
    }, {
      key: "_hideUnderlay",
      value: function _hideUnderlay() {
        if (this._hideTimeout != null) {
          clearTimeout(this._hideTimeout);
          this._hideTimeout = null;
        }
        if (this.props.testOnly_pressed === true) {
          return;
        }
        if (this._hasPressHandler()) {
          this.setState({
            extraStyles: null
          });
          if (this.props.onHideUnderlay != null) {
            this.props.onHideUnderlay();
          }
        }
      }
    }, {
      key: "_hasPressHandler",
      value: function _hasPressHandler() {
        return this.props.onPress != null || this.props.onPressIn != null || this.props.onPressOut != null || this.props.onLongPress != null;
      }
    }, {
      key: "render",
      value: function render() {
        var child = React.Children.only(this.props.children);
        var _this$state$pressabil = this.state.pressability.getEventHandlers(),
          onBlur = _this$state$pressabil.onBlur,
          onFocus = _this$state$pressabil.onFocus,
          eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);
        var accessibilityState = this.props.disabled != null ? {
          ...this.props.accessibilityState,
          disabled: this.props.disabled
        } : this.props.accessibilityState;
        var accessibilityValue = {
          max: this.props['aria-valuemax'] ?? this.props.accessibilityValue?.max,
          min: this.props['aria-valuemin'] ?? this.props.accessibilityValue?.min,
          now: this.props['aria-valuenow'] ?? this.props.accessibilityValue?.now,
          text: this.props['aria-valuetext'] ?? this.props.accessibilityValue?.text
        };
        var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;
        var accessibilityLabel = this.props['aria-label'] ?? this.props.accessibilityLabel;
        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_View.default, {
          accessible: this.props.accessible !== false,
          accessibilityLabel: accessibilityLabel,
          accessibilityHint: this.props.accessibilityHint,
          accessibilityLanguage: this.props.accessibilityLanguage,
          accessibilityRole: this.props.accessibilityRole,
          accessibilityState: accessibilityState,
          accessibilityValue: accessibilityValue,
          accessibilityActions: this.props.accessibilityActions,
          onAccessibilityAction: this.props.onAccessibilityAction,
          importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
          accessibilityViewIsModal: this.props['aria-modal'] ?? this.props.accessibilityViewIsModal,
          accessibilityLiveRegion: accessibilityLiveRegion,
          accessibilityElementsHidden: this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,
          style: _StyleSheet.default.compose(this.props.style, this.state.extraStyles?.underlay),
          onLayout: this.props.onLayout,
          hitSlop: this.props.hitSlop,
          hasTVPreferredFocus: this.props.hasTVPreferredFocus,
          nextFocusDown: this.props.nextFocusDown,
          nextFocusForward: this.props.nextFocusForward,
          nextFocusLeft: this.props.nextFocusLeft,
          nextFocusRight: this.props.nextFocusRight,
          nextFocusUp: this.props.nextFocusUp,
          focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
          nativeID: this.props.id ?? this.props.nativeID,
          testID: this.props.testID,
          ref: this.props.hostRef,
          ...eventHandlersWithoutBlurAndFocus,
          children: [/*#__PURE__*/React.cloneElement(child, {
            style: _StyleSheet.default.compose(child.props.style, this.state.extraStyles?.child)
          }), null]
        });
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._isMounted = true;
        this.state.pressability.configure(this._createPressabilityConfig());
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        this.state.pressability.configure(this._createPressabilityConfig());
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;
        if (this._hideTimeout != null) {
          clearTimeout(this._hideTimeout);
        }
        this.state.pressability.reset();
      }
    }]);
  }(React.Component);
  var TouchableHighlight = /*#__PURE__*/React.forwardRef((props, hostRef) => /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableHighlightImpl, {
    ...props,
    hostRef: hostRef
  }));
  TouchableHighlight.displayName = 'TouchableHighlight';
  var _default = exports.default = TouchableHighlight;
},467,[1,238,10,11,64,66,69,285,312,309,290,87,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = TouchableWithoutFeedback;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _View = _interopRequireDefault(require(_dependencyMap[2]));
  var _PressabilityDebug = require(_dependencyMap[3]);
  var _usePressability = _interopRequireDefault(require(_dependencyMap[4]));
  var _react = _interopRequireWildcard(require(_dependencyMap[5]));
  var React = _react;
  var _jsxRuntime = require(_dependencyMap[6]);
  var _excluded = ["onBlur", "onFocus"];
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var PASSTHROUGH_PROPS = ['accessibilityActions', 'accessibilityElementsHidden', 'accessibilityHint', 'accessibilityLanguage', 'accessibilityIgnoresInvertColors', 'accessibilityLabel', 'accessibilityLiveRegion', 'accessibilityRole', 'accessibilityValue', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext', 'accessibilityViewIsModal', 'aria-modal', 'hitSlop', 'importantForAccessibility', 'nativeID', 'onAccessibilityAction', 'onBlur', 'onFocus', 'onLayout', 'testID'];
  function TouchableWithoutFeedback(props) {
    var disabled = props.disabled,
      rejectResponderTermination = props.rejectResponderTermination,
      ariaDisabled = props['aria-disabled'],
      accessibilityState = props.accessibilityState,
      hitSlop = props.hitSlop,
      delayLongPress = props.delayLongPress,
      delayPressIn = props.delayPressIn,
      delayPressOut = props.delayPressOut,
      pressRetentionOffset = props.pressRetentionOffset,
      touchSoundDisabled = props.touchSoundDisabled,
      _onBlur = props.onBlur,
      _onFocus = props.onFocus,
      onLongPress = props.onLongPress,
      onPress = props.onPress,
      onPressIn = props.onPressIn,
      onPressOut = props.onPressOut;
    var pressabilityConfig = (0, _react.useMemo)(() => ({
      cancelable: !rejectResponderTermination,
      disabled: disabled !== null ? disabled : ariaDisabled ?? accessibilityState?.disabled,
      hitSlop: hitSlop,
      delayLongPress: delayLongPress,
      delayPressIn: delayPressIn,
      delayPressOut: delayPressOut,
      minPressDuration: 0,
      pressRectOffset: pressRetentionOffset,
      android_disableSound: touchSoundDisabled,
      onBlur: _onBlur,
      onFocus: _onFocus,
      onLongPress: onLongPress,
      onPress: onPress,
      onPressIn: onPressIn,
      onPressOut: onPressOut
    }), [rejectResponderTermination, disabled, ariaDisabled, accessibilityState?.disabled, hitSlop, delayLongPress, delayPressIn, delayPressOut, pressRetentionOffset, touchSoundDisabled, _onBlur, _onFocus, onLongPress, onPress, onPressIn, onPressOut]);
    var eventHandlers = (0, _usePressability.default)(pressabilityConfig);
    var element = React.Children.only(props.children);
    var children = [element.props.children];
    var ariaLive = props['aria-live'];
    var _accessibilityState = {
      busy: props['aria-busy'] ?? props.accessibilityState?.busy,
      checked: props['aria-checked'] ?? props.accessibilityState?.checked,
      disabled: props['aria-disabled'] ?? props.accessibilityState?.disabled,
      expanded: props['aria-expanded'] ?? props.accessibilityState?.expanded,
      selected: props['aria-selected'] ?? props.accessibilityState?.selected
    };
    var onBlur = eventHandlers.onBlur,
      onFocus = eventHandlers.onFocus,
      eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(eventHandlers, _excluded);
    var elementProps = {
      ...eventHandlersWithoutBlurAndFocus,
      accessible: props.accessible !== false,
      accessibilityState: props.disabled != null ? {
        ..._accessibilityState,
        disabled: props.disabled
      } : _accessibilityState,
      focusable: props.focusable !== false && props.onPress !== undefined && !props.disabled,
      accessibilityElementsHidden: props['aria-hidden'] ?? props.accessibilityElementsHidden,
      importantForAccessibility: props['aria-hidden'] === true ? 'no-hide-descendants' : props.importantForAccessibility,
      accessibilityLiveRegion: ariaLive === 'off' ? 'none' : ariaLive ?? props.accessibilityLiveRegion,
      nativeID: props.id ?? props.nativeID
    };
    for (var prop of PASSTHROUGH_PROPS) {
      if (props[prop] !== undefined) {
        elementProps[prop] = props[prop];
      }
    }
    return /*#__PURE__*/React.cloneElement(element, elementProps, ...children);
  }
},468,[1,238,285,309,311,140,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _virtualizedLists = _interopRequireDefault(require(_dependencyMap[1]));
  var VirtualizedList = _virtualizedLists.default.VirtualizedList;
  var _default = exports.default = VirtualizedList;
},469,[1,370]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _virtualizedLists = _interopRequireDefault(require(_dependencyMap[1]));
  var VirtualizedSectionList = _virtualizedLists.default.VirtualizedSectionList;
  var _default = exports.default = VirtualizedSectionList;
},470,[1,370]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _NativeActionSheetManager = _interopRequireDefault(require(_dependencyMap[2]));
  var _excluded = ["tintColor", "cancelButtonTintColor", "disabledButtonTintColor", "destructiveButtonIndex"];
  var processColor = require(_dependencyMap[3]).default;
  var invariant = require(_dependencyMap[4]);
  var ActionSheetIOS = {
    showActionSheetWithOptions(options, callback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof callback === 'function', 'Must provide a valid callback');
      invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
      var tintColor = options.tintColor,
        cancelButtonTintColor = options.cancelButtonTintColor,
        disabledButtonTintColor = options.disabledButtonTintColor,
        destructiveButtonIndex = options.destructiveButtonIndex,
        remainingOptions = (0, _objectWithoutProperties2.default)(options, _excluded);
      var destructiveButtonIndices = null;
      if (Array.isArray(destructiveButtonIndex)) {
        destructiveButtonIndices = destructiveButtonIndex;
      } else if (typeof destructiveButtonIndex === 'number') {
        destructiveButtonIndices = [destructiveButtonIndex];
      }
      var processedTintColor = processColor(tintColor);
      var processedCancelButtonTintColor = processColor(cancelButtonTintColor);
      var processedDisabledButtonTintColor = processColor(disabledButtonTintColor);
      invariant(processedTintColor == null || typeof processedTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor');
      invariant(processedCancelButtonTintColor == null || typeof processedCancelButtonTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions cancelButtonTintColor');
      invariant(processedDisabledButtonTintColor == null || typeof processedDisabledButtonTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions disabledButtonTintColor');
      _NativeActionSheetManager.default.showActionSheetWithOptions({
        ...remainingOptions,
        tintColor: processedTintColor,
        cancelButtonTintColor: processedCancelButtonTintColor,
        disabledButtonTintColor: processedDisabledButtonTintColor,
        destructiveButtonIndices
      }, callback);
    },
    showShareActionSheetWithOptions(options, failureCallback, successCallback) {
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
      invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
      invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
      invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
      _NativeActionSheetManager.default.showShareActionSheetWithOptions({
        ...options,
        tintColor: processColor(options.tintColor)
      }, failureCallback, successCallback);
    },
    dismissActionSheet: () => {
      invariant(_NativeActionSheetManager.default, "ActionSheetManager doesn't exist");
      if (typeof _NativeActionSheetManager.default.dismissActionSheet === 'function') {
        _NativeActionSheetManager.default.dismissActionSheet();
      }
    }
  };
  var _default = exports.default = ActionSheetIOS;
},471,[1,238,472,99,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeActionSheetManager = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeActionSheetManager).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeActionSheetManager[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeActionSheetManager[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeActionSheetManager.default;
},472,[473]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('ActionSheetManager');
},473,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addChangeListener = addChangeListener;
  exports.getColorScheme = getColorScheme;
  exports.setColorScheme = setColorScheme;
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var _EventEmitter = _interopRequireDefault(require(_dependencyMap[2]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[3]));
  var lazyState;
  function getState() {
    if (lazyState != null) {
      return lazyState;
    }
    var eventEmitter = new _EventEmitter.default();
    var NativeAppearance = require(_dependencyMap[4]).default;
    if (NativeAppearance == null) {
      lazyState = {
        NativeAppearance: null,
        appearance: null,
        eventEmitter
      };
    } else {
      var state = {
        NativeAppearance,
        appearance: null,
        eventEmitter
      };
      new _NativeEventEmitter.default(NativeAppearance).addListener('appearanceChanged', newAppearance => {
        state.appearance = {
          colorScheme: toColorScheme(newAppearance.colorScheme)
        };
        eventEmitter.emit('change', state.appearance);
      });
      lazyState = state;
    }
    return lazyState;
  }
  function getColorScheme() {
    var colorScheme = null;
    var state = getState();
    var NativeAppearance = state.NativeAppearance;
    if (NativeAppearance != null) {
      if (state.appearance == null) {
        state.appearance = {
          colorScheme: toColorScheme(NativeAppearance.getColorScheme())
        };
      }
      colorScheme = state.appearance.colorScheme;
    }
    return colorScheme;
  }
  function setColorScheme(colorScheme) {
    var state = getState();
    var NativeAppearance = state.NativeAppearance;
    if (NativeAppearance != null) {
      NativeAppearance.setColorScheme(colorScheme ?? 'unspecified');
      state.appearance = {
        colorScheme: toColorScheme(NativeAppearance.getColorScheme())
      };
    }
  }
  function addChangeListener(listener) {
    var _getState = getState(),
      eventEmitter = _getState.eventEmitter;
    return eventEmitter.addListener('change', listener);
  }
  function toColorScheme(colorScheme) {
    (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark', 'light' or null?");
    return colorScheme;
  }
},474,[1,242,71,42,475]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeAppearance = _interopRequireDefault(require(_dependencyMap[1]));
  var _default = exports.default = _NativeAppearance.default;
},475,[1,476]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('Appearance');
},476,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[3]));
  var _logError = _interopRequireDefault(require(_dependencyMap[4]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[5]));
  var _NativeAppState = _interopRequireDefault(require(_dependencyMap[6]));
  var AppStateImpl = /*#__PURE__*/function () {
    function AppStateImpl() {
      (0, _classCallCheck2.default)(this, AppStateImpl);
      this.currentState = null;
      if (_NativeAppState.default == null) {
        this.isAvailable = false;
      } else {
        this.isAvailable = true;
        var emitter = new _NativeEventEmitter.default(_NativeAppState.default);
        this._emitter = emitter;
        this.currentState = _NativeAppState.default.getConstants().initialAppState;
        var eventUpdated = false;
        emitter.addListener('appStateDidChange', appStateData => {
          eventUpdated = true;
          this.currentState = appStateData.app_state;
        });
        _NativeAppState.default.getCurrentAppState(appStateData => {
          if (!eventUpdated && this.currentState !== appStateData.app_state) {
            this.currentState = appStateData.app_state;
            emitter.emit('appStateDidChange', appStateData);
          }
        }, _logError.default);
      }
    }
    return (0, _createClass2.default)(AppStateImpl, [{
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        var emitter = this._emitter;
        if (emitter == null) {
          throw new Error('Cannot use AppState when `isAvailable` is false.');
        }
        switch (type) {
          case 'change':
            var changeHandler = handler;
            return emitter.addListener('appStateDidChange', appStateData => {
              changeHandler(appStateData.app_state);
            });
          case 'memoryWarning':
            var memoryWarningHandler = handler;
            return emitter.addListener('memoryWarning', memoryWarningHandler);
          case 'blur':
          case 'focus':
            var focusOrBlurHandler = handler;
            return emitter.addListener('appStateFocusChange', hasFocus => {
              if (type === 'blur' && !hasFocus) {
                focusOrBlurHandler();
              }
              if (type === 'focus' && hasFocus) {
                focusOrBlurHandler();
              }
            });
        }
        throw new Error('Trying to subscribe to unknown event: ' + type);
      }
    }]);
  }();
  var AppState = new AppStateImpl();
  var _default = exports.default = AppState;
},477,[1,10,11,242,478,87,479]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var logError = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (args.length === 1 && args[0] instanceof Error) {
      var err = args[0];
      console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
    } else {
      console.error.apply(console, args);
    }
  };
  var _default = exports.default = logError;
},478,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeAppState = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeAppState).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeAppState[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeAppState[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeAppState.default;
},479,[480]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('AppState');
},480,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeClipboard = _interopRequireDefault(require(_dependencyMap[1]));
  var _default = exports.default = {
    getString() {
      return _NativeClipboard.default.getString();
    },
    setString(content) {
      _NativeClipboard.default.setString(content);
    }
  };
},481,[1,482]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeClipboard = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeClipboard).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeClipboard[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeClipboard[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeClipboard.default;
},482,[483]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('Clipboard');
},483,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeDeviceInfo = _interopRequireDefault(require(_dependencyMap[1]));
  var _default = exports.default = _NativeDeviceInfo.default;
},484,[1,118]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeDevMenu = _interopRequireDefault(require(_dependencyMap[1]));
  var DevMenu = {
    show() {}
  };
  var _default = exports.default = DevMenu;
},485,[1,486]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('DevMenu');
},486,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var _NativeDevSettings = _interopRequireDefault(require(_dependencyMap[2]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[3]));
  var DevSettings = {
    addMenuItem(title, handler) {},
    reload(reason) {},
    onFastRefresh() {}
  };
  var _default = exports.default = DevSettings;
},487,[1,242,488,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeDevSettings = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeDevSettings).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeDevSettings[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeDevSettings[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeDevSettings.default;
},488,[489]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('DevSettings');
},489,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _NativeEventEmitter2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  var _NativeIntentAndroid = _interopRequireDefault(require(_dependencyMap[8]));
  var _NativeLinkingManager = _interopRequireDefault(require(_dependencyMap[9]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[10]));
  var _nullthrows = _interopRequireDefault(require(_dependencyMap[11]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var LinkingImpl = /*#__PURE__*/function (_NativeEventEmitter) {
    function LinkingImpl() {
      (0, _classCallCheck2.default)(this, LinkingImpl);
      return _callSuper(this, LinkingImpl, [(0, _nullthrows.default)(_NativeLinkingManager.default)]);
    }
    (0, _inherits2.default)(LinkingImpl, _NativeEventEmitter);
    return (0, _createClass2.default)(LinkingImpl, [{
      key: "addEventListener",
      value: function addEventListener(eventType, listener) {
        return this.addListener(eventType, listener);
      }
    }, {
      key: "openURL",
      value: function openURL(url) {
        this._validateURL(url);
        {
          return (0, _nullthrows.default)(_NativeLinkingManager.default).openURL(url);
        }
      }
    }, {
      key: "canOpenURL",
      value: function canOpenURL(url) {
        this._validateURL(url);
        {
          return (0, _nullthrows.default)(_NativeLinkingManager.default).canOpenURL(url);
        }
      }
    }, {
      key: "openSettings",
      value: function openSettings() {
        {
          return (0, _nullthrows.default)(_NativeLinkingManager.default).openSettings();
        }
      }
    }, {
      key: "getInitialURL",
      value: function getInitialURL() {
        return (0, _nullthrows.default)(_NativeLinkingManager.default).getInitialURL();
      }
    }, {
      key: "sendIntent",
      value: function sendIntent(action, extras) {
        {
          return new Promise((resolve, reject) => reject(new Error('Unsupported')));
        }
      }
    }, {
      key: "_validateURL",
      value: function _validateURL(url) {
        (0, _invariant.default)(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
        (0, _invariant.default)(url, 'Invalid URL: cannot be empty');
      }
    }]);
  }(_NativeEventEmitter2.default);
  var Linking = new LinkingImpl();
  var _default = exports.default = Linking;
},490,[1,10,11,64,66,69,242,87,491,493,42,128]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeIntentAndroid = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeIntentAndroid).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeIntentAndroid[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeIntentAndroid[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeIntentAndroid.default;
},491,[492]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('IntentAndroid');
},492,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeLinkingManager = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeLinkingManager).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeLinkingManager[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeLinkingManager[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeLinkingManager.default;
},493,[494]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('LinkingManager');
},494,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _Platform = _interopRequireDefault(require(_dependencyMap[1]));
  var _RCTLog = _interopRequireDefault(require(_dependencyMap[2]));
  var _parseLogBoxLog3 = require(_dependencyMap[3]);
  var React = _interopRequireWildcard(require(_dependencyMap[4]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var LogBox;
  {
    LogBox = {
      install() {},
      uninstall() {},
      isInstalled() {
        return false;
      },
      ignoreLogs(patterns) {},
      ignoreAllLogs(value) {},
      clearAllLogs() {},
      addLog(log) {},
      addException(error) {}
    };
  }
  var _default = exports.default = LogBox;
},495,[1,87,263,496,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.hasComponentStack = hasComponentStack;
  exports.parseComponentStack = parseComponentStack;
  exports.parseInterpolation = parseInterpolation;
  exports.parseLogBoxException = parseLogBoxException;
  exports.parseLogBoxLog = parseLogBoxLog;
  exports.withoutANSIColorStyles = withoutANSIColorStyles;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _parseErrorStack = _interopRequireDefault(require(_dependencyMap[2]));
  var _UTFSequence = _interopRequireDefault(require(_dependencyMap[3]));
  var _stringifySafe = _interopRequireDefault(require(_dependencyMap[4]));
  var _ansiRegex = _interopRequireDefault(require(_dependencyMap[5]));
  var ANSI_REGEX = (0, _ansiRegex.default)().source;
  var RE_TRANSFORM_ERROR = /^TransformError /;
  var RE_COMPONENT_STACK_LINE = /\n {4}(in|at) /;
  var RE_COMPONENT_STACK_LINE_GLOBAL = /\n {4}(in|at) /g;
  var RE_COMPONENT_STACK_LINE_OLD = / {4}in/;
  var RE_COMPONENT_STACK_LINE_NEW = / {4}at/;
  var RE_COMPONENT_STACK_LINE_STACK_FRAME = /@.*\n/;
  var RE_BABEL_TRANSFORM_ERROR_FORMAT = /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \((\d+):(\d+)\)\n\n([\s\S]+)/;
  var RE_COMPONENT_STACK_WITH_SOURCE = /(.*) \(at (.*\.(?:js|jsx|ts|tsx)):([\d]+)\)/;
  var RE_COMPONENT_STACK_NO_SOURCE = /(.*) \(created by .*\)/;
  var RE_BABEL_CODE_FRAME_ERROR_FORMAT = /^(?:TransformError )?(?:(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*):? (?:(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?)(\/(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*): ((?:[\0-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF])+?)\n([ >]{2}[\t-\r 0-9\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+ \|(?:[\0-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF])+|\x1B(?:[\0-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF])+)/;
  var RE_METRO_ERROR_FORMAT = /^(?:InternalError Metro has encountered an error:) ((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*): ((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*) \(([0-9]+):([0-9]+)\)\n\n((?:[\0-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF])+)/;
  var RE_BABEL_CODE_FRAME_MARKER_PATTERN = new RegExp(['^', `(?:${ANSI_REGEX})*`, '>', `(?:${ANSI_REGEX})*`, ' +', '[0-9]+', ' \\|'].join(''), 'm');
  function hasComponentStack(args) {
    for (var arg of args) {
      if (typeof arg === 'string' && isComponentStack(arg)) {
        return true;
      }
    }
    return false;
  }
  var SUBSTITUTION = _UTFSequence.default.BOM + '%s';
  function parseInterpolation(args) {
    var categoryParts = [];
    var contentParts = [];
    var substitutionOffsets = [];
    var remaining = [...args];
    if (typeof remaining[0] === 'string') {
      var formatString = String(remaining.shift());
      var formatStringParts = formatString.split('%s');
      var substitutionCount = formatStringParts.length - 1;
      var substitutions = remaining.splice(0, substitutionCount);
      var categoryString = '';
      var contentString = '';
      var substitutionIndex = 0;
      for (var formatStringPart of formatStringParts) {
        categoryString += formatStringPart;
        contentString += formatStringPart;
        if (substitutionIndex < substitutionCount) {
          if (substitutionIndex < substitutions.length) {
            var substitution = typeof substitutions[substitutionIndex] === 'string' ? substitutions[substitutionIndex] : (0, _stringifySafe.default)(substitutions[substitutionIndex]);
            substitutionOffsets.push({
              length: substitution.length,
              offset: contentString.length
            });
            categoryString += SUBSTITUTION;
            contentString += substitution;
          } else {
            substitutionOffsets.push({
              length: 2,
              offset: contentString.length
            });
            categoryString += '%s';
            contentString += '%s';
          }
          substitutionIndex++;
        }
      }
      categoryParts.push(categoryString);
      contentParts.push(contentString);
    }
    var remainingArgs = remaining.map(arg => {
      return typeof arg === 'string' ? arg : (0, _stringifySafe.default)(arg);
    });
    categoryParts.push(...remainingArgs);
    contentParts.push(...remainingArgs);
    return {
      category: categoryParts.join(' '),
      message: {
        content: contentParts.join(' '),
        substitutions: substitutionOffsets
      }
    };
  }
  function isComponentStack(consoleArgument) {
    var isOldComponentStackFormat = RE_COMPONENT_STACK_LINE_OLD.test(consoleArgument);
    var isNewComponentStackFormat = RE_COMPONENT_STACK_LINE_NEW.test(consoleArgument);
    var isNewJSCComponentStackFormat = RE_COMPONENT_STACK_LINE_STACK_FRAME.test(consoleArgument);
    return isOldComponentStackFormat || isNewComponentStackFormat || isNewJSCComponentStackFormat;
  }
  function parseComponentStack(message) {
    var stack = (0, _parseErrorStack.default)(message);
    if (stack && stack.length > 0) {
      return {
        type: 'stack',
        stack: stack.map(frame => ({
          content: frame.methodName,
          collapse: frame.collapse || false,
          fileName: frame.file == null ? 'unknown' : frame.file,
          location: {
            column: frame.column == null ? -1 : frame.column,
            row: frame.lineNumber == null ? -1 : frame.lineNumber
          }
        }))
      };
    }
    var legacyStack = message.split(RE_COMPONENT_STACK_LINE_GLOBAL).map(s => {
      if (!s) {
        return null;
      }
      var match = s.match(RE_COMPONENT_STACK_WITH_SOURCE);
      if (match) {
        var _match$slice = match.slice(1),
          _match$slice2 = (0, _slicedToArray2.default)(_match$slice, 3),
          content = _match$slice2[0],
          fileName = _match$slice2[1],
          row = _match$slice2[2];
        return {
          content,
          fileName,
          location: {
            column: -1,
            row: parseInt(row, 10)
          }
        };
      }
      var matchWithoutSource = s.match(RE_COMPONENT_STACK_NO_SOURCE);
      if (matchWithoutSource) {
        return {
          content: matchWithoutSource[1],
          fileName: '',
          location: null
        };
      }
      return null;
    }).filter(Boolean);
    return {
      type: 'legacy',
      stack: legacyStack
    };
  }
  function parseLogBoxException(error) {
    var message = error.originalMessage != null ? error.originalMessage : 'Unknown';
    var metroInternalError = message.match(RE_METRO_ERROR_FORMAT);
    if (metroInternalError) {
      var _metroInternalError$s = metroInternalError.slice(1),
        _metroInternalError$s2 = (0, _slicedToArray2.default)(_metroInternalError$s, 5),
        content = _metroInternalError$s2[0],
        fileName = _metroInternalError$s2[1],
        row = _metroInternalError$s2[2],
        column = _metroInternalError$s2[3],
        codeFrame = _metroInternalError$s2[4];
      return {
        level: 'fatal',
        type: 'Metro Error',
        stack: [],
        isComponentError: false,
        componentStackType: 'legacy',
        componentStack: [],
        codeFrame: {
          fileName,
          location: {
            row: parseInt(row, 10),
            column: parseInt(column, 10)
          },
          content: codeFrame
        },
        message: {
          content,
          substitutions: []
        },
        category: `${fileName}-${row}-${column}`,
        extraData: error.extraData
      };
    }
    var babelTransformError = message.match(RE_BABEL_TRANSFORM_ERROR_FORMAT);
    if (babelTransformError) {
      var _babelTransformError$ = babelTransformError.slice(1),
        _babelTransformError$2 = (0, _slicedToArray2.default)(_babelTransformError$, 5),
        _fileName = _babelTransformError$2[0],
        _content = _babelTransformError$2[1],
        _row = _babelTransformError$2[2],
        _column = _babelTransformError$2[3],
        _codeFrame = _babelTransformError$2[4];
      return {
        level: 'syntax',
        stack: [],
        isComponentError: false,
        componentStackType: 'legacy',
        componentStack: [],
        codeFrame: {
          fileName: _fileName,
          location: {
            row: parseInt(_row, 10),
            column: parseInt(_column, 10)
          },
          content: _codeFrame
        },
        message: {
          content: _content,
          substitutions: []
        },
        category: `${_fileName}-${_row}-${_column}`,
        extraData: error.extraData
      };
    }
    if (RE_BABEL_CODE_FRAME_MARKER_PATTERN.test(message)) {
      var babelCodeFrameError = message.match(RE_BABEL_CODE_FRAME_ERROR_FORMAT);
      if (babelCodeFrameError) {
        var _babelCodeFrameError$ = babelCodeFrameError.slice(1),
          _babelCodeFrameError$2 = (0, _slicedToArray2.default)(_babelCodeFrameError$, 3),
          _fileName2 = _babelCodeFrameError$2[0],
          _content2 = _babelCodeFrameError$2[1],
          _codeFrame2 = _babelCodeFrameError$2[2];
        return {
          level: 'syntax',
          stack: [],
          isComponentError: false,
          componentStackType: 'legacy',
          componentStack: [],
          codeFrame: {
            fileName: _fileName2,
            location: null,
            content: _codeFrame2
          },
          message: {
            content: _content2,
            substitutions: []
          },
          category: `${_fileName2}-${1}-${1}`,
          extraData: error.extraData
        };
      }
    }
    if (message.match(RE_TRANSFORM_ERROR)) {
      return {
        level: 'syntax',
        stack: error.stack,
        isComponentError: error.isComponentError,
        componentStackType: 'legacy',
        componentStack: [],
        message: {
          content: message,
          substitutions: []
        },
        category: message,
        extraData: error.extraData
      };
    }
    var componentStack = error.componentStack;
    if (error.isFatal || error.isComponentError) {
      if (componentStack != null) {
        var _parseComponentStack = parseComponentStack(componentStack),
          type = _parseComponentStack.type,
          stack = _parseComponentStack.stack;
        return {
          level: 'fatal',
          stack: error.stack,
          isComponentError: error.isComponentError,
          componentStackType: type,
          componentStack: stack,
          extraData: error.extraData,
          ...parseInterpolation([message])
        };
      } else {
        return {
          level: 'fatal',
          stack: error.stack,
          isComponentError: error.isComponentError,
          componentStackType: 'legacy',
          componentStack: [],
          extraData: error.extraData,
          ...parseInterpolation([message])
        };
      }
    }
    if (componentStack != null) {
      var _parseComponentStack2 = parseComponentStack(componentStack),
        _type = _parseComponentStack2.type,
        _stack = _parseComponentStack2.stack;
      return {
        level: 'error',
        stack: error.stack,
        isComponentError: error.isComponentError,
        componentStackType: _type,
        componentStack: _stack,
        extraData: error.extraData,
        ...parseInterpolation([message])
      };
    }
    return {
      level: 'error',
      stack: error.stack,
      isComponentError: error.isComponentError,
      extraData: error.extraData,
      ...parseLogBoxLog([message])
    };
  }
  function withoutANSIColorStyles(message) {
    if (typeof message !== 'string') {
      return message;
    }
    return message.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
  }
  function parseLogBoxLog(args) {
    var message = withoutANSIColorStyles(args[0]);
    var argsWithoutComponentStack = [];
    var componentStack = [];
    var componentStackType = 'legacy';
    if (typeof message === 'string' && message.slice(-2) === '%s' && args.length > 0) {
      var lastArg = args[args.length - 1];
      if (typeof lastArg === 'string' && isComponentStack(lastArg)) {
        argsWithoutComponentStack = args.slice(0, -1);
        argsWithoutComponentStack[0] = message.slice(0, -2);
        var _parseComponentStack3 = parseComponentStack(lastArg),
          type = _parseComponentStack3.type,
          stack = _parseComponentStack3.stack;
        componentStack = stack;
        componentStackType = type;
      }
    }
    if (componentStack.length === 0 && argsWithoutComponentStack.length === 0) {
      for (var arg of args) {
        if (typeof arg === 'string' && isComponentStack(arg)) {
          var messageEndIndex = arg.search(RE_COMPONENT_STACK_LINE);
          if (messageEndIndex < 0) {
            messageEndIndex = arg.search(/\n/);
          }
          if (messageEndIndex > 0) {
            argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));
          }
          var _parseComponentStack4 = parseComponentStack(arg),
            _type2 = _parseComponentStack4.type,
            _stack2 = _parseComponentStack4.stack;
          componentStack = _stack2;
          componentStackType = _type2;
        } else {
          argsWithoutComponentStack.push(arg);
        }
      }
    }
    return {
      ...parseInterpolation(argsWithoutComponentStack),
      componentStack,
      componentStackType
    };
  }
},496,[1,29,82,497,48,498]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var deepFreezeAndThrowOnMutationInDev = require(_dependencyMap[0]).default;
  var UTFSequence = deepFreezeAndThrowOnMutationInDev({
    BOM: '\ufeff',
    BULLET: '\u2022',
    BULLET_SP: '\u00A0\u2022\u00A0',
    MIDDOT: '\u00B7',
    MIDDOT_SP: '\u00A0\u00B7\u00A0',
    MIDDOT_KATAKANA: '\u30FB',
    MDASH: '\u2014',
    MDASH_SP: '\u00A0\u2014\u00A0',
    NDASH: '\u2013',
    NDASH_SP: '\u00A0\u2013\u00A0',
    NEWLINE: '\u000A',
    NBSP: '\u00A0',
    PIZZA: '\uD83C\uDF55',
    TRIANGLE_LEFT: '\u25c0',
    TRIANGLE_RIGHT: '\u25b6'
  });
  var _default = exports.default = UTFSequence;
},497,[47]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function () {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$onlyFirst = _ref.onlyFirst,
      onlyFirst = _ref$onlyFirst === undefined ? false : _ref$onlyFirst;
    var pattern = ['[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)', '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'].join('|');
    return new RegExp(pattern, onlyFirst ? undefined : 'g');
  };
},498,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeDialogManagerAndroid = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeDialogManagerAndroid).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeDialogManagerAndroid[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeDialogManagerAndroid[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeDialogManagerAndroid.default;
},499,[500]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('DialogManagerAndroid');
},500,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var InteractionManager = require(_dependencyMap[0]).default;
  var TouchHistoryMath = require(_dependencyMap[1]).default;
  var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
  var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
  var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
  var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
  var currentCentroidX = TouchHistoryMath.currentCentroidX;
  var currentCentroidY = TouchHistoryMath.currentCentroidY;
  var PanResponder = {
    _initializeGestureState(gestureState) {
      gestureState.moveX = 0;
      gestureState.moveY = 0;
      gestureState.x0 = 0;
      gestureState.y0 = 0;
      gestureState.dx = 0;
      gestureState.dy = 0;
      gestureState.vx = 0;
      gestureState.vy = 0;
      gestureState.numberActiveTouches = 0;
      gestureState._accountsForMovesUpTo = 0;
    },
    _updateGestureStateOnMove(gestureState, touchHistory) {
      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
      gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
      var movedAfter = gestureState._accountsForMovesUpTo;
      var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
      var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
      var nextDX = gestureState.dx + (x - prevX);
      var nextDY = gestureState.dy + (y - prevY);
      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
      gestureState.vx = (nextDX - gestureState.dx) / dt;
      gestureState.vy = (nextDY - gestureState.dy) / dt;
      gestureState.dx = nextDX;
      gestureState.dy = nextDY;
      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
    },
    create(config) {
      var interactionState = {
        handle: null
      };
      var gestureState = {
        stateID: Math.random(),
        moveX: 0,
        moveY: 0,
        x0: 0,
        y0: 0,
        dx: 0,
        dy: 0,
        vx: 0,
        vy: 0,
        numberActiveTouches: 0,
        _accountsForMovesUpTo: 0
      };
      var panHandlers = {
        onStartShouldSetResponder(event) {
          return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);
        },
        onMoveShouldSetResponder(event) {
          return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);
        },
        onStartShouldSetResponderCapture(event) {
          if (event.nativeEvent.touches.length === 1) {
            PanResponder._initializeGestureState(gestureState);
          }
          gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;
          return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;
        },
        onMoveShouldSetResponderCapture(event) {
          var touchHistory = event.touchHistory;
          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return false;
          }
          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;
        },
        onResponderGrant(event) {
          if (!interactionState.handle) {
            interactionState.handle = InteractionManager.createInteractionHandle();
          }
          gestureState.x0 = currentCentroidX(event.touchHistory);
          gestureState.y0 = currentCentroidY(event.touchHistory);
          gestureState.dx = 0;
          gestureState.dy = 0;
          if (config.onPanResponderGrant) {
            config.onPanResponderGrant(event, gestureState);
          }
          return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);
        },
        onResponderReject(event) {
          clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);
        },
        onResponderRelease(event) {
          clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);
          PanResponder._initializeGestureState(gestureState);
        },
        onResponderStart(event) {
          var touchHistory = event.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          if (config.onPanResponderStart) {
            config.onPanResponderStart(event, gestureState);
          }
        },
        onResponderMove(event) {
          var touchHistory = event.touchHistory;
          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
            return;
          }
          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
          if (config.onPanResponderMove) {
            config.onPanResponderMove(event, gestureState);
          }
        },
        onResponderEnd(event) {
          var touchHistory = event.touchHistory;
          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
          clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);
        },
        onResponderTerminate(event) {
          clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);
          PanResponder._initializeGestureState(gestureState);
        },
        onResponderTerminationRequest(event) {
          return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);
        }
      };
      return {
        panHandlers,
        getInteractionHandle() {
          return interactionState.handle;
        }
      };
    }
  };
  function clearInteractionHandle(interactionState, callback, event, gestureState) {
    if (interactionState.handle) {
      InteractionManager.clearInteractionHandle(interactionState.handle);
      interactionState.handle = null;
    }
    if (callback) {
      callback(event, gestureState);
    }
  }
  var _default = exports.default = PanResponder;
},501,[333,502]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TouchHistoryMath = {
    centroidDimension: function (touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
      var touchBank = touchHistory.touchBank;
      var total = 0;
      var count = 0;
      var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
      if (oneTouchData !== null) {
        if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
          total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
          count = 1;
        }
      } else {
        for (var i = 0; i < touchBank.length; i++) {
          var touchTrack = touchBank[i];
          if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
            var toAdd = undefined;
            if (ofCurrent && isXAxis) {
              toAdd = touchTrack.currentPageX;
            } else if (ofCurrent && !isXAxis) {
              toAdd = touchTrack.currentPageY;
            } else if (!ofCurrent && isXAxis) {
              toAdd = touchTrack.previousPageX;
            } else {
              toAdd = touchTrack.previousPageY;
            }
            total += toAdd;
            count++;
          }
        }
      }
      return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
    },
    currentCentroidYOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
    },
    previousCentroidXOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
    },
    previousCentroidYOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {
      return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
    },
    currentCentroidX: function (touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
    },
    currentCentroidY: function (touchHistory) {
      return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
    },
    noCentroid: -1
  };
  var _default = exports.default = TouchHistoryMath;
},502,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _NativeDialogManagerAndroid = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativePermissionsAndroid = _interopRequireDefault(require(_dependencyMap[5]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[6]));
  var Platform = require(_dependencyMap[7]).default;
  var PERMISSION_REQUEST_RESULT = Object.freeze({
    GRANTED: 'granted',
    DENIED: 'denied',
    NEVER_ASK_AGAIN: 'never_ask_again'
  });
  var PERMISSIONS = Object.freeze({
    READ_CALENDAR: 'android.permission.READ_CALENDAR',
    WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
    CAMERA: 'android.permission.CAMERA',
    READ_CONTACTS: 'android.permission.READ_CONTACTS',
    WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
    GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
    ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
    ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
    ACCESS_BACKGROUND_LOCATION: 'android.permission.ACCESS_BACKGROUND_LOCATION',
    RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
    READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
    CALL_PHONE: 'android.permission.CALL_PHONE',
    READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
    WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
    ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
    READ_VOICEMAIL: 'com.android.voicemail.permission.READ_VOICEMAIL',
    WRITE_VOICEMAIL: 'com.android.voicemail.permission.WRITE_VOICEMAIL',
    USE_SIP: 'android.permission.USE_SIP',
    PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
    BODY_SENSORS: 'android.permission.BODY_SENSORS',
    BODY_SENSORS_BACKGROUND: 'android.permission.BODY_SENSORS_BACKGROUND',
    SEND_SMS: 'android.permission.SEND_SMS',
    RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
    READ_SMS: 'android.permission.READ_SMS',
    RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
    RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
    READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
    READ_MEDIA_IMAGES: 'android.permission.READ_MEDIA_IMAGES',
    READ_MEDIA_VIDEO: 'android.permission.READ_MEDIA_VIDEO',
    READ_MEDIA_AUDIO: 'android.permission.READ_MEDIA_AUDIO',
    READ_MEDIA_VISUAL_USER_SELECTED: 'android.permission.READ_MEDIA_VISUAL_USER_SELECTED',
    WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE',
    BLUETOOTH_CONNECT: 'android.permission.BLUETOOTH_CONNECT',
    BLUETOOTH_SCAN: 'android.permission.BLUETOOTH_SCAN',
    BLUETOOTH_ADVERTISE: 'android.permission.BLUETOOTH_ADVERTISE',
    ACCESS_MEDIA_LOCATION: 'android.permission.ACCESS_MEDIA_LOCATION',
    ACCEPT_HANDOVER: 'android.permission.ACCEPT_HANDOVER',
    ACTIVITY_RECOGNITION: 'android.permission.ACTIVITY_RECOGNITION',
    ANSWER_PHONE_CALLS: 'android.permission.ANSWER_PHONE_CALLS',
    READ_PHONE_NUMBERS: 'android.permission.READ_PHONE_NUMBERS',
    UWB_RANGING: 'android.permission.UWB_RANGING',
    POST_NOTIFICATIONS: 'android.permission.POST_NOTIFICATIONS',
    NEARBY_WIFI_DEVICES: 'android.permission.NEARBY_WIFI_DEVICES'
  });
  var PermissionsAndroid = /*#__PURE__*/function () {
    function PermissionsAndroid() {
      (0, _classCallCheck2.default)(this, PermissionsAndroid);
      this.PERMISSIONS = PERMISSIONS;
      this.RESULTS = PERMISSION_REQUEST_RESULT;
    }
    return (0, _createClass2.default)(PermissionsAndroid, [{
      key: "checkPermission",
      value: function checkPermission(permission) {
        console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
        {
          console.warn('"PermissionsAndroid" module works only for Android platform.');
          return Promise.resolve(false);
        }
        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.checkPermission(permission);
      }
    }, {
      key: "check",
      value: function check(permission) {
        {
          console.warn('"PermissionsAndroid" module works only for Android platform.');
          return Promise.resolve(false);
        }
        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.checkPermission(permission);
      }
    }, {
      key: "requestPermission",
      value: function () {
        var _requestPermission = (0, _asyncToGenerator2.default)(function* (permission, rationale) {
          console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
          {
            console.warn('"PermissionsAndroid" module works only for Android platform.');
            return Promise.resolve(false);
          }
          var response = yield this.request(permission, rationale);
          return response === this.RESULTS.GRANTED;
        });
        function requestPermission(_x, _x2) {
          return _requestPermission.apply(this, arguments);
        }
        return requestPermission;
      }()
    }, {
      key: "request",
      value: function () {
        var _request = (0, _asyncToGenerator2.default)(function* (permission, rationale) {
          {
            console.warn('"PermissionsAndroid" module works only for Android platform.');
            return Promise.resolve(this.RESULTS.DENIED);
          }
          (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
          if (rationale) {
            var shouldShowRationale = yield _NativePermissionsAndroid.default.shouldShowRequestPermissionRationale(permission);
            if (shouldShowRationale && !!_NativeDialogManagerAndroid.default) {
              return new Promise((resolve, reject) => {
                var options = {
                  ...rationale
                };
                _NativeDialogManagerAndroid.default.showAlert(options, () => reject(new Error('Error showing rationale')), () => resolve(_NativePermissionsAndroid.default.requestPermission(permission)));
              });
            }
          }
          return _NativePermissionsAndroid.default.requestPermission(permission);
        });
        function request(_x3, _x4) {
          return _request.apply(this, arguments);
        }
        return request;
      }()
    }, {
      key: "requestMultiple",
      value: function requestMultiple(permissions) {
        {
          console.warn('"PermissionsAndroid" module works only for Android platform.');
          return Promise.resolve({});
        }
        (0, _invariant.default)(_NativePermissionsAndroid.default, 'PermissionsAndroid is not installed correctly.');
        return _NativePermissionsAndroid.default.requestMultiplePermissions(permissions);
      }
    }]);
  }();
  var PermissionsAndroidInstance = new PermissionsAndroid();
  var _default = exports.default = PermissionsAndroidInstance;
},503,[1,54,10,11,499,504,42,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativePermissionsAndroid = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativePermissionsAndroid).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativePermissionsAndroid[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativePermissionsAndroid[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativePermissionsAndroid.default;
},504,[505]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('PermissionsAndroid');
},505,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeEventEmitter = _interopRequireDefault(require(_dependencyMap[3]));
  var _Platform = _interopRequireDefault(require(_dependencyMap[4]));
  var _NativePushNotificationManagerIOS = _interopRequireDefault(require(_dependencyMap[5]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[6]));
  var PushNotificationEmitter = new _NativeEventEmitter.default(_NativePushNotificationManagerIOS.default);
  var _notifHandlers = new Map();
  var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
  var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
  var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
  var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';
  var PushNotificationIOS = /*#__PURE__*/function () {
    function PushNotificationIOS(nativeNotif) {
      (0, _classCallCheck2.default)(this, PushNotificationIOS);
      this._data = {};
      this._remoteNotificationCompleteCallbackCalled = false;
      this._isRemote = nativeNotif.remote;
      if (this._isRemote) {
        this._notificationId = nativeNotif.notificationId;
      }
      if (nativeNotif.remote) {
        Object.keys(nativeNotif).forEach(notifKey => {
          var notifVal = nativeNotif[notifKey];
          if (notifKey === 'aps') {
            this._alert = notifVal.alert;
            this._sound = notifVal.sound;
            this._badgeCount = notifVal.badge;
            this._category = notifVal.category;
            this._contentAvailable = notifVal['content-available'];
            this._threadID = notifVal['thread-id'];
          } else {
            this._data[notifKey] = notifVal;
          }
        });
      } else {
        this._badgeCount = nativeNotif.applicationIconBadgeNumber;
        this._sound = nativeNotif.soundName;
        this._alert = nativeNotif.alertBody;
        this._data = nativeNotif.userInfo;
        this._category = nativeNotif.category;
      }
    }
    return (0, _createClass2.default)(PushNotificationIOS, [{
      key: "finish",
      value: function finish(fetchResult) {
        if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
          return;
        }
        this._remoteNotificationCompleteCallbackCalled = true;
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.onFinishRemoteNotification(this._notificationId, fetchResult);
      }
    }, {
      key: "getMessage",
      value: function getMessage() {
        return this._alert;
      }
    }, {
      key: "getSound",
      value: function getSound() {
        return this._sound;
      }
    }, {
      key: "getCategory",
      value: function getCategory() {
        return this._category;
      }
    }, {
      key: "getAlert",
      value: function getAlert() {
        return this._alert;
      }
    }, {
      key: "getContentAvailable",
      value: function getContentAvailable() {
        return this._contentAvailable;
      }
    }, {
      key: "getBadgeCount",
      value: function getBadgeCount() {
        return this._badgeCount;
      }
    }, {
      key: "getData",
      value: function getData() {
        return this._data;
      }
    }, {
      key: "getThreadID",
      value: function getThreadID() {
        return this._threadID;
      }
    }], [{
      key: "presentLocalNotification",
      value: function presentLocalNotification(details) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.presentLocalNotification(details);
      }
    }, {
      key: "scheduleLocalNotification",
      value: function scheduleLocalNotification(details) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.scheduleLocalNotification(details);
      }
    }, {
      key: "cancelAllLocalNotifications",
      value: function cancelAllLocalNotifications() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.cancelAllLocalNotifications();
      }
    }, {
      key: "removeAllDeliveredNotifications",
      value: function removeAllDeliveredNotifications() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.removeAllDeliveredNotifications();
      }
    }, {
      key: "getDeliveredNotifications",
      value: function getDeliveredNotifications(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getDeliveredNotifications(callback);
      }
    }, {
      key: "removeDeliveredNotifications",
      value: function removeDeliveredNotifications(identifiers) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.removeDeliveredNotifications(identifiers);
      }
    }, {
      key: "setApplicationIconBadgeNumber",
      value: function setApplicationIconBadgeNumber(number) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.setApplicationIconBadgeNumber(number);
      }
    }, {
      key: "getApplicationIconBadgeNumber",
      value: function getApplicationIconBadgeNumber(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getApplicationIconBadgeNumber(callback);
      }
    }, {
      key: "cancelLocalNotifications",
      value: function cancelLocalNotifications(userInfo) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.cancelLocalNotifications(userInfo);
      }
    }, {
      key: "getScheduledLocalNotifications",
      value: function getScheduledLocalNotifications(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getScheduledLocalNotifications(callback);
      }
    }, {
      key: "addEventListener",
      value: function addEventListener(type, handler) {
        (0, _invariant.default)(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener;
        if (type === 'notification') {
          listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, notifData => {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'localNotification') {
          listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, notifData => {
            handler(new PushNotificationIOS(notifData));
          });
        } else if (type === 'register') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, registrationInfo => {
            handler(registrationInfo.deviceToken);
          });
        } else if (type === 'registrationError') {
          listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, errorInfo => {
            handler(errorInfo);
          });
        }
        _notifHandlers.set(type, listener);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type) {
        (0, _invariant.default)(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
        var listener = _notifHandlers.get(type);
        if (!listener) {
          return;
        }
        listener.remove();
        _notifHandlers.delete(type);
      }
    }, {
      key: "requestPermissions",
      value: function requestPermissions(permissions) {
        var requestedPermissions = {
          alert: true,
          badge: true,
          sound: true
        };
        if (permissions) {
          requestedPermissions = {
            alert: !!permissions.alert,
            badge: !!permissions.badge,
            sound: !!permissions.sound
          };
        }
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        return _NativePushNotificationManagerIOS.default.requestPermissions(requestedPermissions);
      }
    }, {
      key: "abandonPermissions",
      value: function abandonPermissions() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.abandonPermissions();
      }
    }, {
      key: "checkPermissions",
      value: function checkPermissions(callback) {
        (0, _invariant.default)(typeof callback === 'function', 'Must provide a valid callback');
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.checkPermissions(callback);
      }
    }, {
      key: "getInitialNotification",
      value: function getInitialNotification() {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        return _NativePushNotificationManagerIOS.default.getInitialNotification().then(notification => {
          return notification && new PushNotificationIOS(notification);
        });
      }
    }, {
      key: "getAuthorizationStatus",
      value: function getAuthorizationStatus(callback) {
        (0, _invariant.default)(_NativePushNotificationManagerIOS.default, 'PushNotificationManager is not available.');
        _NativePushNotificationManagerIOS.default.getAuthorizationStatus(callback);
      }
    }]);
  }();
  PushNotificationIOS.FetchResult = {
    NewData: 'UIBackgroundFetchResultNewData',
    NoData: 'UIBackgroundFetchResultNoData',
    ResultFailed: 'UIBackgroundFetchResultFailed'
  };
  var _default = exports.default = PushNotificationIOS;
},506,[1,10,11,242,87,507,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativePushNotificationManagerIOS = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativePushNotificationManagerIOS).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativePushNotificationManagerIOS[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativePushNotificationManagerIOS[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativePushNotificationManagerIOS.default;
},507,[508]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('PushNotificationManager');
},508,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _RCTDeviceEventEmitter = _interopRequireDefault(require(_dependencyMap[1]));
  var _NativeSettingsManager = _interopRequireDefault(require(_dependencyMap[2]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[3]));
  var subscriptions = [];
  var Settings = {
    _settings: _NativeSettingsManager.default && _NativeSettingsManager.default.getConstants().settings,
    get(key) {
      return this._settings[key];
    },
    set(settings) {
      this._settings = Object.assign(this._settings, settings);
      _NativeSettingsManager.default.setValues(settings);
    },
    watchKeys(keys, callback) {
      if (typeof keys === 'string') {
        keys = [keys];
      }
      (0, _invariant.default)(Array.isArray(keys), 'keys should be a string or array of strings');
      var sid = subscriptions.length;
      subscriptions.push({
        keys: keys,
        callback: callback
      });
      return sid;
    },
    clearWatch(watchId) {
      if (watchId < subscriptions.length) {
        subscriptions[watchId] = {
          keys: [],
          callback: null
        };
      }
    },
    _sendObservations(body) {
      Object.keys(body).forEach(key => {
        var newValue = body[key];
        var didChange = this._settings[key] !== newValue;
        this._settings[key] = newValue;
        if (didChange) {
          subscriptions.forEach(sub => {
            if (sub.keys.indexOf(key) !== -1 && sub.callback) {
              sub.callback();
            }
          });
        }
      });
    }
  };
  _RCTDeviceEventEmitter.default.addListener('settingsUpdated', Settings._sendObservations.bind(Settings));
  var _default = exports.default = Settings;
},509,[1,63,510,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeSettingsManager = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeSettingsManager).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeSettingsManager[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeSettingsManager[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeSettingsManager.default;
},510,[511]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('SettingsManager');
},511,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _NativeActionSheetManager = _interopRequireDefault(require(_dependencyMap[3]));
  var _NativeShareModule = _interopRequireDefault(require(_dependencyMap[4]));
  var processColor = require(_dependencyMap[5]).default;
  var Platform = require(_dependencyMap[6]).default;
  var invariant = require(_dependencyMap[7]);
  var Share = /*#__PURE__*/function () {
    function Share() {
      (0, _classCallCheck2.default)(this, Share);
    }
    return (0, _createClass2.default)(Share, null, [{
      key: "share",
      value: function share(content) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
        invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL or message is required');
        invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
        {
          return new Promise((resolve, reject) => {
            var tintColor = processColor(options.tintColor);
            invariant(tintColor == null || typeof tintColor === 'number', 'Unexpected color given for options.tintColor');
            invariant(_NativeActionSheetManager.default, 'NativeActionSheetManager is not registered on iOS, but it should be.');
            _NativeActionSheetManager.default.showShareActionSheetWithOptions({
              message: typeof content.message === 'string' ? content.message : undefined,
              url: typeof content.url === 'string' ? content.url : undefined,
              subject: options.subject,
              tintColor: typeof tintColor === 'number' ? tintColor : undefined,
              anchor: typeof options.anchor === 'number' ? options.anchor : undefined,
              excludedActivityTypes: options.excludedActivityTypes
            }, error => reject(error), (success, activityType) => {
              if (success) {
                resolve({
                  action: 'sharedAction',
                  activityType: activityType
                });
              } else {
                resolve({
                  action: 'dismissedAction',
                  activityType: null
                });
              }
            });
          });
        }
      }
    }]);
  }();
  Share.sharedAction = 'sharedAction';
  Share.dismissedAction = 'dismissedAction';
  var _default = exports.default = Share;
},512,[1,10,11,472,513,99,87,42]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeShareModule = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeShareModule).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeShareModule[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeShareModule[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeShareModule.default;
},513,[514]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.get('ShareModule');
},514,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var ToastAndroid = {
    SHORT: 0,
    LONG: 0,
    TOP: 0,
    BOTTOM: 0,
    CENTER: 0,
    show: function (message, duration) {
      console.warn('ToastAndroid is not supported on this platform.');
    },
    showWithGravity: function (message, duration, gravity) {
      console.warn('ToastAndroid is not supported on this platform.');
    },
    showWithGravityAndOffset: function (message, duration, gravity, xOffset, yOffset) {
      console.warn('ToastAndroid is not supported on this platform.');
    }
  };
  var _default = exports.default = ToastAndroid;
},515,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useAnimatedValue;
  var _Animated = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = require(_dependencyMap[2]);
  function useAnimatedValue(initialValue, config) {
    var ref = (0, _react.useRef)(null);
    if (ref.current == null) {
      ref.current = new _Animated.default.Value(initialValue, config);
    }
    return ref.current;
  }
},516,[1,322,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = useColorScheme;
  var _Appearance = require(_dependencyMap[0]);
  var _react = require(_dependencyMap[1]);
  var subscribe = onStoreChange => {
    var appearanceSubscription = (0, _Appearance.addChangeListener)(onStoreChange);
    return () => appearanceSubscription.remove();
  };
  function useColorScheme() {
    return (0, _react.useSyncExternalStore)(subscribe, _Appearance.getColorScheme);
  }
},517,[474,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _NativeVibration = _interopRequireDefault(require(_dependencyMap[1]));
  var Platform = require(_dependencyMap[2]).default;
  var _vibrating = false;
  var _id = 0;
  var _default_vibration_length = 400;
  function vibrateByPattern(pattern) {
    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (_vibrating) {
      return;
    }
    _vibrating = true;
    if (pattern[0] === 0) {
      _NativeVibration.default.vibrate(_default_vibration_length);
      pattern = pattern.slice(1);
    }
    if (pattern.length === 0) {
      _vibrating = false;
      return;
    }
    setTimeout(() => vibrateScheduler(++_id, pattern, repeat, 1), pattern[0]);
  }
  function vibrateScheduler(id, pattern, repeat, nextIndex) {
    if (!_vibrating || id !== _id) {
      return;
    }
    _NativeVibration.default.vibrate(_default_vibration_length);
    if (nextIndex >= pattern.length) {
      if (repeat) {
        nextIndex = 0;
      } else {
        _vibrating = false;
        return;
      }
    }
    setTimeout(() => vibrateScheduler(id, pattern, repeat, nextIndex + 1), pattern[nextIndex]);
  }
  var Vibration = {
    vibrate: function () {
      var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _default_vibration_length;
      var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      {
        if (_vibrating) {
          return;
        }
        if (typeof pattern === 'number') {
          _NativeVibration.default.vibrate(pattern);
        } else if (Array.isArray(pattern)) {
          vibrateByPattern(pattern, repeat);
        } else {
          throw new Error('Vibration pattern should be a number or array');
        }
      }
    },
    cancel: function () {
      {
        _vibrating = false;
      }
    }
  };
  var _default = exports.default = Vibration;
},518,[1,519,87]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _NativeVibration = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_NativeVibration).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _NativeVibration[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _NativeVibration[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _NativeVibration.default;
},519,[520]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var TurboModuleRegistry = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = TurboModuleRegistry.getEnforcing('Vibration');
},520,[41]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DynamicColorIOS = undefined;
  var _PlatformColorValueTypes = require(_dependencyMap[0]);
  var DynamicColorIOS = tuple => {
    return (0, _PlatformColorValueTypes.DynamicColorIOSPrivate)({
      light: tuple.light,
      dark: tuple.dark,
      highContrastLight: tuple.highContrastLight,
      highContrastDark: tuple.highContrastDark
    });
  };
  exports.DynamicColorIOS = DynamicColorIOS;
},521,[102]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _reactNative = require(_dependencyMap[0]);
  var _browser = require(_dependencyMap[1]);
  var nativeSelect = typeof window !== 'undefined' ? _reactNative.Platform.select :
  // process.env.EXPO_OS is injected by `babel-preset-expo` and available in both client and `react-server` environments.
  // Opt to use the env var when possible, and fallback to the React Native Platform module when it's not (arbitrary bundlers and transformers).
  function select(specifics) {
    if (specifics.hasOwnProperty("ios")) {
      return specifics["ios"];
    } else if (specifics.hasOwnProperty('native')) {
      return specifics.native;
    } else if (specifics.hasOwnProperty('default')) {
      return specifics.default;
    }
    // do nothing...
    return undefined;
  };
  var Platform = {
    /**
     * Denotes the currently running platform.
     * Can be one of ios, android, web.
     */
    OS: "ios",
    /**
     * Returns the value with the matching platform.
     * Object keys can be any of ios, android, native, web, default.
     *
     * @ios ios, native, default
     * @android android, native, default
     * @web web, default
     */
    select: nativeSelect,
    /**
     * Denotes if the DOM API is available in the current environment.
     * The DOM is not available in native React runtimes and Node.js.
     */
    isDOMAvailable: _browser.isDOMAvailable,
    /**
     * Denotes if the current environment can attach event listeners
     * to the window. This will return false in native React
     * runtimes and Node.js.
     */
    canUseEventListeners: _browser.canUseEventListeners,
    /**
     * Denotes if the current environment can inspect properties of the
     * screen on which the current window is being rendered. This will
     * return false in native React runtimes and Node.js.
     */
    canUseViewport: _browser.canUseViewport,
    /**
     * If the JavaScript is being executed in a remote JavaScript environment.
     * When `true`, synchronous native invocations cannot be executed.
     */
    isAsyncDebugging: _browser.isAsyncDebugging
  };
  var _default = exports.default = Platform;
},522,[60,523]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isDOMAvailable = exports.isAsyncDebugging = exports.canUseViewport = exports.canUseEventListeners = undefined;
  // In standard node environments there is no DOM API
  var isDOMAvailable = exports.isDOMAvailable = false;
  var canUseEventListeners = exports.canUseEventListeners = false;
  var canUseViewport = exports.canUseViewport = false;
  var isAsyncDebugging = exports.isAsyncDebugging = false;
},523,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CodedError = undefined;
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _wrapNativeSuper2 = _interopRequireDefault(require(_dependencyMap[6]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  /**
   * A general error class that should be used for all errors in Expo modules.
   * Guarantees a `code` field that can be used to differentiate between different
   * types of errors without further subclassing Error.
   */
  var CodedError = exports.CodedError = /*#__PURE__*/function (_Error) {
    function CodedError(code, message) {
      var _this;
      (0, _classCallCheck2.default)(this, CodedError);
      _this = _callSuper(this, CodedError, [message]);
      _this.code = code;
      return _this;
    }
    (0, _inherits2.default)(CodedError, _Error);
    return (0, _createClass2.default)(CodedError);
  }(/*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
},524,[1,11,10,64,66,69,78]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.registerWebGlobals = registerWebGlobals;
  function registerWebGlobals() {}
},525,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use client';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ensureNativeModulesAreInstalled = require(_dependencyMap[0]);
  (0, _ensureNativeModulesAreInstalled.ensureNativeModulesAreInstalled)();
  var _default = exports.default = globalThis.expo.NativeModule;
},526,[527]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ensureNativeModulesAreInstalled = ensureNativeModulesAreInstalled;
  var _reactNative = require(_dependencyMap[0]);
  var _web = require(_dependencyMap[1]);
  /**
   * Ensures that the native modules are installed in the current runtime.
   * Otherwise, it synchronously calls a native function that installs them.
   */
  function ensureNativeModulesAreInstalled() {
    if (globalThis.expo) {
      return;
    }
    try {
      {
        // TODO: ExpoModulesCore shouldn't be optional here,
        // but to keep backwards compatibility let's just ignore it in SDK 50.
        // In most cases the modules were already installed from the native side.
        _reactNative.NativeModules.ExpoModulesCore?.installModules();
      }
    } catch (error) {
      console.error(`Unable to install Expo modules: ${error}`);
    }
  }
},527,[60,525]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use client';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ensureNativeModulesAreInstalled = require(_dependencyMap[0]);
  (0, _ensureNativeModulesAreInstalled.ensureNativeModulesAreInstalled)();
  var SharedObject = globalThis.expo.SharedObject;
  var _default = exports.default = SharedObject;
},528,[527]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use client';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ensureNativeModulesAreInstalled = require(_dependencyMap[0]);
  (0, _ensureNativeModulesAreInstalled.ensureNativeModulesAreInstalled)();
  var SharedRef = globalThis.expo.SharedRef;
  var _default = exports.default = SharedRef;
},529,[527]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function () {
      return _uuid.default;
    }
  });
  var _uuid = _interopRequireDefault(require(_dependencyMap[1]));
},530,[1,531]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _bytesToUuid = _interopRequireDefault(require(_dependencyMap[1]));
  var _uuid = require(_dependencyMap[2]);
  function uuidv4() {
    var nativeUuidv4 = globalThis?.expo?.uuidv4;
    if (!nativeUuidv4) {
      throw Error("Native UUID version 4 generator implementation wasn't found in `expo-modules-core`");
    }
    return nativeUuidv4();
  }
  function uuidv5(name, namespace) {
    var parsedNamespace = Array.isArray(namespace) && namespace.length === 16 ? (0, _bytesToUuid.default)(namespace) : namespace;

    // If parsed namespace is still an array it means that it wasn't valid
    if (Array.isArray(parsedNamespace)) {
      throw new Error('`namespace` must be a valid UUID string or an Array of 16 byte values');
    }
    var nativeUuidv5 = globalThis?.expo?.uuidv5;
    if (!nativeUuidv5) {
      throw Error("Native UUID type 5 generator implementation wasn't found in `expo-modules-core`");
    }
    return nativeUuidv5(name, parsedNamespace);
  }
  var uuid = {
    v4: uuidv4,
    v5: uuidv5,
    namespace: _uuid.Uuidv5Namespace
  };
  var _default = exports.default = uuid;
},531,[1,532,533]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */
  var byteToHex = [];
  for (var i = 0; i < 256; ++i) {
    byteToHex[i] = (i + 0x100).toString(16).substr(1);
  }
  function bytesToUuid(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex;
    // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
    return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join('');
  }
  var _default = exports.default = bytesToUuid;
},532,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Uuidv5Namespace = undefined;
  /**
   * Collection of utilities used for generating Universally Unique Identifiers.
   */
  /**
   * Default namespaces for UUID v5 defined in RFC 4122
   */
  var Uuidv5Namespace = exports.Uuidv5Namespace = /*#__PURE__*/function (Uuidv5Namespace) {
    // Source of the UUIDs: https://datatracker.ietf.org/doc/html/rfc4122
    Uuidv5Namespace["dns"] = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    Uuidv5Namespace["url"] = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    Uuidv5Namespace["oid"] = "6ba7b812-9dad-11d1-80b4-00c04fd430c8";
    Uuidv5Namespace["x500"] = "6ba7b814-9dad-11d1-80b4-00c04fd430c8";
    return Uuidv5Namespace;
  }({});
},533,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use client';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _ensureNativeModulesAreInstalled = require(_dependencyMap[0]);
  (0, _ensureNativeModulesAreInstalled.ensureNativeModulesAreInstalled)();

  /**
   * A subscription object that allows to conveniently remove an event listener from the emitter.
   */
  var _default = exports.default = globalThis.expo.EventEmitter;
},534,[527]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  // Copyright © 2024 650 Industries.

  /// <reference path="ts-declarations/NativeComponentRegistry.d.ts" />

  'use client';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.requireNativeViewManager = requireNativeViewManager;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _react = require(_dependencyMap[6]);
  var _reactNative = require(_dependencyMap[7]);
  var _NativeComponentRegistry = require(_dependencyMap[8]);
  var _requireNativeModule = require(_dependencyMap[9]);
  var _jsxRuntime = require(_dependencyMap[10]);
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); } // To make the transition from React Native's `requireNativeComponent` to Expo's
  // `requireNativeViewManager` as easy as possible, `requireNativeViewManager` is a drop-in
  // replacement for `requireNativeComponent`.
  //
  // For each view manager, we create a wrapper component that accepts all the props available to
  // the author of the universal module. This wrapper component splits the props into two sets: props
  // passed to React Native's View (ex: style, testID) and custom view props, which are passed to the
  // adapter view component in a prop called `proxiedProperties`.
  /**
 * A map that caches registered native components.
 */
  var nativeComponentsCache = new Map();

  // TODO(@kitten): Optimally, this is defined on ExpoGlobal, but we treat `__expo_app_identifier__` as internal

  /**
   * Requires a React Native component using the static view config from an Expo module.
   */
  function requireNativeComponent(moduleName, viewName) {
    var appIdentifier = globalThis.expo?.['__expo_app_identifier__'] ?? '';
    var viewNameSuffix = appIdentifier ? `_${appIdentifier}` : '';
    var nativeViewName = viewName ? `ViewManagerAdapter_${moduleName}_${viewName}${viewNameSuffix}` : `ViewManagerAdapter_${moduleName}${viewNameSuffix}`;
    return (0, _NativeComponentRegistry.get)(nativeViewName, () => {
      var expoViewConfig = globalThis.expo?.getViewConfig(moduleName, viewName);
      if (!expoViewConfig) {
        console.warn('Unable to get the view config for %s from module &s', viewName ?? 'default view', moduleName);
      }
      return {
        uiViewClassName: nativeViewName,
        ...expoViewConfig
      };
    });
  }

  /**
   * Requires a React Native component from cache if possible. This prevents
   * "Tried to register two views with the same name" errors on fast refresh, but
   * also when there are multiple versions of the same package with native component.
   */
  function requireCachedNativeComponent(moduleName, viewName) {
    var cacheKey = `${moduleName}_${viewName}`;
    var cachedNativeComponent = nativeComponentsCache.get(cacheKey);
    if (!cachedNativeComponent) {
      var nativeComponent = requireNativeComponent(moduleName, viewName);
      nativeComponentsCache.set(cacheKey, nativeComponent);
      return nativeComponent;
    }
    return cachedNativeComponent;
  }

  /**
   * A drop-in replacement for `requireNativeComponent`.
   */
  function requireNativeViewManager(moduleName, viewName) {
    var viewManagersMetadata = _reactNative.NativeModules.NativeUnimoduleProxy.viewManagersMetadata;
    var viewManagerConfig = viewManagersMetadata?.[moduleName];
    var ReactNativeComponent = requireCachedNativeComponent(moduleName, viewName);
    var NativeComponent = /*#__PURE__*/function (_PureComponent) {
      function NativeComponent() {
        var _this;
        (0, _classCallCheck2.default)(this, NativeComponent);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _callSuper(this, NativeComponent, [...args]);
        _this.nativeRef = /*#__PURE__*/(0, _react.createRef)();
        // This will be accessed from native when the prototype functions are called,
        // in order to find the associated native view.
        _this.nativeTag = null;
        return _this;
      }
      (0, _inherits2.default)(NativeComponent, _PureComponent);
      return (0, _createClass2.default)(NativeComponent, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.nativeTag = (0, _reactNative.findNodeHandle)(this.nativeRef.current);
        }
      }, {
        key: "render",
        value: function render() {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(ReactNativeComponent, {
            ...this.props,
            ref: this.nativeRef
          });
        }
      }]);
    }(_react.PureComponent);
    NativeComponent.displayName = viewName ? viewName : moduleName;
    try {
      var nativeModule = (0, _requireNativeModule.requireNativeModule)(moduleName);
      var nativeViewPrototype = nativeModule.ViewPrototypes[viewName ? `${moduleName}_${viewName}` : moduleName];
      if (nativeViewPrototype) {
        // Assign native view functions to the component prototype, so they can be accessed from the ref.
        Object.assign(NativeComponent.prototype, nativeViewPrototype);
      }
    } catch {
      // `requireNativeModule` may throw an error when the native module cannot be found.
      // In some tests we don't mock the entire modules, but we do want to mock native views. For now,
      // until we still have to support the legacy modules proxy and don't have better ways to mock,
      // let's just gracefully skip assigning the prototype functions.
      // See: https://github.com/expo/expo/blob/main/packages/expo-modules-core/src/__tests__/NativeViewManagerAdapter-test.native.tsx
    }
    return NativeComponent;
  }
},535,[1,10,11,64,66,69,140,60,96,536,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.requireNativeModule = requireNativeModule;
  exports.requireOptionalNativeModule = requireOptionalNativeModule;
  var _NativeModulesProxy = _interopRequireDefault(require(_dependencyMap[1]));
  var _ensureNativeModulesAreInstalled = require(_dependencyMap[2]);
  /**
   * Imports the native module registered with given name. In the first place it tries to load
   * the module installed through the JSI host object and then falls back to the bridge proxy module.
   * Notice that the modules loaded from the proxy may not support some features like synchronous functions.
   *
   * @param moduleName Name of the requested native module.
   * @returns Object representing the native module.
   * @throws Error when there is no native module with given name.
   */
  function requireNativeModule(moduleName) {
    var nativeModule = requireOptionalNativeModule(moduleName);
    if (!nativeModule) {
      throw new Error(`Cannot find native module '${moduleName}'`);
    }
    return nativeModule;
  }

  /**
   * Imports the native module registered with the given name. The same as `requireNativeModule`,
   * but returns `null` when the module cannot be found instead of throwing an error.
   *
   * @param moduleName Name of the requested native module.
   * @returns Object representing the native module or `null` when it cannot be found.
   */
  function requireOptionalNativeModule(moduleName) {
    (0, _ensureNativeModulesAreInstalled.ensureNativeModulesAreInstalled)();
    return globalThis.expo?.modules?.[moduleName] ?? _NativeModulesProxy.default[moduleName] ?? null;
  }
},536,[1,59,527]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.registerWebModule = registerWebModule;
  var _ensureNativeModulesAreInstalled = require(_dependencyMap[0]);
  /**
   * Registers a web module.
   * @param moduleImplementation A class that extends `NativeModule`. The class is registered under `globalThis.expo.modules[className]`.
   * @param moduleName – a name to register the module under `globalThis.expo.modules[className]`.
   * @returns A singleton instance of the class passed into arguments.
   */

  function registerWebModule(moduleImplementation, moduleName) {
    (0, _ensureNativeModulesAreInstalled.ensureNativeModulesAreInstalled)();
    moduleName = moduleName ?? moduleImplementation.name;
    if (!moduleName) {
      throw new Error('Web module implementation is missing a name - it is either not a class or has been minified. Pass the name as a second argument to the `registerWebModule` function.');
    }
    if (!globalThis?.expo?.modules) {
      globalThis.expo.modules = {};
    }
    if (globalThis.expo.modules[moduleName]) {
      return globalThis.expo.modules[moduleName];
    }
    globalThis.expo.modules[moduleName] = new moduleImplementation();
    return globalThis.expo.modules[moduleName];
  }
},537,[527]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {},538,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PermissionStatus = undefined;
  var PermissionStatus = exports.PermissionStatus = /*#__PURE__*/function (PermissionStatus) {
    /**
     * User has granted the permission.
     */
    PermissionStatus["GRANTED"] = "granted";
    /**
     * User hasn't granted or denied the permission yet.
     */
    PermissionStatus["UNDETERMINED"] = "undetermined";
    /**
     * User has denied the permission.
     */
    PermissionStatus["DENIED"] = "denied";
    return PermissionStatus;
  }({});
  /**
   * Permission expiration time. Currently, all permissions are granted permanently.
   */
  /**
   * An object obtained by permissions get and request functions.
   */
},539,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  // Copyright © 2024 650 Industries.

  'use client';

  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createPermissionHook = createPermissionHook;
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _react = require(_dependencyMap[4]);
  var _excluded = ["get", "request"];
  // These types are identical, but improves the readability for suggestions in editors

  /**
   * Get or request permission for protected functionality within the app.
   * It uses separate permission requesters to interact with a single permission.
   * By default, the hook will only retrieve the permission status.
   */
  function usePermission(methods, options) {
    var isMounted = (0, _react.useRef)(true);
    var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      status = _useState2[0],
      setStatus = _useState2[1];
    var _ref = options || {},
      _ref$get = _ref.get,
      get = _ref$get === undefined ? true : _ref$get,
      _ref$request = _ref.request,
      request = _ref$request === undefined ? false : _ref$request,
      permissionOptions = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var getPermission = (0, _react.useCallback)(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
      var response = yield methods.getMethod(Object.keys(permissionOptions).length > 0 ? permissionOptions : undefined);
      if (isMounted.current) setStatus(response);
      return response;
    }), [methods.getMethod]);
    var requestPermission = (0, _react.useCallback)(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
      var response = yield methods.requestMethod(Object.keys(permissionOptions).length > 0 ? permissionOptions : undefined);
      if (isMounted.current) setStatus(response);
      return response;
    }), [methods.requestMethod]);
    (0, _react.useEffect)(function runMethods() {
      if (request) requestPermission();
      if (!request && get) getPermission();
    }, [get, request, requestPermission, getPermission]);

    // Workaround for unmounting components receiving state updates
    (0, _react.useEffect)(function didMount() {
      isMounted.current = true;
      return () => {
        isMounted.current = false;
      };
    }, []);
    return [status, requestPermission, getPermission];
  }

  /**
   * Create a new permission hook with the permission methods built-in.
   * This can be used to quickly create specific permission hooks in every module.
   */
  function createPermissionHook(methods) {
    return options => usePermission(methods, options);
  }
},540,[1,54,238,29,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createSnapshotFriendlyRef = createSnapshotFriendlyRef;
  var _react = require(_dependencyMap[0]);
  /**
   * Create a React ref object that is friendly for snapshots.
   * It will be represented as `[React.ref]` in snapshots.
   * @returns A React ref object.
   */
  function createSnapshotFriendlyRef() {
    return /*#__PURE__*/(0, _react.createRef)();
  }
},541,[140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use client';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.useReleasingSharedObject = useReleasingSharedObject;
  var _react = require(_dependencyMap[0]);
  /**
   * Returns a shared object, which is automatically cleaned up when the component is unmounted.
   */
  function useReleasingSharedObject(factory, dependencies) {
    var objectRef = (0, _react.useRef)(null);
    var isFastRefresh = (0, _react.useRef)(false);
    var previousDependencies = (0, _react.useRef)(dependencies);
    if (objectRef.current == null) {
      objectRef.current = factory();
    }
    var object = (0, _react.useMemo)(() => {
      var newObject = objectRef.current;
      var dependenciesAreEqual = previousDependencies.current?.length === dependencies.length && dependencies.every((value, index) => value === previousDependencies.current[index]);

      // If the dependencies have changed, release the previous object and create a new one, otherwise this has been called
      // because of a fast refresh, and we don't want to release the object.
      if (!newObject || !dependenciesAreEqual) {
        objectRef.current?.release();
        newObject = factory();
        objectRef.current = newObject;
        previousDependencies.current = dependencies;
      } else {
        isFastRefresh.current = true;
      }
      return newObject;
    }, dependencies);
    (0, _react.useEffect)(() => {
      isFastRefresh.current = false;
      return () => {
        // This will be called on every fast refresh and on unmount, but we only want to release the object on unmount.
        if (!isFastRefresh.current && objectRef.current) {
          objectRef.current.release();
        }
      };
    }, []);
    return object;
  }
},542,[140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.reloadAppAsync = reloadAppAsync;
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  /**
   * Reloads the app. This method works for both release and debug builds.
   *
   * Unlike [`Updates.reloadAsync()`](/versions/latest/sdk/updates/#updatesreloadasync),
   * this function does not use a new update even if one is available. It only reloads the app using the same JavaScript bundle that is currently running.
   *
   * @param reason The reason for reloading the app. This is used only for some platforms.
   */
  function reloadAppAsync() {
    return _reloadAppAsync.apply(this, arguments);
  }
  function _reloadAppAsync() {
    _reloadAppAsync = (0, _asyncToGenerator2.default)(function* () {
      var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Reloaded from JS call';
      yield globalThis.expo?.reloadAppAsync(reason);
    });
    return _reloadAppAsync.apply(this, arguments);
  }
},543,[1,54]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.UnavailabilityError = undefined;
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _CodedError2 = require(_dependencyMap[6]);
  var _Platform = _interopRequireDefault(require(_dependencyMap[7]));
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  /**
   * A class for errors to be thrown when a property is accessed which is
   * unavailable, unsupported, or not currently implemented on the running
   * platform.
   */
  var UnavailabilityError = exports.UnavailabilityError = /*#__PURE__*/function (_CodedError) {
    function UnavailabilityError(moduleName, propertyName) {
      (0, _classCallCheck2.default)(this, UnavailabilityError);
      return _callSuper(this, UnavailabilityError, ['ERR_UNAVAILABLE', `The method or property ${moduleName}.${propertyName} is not available on ${"ios"}, are you sure you've linked all the native dependencies properly?`]);
    }
    (0, _inherits2.default)(UnavailabilityError, _CodedError);
    return (0, _createClass2.default)(UnavailabilityError);
  }(_CodedError2.CodedError);
},544,[1,11,10,64,66,69,524,522]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.LegacyEventEmitter = undefined;
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _invariant = _interopRequireDefault(require(_dependencyMap[3]));
  var _reactNative = require(_dependencyMap[4]);
  var nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';
  /**
   * @deprecated Deprecated in favor of `EventEmitter`.
   */
  var LegacyEventEmitter = exports.LegacyEventEmitter = /*#__PURE__*/function () {
    // @ts-expect-error

    // @ts-expect-error

    function LegacyEventEmitter(nativeModule) {
      (0, _classCallCheck2.default)(this, LegacyEventEmitter);
      this._listenerCount = 0;
      // If the native module is a new module, just return it back as it's already an event emitter.
      // This is for backwards compatibility until we stop using this legacy class in other packages.
      if (nativeModule.__expo_module_name__) {
        // @ts-expect-error
        return nativeModule;
      }
      this._nativeModule = nativeModule;
      this._eventEmitter = new _reactNative.NativeEventEmitter(nativeModule);
    }
    return (0, _createClass2.default)(LegacyEventEmitter, [{
      key: "addListener",
      value: function addListener(eventName, listener) {
        if (!this._listenerCount && false && this._nativeModule.startObserving) {
          this._nativeModule.startObserving();
        }
        this._listenerCount++;
        var nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);
        var subscription = {
          [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,
          remove: () => {
            this.removeSubscription(subscription);
          }
        };
        return subscription;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventName) {
        // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0
        var removedListenerCount = this._eventEmitter.listenerCount ?
        // @ts-ignore: this is available since 0.64
        this._eventEmitter.listenerCount(eventName) :
        // @ts-ignore: this is available in older versions
        this._eventEmitter.listeners(eventName).length;
        this._eventEmitter.removeAllListeners(eventName);
        this._listenerCount -= removedListenerCount;
        (0, _invariant.default)(this._listenerCount >= 0, `EventEmitter must have a non-negative number of listeners`);
        if (!this._listenerCount && false && this._nativeModule.stopObserving) {
          this._nativeModule.stopObserving();
        }
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        var state = subscription;
        var nativeEmitterSubscription = state[nativeEmitterSubscriptionKey];
        if (!nativeEmitterSubscription) {
          return;
        }
        if ('remove' in nativeEmitterSubscription) {
          nativeEmitterSubscription.remove?.();
        }
        this._listenerCount--;

        // Ensure that the emitter's internal state remains correct even if `removeSubscription` is
        // called again with the same subscription
        delete state[nativeEmitterSubscriptionKey];

        // Release closed-over references to the emitter
        subscription.remove = () => {};
        if (!this._listenerCount && false && this._nativeModule.stopObserving) {
          this._nativeModule.stopObserving();
        }
      }
    }, {
      key: "emit",
      value: function emit(eventName) {
        for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }
        this._eventEmitter.emit(eventName, ...params);
      }
    }]);
  }();
},545,[1,10,11,42,60]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.resolveUri = resolveUri;
  exports.selectAssetSource = selectAssetSource;
  var _expoModulesCore = require(_dependencyMap[1]);
  var _reactNative = require(_dependencyMap[2]);
  var _AssetSourceResolver = _interopRequireDefault(require(_dependencyMap[3]));
  var _PlatformUtils = require(_dependencyMap[4]);
  /**
   * Selects the best file for the given asset (ex: choosing the best scale for images) and returns
   * a { uri, hash } pair for the specific asset file.
   *
   * If the asset isn't an image with multiple scales, the first file is selected.
   */
  function selectAssetSource(meta) {
    // This logic is based on that of AssetSourceResolver, with additional support for file hashes and
    // explicitly provided URIs
    var scale = _AssetSourceResolver.default.pickScale(meta.scales, _reactNative.PixelRatio.get());
    var index = meta.scales.findIndex(s => s === scale);
    var hash = meta.fileHashes ? meta.fileHashes[index] ?? meta.fileHashes[0] : meta.hash;
    // Allow asset processors to directly provide the URL to load
    var uri = meta.fileUris ? meta.fileUris[index] ?? meta.fileUris[0] : meta.uri;
    if (uri) {
      return {
        uri: resolveUri(uri),
        hash
      };
    }
    var fileScale = scale === 1 ? '' : `@${scale}x`;
    var fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';
    var suffix = `/${encodeURIComponent(meta.name)}${fileScale}${fileExtension}`;
    var params = new URLSearchParams({
      platform: "ios",
      hash: meta.hash
    });
    // For assets with a specified absolute URL, we use the existing origin instead of prepending the
    // development server or production CDN URL origin
    if (/^https?:\/\//.test(meta.httpServerLocation)) {
      var _uri = meta.httpServerLocation + suffix + '?' + params;
      return {
        uri: _uri,
        hash
      };
    }
    // For assets during development using manifest2, we use the development server's URL origin
    var manifest2 = (0, _PlatformUtils.getManifest2)();
    var devServerUrl = manifest2?.extra?.expoGo?.developer ? 'http://' + manifest2.extra.expoGo.debuggerHost : null;
    if (devServerUrl) {
      var baseUrl = new URL(meta.httpServerLocation + suffix, devServerUrl);
      baseUrl.searchParams.set('platform', "ios");
      baseUrl.searchParams.set('hash', meta.hash);
      return {
        uri: baseUrl.href,
        hash
      };
    }
    // Temporary fallback for loading assets in Expo Go home
    if (_reactNative.NativeModules['ExponentKernel']) {
      return {
        uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`,
        hash
      };
    }
    // In correctly configured apps, we arrive here if the asset is locally available on disk due to
    // being managed by expo-updates, and `getLocalAssetUri(hash)` must return a local URI for this
    // hash. Since the asset is local, we don't have a remote URL and specify an invalid URL (an empty
    // string) as a placeholder.
    return {
      uri: '',
      hash
    };
  }
  /**
   * Resolves the given URI to an absolute URI. If the given URI is already an absolute URI, it is
   * simply returned. Otherwise, if it is a relative URI, it is resolved relative to the manifest's
   * base URI.
   */
  function resolveUri(uri) {
    // `manifestBaseUrl` is always an absolute URL or `null`.
    return _PlatformUtils.manifestBaseUrl ? new URL(uri, _PlatformUtils.manifestBaseUrl).href : uri;
  }
},546,[1,56,60,547,548]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _AssetSourceResolver = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_AssetSourceResolver).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _AssetSourceResolver[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _AssetSourceResolver[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _AssetSourceResolver.default;
},547,[115]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.IS_ENV_WITH_LOCAL_ASSETS = undefined;
  exports.getLocalAssets = getLocalAssets;
  exports.getManifest2 = getManifest2;
  exports.manifestBaseUrl = undefined;
  var _expoConstants = _interopRequireDefault(require(_dependencyMap[1]));
  var _expoModulesCore = require(_dependencyMap[2]);
  var _AssetUris = require(_dependencyMap[3]);
  var ExpoUpdates = (0, _expoModulesCore.requireOptionalNativeModule)('ExpoUpdates');
  var NativeExpoGoModule = (() => {
    try {
      return (0, _expoModulesCore.requireNativeModule)('ExpoGo');
    } catch {
      return null;
    }
  })();
  function isRunningInExpoGo() {
    return NativeExpoGoModule != null;
  }
  // expo-updates (and Expo Go expo-updates override) manages assets from updates and exposes
  // the ExpoUpdates.localAssets constant containing information about the assets.
  var expoUpdatesIsInstalledAndEnabled = !!ExpoUpdates?.isEnabled;
  var expoUpdatesIsUsingEmbeddedAssets = ExpoUpdates?.isUsingEmbeddedAssets;
  // if expo-updates is installed but we're running directly from the embedded bundle, we don't want
  // to override the AssetSourceResolver.
  var shouldUseUpdatesAssetResolution = expoUpdatesIsInstalledAndEnabled && !expoUpdatesIsUsingEmbeddedAssets;
  // Expo Go always uses the updates module for asset resolution (local assets) since it
  // overrides the expo-updates module.
  var IS_ENV_WITH_LOCAL_ASSETS = exports.IS_ENV_WITH_LOCAL_ASSETS = isRunningInExpoGo() || shouldUseUpdatesAssetResolution;
  // Get the localAssets property from the ExpoUpdates native module so that we do
  // not need to include expo-updates as a dependency of expo-asset
  function getLocalAssets() {
    return ExpoUpdates?.localAssets ?? {};
  }
  function getManifest2() {
    return _expoConstants.default.__unsafeNoWarnManifest2;
  }
  // Compute manifest base URL if available
  var manifestBaseUrl = exports.manifestBaseUrl = _expoConstants.default.experienceUrl ? (0, _AssetUris.getManifestBaseUrl)(_expoConstants.default.experienceUrl) : null;
},548,[1,549,56,552]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "AppOwnership", {
    enumerable: true,
    get: function () {
      return _Constants.AppOwnership;
    }
  });
  Object.defineProperty(exports, "ExecutionEnvironment", {
    enumerable: true,
    get: function () {
      return _Constants.ExecutionEnvironment;
    }
  });
  Object.defineProperty(exports, "UserInterfaceIdiom", {
    enumerable: true,
    get: function () {
      return _Constants.UserInterfaceIdiom;
    }
  });
  exports.default = undefined;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _expoModulesCore = require(_dependencyMap[2]);
  var _reactNative = require(_dependencyMap[3]);
  var _Constants = require(_dependencyMap[4]);
  var _ExponentConstants = _interopRequireDefault(require(_dependencyMap[5]));
  if (!_ExponentConstants.default) {
    console.warn("No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?");
  }
  var ExpoUpdates = (0, _expoModulesCore.requireOptionalNativeModule)('ExpoUpdates');
  var rawUpdatesManifest = null;
  // If expo-updates defines a non-empty manifest, prefer that one
  if (ExpoUpdates) {
    var updatesManifest;
    if (ExpoUpdates.manifest) {
      updatesManifest = ExpoUpdates.manifest;
    } else if (ExpoUpdates.manifestString) {
      updatesManifest = JSON.parse(ExpoUpdates.manifestString);
    }
    if (updatesManifest && Object.keys(updatesManifest).length > 0) {
      rawUpdatesManifest = updatesManifest;
    }
  }
  // If dev-launcher defines a non-empty manifest, prefer that one
  var rawDevLauncherManifest = null;
  if (_reactNative.NativeModules.EXDevLauncher) {
    var devLauncherManifest;
    if (_reactNative.NativeModules.EXDevLauncher.manifestString) {
      devLauncherManifest = JSON.parse(_reactNative.NativeModules.EXDevLauncher.manifestString);
    }
    if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {
      rawDevLauncherManifest = devLauncherManifest;
    }
  }
  // Fall back to ExponentConstants.manifest if we don't have one from Updates
  var rawAppConfig = null;
  if (_ExponentConstants.default && _ExponentConstants.default.manifest) {
    var appConfig = _ExponentConstants.default.manifest;
    // On Android we pass the manifest in JSON form so this step is necessary
    if (typeof appConfig === 'string') {
      rawAppConfig = JSON.parse(appConfig);
    } else {
      rawAppConfig = appConfig;
    }
  }
  var rawManifest = rawUpdatesManifest ?? rawDevLauncherManifest ?? rawAppConfig;
  var _ref = _ExponentConstants.default || {},
    name = _ref.name,
    appOwnership = _ref.appOwnership,
    nativeConstants = (0, _objectWithoutProperties2.default)(_ref, ["name", "appOwnership"]);
  var constants = {
    ...nativeConstants,
    // Ensure this is null in bare workflow
    appOwnership: appOwnership ?? null
  };
  Object.defineProperties(constants, {
    /**
     * Use `manifest` property by default.
     * This property is only used for internal purposes.
     * It behaves similarly to the original one, but suppresses warning upon no manifest available.
     * `expo-asset` uses it to prevent users from seeing mentioned warning.
     */
    __unsafeNoWarnManifest: {
      get() {
        var maybeManifest = getManifest(true);
        if (!maybeManifest || !isEmbeddedManifest(maybeManifest)) {
          return null;
        }
        return maybeManifest;
      },
      enumerable: false
    },
    __unsafeNoWarnManifest2: {
      get() {
        var maybeManifest = getManifest(true);
        if (!maybeManifest || !isExpoUpdatesManifest(maybeManifest)) {
          return null;
        }
        return maybeManifest;
      },
      enumerable: false
    },
    manifest: {
      get() {
        var maybeManifest = getManifest();
        if (!maybeManifest || !isEmbeddedManifest(maybeManifest)) {
          return null;
        }
        return maybeManifest;
      },
      enumerable: true
    },
    manifest2: {
      get() {
        var maybeManifest = getManifest();
        if (!maybeManifest || !isExpoUpdatesManifest(maybeManifest)) {
          return null;
        }
        return maybeManifest;
      },
      enumerable: true
    },
    expoConfig: {
      get() {
        var maybeManifest = getManifest(true);
        if (!maybeManifest) {
          return null;
        }
        // if running an embedded update, maybeManifest is a EmbeddedManifest which doesn't have
        // the expo config. Instead, the embedded expo-constants app.config should be used.
        if (ExpoUpdates && ExpoUpdates.isEmbeddedLaunch) {
          return rawAppConfig;
        }
        if (isExpoUpdatesManifest(maybeManifest)) {
          return maybeManifest.extra?.expoClient ?? null;
        } else if (isEmbeddedManifest(maybeManifest)) {
          return maybeManifest;
        }
        return null;
      },
      enumerable: true
    },
    expoGoConfig: {
      get() {
        var maybeManifest = getManifest(true);
        if (!maybeManifest) {
          return null;
        }
        if (isExpoUpdatesManifest(maybeManifest)) {
          return maybeManifest.extra?.expoGo ?? null;
        } else if (isEmbeddedManifest(maybeManifest)) {
          return maybeManifest;
        }
        return null;
      },
      enumerable: true
    },
    easConfig: {
      get() {
        var maybeManifest = getManifest(true);
        if (!maybeManifest) {
          return null;
        }
        if (isExpoUpdatesManifest(maybeManifest)) {
          return maybeManifest.extra?.eas ?? null;
        } else if (isEmbeddedManifest(maybeManifest)) {
          return maybeManifest;
        }
        return null;
      },
      enumerable: true
    },
    __rawManifest_TEST: {
      get() {
        return rawManifest;
      },
      set(value) {
        rawManifest = value;
      },
      enumerable: false
    }
  });
  function isEmbeddedManifest(manifest) {
    return !isExpoUpdatesManifest(manifest);
  }
  function isExpoUpdatesManifest(manifest) {
    return 'metadata' in manifest;
  }
  function getManifest() {
    var suppressWarning = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    if (!rawManifest) {
      var invalidManifestType = rawManifest === null ? 'null' : 'undefined';
      if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Bare && true) {
        if (!suppressWarning) {
          console.warn(`Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`);
        }
      } else if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Standalone) {
        // If we somehow get here, this is a truly exceptional state to be in.
        // Constants.manifest should *always* be defined in those contexts.
        throw new _expoModulesCore.CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', `Constants.manifest is ${invalidManifestType}, must be an object.`);
      }
    }
    return rawManifest;
  }
  var _default = exports.default = constants;
},549,[1,238,56,60,550,551]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.UserInterfaceIdiom = exports.ExecutionEnvironment = exports.AppOwnership = undefined;
  var AppOwnership;
  (function (AppOwnership) {
    /**
     * The experience is running inside the Expo Go app.
     * @deprecated Use [`Constants.executionEnvironment`](#executionenvironment) instead.
     */
    AppOwnership["Expo"] = "expo";
  })(AppOwnership || (exports.AppOwnership = AppOwnership = {}));
  // @docsMissing
  var ExecutionEnvironment;
  (function (ExecutionEnvironment) {
    ExecutionEnvironment["Bare"] = "bare";
    ExecutionEnvironment["Standalone"] = "standalone";
    ExecutionEnvironment["StoreClient"] = "storeClient";
  })(ExecutionEnvironment || (exports.ExecutionEnvironment = ExecutionEnvironment = {}));
  // @needsAudit
  /**
   * Current supported values are `handset`, `tablet`, `desktop` and `tv`. CarPlay will show up
   * as `unsupported`.
   */
  var UserInterfaceIdiom;
  (function (UserInterfaceIdiom) {
    UserInterfaceIdiom["Handset"] = "handset";
    UserInterfaceIdiom["Tablet"] = "tablet";
    UserInterfaceIdiom["Desktop"] = "desktop";
    UserInterfaceIdiom["TV"] = "tv";
    UserInterfaceIdiom["Unsupported"] = "unsupported";
  })(UserInterfaceIdiom || (exports.UserInterfaceIdiom = UserInterfaceIdiom = {}));
},550,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _expoModulesCore = require(_dependencyMap[0]);
  var _default = exports.default = (0, _expoModulesCore.requireOptionalNativeModule)('ExponentConstants');
},551,[56]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getFileExtension = getFileExtension;
  exports.getFilename = getFilename;
  exports.getManifestBaseUrl = getManifestBaseUrl;
  function getFilename(url) {
    var _URL = new URL(url, 'https://e'),
      pathname = _URL.pathname,
      searchParams = _URL.searchParams;
    // When attached to a dev server, we use `unstable_path` to represent the file path. This ensures
    // the file name is not canonicalized by the browser.
    // NOTE(EvanBacon): This is technically not tied to `__DEV__` as it's possible to use this while bundling in production
    // mode.

    return getBasename(pathname);
  }
  function getBasename(pathname) {
    return pathname.substring(pathname.lastIndexOf('/') + 1);
  }
  function getFileExtension(url) {
    var filename = getFilename(url);
    var dotIndex = filename.lastIndexOf('.');
    // Ignore leading dots for hidden files
    return dotIndex > 0 ? filename.substring(dotIndex) : '';
  }
  /**
   * Returns the base URL from a manifest's URL. For example, given a manifest hosted at
   * https://example.com/app/manifest.json, the base URL would be https://example.com/app/. Query
   * parameters and fragments also are removed.
   *
   * For an Expo-hosted project with a manifest hosted at https://exp.host/@user/project/index.exp, the
   * base URL would be https://exp.host/@user/project.
   *
   * We also normalize the "exp" protocol to "http" to handle internal URLs with the Expo schemes used
   * to tell the OS to open the URLs in the the Expo client.
   */
  function getManifestBaseUrl(manifestUrl) {
    var urlObject = new URL(manifestUrl);
    var nextProtocol = urlObject.protocol;
    // Change the scheme to http(s) if it is exp(s)
    if (nextProtocol === 'exp:') {
      nextProtocol = 'http:';
    } else if (nextProtocol === 'exps:') {
      nextProtocol = 'https:';
    }
    urlObject.protocol = nextProtocol;
    // Trim filename, query parameters, and fragment, if any
    var directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);
    urlObject.pathname = directory;
    urlObject.search = '';
    urlObject.hash = '';
    // The URL spec doesn't allow for changing the protocol to `http` or `https`
    // without a port set so instead, we'll just swap the protocol manually.
    return urlObject.protocol !== nextProtocol ? urlObject.href.replace(urlObject.protocol, nextProtocol) : urlObject.href;
  }
},552,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.downloadAsync = downloadAsync;
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _expoModulesCore = require(_dependencyMap[2]);
  var AssetModule = (0, _expoModulesCore.requireNativeModule)('ExpoAsset');
  /**
   * Downloads the asset from the given URL to a local cache and returns the local URL of the cached
   * file.
   *
   * If there is already a locally cached file and its MD5 hash matches the given `md5Hash` parameter,
   * if present, the remote asset is not downloaded. The `hash` property is included in Metro's asset
   * metadata objects when this module's `hashAssetFiles` plugin is used, which is the typical way the
   * `md5Hash` parameter of this function is provided.
   */
  function downloadAsync(_x, _x2, _x3) {
    return _downloadAsync.apply(this, arguments);
  }
  function _downloadAsync() {
    _downloadAsync = (0, _asyncToGenerator2.default)(function* (url, md5Hash, type) {
      return AssetModule.downloadAsync(url, md5Hash, type);
    });
    return _downloadAsync.apply(this, arguments);
  }
},553,[1,54,56]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getImageInfoAsync = getImageInfoAsync;
  exports.isImageType = isImageType;
  var _AssetUris = require(_dependencyMap[0]);
  /* eslint-env browser */

  function isImageType(type) {
    return /^(jpeg|jpg|gif|png|bmp|webp|heic)$/i.test(type);
  }
  function getImageInfoAsync(url) {
    if (typeof window === 'undefined') {
      return Promise.resolve({
        name: (0, _AssetUris.getFilename)(url),
        width: 0,
        height: 0
      });
    }
    return new Promise((resolve, reject) => {
      var img = new Image();
      img.onerror = reject;
      img.onload = () => {
        resolve({
          name: (0, _AssetUris.getFilename)(url),
          width: img.naturalWidth,
          height: img.naturalHeight
        });
      };
      img.src = url;
    });
  }
},554,[552]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getLocalAssetUri = getLocalAssetUri;
  var _PlatformUtils = require(_dependencyMap[0]);
  // localAssets are provided by the expo-updates module
  var localAssets = (0, _PlatformUtils.getLocalAssets)();
  /**
   * Returns the URI of a local asset from its hash, or null if the asset is not available locally
   */
  function getLocalAssetUri(hash, type) {
    var localAssetsKey = hash;
    var legacyLocalAssetsKey = `${hash}.${type ?? ''}`;
    switch (true) {
      case localAssetsKey in localAssets:
        {
          return localAssets[localAssetsKey];
        }
      case legacyLocalAssetsKey in localAssets:
        {
          // legacy updates store assets with an extension
          return localAssets[legacyLocalAssetsKey];
        }
      default:
        return null;
    }
  }
},555,[548]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {};
  exports.default = undefined;
  var _resolveAssetSource = _interopRequireWildcard(require(_dependencyMap[0]));
  Object.keys(_resolveAssetSource).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _resolveAssetSource[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _resolveAssetSource[key];
      }
    });
  });
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var _default = exports.default = _resolveAssetSource.default;
},556,[114]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.useAssets = useAssets;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = require(_dependencyMap[2]);
  var _Asset = require(_dependencyMap[3]);
  // @needsAudit
  /**
   * Downloads and stores one or more assets locally.
   * After the assets are loaded, this hook returns a list of asset instances.
   * If something went wrong when loading the assets, an error is returned.
   *
   * > Note, the assets are not "reloaded" when you dynamically change the asset list.
   *
   * @return Returns an array containing:
   * - on the first position, a list of all loaded assets. If they aren't loaded yet, this value is
   *   `undefined`.
   * - on the second position, an error which encountered when loading the assets. If there was no
   *   error, this value is `undefined`.
   *
   * @example
   * ```tsx
   * const [assets, error] = useAssets([require('path/to/asset.jpg'), require('path/to/other.png')]);
   *
   * return assets ? <Image source={assets[0]} /> : null;
   * ```
   */
  function useAssets(moduleIds) {
    var _useState = (0, _react.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      assets = _useState2[0],
      setAssets = _useState2[1];
    var _useState3 = (0, _react.useState)(),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      error = _useState4[0],
      setError = _useState4[1];
    (0, _react.useEffect)(() => {
      _Asset.Asset.loadAsync(moduleIds).then(setAssets).catch(setError);
    }, []);
    return [assets, error];
  }
},557,[1,29,140,53]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {},558,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getExpoGoProjectConfig = getExpoGoProjectConfig;
  exports.isRunningInExpoGo = isRunningInExpoGo;
  var _expoModulesCore = require(_dependencyMap[0]);
  // ExpoGo module is available only when the app is run in Expo Go,
  // otherwise we use `null` instead of throwing an error.
  var NativeExpoGoModule = (() => {
    try {
      return (0, _expoModulesCore.requireNativeModule)('ExpoGo');
    } catch {
      return null;
    }
  })();

  /**
   * Returns a boolean value whether the app is running in Expo Go.
   */
  function isRunningInExpoGo() {
    return NativeExpoGoModule != null;
  }

  /**
   * @hidden
   * Returns an Expo Go project config from the manifest or `null` if the app is not running in Expo Go.
   */
  function getExpoGoProjectConfig() {
    return NativeExpoGoModule?.projectConfig ?? null;
  }
},559,[56]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AppEntryNotFound = AppEntryNotFound;
  var _reactNative = require(_dependencyMap[0]);
  var _jsxRuntime = require(_dependencyMap[1]);
  function AppEntryNotFound() {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.container,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.errorTitle,
        children: "App entry not found"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.errorDescription,
        children: "The app entry point named \"main\" was not registered. This may be due to an uncaught error thrown from a module's top-level code. Refer to the CLI logs and the native device logs for more detail."
      })]
    });
  }
  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'center',
      padding: 20,
      backgroundColor: '#f2f2f2'
    },
    errorTitle: {
      fontSize: 24,
      fontWeight: 'bold',
      color: '#d32f2f',
      textAlign: 'center',
      marginBottom: 24
    },
    errorDescription: {
      fontSize: 16,
      color: '#333',
      textAlign: 'center'
    }
  });
},560,[60,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createErrorHandler = createErrorHandler;
  exports.disableErrorHandling = disableErrorHandling;
  // Similar interface to the one used in expo modules.

  var isErrorHandlingEnabled = true;
  var developmentBuildMessage = `If you're trying to use a module that is not supported in Expo Go, you need to create a development build of your app. See https://docs.expo.dev/development/introduction/ for more info.`;
  function customizeUnavailableMessage(error) {
    error.message += "\n\nIf you're trying to use a module that is not supported in Expo Go, you need to create a development build of your app. See https://docs.expo.dev/development/introduction/ for more info.";
  }
  function customizeModuleIsMissingMessage(error) {
    error.message = `Your JavaScript code tried to access a native module that doesn't exist. 

${developmentBuildMessage}`;
  }
  function customizeError(error) {
    if ('code' in error && error.code === 'ERR_UNAVAILABLE') {
      customizeUnavailableMessage(error);
    } else if (error.message.includes('Native module cannot be null') ||
    // RN 0.64 and below message
    error.message.includes('`new NativeEventEmitter()` requires a non-null argument.') // RN 0.65+ message
    ) {
      customizeModuleIsMissingMessage(error);
    }
  }
  function errorHandler(originalHandler, error, isFatal) {
    if (error instanceof Error) {
      customizeError(error);
    }
    originalHandler(error, isFatal);
  }
  function createErrorHandler(originalHandler) {
    return (error, isFatal) => {
      if (isErrorHandlingEnabled) {
        errorHandler(originalHandler, error, isFatal);
        return;
      }
      originalHandler(error, isFatal);
    };
  }
  function disableErrorHandling() {
    isErrorHandlingEnabled = false;
  }
},561,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = registerRootComponent;
  require(_dependencyMap[0]);
  var _reactNative = require(_dependencyMap[1]);
  // @needsAudit
  /**
   * Sets the initial React component to render natively in the app's root React Native view on Android, iOS, tvOS and the web.
   *
   * This method does the following:
   * - Invokes React Native's `AppRegistry.registerComponent`.
   * - Invokes React Native web's `AppRegistry.runApplication` on web to render to the root `index.html` file.
   * - Polyfills the `process.nextTick` function globally.
   *
   * This method also adds the following dev-only features that are removed in production bundles.
   * - Adds the Fast Refresh and bundle splitting indicator to the app.
   * - Asserts if the `expo-updates` package is misconfigured.
   * - Asserts if `react-native` is not aliased to `react-native-web` when running in the browser.
   * @param component The React component class that renders the rest of your app.
   * @see For information on how to setup `registerRootComponent` in an existing (bare) React Native app, see [Common questions](#rootregistercomponent-setup-for-existing-react-native-projects) below.
   */
  function registerRootComponent(component) {
    var qualifiedComponent = component;
    _reactNative.AppRegistry.registerComponent('main', () => qualifiedComponent);
    // Skip querying the DOM if we're in a Node.js environment.
  }
},562,[3,60]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.useEvent = useEvent;
  exports.useEventListener = useEventListener;
  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = require(_dependencyMap[2]);
  /**
   * Type helper that infers the event name from the emitter's events map.
   */

  /**
   * Type helper that infers the event listener from the emitter's events map.
   */

  /**
   * Type helper that infers the first parameter of the event listener.
   */

  /**
   * React hook that listens to events emitted by the given object. The returned value is an event parameter
   * that gets updated whenever a new event is dispatched.
   * @param eventEmitter An object that emits events. For example, a native module or shared object or an instance of [`EventEmitter`](#eventemitter).
   * @param eventName Name of the event to listen to.
   * @param initialValue An event parameter to use until the event is called for the first time.
   * @returns A parameter of the event listener.
   * @example
   * ```tsx
   * import { useEvent } from 'expo';
   * import { VideoPlayer } from 'expo-video';
   *
   * export function PlayerStatus({ videoPlayer }: { videoPlayer: VideoPlayer }) {
   *   const { status } = useEvent(videoPlayer, 'statusChange', { status: videoPlayer.status });
   *
   *   return <Text>{`Player status: ${status}`}</Text>;
   * }
   * ```
   */
  function useEvent(eventEmitter, eventName) {
    var initialValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var _useState = (0, _react.useState)(initialValue),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      event = _useState2[0],
      setEvent = _useState2[1];
    var listener = event => setEvent(event);
    useEventListener(eventEmitter, eventName, listener);
    return event;
  }

  /**
   * React hook that listens to events emitted by the given object and calls the listener function whenever a new event is dispatched.
   * The event listener is automatically added during the first render and removed when the component unmounts.
   * @param eventEmitter An object that emits events. For example, a native module or shared object or an instance of [`EventEmitter`](#eventemitter).
   * @param eventName Name of the event to listen to.
   * @param listener A function to call when the event is dispatched.
   * @example
   * ```tsx
   * import { useEventListener } from 'expo';
   * import { useVideoPlayer, VideoView } from 'expo-video';
   *
   * export function VideoPlayerView() {
   *   const player = useVideoPlayer(videoSource);
   *
   *   useEventListener(player, 'playingChange', ({ isPlaying }) => {
   *     console.log('Player is playing:', isPlaying);
   *   });
   *
   *   return <VideoView player={player} />;
   * }
   * ```
   */
  function useEventListener(eventEmitter, eventName, listener) {
    // Always use the most recent version of the listener inside the effect,
    // without memoization so the listeners don't have to be swapped with every render.
    var listenerRef = (0, _react.useRef)(listener);
    listenerRef.current = listener;
    (0, _react.useEffect)(() => {
      var callback = function () {
        return listenerRef.current(...arguments);
      };
      var subscription = eventEmitter.addListener(eventName, callback);
      return () => subscription.remove();
    }, [eventEmitter, eventName, listenerRef]);
  }
},563,[1,29,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _expoStatusBar = require(_dependencyMap[1]);
  var _react = _interopRequireWildcard(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _reactNativeCodePush = _interopRequireDefault(require(_dependencyMap[4]));
  var _jsxRuntime = require(_dependencyMap[5]);
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  function App() {
    // Log current package information on app start
    (0, _react.useEffect)(() => {
      // Add custom error handler
      var originalConsoleError = console.error.bind(console);
      console.error = function (message) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        console.log("[CodePushDebug] Error intercepted:", message, ...args);
        return originalConsoleError(message, ...args);
      };

      // Monitor network requests
      var originalFetch = global.fetch;
      global.fetch = function (input, init) {
        console.log("[CodePushDebug] Fetch request to:", typeof input === 'string' ? input : 'Request object');
        return originalFetch(input, init).then(response => {
          console.log("[CodePushDebug] Fetch success for:", typeof input === 'string' ? input : 'Request object');
          return response;
        }).catch(error => {
          console.log("[CodePushDebug] Fetch error:", error);
          throw error;
        });
      };
      _reactNativeCodePush.default.getUpdateMetadata().then(metadata => {
        if (metadata) {
          console.log('[CodePush] Running binary version: ' + metadata.appVersion);
          console.log('[CodePush] Running with CodePush update: ' + metadata.label);
          console.log('[CodePush] Package hash: ' + metadata.packageHash);
          console.log('[CodePush] Package description: ' + metadata.description);
        } else {
          console.log('[CodePush] Running binary version with no CodePush updates installed');
        }

        // After getting metadata, check for updates
        console.log('[CodePush] Checking for update.');
      }).catch(err => {
        console.log('[CodePush] Error getting metadata:', err);
      });
    }, []);
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.container,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: "Open up App.js to start working on your app! 1.1.5"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_expoStatusBar.StatusBar, {
        style: "auto"
      })]
    });
  }
  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff',
      alignItems: 'center',
      justifyContent: 'center'
    }
  });

  // CodePush configuration
  var codePushOptions = {
    checkFrequency: _reactNativeCodePush.default.CheckFrequency.ON_APP_START,
    installMode: _reactNativeCodePush.default.InstallMode.IMMEDIATE,
    mandatoryInstallMode: _reactNativeCodePush.default.InstallMode.IMMEDIATE,
    updateDialog: {
      appendReleaseDescription: true,
      title: "Update Available",
      descriptionPrefix: "\n\nRelease Notes:\n",
      mandatoryContinueButtonLabel: "Install Now",
      mandatoryUpdateMessage: "An update is available that must be installed.",
      optionalIgnoreButtonLabel: "Later",
      optionalInstallButtonLabel: "Install Now",
      optionalUpdateMessage: "An update is available. Would you like to install it?"
    }
  };
  var _default = exports.default = (0, _reactNativeCodePush.default)(codePushOptions)(App);
},564,[1,565,140,60,568,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "StatusBar", {
    enumerable: true,
    get: function () {
      return _NativeStatusBarWrapper.StatusBar;
    }
  });
  Object.defineProperty(exports, "StatusBarAnimation", {
    enumerable: true,
    get: function () {
      return _types.StatusBarAnimation;
    }
  });
  Object.defineProperty(exports, "StatusBarProps", {
    enumerable: true,
    get: function () {
      return _types.StatusBarProps;
    }
  });
  Object.defineProperty(exports, "StatusBarStyle", {
    enumerable: true,
    get: function () {
      return _types.StatusBarStyle;
    }
  });
  Object.defineProperty(exports, "setStatusBarBackgroundColor", {
    enumerable: true,
    get: function () {
      return _NativeStatusBarWrapper.setStatusBarBackgroundColor;
    }
  });
  Object.defineProperty(exports, "setStatusBarHidden", {
    enumerable: true,
    get: function () {
      return _NativeStatusBarWrapper.setStatusBarHidden;
    }
  });
  Object.defineProperty(exports, "setStatusBarNetworkActivityIndicatorVisible", {
    enumerable: true,
    get: function () {
      return _NativeStatusBarWrapper.setStatusBarNetworkActivityIndicatorVisible;
    }
  });
  Object.defineProperty(exports, "setStatusBarStyle", {
    enumerable: true,
    get: function () {
      return _NativeStatusBarWrapper.setStatusBarStyle;
    }
  });
  Object.defineProperty(exports, "setStatusBarTranslucent", {
    enumerable: true,
    get: function () {
      return _NativeStatusBarWrapper.setStatusBarTranslucent;
    }
  });
  var _NativeStatusBarWrapper = require(_dependencyMap[0]);
  var _types = require(_dependencyMap[1]);
},565,[566,567]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.StatusBar = StatusBar;
  exports.setStatusBarBackgroundColor = setStatusBarBackgroundColor;
  exports.setStatusBarHidden = setStatusBarHidden;
  exports.setStatusBarNetworkActivityIndicatorVisible = setStatusBarNetworkActivityIndicatorVisible;
  exports.setStatusBarStyle = setStatusBarStyle;
  exports.setStatusBarTranslucent = setStatusBarTranslucent;
  var _objectWithoutProperties2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _react = _interopRequireDefault(require(_dependencyMap[2]));
  var _reactNative = require(_dependencyMap[3]);
  var _jsxRuntime = require(_dependencyMap[4]);
  var _excluded = ["style", "hideTransitionAnimation", "translucent", "backgroundColor"];
  /**
   * A component that allows you to configure your status bar without directly calling imperative
   * methods like `setBarStyle`.
   *
   * You will likely have multiple `StatusBar` components mounted in the same app at the same time.
   * For example, if you have multiple screens in your app, you may end up using one per screen.
   * The props of each `StatusBar` component will be merged in the order that they were mounted.
   * This component is built on top of the [StatusBar](https://reactnative.dev/docs/statusbar)
   * component exported from React Native, and it provides defaults that work better for Expo users.
   */
  function StatusBar(_ref) {
    var style = _ref.style,
      hideTransitionAnimation = _ref.hideTransitionAnimation,
      _ref$translucent = _ref.translucent,
      translucent = _ref$translucent === undefined ? true : _ref$translucent,
      backgroundColorProp = _ref.backgroundColor,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    // Pick appropriate default value depending on current theme, so if we are
    // locked to light mode we don't end up with a light status bar
    var colorScheme = (0, _reactNative.useColorScheme)();
    var barStyle = _react.default.useMemo(() => styleToBarStyle(style, colorScheme), [style, colorScheme]);

    // If translucent and no backgroundColor is provided, then use transparent
    // background
    var backgroundColor = backgroundColorProp;
    if (translucent && !backgroundColor) {
      backgroundColor = 'transparent';
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.StatusBar, {
      ...props,
      translucent: translucent,
      barStyle: barStyle,
      backgroundColor: backgroundColor,
      showHideTransition: hideTransitionAnimation === 'none' ? undefined : hideTransitionAnimation
    });
  }

  // @needsAudit
  /**
   * Set the bar style of the status bar.
   * @param style The color of the status bar text.
   * @param animated If the transition should be animated.
   */
  function setStatusBarStyle(style, animated) {
    _reactNative.StatusBar.setBarStyle(styleToBarStyle(style), animated);
  }

  // @needsAudit
  /**
   * Toggle visibility of the status bar.
   * @param hidden If the status bar should be hidden.
   * @param animation Animation to use when toggling hidden, defaults to `'none'`.
   */
  function setStatusBarHidden(hidden, animation) {
    _reactNative.StatusBar.setHidden(hidden, animation);
  }

  // @needsAudit
  /**
   * Set the background color of the status bar.
   * @param backgroundColor The background color of the status bar.
   * @param animated `true` to animate the background color change, `false` to change immediately.
   * @platform android
   */
  function setStatusBarBackgroundColor(backgroundColor, animated) {
    _reactNative.StatusBar.setBackgroundColor(backgroundColor, animated);
  }

  // @needsAudit
  /**
   * Toggle visibility of the network activity indicator.
   * @param visible If the network activity indicator should be visible.
   * @platform ios
   */
  function setStatusBarNetworkActivityIndicatorVisible(visible) {
    _reactNative.StatusBar.setNetworkActivityIndicatorVisible(visible);
  }

  // @needsAudit
  /**
   * Set the translucency of the status bar.
   * @param translucent Whether the app can draw under the status bar. When `true`, content will be
   * rendered under the status bar. This is always `true` on iOS and cannot be changed.
   * @platform android
   */
  function setStatusBarTranslucent(translucent) {
    _reactNative.StatusBar.setTranslucent(translucent);
  }
  function styleToBarStyle() {
    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'auto';
    var colorScheme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _reactNative.Appearance?.getColorScheme() ?? 'light';
    if (!colorScheme) {
      colorScheme = 'light';
    }
    var resolvedStyle = style;
    if (style === 'auto') {
      resolvedStyle = colorScheme === 'light' ? 'dark' : 'light';
    } else if (style === 'inverted') {
      resolvedStyle = colorScheme === 'light' ? 'light' : 'dark';
    }
    return resolvedStyle === 'light' ? 'light-content' : 'dark-content';
  }
},566,[1,238,140,60,288]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {},567,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2]));
  var _possibleConstructorReturn2 = _interopRequireDefault(require(_dependencyMap[3]));
  var _getPrototypeOf2 = _interopRequireDefault(require(_dependencyMap[4]));
  var _inherits2 = _interopRequireDefault(require(_dependencyMap[5]));
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[6]));
  var _acquisitionSdk = require(_dependencyMap[7]);
  var _AlertAdapter = require(_dependencyMap[8]);
  var _requestFetchAdapter = _interopRequireDefault(require(_dependencyMap[9]));
  var _reactNative = require(_dependencyMap[10]);
  var _logging = _interopRequireDefault(require(_dependencyMap[11]));
  var _hoistNonReactStatics = _interopRequireDefault(require(_dependencyMap[12]));
  var _jsxRuntime = require(_dependencyMap[13]);
  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function () { return !!t; })(); }
  var NativeCodePush = require(_dependencyMap[14]).NativeModules.CodePush;
  var PackageMixins = require(_dependencyMap[15])(NativeCodePush);
  function checkForUpdate() {
    return _checkForUpdate.apply(this, arguments);
  }
  function _checkForUpdate() {
    _checkForUpdate = (0, _asyncToGenerator2.default)(function* () {
      var deploymentKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var handleBinaryVersionMismatchCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      /*
       * Before we ask the server if an update exists, we
       * need to retrieve three pieces of information from the
       * native side: deployment key, app version (e.g. 1.0.1)
       * and the hash of the currently running update (if there is one).
       * This allows the client to only receive updates which are targetted
       * for their specific deployment and version and which are actually
       * different from the CodePush update they have already installed.
       */
      var nativeConfig = yield getConfiguration();
      /*
       * If a deployment key was explicitly provided,
       * then let's override the one we retrieved
       * from the native-side of the app. This allows
       * dynamically "redirecting" end-users at different
       * deployments (e.g. an early access deployment for insiders).
       */
      var config = deploymentKey ? {
        ...nativeConfig,
        ...{
          deploymentKey
        }
      } : nativeConfig;
      var sdk = getPromisifiedSdk(_requestFetchAdapter.default, config);

      // Use dynamically overridden getCurrentPackage() during tests.
      var localPackage = yield module.exports.getCurrentPackage();

      /*
       * If the app has a previously installed update, and that update
       * was targetted at the same app version that is currently running,
       * then we want to use its package hash to determine whether a new
       * release has been made on the server. Otherwise, we only need
       * to send the app version to the server, since we are interested
       * in any updates for current binary version, regardless of hash.
       */
      var queryPackage;
      if (localPackage) {
        queryPackage = localPackage;
      } else {
        queryPackage = {
          appVersion: config.appVersion
        };
        if (config.packageHash) {
          queryPackage.packageHash = config.packageHash;
        }
      }
      var update = yield sdk.queryUpdateWithCurrentPackage(queryPackage);

      /*
       * There are four cases where checkForUpdate will resolve to null:
       * ----------------------------------------------------------------
       * 1) The server said there isn't an update. This is the most common case.
       * 2) The server said there is an update but it requires a newer binary version.
       *    This would occur when end-users are running an older binary version than
       *    is available, and CodePush is making sure they don't get an update that
       *    potentially wouldn't be compatible with what they are running.
       * 3) The server said there is an update, but the update's hash is the same as
       *    the currently running update. This should _never_ happen, unless there is a
       *    bug in the server, but we're adding this check just to double-check that the
       *    client app is resilient to a potential issue with the update check.
       * 4) The server said there is an update, but the update's hash is the same as that
       *    of the binary's currently running version. This should only happen in Android -
       *    unlike iOS, we don't attach the binary's hash to the updateCheck request
       *    because we want to avoid having to install diff updates against the binary's
       *    version, which we can't do yet on Android.
       */
      if (!update || update.updateAppVersion || localPackage && update.packageHash === localPackage.packageHash || (!localPackage || localPackage._isDebugOnly) && config.packageHash === update.packageHash) {
        if (update && update.updateAppVersion) {
          (0, _logging.default)("An update is available but it is not targeting the binary version of your app.");
          if (handleBinaryVersionMismatchCallback && typeof handleBinaryVersionMismatchCallback === "function") {
            handleBinaryVersionMismatchCallback(update);
          }
        }
        return null;
      } else {
        var remotePackage = {
          ...update,
          ...PackageMixins.remote(sdk.reportStatusDownload)
        };
        remotePackage.failedInstall = yield NativeCodePush.isFailedUpdate(remotePackage.packageHash);
        remotePackage.deploymentKey = deploymentKey || nativeConfig.deploymentKey;
        return remotePackage;
      }
    });
    return _checkForUpdate.apply(this, arguments);
  }
  var getConfiguration = (() => {
    var config;
    return /*#__PURE__*/function () {
      var _getConfiguration = (0, _asyncToGenerator2.default)(function* () {
        if (config) {
          return config;
        } else if (testConfig) {
          return testConfig;
        } else {
          config = yield NativeCodePush.getConfiguration();
          return config;
        }
      });
      function getConfiguration() {
        return _getConfiguration.apply(this, arguments);
      }
      return getConfiguration;
    }();
  })();
  function getCurrentPackage() {
    return _getCurrentPackage.apply(this, arguments);
  }
  function _getCurrentPackage() {
    _getCurrentPackage = (0, _asyncToGenerator2.default)(function* () {
      return yield getUpdateMetadata(CodePush.UpdateState.LATEST);
    });
    return _getCurrentPackage.apply(this, arguments);
  }
  function getUpdateMetadata(_x) {
    return _getUpdateMetadata.apply(this, arguments);
  }
  function _getUpdateMetadata() {
    _getUpdateMetadata = (0, _asyncToGenerator2.default)(function* (updateState) {
      var updateMetadata = yield NativeCodePush.getUpdateMetadata(updateState || CodePush.UpdateState.RUNNING);
      if (updateMetadata) {
        updateMetadata = {
          ...PackageMixins.local,
          ...updateMetadata
        };
        updateMetadata.failedInstall = yield NativeCodePush.isFailedUpdate(updateMetadata.packageHash);
        updateMetadata.isFirstRun = yield NativeCodePush.isFirstRun(updateMetadata.packageHash);
      }
      return updateMetadata;
    });
    return _getUpdateMetadata.apply(this, arguments);
  }
  function getPromisifiedSdk(requestFetchAdapter, config) {
    // Use dynamically overridden AcquisitionSdk during tests.
    var sdk = new module.exports.AcquisitionSdk(requestFetchAdapter, config);
    sdk.queryUpdateWithCurrentPackage = queryPackage => {
      return new Promise((resolve, reject) => {
        module.exports.AcquisitionSdk.prototype.queryUpdateWithCurrentPackage.call(sdk, queryPackage, (err, update) => {
          if (err) {
            reject(err);
          } else {
            resolve(update);
          }
        });
      });
    };
    sdk.reportStatusDeploy = (deployedPackage, status, previousLabelOrAppVersion, previousDeploymentKey) => {
      return new Promise((resolve, reject) => {
        module.exports.AcquisitionSdk.prototype.reportStatusDeploy.call(sdk, deployedPackage, status, previousLabelOrAppVersion, previousDeploymentKey, err => {
          if (err) {
            reject(err);
          } else {
            resolve();
          }
        });
      });
    };
    sdk.reportStatusDownload = downloadedPackage => {
      return new Promise((resolve, reject) => {
        module.exports.AcquisitionSdk.prototype.reportStatusDownload.call(sdk, downloadedPackage, err => {
          if (err) {
            reject(err);
          } else {
            resolve();
          }
        });
      });
    };
    return sdk;
  }

  // This ensures that notifyApplicationReadyInternal is only called once
  // in the lifetime of this module instance.
  var notifyApplicationReady = (() => {
    var notifyApplicationReadyPromise;
    return () => {
      if (!notifyApplicationReadyPromise) {
        notifyApplicationReadyPromise = notifyApplicationReadyInternal();
      }
      return notifyApplicationReadyPromise;
    };
  })();
  function notifyApplicationReadyInternal() {
    return _notifyApplicationReadyInternal.apply(this, arguments);
  }
  function _notifyApplicationReadyInternal() {
    _notifyApplicationReadyInternal = (0, _asyncToGenerator2.default)(function* () {
      yield NativeCodePush.notifyApplicationReady();
      var statusReport = yield NativeCodePush.getNewStatusReport();
      statusReport && tryReportStatus(statusReport); // Don't wait for this to complete.

      return statusReport;
    });
    return _notifyApplicationReadyInternal.apply(this, arguments);
  }
  function tryReportStatus(_x2, _x3) {
    return _tryReportStatus.apply(this, arguments);
  }
  function _tryReportStatus() {
    _tryReportStatus = (0, _asyncToGenerator2.default)(function* (statusReport, retryOnAppResume) {
      var config = yield getConfiguration();
      var previousLabelOrAppVersion = statusReport.previousLabelOrAppVersion;
      var previousDeploymentKey = statusReport.previousDeploymentKey || config.deploymentKey;
      try {
        if (statusReport.appVersion) {
          (0, _logging.default)(`Reporting binary update (${statusReport.appVersion})`);
          if (!config.deploymentKey) {
            throw new Error("Deployment key is missed");
          }
          var sdk = getPromisifiedSdk(_requestFetchAdapter.default, config);
          yield sdk.reportStatusDeploy(/* deployedPackage */null, /* status */null, previousLabelOrAppVersion, previousDeploymentKey);
        } else {
          var label = statusReport.package.label;
          if (statusReport.status === "DeploymentSucceeded") {
            (0, _logging.default)(`Reporting CodePush update success (${label})`);
          } else {
            (0, _logging.default)(`Reporting CodePush update rollback (${label})`);
            yield NativeCodePush.setLatestRollbackInfo(statusReport.package.packageHash);
          }
          config.deploymentKey = statusReport.package.deploymentKey;
          var _sdk = getPromisifiedSdk(_requestFetchAdapter.default, config);
          yield _sdk.reportStatusDeploy(statusReport.package, statusReport.status, previousLabelOrAppVersion, previousDeploymentKey);
        }
        NativeCodePush.recordStatusReported(statusReport);
        retryOnAppResume && retryOnAppResume.remove();
      } catch (e) {
        (0, _logging.default)(`Report status failed: ${JSON.stringify(statusReport)}`);
        NativeCodePush.saveStatusReportForRetry(statusReport);
        // Try again when the app resumes
        if (!retryOnAppResume) {
          var resumeListener = _reactNative.AppState.addEventListener("change", /*#__PURE__*/function () {
            var _ref = (0, _asyncToGenerator2.default)(function* (newState) {
              if (newState !== "active") return;
              var refreshedStatusReport = yield NativeCodePush.getNewStatusReport();
              if (refreshedStatusReport) {
                tryReportStatus(refreshedStatusReport, resumeListener);
              } else {
                resumeListener && resumeListener.remove();
              }
            });
            return function (_x6) {
              return _ref.apply(this, arguments);
            };
          }());
        }
      }
    });
    return _tryReportStatus.apply(this, arguments);
  }
  function shouldUpdateBeIgnored(_x4, _x5) {
    return _shouldUpdateBeIgnored.apply(this, arguments);
  }
  function _shouldUpdateBeIgnored() {
    _shouldUpdateBeIgnored = (0, _asyncToGenerator2.default)(function* (remotePackage, syncOptions) {
      var rollbackRetryOptions = syncOptions.rollbackRetryOptions;
      var isFailedPackage = remotePackage && remotePackage.failedInstall;
      if (!isFailedPackage || !syncOptions.ignoreFailedUpdates) {
        return false;
      }
      if (!rollbackRetryOptions) {
        return true;
      }
      if (typeof rollbackRetryOptions !== "object") {
        rollbackRetryOptions = CodePush.DEFAULT_ROLLBACK_RETRY_OPTIONS;
      } else {
        rollbackRetryOptions = {
          ...CodePush.DEFAULT_ROLLBACK_RETRY_OPTIONS,
          ...rollbackRetryOptions
        };
      }
      if (!validateRollbackRetryOptions(rollbackRetryOptions)) {
        return true;
      }
      var latestRollbackInfo = yield NativeCodePush.getLatestRollbackInfo();
      if (!validateLatestRollbackInfo(latestRollbackInfo, remotePackage.packageHash)) {
        (0, _logging.default)("The latest rollback info is not valid.");
        return true;
      }
      var _rollbackRetryOptions = rollbackRetryOptions,
        delayInHours = _rollbackRetryOptions.delayInHours,
        maxRetryAttempts = _rollbackRetryOptions.maxRetryAttempts;
      var hoursSinceLatestRollback = (Date.now() - latestRollbackInfo.time) / 3600000;
      if (hoursSinceLatestRollback >= delayInHours && maxRetryAttempts >= latestRollbackInfo.count) {
        (0, _logging.default)("Previous rollback should be ignored due to rollback retry options.");
        return false;
      }
      return true;
    });
    return _shouldUpdateBeIgnored.apply(this, arguments);
  }
  function validateLatestRollbackInfo(latestRollbackInfo, packageHash) {
    return latestRollbackInfo && latestRollbackInfo.time && latestRollbackInfo.count && latestRollbackInfo.packageHash && latestRollbackInfo.packageHash === packageHash;
  }
  function validateRollbackRetryOptions(rollbackRetryOptions) {
    if (typeof rollbackRetryOptions.delayInHours !== "number") {
      (0, _logging.default)("The 'delayInHours' rollback retry parameter must be a number.");
      return false;
    }
    if (typeof rollbackRetryOptions.maxRetryAttempts !== "number") {
      (0, _logging.default)("The 'maxRetryAttempts' rollback retry parameter must be a number.");
      return false;
    }
    if (rollbackRetryOptions.maxRetryAttempts < 1) {
      (0, _logging.default)("The 'maxRetryAttempts' rollback retry parameter cannot be less then 1.");
      return false;
    }
    return true;
  }
  var testConfig;

  // This function is only used for tests. Replaces the default SDK, configuration and native bridge
  function setUpTestDependencies(testSdk, providedTestConfig, testNativeBridge) {
    if (testSdk) module.exports.AcquisitionSdk = testSdk;
    if (providedTestConfig) testConfig = providedTestConfig;
    if (testNativeBridge) NativeCodePush = testNativeBridge;
  }
  function restartApp() {
    return _restartApp.apply(this, arguments);
  } // This function allows only one syncInternal operation to proceed at any given time.
  // Parallel calls to sync() while one is ongoing yields CodePush.SyncStatus.SYNC_IN_PROGRESS.
  function _restartApp() {
    _restartApp = (0, _asyncToGenerator2.default)(function* () {
      var onlyIfUpdateIsPending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      NativeCodePush.restartApp(onlyIfUpdateIsPending);
    });
    return _restartApp.apply(this, arguments);
  }
  var sync = (() => {
    var syncInProgress = false;
    var setSyncCompleted = () => {
      syncInProgress = false;
    };
    return function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var syncStatusChangeCallback = arguments.length > 1 ? arguments[1] : undefined;
      var downloadProgressCallback = arguments.length > 2 ? arguments[2] : undefined;
      var handleBinaryVersionMismatchCallback = arguments.length > 3 ? arguments[3] : undefined;
      var syncStatusCallbackWithTryCatch, downloadProgressCallbackWithTryCatch;
      if (typeof syncStatusChangeCallback === "function") {
        syncStatusCallbackWithTryCatch = function () {
          try {
            syncStatusChangeCallback(...arguments);
          } catch (error) {
            (0, _logging.default)(`An error has occurred : ${error.stack}`);
          }
        };
      }
      if (typeof downloadProgressCallback === "function") {
        downloadProgressCallbackWithTryCatch = function () {
          try {
            downloadProgressCallback(...arguments);
          } catch (error) {
            (0, _logging.default)(`An error has occurred: ${error.stack}`);
          }
        };
      }
      if (syncInProgress) {
        typeof syncStatusCallbackWithTryCatch === "function" ? syncStatusCallbackWithTryCatch(CodePush.SyncStatus.SYNC_IN_PROGRESS) : (0, _logging.default)("Sync already in progress.");
        return Promise.resolve(CodePush.SyncStatus.SYNC_IN_PROGRESS);
      }
      syncInProgress = true;
      var syncPromise = syncInternal(options, syncStatusCallbackWithTryCatch, downloadProgressCallbackWithTryCatch, handleBinaryVersionMismatchCallback);
      syncPromise.then(setSyncCompleted).catch(setSyncCompleted);
      return syncPromise;
    };
  })();

  /*
   * The syncInternal method provides a simple, one-line experience for
   * incorporating the check, download and installation of an update.
   *
   * It simply composes the existing API methods together and adds additional
   * support for respecting mandatory updates, ignoring previously failed
   * releases, and displaying a standard confirmation UI to the end-user
   * when an update is available.
   */
  function syncInternal() {
    return _syncInternal.apply(this, arguments);
  }
  function _syncInternal() {
    _syncInternal = (0, _asyncToGenerator2.default)(function* () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var syncStatusChangeCallback = arguments.length > 1 ? arguments[1] : undefined;
      var downloadProgressCallback = arguments.length > 2 ? arguments[2] : undefined;
      var handleBinaryVersionMismatchCallback = arguments.length > 3 ? arguments[3] : undefined;
      var resolvedInstallMode;
      var syncOptions = {
        deploymentKey: null,
        ignoreFailedUpdates: true,
        rollbackRetryOptions: null,
        installMode: CodePush.InstallMode.ON_NEXT_RESTART,
        mandatoryInstallMode: CodePush.InstallMode.IMMEDIATE,
        minimumBackgroundDuration: 0,
        updateDialog: null,
        ...options
      };
      syncStatusChangeCallback = typeof syncStatusChangeCallback === "function" ? syncStatusChangeCallback : syncStatus => {
        switch (syncStatus) {
          case CodePush.SyncStatus.CHECKING_FOR_UPDATE:
            (0, _logging.default)("Checking for update.");
            break;
          case CodePush.SyncStatus.AWAITING_USER_ACTION:
            (0, _logging.default)("Awaiting user action.");
            break;
          case CodePush.SyncStatus.DOWNLOADING_PACKAGE:
            (0, _logging.default)("Downloading package.");
            break;
          case CodePush.SyncStatus.INSTALLING_UPDATE:
            (0, _logging.default)("Installing update.");
            break;
          case CodePush.SyncStatus.UP_TO_DATE:
            (0, _logging.default)("App is up to date.");
            break;
          case CodePush.SyncStatus.UPDATE_IGNORED:
            (0, _logging.default)("User cancelled the update.");
            break;
          case CodePush.SyncStatus.UPDATE_INSTALLED:
            if (resolvedInstallMode == CodePush.InstallMode.ON_NEXT_RESTART) {
              (0, _logging.default)("Update is installed and will be run on the next app restart.");
            } else if (resolvedInstallMode == CodePush.InstallMode.ON_NEXT_RESUME) {
              if (syncOptions.minimumBackgroundDuration > 0) {
                (0, _logging.default)(`Update is installed and will be run after the app has been in the background for at least ${syncOptions.minimumBackgroundDuration} seconds.`);
              } else {
                (0, _logging.default)("Update is installed and will be run when the app next resumes.");
              }
            }
            break;
          case CodePush.SyncStatus.UNKNOWN_ERROR:
            (0, _logging.default)("An unknown error occurred.");
            break;
        }
      };
      try {
        yield CodePush.notifyApplicationReady();
        syncStatusChangeCallback(CodePush.SyncStatus.CHECKING_FOR_UPDATE);
        var remotePackage = yield checkForUpdate(syncOptions.deploymentKey, handleBinaryVersionMismatchCallback);
        var doDownloadAndInstall = /*#__PURE__*/function () {
          var _ref2 = (0, _asyncToGenerator2.default)(function* () {
            syncStatusChangeCallback(CodePush.SyncStatus.DOWNLOADING_PACKAGE);
            var localPackage = yield remotePackage.download(downloadProgressCallback);

            // Determine the correct install mode based on whether the update is mandatory or not.
            resolvedInstallMode = localPackage.isMandatory ? syncOptions.mandatoryInstallMode : syncOptions.installMode;
            syncStatusChangeCallback(CodePush.SyncStatus.INSTALLING_UPDATE);
            yield localPackage.install(resolvedInstallMode, syncOptions.minimumBackgroundDuration, () => {
              syncStatusChangeCallback(CodePush.SyncStatus.UPDATE_INSTALLED);
            });
            return CodePush.SyncStatus.UPDATE_INSTALLED;
          });
          return function doDownloadAndInstall() {
            return _ref2.apply(this, arguments);
          };
        }();
        var updateShouldBeIgnored = yield shouldUpdateBeIgnored(remotePackage, syncOptions);
        if (!remotePackage || updateShouldBeIgnored) {
          if (updateShouldBeIgnored) {
            (0, _logging.default)("An update is available, but it is being ignored due to having been previously rolled back.");
          }
          var currentPackage = yield CodePush.getCurrentPackage();
          if (currentPackage && currentPackage.isPending) {
            syncStatusChangeCallback(CodePush.SyncStatus.UPDATE_INSTALLED);
            return CodePush.SyncStatus.UPDATE_INSTALLED;
          } else {
            syncStatusChangeCallback(CodePush.SyncStatus.UP_TO_DATE);
            return CodePush.SyncStatus.UP_TO_DATE;
          }
        } else if (syncOptions.updateDialog) {
          // updateDialog supports any truthy value (e.g. true, "goo", 12),
          // but we should treat a non-object value as just the default dialog
          if (typeof syncOptions.updateDialog !== "object") {
            syncOptions.updateDialog = CodePush.DEFAULT_UPDATE_DIALOG;
          } else {
            syncOptions.updateDialog = {
              ...CodePush.DEFAULT_UPDATE_DIALOG,
              ...syncOptions.updateDialog
            };
          }
          return yield new Promise((resolve, reject) => {
            var message = null;
            var installButtonText = null;
            var dialogButtons = [];
            if (remotePackage.isMandatory) {
              message = syncOptions.updateDialog.mandatoryUpdateMessage;
              installButtonText = syncOptions.updateDialog.mandatoryContinueButtonLabel;
            } else {
              message = syncOptions.updateDialog.optionalUpdateMessage;
              installButtonText = syncOptions.updateDialog.optionalInstallButtonLabel;
              // Since this is an optional update, add a button
              // to allow the end-user to ignore it
              dialogButtons.push({
                text: syncOptions.updateDialog.optionalIgnoreButtonLabel,
                onPress: () => {
                  syncStatusChangeCallback(CodePush.SyncStatus.UPDATE_IGNORED);
                  resolve(CodePush.SyncStatus.UPDATE_IGNORED);
                }
              });
            }

            // Since the install button should be placed to the 
            // right of any other button, add it last
            dialogButtons.push({
              text: installButtonText,
              onPress: () => {
                doDownloadAndInstall().then(resolve, reject);
              }
            });

            // If the update has a description, and the developer
            // explicitly chose to display it, then set that as the message
            if (syncOptions.updateDialog.appendReleaseDescription && remotePackage.description) {
              message += `${syncOptions.updateDialog.descriptionPrefix} ${remotePackage.description}`;
            }
            syncStatusChangeCallback(CodePush.SyncStatus.AWAITING_USER_ACTION);
            _AlertAdapter.Alert.alert(syncOptions.updateDialog.title, message, dialogButtons);
          });
        } else {
          return yield doDownloadAndInstall();
        }
      } catch (error) {
        syncStatusChangeCallback(CodePush.SyncStatus.UNKNOWN_ERROR);
        (0, _logging.default)(error.message);
        throw error;
      }
    });
    return _syncInternal.apply(this, arguments);
  }
  ;
  var CodePush;
  function codePushify() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var React;
    var ReactNative = require(_dependencyMap[14]);
    try {
      React = require(_dependencyMap[16], "react");
    } catch (e) {}
    if (!React) {
      try {
        React = ReactNative.React;
      } catch (e) {}
      if (!React) {
        throw new Error("Unable to find the 'React' module.");
      }
    }
    if (!React.Component) {
      throw new Error(`Unable to find the "Component" class, please either:
1. Upgrade to a newer version of React Native that supports it, or
2. Call the codePush.sync API in your component instead of using the @codePush decorator`);
    }
    var decorator = RootComponent => {
      var CodePushComponent = /*#__PURE__*/function (_React$Component) {
        function CodePushComponent(props) {
          var _this;
          (0, _classCallCheck2.default)(this, CodePushComponent);
          _this = _callSuper(this, CodePushComponent, [props]);
          _this.rootComponentRef = React.createRef();
          return _this;
        }
        (0, _inherits2.default)(CodePushComponent, _React$Component);
        return (0, _createClass2.default)(CodePushComponent, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            if (options.checkFrequency === CodePush.CheckFrequency.MANUAL) {
              CodePush.notifyAppReady();
            } else {
              var rootComponentInstance = this.rootComponentRef.current;
              var syncStatusCallback;
              if (rootComponentInstance && rootComponentInstance.codePushStatusDidChange) {
                syncStatusCallback = rootComponentInstance.codePushStatusDidChange.bind(rootComponentInstance);
              }
              var downloadProgressCallback;
              if (rootComponentInstance && rootComponentInstance.codePushDownloadDidProgress) {
                downloadProgressCallback = rootComponentInstance.codePushDownloadDidProgress.bind(rootComponentInstance);
              }
              var handleBinaryVersionMismatchCallback;
              if (rootComponentInstance && rootComponentInstance.codePushOnBinaryVersionMismatch) {
                handleBinaryVersionMismatchCallback = rootComponentInstance.codePushOnBinaryVersionMismatch.bind(rootComponentInstance);
              }
              CodePush.sync(options, syncStatusCallback, downloadProgressCallback, handleBinaryVersionMismatchCallback);
              if (options.checkFrequency === CodePush.CheckFrequency.ON_APP_RESUME) {
                ReactNative.AppState.addEventListener("change", newState => {
                  if (newState === "active") {
                    CodePush.sync(options, syncStatusCallback, downloadProgressCallback);
                  }
                });
              }
            }
          }
        }, {
          key: "render",
          value: function render() {
            var props = {
              ...this.props
            };

            // We can set ref property on class components only (not stateless)
            // Check it by render method
            if (RootComponent.prototype && RootComponent.prototype.render) {
              props.ref = this.rootComponentRef;
            }
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(RootComponent, {
              ...props
            });
          }
        }]);
      }(React.Component);
      return (0, _hoistNonReactStatics.default)(CodePushComponent, RootComponent);
    };
    if (typeof options === "function") {
      // Infer that the root component was directly passed to us.
      return decorator(options);
    } else {
      return decorator;
    }
  }

  // If the "NativeCodePush" variable isn't defined, then
  // the app didn't properly install the native module,
  // and therefore, it doesn't make sense initializing
  // the JS interface when it wouldn't work anyways.
  if (NativeCodePush) {
    CodePush = codePushify;
    Object.assign(CodePush, {
      AcquisitionSdk: _acquisitionSdk.AcquisitionManager,
      checkForUpdate,
      getConfiguration,
      getCurrentPackage,
      getUpdateMetadata,
      log: _logging.default,
      notifyAppReady: notifyApplicationReady,
      notifyApplicationReady,
      restartApp,
      setUpTestDependencies,
      sync,
      disallowRestart: NativeCodePush.disallow,
      allowRestart: NativeCodePush.allow,
      clearUpdates: NativeCodePush.clearUpdates,
      InstallMode: {
        IMMEDIATE: NativeCodePush.codePushInstallModeImmediate,
        // Restart the app immediately
        ON_NEXT_RESTART: NativeCodePush.codePushInstallModeOnNextRestart,
        // Don't artificially restart the app. Allow the update to be "picked up" on the next app restart
        ON_NEXT_RESUME: NativeCodePush.codePushInstallModeOnNextResume,
        // Restart the app the next time it is resumed from the background
        ON_NEXT_SUSPEND: NativeCodePush.codePushInstallModeOnNextSuspend // Restart the app _while_ it is in the background,
        // but only after it has been in the background for "minimumBackgroundDuration" seconds (0 by default),
        // so that user context isn't lost unless the app suspension is long enough to not matter
      },
      SyncStatus: {
        UP_TO_DATE: 0,
        // The running app is up-to-date
        UPDATE_INSTALLED: 1,
        // The app had an optional/mandatory update that was successfully downloaded and is about to be installed.
        UPDATE_IGNORED: 2,
        // The app had an optional update and the end-user chose to ignore it
        UNKNOWN_ERROR: 3,
        SYNC_IN_PROGRESS: 4,
        // There is an ongoing "sync" operation in progress.
        CHECKING_FOR_UPDATE: 5,
        AWAITING_USER_ACTION: 6,
        DOWNLOADING_PACKAGE: 7,
        INSTALLING_UPDATE: 8
      },
      CheckFrequency: {
        ON_APP_START: 0,
        ON_APP_RESUME: 1,
        MANUAL: 2
      },
      UpdateState: {
        RUNNING: NativeCodePush.codePushUpdateStateRunning,
        PENDING: NativeCodePush.codePushUpdateStatePending,
        LATEST: NativeCodePush.codePushUpdateStateLatest
      },
      DeploymentStatus: {
        FAILED: "DeploymentFailed",
        SUCCEEDED: "DeploymentSucceeded"
      },
      DEFAULT_UPDATE_DIALOG: {
        appendReleaseDescription: false,
        descriptionPrefix: " Description: ",
        mandatoryContinueButtonLabel: "Continue",
        mandatoryUpdateMessage: "An update is available that must be installed.",
        optionalIgnoreButtonLabel: "Ignore",
        optionalInstallButtonLabel: "Install",
        optionalUpdateMessage: "An update is available. Would you like to install it?",
        title: "Update available"
      },
      DEFAULT_ROLLBACK_RETRY_OPTIONS: {
        delayInHours: 24,
        maxRetryAttempts: 1
      }
    });
  } else {
    (0, _logging.default)("The CodePush module doesn't appear to be properly installed. Please double-check that everything is setup correctly.");
  }
  module.exports = CodePush;
},568,[1,10,11,64,66,69,54,569,571,572,60,574,575,288,60,578,140]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AcquisitionManager = exports.AcquisitionStatus = undefined;
  var code_push_error_1 = require(_dependencyMap[0]);
  var AcquisitionStatus = exports.AcquisitionStatus = /** @class */function () {
    function AcquisitionStatus() {}
    AcquisitionStatus.DeploymentSucceeded = "DeploymentSucceeded";
    AcquisitionStatus.DeploymentFailed = "DeploymentFailed";
    return AcquisitionStatus;
  }();
  var AcquisitionManager = exports.AcquisitionManager = /** @class */function () {
    function AcquisitionManager(httpRequester, configuration) {
      this.BASE_URL_PART = "appcenter.ms";
      this._publicPrefixUrl = "v0.1/public/codepush/";
      this.isRecoverable = function (statusCode) {
        return statusCode >= 500 || statusCode === 408 || statusCode === 429;
      };
      this._httpRequester = httpRequester;
      this._serverUrl = configuration.serverUrl;
      if (this._serverUrl.slice(-1) !== "/") {
        this._serverUrl += "/";
      }
      this._appVersion = configuration.appVersion;
      this._clientUniqueId = configuration.clientUniqueId;
      this._deploymentKey = configuration.deploymentKey;
      this._ignoreAppVersion = configuration.ignoreAppVersion;
    }
    AcquisitionManager.prototype.handleRequestFailure = function () {
      if (this._serverUrl.includes(this.BASE_URL_PART) && !this.isRecoverable(this._statusCode)) {
        AcquisitionManager._apiCallsDisabled = true;
      }
    };
    AcquisitionManager.prototype.queryUpdateWithCurrentPackage = function (currentPackage, callback) {
      var _this = this;
      if (AcquisitionManager._apiCallsDisabled) {
        console.log("[CodePush] Api calls are disabled, skipping API call");
        callback(/*error=*/null, /*remotePackage=*/null);
        return;
      }
      if (!currentPackage || !currentPackage.appVersion) {
        throw new code_push_error_1.CodePushPackageError("Calling common acquisition SDK with incorrect package"); // Unexpected; indicates error in our implementation
      }
      var updateRequest = {
        deployment_key: this._deploymentKey,
        app_version: currentPackage.appVersion,
        package_hash: currentPackage.packageHash,
        is_companion: this._ignoreAppVersion,
        label: currentPackage.label,
        client_unique_id: this._clientUniqueId
      };
      var requestUrl = this._serverUrl + this._publicPrefixUrl + "update_check?" + queryStringify(updateRequest);
      this._httpRequester.request(0 /* Http.Verb.GET */, requestUrl, function (error, response) {
        if (error) {
          callback(error, /*remotePackage=*/null);
          return;
        }
        if (response.statusCode < 200 || response.statusCode >= 300) {
          var errorMessage = undefined;
          _this._statusCode = response.statusCode;
          _this.handleRequestFailure();
          if (response.statusCode === 0) {
            errorMessage = "Couldn't send request to ".concat(requestUrl, ", xhr.statusCode = 0 was returned. One of the possible reasons for that might be connection problems. Please, check your internet connection.");
          } else {
            errorMessage = "".concat(response.statusCode, ": ").concat(response.body);
          }
          callback(new code_push_error_1.CodePushHttpError(errorMessage), /*remotePackage=*/null);
          return;
        }
        try {
          var responseObject = JSON.parse(response.body);
          var updateInfo = responseObject.update_info;
        } catch (error) {
          callback(error, /*remotePackage=*/null);
          return;
        }
        if (!updateInfo) {
          callback(error, /*remotePackage=*/null);
          return;
        } else if (updateInfo.update_app_version) {
          callback(/*error=*/null, {
            updateAppVersion: true,
            appVersion: updateInfo.target_binary_range
          });
          return;
        } else if (!updateInfo.is_available) {
          callback(/*error=*/null, /*remotePackage=*/null);
          return;
        }
        var remotePackage = {
          deploymentKey: _this._deploymentKey,
          description: updateInfo.description,
          label: updateInfo.label,
          appVersion: updateInfo.target_binary_range,
          isMandatory: updateInfo.is_mandatory,
          packageHash: updateInfo.package_hash,
          packageSize: updateInfo.package_size,
          downloadUrl: updateInfo.download_url
        };
        callback(/*error=*/null, remotePackage);
      });
    };
    AcquisitionManager.prototype.reportStatusDeploy = function (deployedPackage, status, previousLabelOrAppVersion, previousDeploymentKey, callback) {
      var _this = this;
      if (AcquisitionManager._apiCallsDisabled) {
        console.log("[CodePush] Api calls are disabled, skipping API call");
        callback(/*error*/null, /*not used*/null);
        return;
      }
      var url = this._serverUrl + this._publicPrefixUrl + "report_status/deploy";
      var body = {
        app_version: this._appVersion,
        deployment_key: this._deploymentKey
      };
      if (this._clientUniqueId) {
        body.client_unique_id = this._clientUniqueId;
      }
      if (deployedPackage) {
        body.label = deployedPackage.label;
        body.app_version = deployedPackage.appVersion;
        switch (status) {
          case AcquisitionStatus.DeploymentSucceeded:
          case AcquisitionStatus.DeploymentFailed:
            body.status = status;
            break;
          default:
            if (callback) {
              if (!status) {
                callback(new code_push_error_1.CodePushDeployStatusError("Missing status argument."), /*not used*/null);
              } else {
                callback(new code_push_error_1.CodePushDeployStatusError("Unrecognized status \"" + status + "\"."), /*not used*/null);
              }
            }
            return;
        }
      }
      if (previousLabelOrAppVersion) {
        body.previous_label_or_app_version = previousLabelOrAppVersion;
      }
      if (previousDeploymentKey) {
        body.previous_deployment_key = previousDeploymentKey;
      }
      callback = typeof arguments[arguments.length - 1] === "function" && arguments[arguments.length - 1];
      this._httpRequester.request(2 /* Http.Verb.POST */, url, JSON.stringify(body), function (error, response) {
        if (callback) {
          if (error) {
            callback(error, /*not used*/null);
            return;
          }
          if (response.statusCode < 200 || response.statusCode >= 300) {
            _this._statusCode = response.statusCode;
            _this.handleRequestFailure();
            callback(new code_push_error_1.CodePushHttpError(response.statusCode + ": " + response.body), /*not used*/null);
            return;
          }
          callback(/*error*/null, /*not used*/null);
        }
      });
    };
    AcquisitionManager.prototype.reportStatusDownload = function (downloadedPackage, callback) {
      var _this = this;
      if (AcquisitionManager._apiCallsDisabled) {
        console.log("[CodePush] Api calls are disabled, skipping API call");
        callback(/*error*/null, /*not used*/null);
        return;
      }
      var url = this._serverUrl + this._publicPrefixUrl + "report_status/download";
      var body = {
        client_unique_id: this._clientUniqueId,
        deployment_key: this._deploymentKey,
        label: downloadedPackage.label
      };
      this._httpRequester.request(2 /* Http.Verb.POST */, url, JSON.stringify(body), function (error, response) {
        if (callback) {
          if (error) {
            callback(error, /*not used*/null);
            return;
          }
          if (response.statusCode < 200 || response.statusCode >= 300) {
            _this._statusCode = response.statusCode;
            _this.handleRequestFailure();
            callback(new code_push_error_1.CodePushHttpError(response.statusCode + ": " + response.body), /*not used*/null);
            return;
          }
          callback(/*error*/null, /*not used*/null);
        }
      });
    };
    AcquisitionManager._apiCallsDisabled = false;
    return AcquisitionManager;
  }();
  function queryStringify(object) {
    var queryString = "";
    var isFirst = true;
    for (var property in object) {
      if (object.hasOwnProperty(property)) {
        var value = object[property];
        if (value !== null && typeof value !== "undefined") {
          if (!isFirst) {
            queryString += "&";
          }
          queryString += encodeURIComponent(property) + "=";
          queryString += encodeURIComponent(value);
        }
        isFirst = false;
      }
    }
    return queryString;
  }
},569,[570]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      };
      return extendStatics(d, b);
    };
    return function (d, b) {
      if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CodePushUnauthorizedError = exports.CodePushPackageError = exports.CodePushDeployStatusError = exports.CodePushHttpError = exports.CodePushError = undefined;
  var CodePushError = /** @class */function (_super) {
    __extends(CodePushError, _super);
    function CodePushError(message) {
      var _this = _super.call(this, message) || this;
      Object.setPrototypeOf(_this, CodePushError.prototype);
      return _this;
    }
    return CodePushError;
  }(Error);
  exports.CodePushError = CodePushError;
  var CodePushHttpError = /** @class */function (_super) {
    __extends(CodePushHttpError, _super);
    function CodePushHttpError(message) {
      var _this = _super.call(this, message) || this;
      Object.setPrototypeOf(_this, CodePushHttpError.prototype);
      return _this;
    }
    return CodePushHttpError;
  }(CodePushError);
  exports.CodePushHttpError = CodePushHttpError;
  var CodePushDeployStatusError = /** @class */function (_super) {
    __extends(CodePushDeployStatusError, _super);
    function CodePushDeployStatusError(message) {
      var _this = _super.call(this, message) || this;
      Object.setPrototypeOf(_this, CodePushDeployStatusError.prototype);
      return _this;
    }
    return CodePushDeployStatusError;
  }(CodePushError);
  exports.CodePushDeployStatusError = CodePushDeployStatusError;
  var CodePushPackageError = /** @class */function (_super) {
    __extends(CodePushPackageError, _super);
    function CodePushPackageError(message) {
      var _this = _super.call(this, message) || this;
      Object.setPrototypeOf(_this, CodePushPackageError.prototype);
      return _this;
    }
    return CodePushPackageError;
  }(CodePushError);
  exports.CodePushPackageError = CodePushPackageError;
  var CodePushUnauthorizedError = /** @class */function (_super) {
    __extends(CodePushUnauthorizedError, _super);
    function CodePushUnauthorizedError(message) {
      var _this = _super.call(this, message) || this;
      Object.setPrototypeOf(_this, CodePushUnauthorizedError.prototype);
      return _this;
    }
    return CodePushUnauthorizedError;
  }(CodePushError);
  exports.CodePushUnauthorizedError = CodePushUnauthorizedError;
},570,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _reactNative = _interopRequireWildcard(require(_dependencyMap[0]));
  function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
  var Alert = _reactNative.default.Alert;
  module.exports = {
    Alert
  };
},571,[60]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _asyncToGenerator = require(_dependencyMap[0]);
  var packageJson = require(_dependencyMap[1]);
  module.exports = {
    request(verb, url, requestBody, callback) {
      return _asyncToGenerator(function* () {
        if (typeof requestBody === "function") {
          callback = requestBody;
          requestBody = null;
        }
        var headers = {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "X-CodePush-Plugin-Name": packageJson.name,
          "X-CodePush-Plugin-Version": packageJson.version,
          "X-CodePush-SDK-Version": packageJson.dependencies["code-push"]
        };
        if (requestBody && typeof requestBody === "object") {
          requestBody = JSON.stringify(requestBody);
        }
        try {
          var response = yield fetch(url, {
            method: getHttpMethodName(verb),
            headers: headers,
            body: requestBody
          });
          var statusCode = response.status;
          var body = yield response.text();
          callback(null, {
            statusCode,
            body
          });
        } catch (err) {
          callback(err);
        }
      })();
    }
  };
  function getHttpMethodName(verb) {
    // Note: This should stay in sync with the enum definition in
    // https://github.com/microsoft/code-push/blob/master/sdk/script/acquisition-sdk.ts#L6
    return ["GET", "HEAD", "POST", "PUT", "DELETE", "TRACE", "OPTIONS", "CONNECT", "PATCH"][verb];
  }
},572,[54,573]);
__d(function(global, require, _importDefaultUnused, _importAllUnused, module, exports, _dependencyMapUnused) {
  module.exports = {
  "name": "@code-push-next/react-native-code-push",
  "version": "10.0.1",
  "description": "React Native plugin for the CodePush service",
  "main": "CodePush.js",
  "typings": "typings/react-native-code-push.d.ts",
  "homepage": "https://microsoft.github.io/code-push",
  "keywords": [
    "react-native",
    "code",
    "push"
  ],
  "author": "Code Push Next",
  "license": "MIT",
  "scripts": {
    "clean": "shx rm -rf bin",
    "setup": "npm install --quiet --no-progress",
    "prebuild:tests": "npm run clean && npm run tslint",
    "build:tests": "tsc",
    "test": "npm run build:tests && npm run test:setup && npm run test:fast",
    "test:android": "npm run build:tests && npm run test:setup:android && npm run test:fast:android",
    "test:ios": "npm run build:tests && npm run test:setup:ios && npm run test:fast:ios",
    "test:oldArch": "export TEST_OLD_ARCH=true && npm run build:tests && npm run test:setup && npm run test:fast",
    "test:oldArch:android": "export TEST_OLD_ARCH=true && npm run build:tests && npm run test:setup:android && npm run test:fast:android",
    "test:oldArch:ios": "export TEST_OLD_ARCH=true && npm run build:tests && npm run test:setup:ios && npm run test:fast:ios",
    "test:setup": "mocha --recursive bin/test --android --ios --setup",
    "test:setup:android": "mocha --recursive bin/test --android --setup",
    "test:setup:ios": "mocha --recursive bin/test --ios --setup",
    "test:fast": "mocha --recursive bin/test --android --ios",
    "test:fast:android": "mocha --recursive bin/test --android",
    "test:fast:ios": "mocha --recursive bin/test --ios",
    "test:debugger:android": "mocha --recursive --inspect-brk=0.0.0.0 bin/test --android",
    "test:debugger:ios": "mocha --recursive --inspect-brk=0.0.0.0 bin/test --ios",
    "tslint": "tslint -c tslint.json test/**/*.ts"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/CodePushNext/react-native-code-push"
  },
  "dependencies": {
    "code-push": "4.2.3",
    "glob": "^7.1.7",
    "hoist-non-react-statics": "^3.3.2",
    "inquirer": "^8.1.5",
    "plist": "^3.0.4",
    "semver": "^7.3.5",
    "xcode": "3.0.1"
  },
  "devDependencies": {
    "@types/assert": "^1.5.2",
    "@types/mkdirp": "^1.0.1",
    "@types/mocha": "^9.0.0",
    "@types/node": "^14.0.27",
    "@types/q": "^1.5.4",
    "archiver": "latest",
    "body-parser": "latest",
    "code-push-plugin-testing-framework": "file:./code-push-plugin-testing-framework",
    "del": "v6.0.0",
    "express": "latest",
    "mkdirp": "latest",
    "mocha": "^9.2.0",
    "q": "^1.5.1",
    "run-sequence": "latest",
    "shx": "^0.3.4",
    "slash": "^3.0.0",
    "tslint": "^6.1.3",
    "typescript": "^4.4.3"
  },
  "rnpm": {
    "android": {
      "packageInstance": "new CodePush(getResources().getString(R.string.CodePushDeploymentKey), getApplicationContext(), BuildConfig.DEBUG)"
    },
    "ios": {
      "sharedLibraries": [
        "libz"
      ]
    },
    "commands": {
      "postlink": "node node_modules/@code-push-next/react-native-code-push/scripts/postlink/run",
      "postunlink": "node node_modules/@code-push-next/react-native-code-push/scripts/postunlink/run"
    }
  }
}
;
},573,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /* Logs messages to console with the [CodePush] prefix */
  function log(message) {
    console.log(`[CodePush] ${message}`);
  }
  module.exports = log;
},574,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var reactIs = require(_dependencyMap[0]);

  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */
  var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  };
  var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
  };
  var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
  };
  var TYPE_STATICS = {};
  TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
  TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
  function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) {
      return MEMO_STATICS;
    } // React v16.12 and above

    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
  }
  var defineProperty = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = Object.prototype;
  function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
      // don't hoist over string (html) components
      if (objectPrototype) {
        var inheritedComponent = getPrototypeOf(sourceComponent);
        if (inheritedComponent && inheritedComponent !== objectPrototype) {
          hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
      }
      var keys = getOwnPropertyNames(sourceComponent);
      if (getOwnPropertySymbols) {
        keys = keys.concat(getOwnPropertySymbols(sourceComponent));
      }
      var targetStatics = getStatics(targetComponent);
      var sourceStatics = getStatics(sourceComponent);
      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
          var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
          try {
            // Avoid failures from read-only properties
            defineProperty(targetComponent, key, descriptor);
          } catch (e) {}
        }
      }
    }
    return targetComponent;
  }
  module.exports = hoistNonReactStatics;
},575,[576]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  {
    module.exports = require(_dependencyMap[0]);
  }
},576,[577]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v16.13.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  'use strict';

  var b = "function" === typeof Symbol && Symbol.for,
    c = b ? Symbol.for("react.element") : 60103,
    d = b ? Symbol.for("react.portal") : 60106,
    e = b ? Symbol.for("react.fragment") : 60107,
    f = b ? Symbol.for("react.strict_mode") : 60108,
    g = b ? Symbol.for("react.profiler") : 60114,
    h = b ? Symbol.for("react.provider") : 60109,
    k = b ? Symbol.for("react.context") : 60110,
    l = b ? Symbol.for("react.async_mode") : 60111,
    m = b ? Symbol.for("react.concurrent_mode") : 60111,
    n = b ? Symbol.for("react.forward_ref") : 60112,
    p = b ? Symbol.for("react.suspense") : 60113,
    q = b ? Symbol.for("react.suspense_list") : 60120,
    r = b ? Symbol.for("react.memo") : 60115,
    t = b ? Symbol.for("react.lazy") : 60116,
    v = b ? Symbol.for("react.block") : 60121,
    w = b ? Symbol.for("react.fundamental") : 60117,
    x = b ? Symbol.for("react.responder") : 60118,
    y = b ? Symbol.for("react.scope") : 60119;
  function z(a) {
    if ("object" === typeof a && null !== a) {
      var u = a.$$typeof;
      switch (u) {
        case c:
          switch (a = a.type, a) {
            case l:
            case m:
            case e:
            case g:
            case f:
            case p:
              return a;
            default:
              switch (a = a && a.$$typeof, a) {
                case k:
                case n:
                case t:
                case r:
                case h:
                  return a;
                default:
                  return u;
              }
          }
        case d:
          return u;
      }
    }
  }
  function A(a) {
    return z(a) === m;
  }
  exports.AsyncMode = l;
  exports.ConcurrentMode = m;
  exports.ContextConsumer = k;
  exports.ContextProvider = h;
  exports.Element = c;
  exports.ForwardRef = n;
  exports.Fragment = e;
  exports.Lazy = t;
  exports.Memo = r;
  exports.Portal = d;
  exports.Profiler = g;
  exports.StrictMode = f;
  exports.Suspense = p;
  exports.isAsyncMode = function (a) {
    return A(a) || z(a) === l;
  };
  exports.isConcurrentMode = A;
  exports.isContextConsumer = function (a) {
    return z(a) === k;
  };
  exports.isContextProvider = function (a) {
    return z(a) === h;
  };
  exports.isElement = function (a) {
    return "object" === typeof a && null !== a && a.$$typeof === c;
  };
  exports.isForwardRef = function (a) {
    return z(a) === n;
  };
  exports.isFragment = function (a) {
    return z(a) === e;
  };
  exports.isLazy = function (a) {
    return z(a) === t;
  };
  exports.isMemo = function (a) {
    return z(a) === r;
  };
  exports.isPortal = function (a) {
    return z(a) === d;
  };
  exports.isProfiler = function (a) {
    return z(a) === g;
  };
  exports.isStrictMode = function (a) {
    return z(a) === f;
  };
  exports.isSuspense = function (a) {
    return z(a) === p;
  };
  exports.isValidElementType = function (a) {
    return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
  };
  exports.typeOf = z;
},577,[]);
__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _interopRequireDefault = require(_dependencyMap[0]);
  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));
  var _reactNative = require(_dependencyMap[2]);
  var _logging = _interopRequireDefault(require(_dependencyMap[3]));
  // This function is used to augment remote and local
  // package objects with additional functionality/properties
  // beyond what is included in the metadata sent by the server.
  module.exports = NativeCodePush => {
    var remote = reportStatusDownload => {
      return {
        download(downloadProgressCallback) {
          var _this = this;
          return (0, _asyncToGenerator2.default)(function* () {
            if (!_this.downloadUrl) {
              throw new Error("Cannot download an update without a download url");
            }
            var downloadProgressSubscription;
            if (downloadProgressCallback) {
              var codePushEventEmitter = new _reactNative.NativeEventEmitter(NativeCodePush);
              // Use event subscription to obtain download progress.
              downloadProgressSubscription = codePushEventEmitter.addListener("CodePushDownloadProgress", downloadProgressCallback);
            }

            // Use the downloaded package info. Native code will save the package info
            // so that the client knows what the current package version is.
            try {
              var updatePackageCopy = Object.assign({}, _this);
              Object.keys(updatePackageCopy).forEach(key => typeof updatePackageCopy[key] === 'function' && delete updatePackageCopy[key]);
              var downloadedPackage = yield NativeCodePush.downloadUpdate(updatePackageCopy, !!downloadProgressCallback);
              if (reportStatusDownload) {
                reportStatusDownload(_this).catch(err => {
                  (0, _logging.default)(`Report download status failed: ${err}`);
                });
              }
              return {
                ...downloadedPackage,
                ...local
              };
            } finally {
              downloadProgressSubscription && downloadProgressSubscription.remove();
            }
          })();
        },
        isPending: false // A remote package could never be in a pending state
      };
    };
    var local = {
      install() {
        var _arguments = arguments,
          _this2 = this;
        return (0, _asyncToGenerator2.default)(function* () {
          var installMode = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : NativeCodePush.codePushInstallModeOnNextRestart;
          var minimumBackgroundDuration = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : 0;
          var updateInstalledCallback = _arguments.length > 2 ? _arguments[2] : undefined;
          var localPackage = _this2;
          var localPackageCopy = Object.assign({}, localPackage); // In dev mode, React Native deep freezes any object queued over the bridge
          yield NativeCodePush.installUpdate(localPackageCopy, installMode, minimumBackgroundDuration);
          updateInstalledCallback && updateInstalledCallback();
          if (installMode == NativeCodePush.codePushInstallModeImmediate) {
            NativeCodePush.restartApp(false);
          } else {
            NativeCodePush.clearPendingRestart();
            localPackage.isPending = true; // Mark the package as pending since it hasn't been applied yet
          }
        })();
      },
      isPending: false // A local package wouldn't be pending until it was installed
    };
    return {
      local,
      remote
    };
  };
},578,[1,54,60,574]);
__r(176);
__r(4);
__r(0);